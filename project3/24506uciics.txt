lab assignment 2 
second lab assignment 
ics
h21
uc
irvine
david
kay
fall
2009
lab
assignment
2
assignment
due
end
lab
friday
october
9
choose
partner
assignment
someone
worked
already
make
sure
ta
knows
partner
exercise
3
3
4
just
several
function
version
pick
two
exercises
4
4
1
4
4
2
4
4
3
4
4
4
pick
one
exercises
5
1
2
5
1
3
5
1
5
collect
definitions
one
file
partners'
names
top
submit
via
checkmate
using
image
ss
teachpack
drscheme
can
write
functions
process
graphic
images
sample
code
traffic
light
example
htdp
section
6
2
figure
8
revised
use
image
ss
teachpack
matthias
felleisen
define
width
50
define
height
160
define
radius
20
define
offset
50
define
red
circle
radius
'solid
'red
define
yellow
circle
radius
'solid
'yellow
define
green
circle
radius
'solid
'green
define
light
frame
rectangle
width
height
'outline
'black
define
three
overlay
xy
overlay
xy
overlay
xy
light
frame
0
offset
green
0
0
yellow
0
offset
red
three
lights
three
copy
code
run
forget
add
image
ss
teachpack
via
language
menu
1
define
images
red
yellow
green
represents
traffic
light
just
one
color
light
conventional
position
make
sure
display
image
see
look
right
2
write
function
turn
red
takes
traffic
light
image
input
returns
traffic
light
image
input
except
red
light
position
white
circle
top
position
check
whether
red
light
light
start
test
turn
red
three
see
traffic
light
yellow
green
lights
just
evaluate
symbol
three
value
change
still
shows
three
colors
nothing
done
changes
value
associated
three
just
used
value
input
function
returned
another
image
another
value
based
input
experience
programming
languages
might
expected
three
change
previous
language
probably
uses
imperative
programming
style
generally
relies
changing
values
variables
scheme
programming
functional
programming
style
means
changing
values
variables
instead
just
sending
values
inputs
functions
return
values
may
wonder
even
possible
write
programs
without
assigning
new
values
variables
well
just
stay
tuned
moment
just
remember
functions
write
change
values
inputs
3
write
function
turn
light
takes
traffic
light
symbol
'red
'yellow
'green
returns
traffic
light
specified
color
position
turned
check
status
specified
light
input
image
hint
chapter
5
describes
design
functions
take
one
list
symbols
design
least
one
test
case
function
explicitly
creating
expected
result
displaying
alongside
result
function
produces
4
write
function
turn
light
takes
traffic
light
symbol
'red
'yellow
'green
returns
traffic
light
specified
color
position
turned
check
input
5
write
function
switch
takes
traffic
light
two
symbols
chosen
'red
'yellow
'green
function
returns
traffic
light
first
specified
light
turned
second
specified
light
turned
check
input
hint
defining
new
functions
always
best
employ
functions
already
defined
rather
re
creating
functionality
scratch
6
now
time
check
input
write
predicate
function
called
red
takes
traffic
light
input
returns
boolean
true
red
light
input
false
hint
use
function
image
inside
image
ss
teachpack
7
write
predicate
function
traffic
light
working
takes
traffic
light
input
returns
boolean
true
light
working
correctly
just
red
just
yellow
just
green
false
otherwise
8
write
function
next
takes
traffic
light
input
image
represent
working
traffic
light
just
return
image
unchanged
otherwise
return
image
representing
next
light
conventional
cycle
green
light
becomes
yellow
yellow
light
becomes
red
red
light
becomes
green
write
tests
check
transitions
submit
definitions
via
checkmate
exercises
6
3
3
6
5
2
follow
design
recipe
completely
submit
definitions
via
checkmate
exercise
7
2
1
part
clear
teachpacks
add
universe
ss
teachpack
exercises
section
7
4
involve
shape
structures
include
shape's
position
scene
7
4
1
7
4
2
places
shape's
image
empty
scene
according
shape's
position
7
4
3
returns
shape
like
input
new
position
create
world
use
universe
ss
holds
shape
write
world
draw
function
like
one
last
week
draws
world
write
world
next
function
produces
world
translated
image
function
7
4
3
creates
now
can
test
functions
universe
ss
using
code
similar
code
last
week's
lab
finally
notice
exercises
7
4
4
7
4
5
7
4
6
unnecessary
universe
ss
us
automatically
just
one
functions
exercise
7
5
2
remember
partner
must
complete
partner
evaluation
form
submit
individually
eee
uci
edu
end
day
friday
based
part
ics
h21
assignments
david
kay
fall
2001
modified
image
ss
world
ss
teachpacks
angelo
pioli
david
kay
fall
2005
modified
david
kay
fall
2007
fall
2009
david
kay
kay
uci
edu
friday
october
7
2005
6
25
pm
