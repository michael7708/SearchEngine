answers sample questions 
answers 
informatics
41
fall
2009
david
kay
uc
irvine
answers
sample
questions
questions
sort
appear
final
exam
sample
exam
length
mix
questions
cover
topics
questions
will
help
review
important
concepts
appeared
exams
past
try
compare
answers
classmates
long
enough
advance
chance
ask
us
issues
resolve
1
write
definition
function
vector
list
hints
remember
vectors
zero
based
careful
produce
reverse
order
list
use
auxiliary
function
vector
list
vector
list
return
list
containing
elements
vector
argument
order
vector
list
vector
1
2
3
returns
list
1
2
3
define
vector
list
vtl
help
vector
length
empty
define
vtl
help
list
far
cond
0
list
far
else
vtl
help
sub1
cons
vector
ref
sub1
list
far
scoring
deduct
point
deal
vector
zero
based
though
subtract
1
place
solution
deduct
point
count
upwards
thereby
produce
reverse
order
list
2
write
definition
function
list
vector
hint
can
without
auxiliary
function
without
vector
set
may
use
need
list
vector
list
vector
return
vector
containing
elements
list
argument
order
list
vector
list
1
2
3
returns
vector
1
2
3
define
list
vector
build
vector
length
lambda
list
ref
nice
way
way
define
list
vector
ltv
help
build
vector
length
lambda
1
0
define
ltv
help
cond
empty
else
begin
vector
set
first
ltv
help
rest
add1
consider
following
function
define
dosomething
assume
0
cond
0
else
dosomething
sub1
sub1
1
returned
following
statements
dosomething
3
1
2
dosomething
6
2
4
dosomething
29
5
24
dosomething
25000
23000
2000
2
one
english
word
mathematical
notation
describe
value
function
returns
terms
arguments
subtraction
3
now
look
function
define
dosomethingelse
assume
0
cond
0
else
sub1
dosomethingelse
sub1
dosomethingelse
produce
results
dosomething
explain
results
differ
yes
produce
results
4
routines
tail
recursive
dosomething
dosomethingelse
neither
non
tail
recursive
routine
indicate
circling
specific
operation
code
makes
non
tail
recursive
dosomethingelse
tail
recursive
last
subtraction
done
returning
recursive
call
set
collection
distinct
objects
without
duplicates
suppose
following
operations
defined
sets
empty
set
constant
representing
empty
set
empty
returns
true
set
empty
false
otherwise
element
returns
true
element
set
false
otherwise
insert
returns
set
already
returns
added
otherwise
intersection
s1
s2
returns
set
containing
elements
s1
s2
subtract
s1
s2
returns
set
containing
elements
s1
s2
union
s1
s2
returns
set
containing
every
element
either
s1
s2
without
duplicates
course
1
using
routines
appropriate
using
list
processing
functions
define
scheme
function
called
ski
trip
takes
following
four
sets
arguments
friends
set
friends
early
risers
set
people
know
perhaps
including
people
friends
will
wake
early
enough
get
slopes
lifts
open
rowdy
people
set
people
likely
get
excited
wreck
cabin
fun
folks
set
people
really
know
party
returns
set
people
like
invite
ski
trip
winter
break
friends
early
risers
fun
folks
rowdy
people
define
ski
trip
friends
early
risers
rowdy
people
fun
folks
subtract
intersection
intersection
friends
early
risers
fun
folks
rowdy
people
2
assuming
implement
sets
normal
scheme
lists
write
definition
function
union
define
union
lambda
s1
s2
cond
empty
s1
s2
element
s2
first
s1
union
rest
s1
s2
else
cons
first
s1
union
rest
s1
s2
3
using
operations
map
filter
foldr
without
using
explicit
recursion
write
definition
function
intersection
hint
can
quite
short
define
intersection
lambda
s1
s2
filter
lambda
element
s1
s2
4
write
definition
subtract
rewrite
definition
union
using
operations
map
filter
foldr
explicit
recursion
define
subtract
lambda
s1
s2
filter
lambda
element
s2
s1
define
union
lambda
s1
s2
foldr
insert
s1
subtract
s2
s1
restaurants
program
copy
provided
define
following
function
used
top
level
program
without
knowing
whether
collection
implemented
list
bst
vector
whatever
means
call
collection
change
increase
price
cuisine
collection
number
symbol
collection
symbol
name
cuisine
number
number
dollars
add
price
restaurant
serving
cuisine
return
collection
price
changes
define
increase
price
cuisine
lambda
rc
amount
collection
change
rc
lambda
eq
rrant
cuisine
lambda
make
rrant
rrant
name
rrant
cuisine
rrant
phone
rrant
dish
amount
rrant
price
one
tough
towards
end
probably
tougher
test
anteater
airlines
stores
scheduled
flights
structure
five
fields
origin
three
letter
airport
code
'lax
departure
departure
time
destination
three
letter
airport
code
arrival
arrival
time
passengers
list
passengers
represented
string
jane
jones
1
define
structure
flight
field
names
given
define
struct
flight
origin
departure
destination
arrival
passengers
parentheses
correct
general
parentheses
correct
except
counting
parentheses
end
definition
2
complete
following
definition
predicate
function
valid
flight
takes
expression
checks
whether
appears
valid
flight
define
valid
flight
lambda
like
can
take
2
arguments
flight
structure
flight
airport
code
valid
flight
origin
time
valid
departure
time
valid
flight
departure
airport
code
valid
flight
destination
time
valid
arrival
time
valid
flight
arrival
list
strings
flight
passengers
3
assume
already
defined
variable
airport
code
list
list
valid
three
letter
airport
abbreviations
lax
sfo
sna
write
definition
predicate
function
airport
code
valid
takes
symbol
atom
returns
true
symbol
contained
airport
code
list
hint
can
without
recursion
use
function
defined
class
book
define
airport
code
valid
lambda
member
airport
code
list
okay
order
arguments
member
switched
deduct
make
note
use
cond
explicitly
return
also
okay
write
recursively
use
member
4
predefined
predicate
string
takes
single
argument
returns
true
argument
string
write
definition
predicate
list
strings
takes
list
returns
true
every
element
list
string
list
empty
define
list
strings
lambda
cond
null
string
first
list
strings
rest
else
can
also
done
just
two
cond
clauses
second
using
5
define
predicate
flight
goes
takes
two
arguments
flight
structure
symbol
representing
airport
code
returns
true
flight's
destination
matches
symbol
define
flight
goes
lambda
equal
flight
destination
okay
use
eq
symbol
instead
equal
6
anteater
airlines
stores
scheduled
flights
list
flight
structures
flight
structure
defined
previous
problem
write
definition
function
first
flight
takes
flight
list
symbol
representing
airport
code
returns
first
flight
list
whose
destination
matches
symbol
null
list
match
use
flight
goes
described
whether
definition
correct
define
first
flight
lambda
cond
null
'
flight
goes
first
first
else
first
flight
rest
7
write
definition
function
keep
flights
takes
flight
list
symbol
representing
airport
code
returns
list
flights
containing
flights
original
list
whose
destination
matches
symbol
define
keep
flights
lambda
cond
null
'
flight
goes
first
cons
first
keep
flights
rest
else
keep
flights
rest
8
enhance
security
anonymous
air
marshal
will
assigned
every
anteater
airlines
flight
write
definition
add
marshals
takes
flight
list
code
name
adds
code
name
beginning
passenger
list
flight
hint
first
write
function
take
single
flight
add
name
call
function
definition
add
marshals
define
add
marshals
lambda
name
cond
null
'
else
cons
enhance
first
name
add
marshals
rest
name
define
enhance
lambda
codename
make
flight
flight
origin
flight
departure
flight
destination
flight
arrival
cons
codename
flight
passengers
9
write
definition
complete
passengers
list
takes
flight
list
returns
list
strings
containing
passengers
flights
list
duplications
may
assume
passengers
single
flight
unique
define
complete
passengers
list
lambda
cond
null
'
else
add
unique
flight
passengers
first
complete
passengers
list
rest
define
add
unique
lambda
one
flights
list
master
passengers
list
cond
null
one
flights
list
master
passengers
list
member
first
one
flights
list
master
passengers
list
add
unique
rest
one
flights
list
master
passengers
list
else
cons
first
one
flights
list
add
unique
rest
one
flights
list
master
passengers
list
10
5
points
write
function
average
passengers
takes
flight
list
returns
average
number
passengers
flights
flight
list
define
average
passengers
lambda
total
passengers
length
define
total
passengers
lambda
cond
null
0
else
length
flight
passengers
first
total
passengers
rest
11
rewrite
average
passengers
make
tail
recursive
answer
part
already
tail
recursive
just
write
already
correctly
get
full
credit
define
average
passengers
lambda
total
passengers
0
length
define
total
passengers
lambda
acc
cond
null
acc
else
total
passengers
rest
acc
length
flight
passengers
first
12
anteater
airlines
plans
merge
aardvark
airlines
form
new
airline
aaair
luckily
incredibly
airlines
store
flights
list
flight
structures
described
write
function
merge
flight
lists
takes
two
flight
lists
returns
flight
list
containing
flights
arguments
except
flight
first
list
matches
flight
second
list
origin
departure
time
destination
arrival
time
merged
list
contains
just
one
flight
two
matching
flights'
passenger
lists
combined
may
assume
already
defined
flights
match
takes
two
flight
structures
returns
true
match
described
merge
lists
takes
two
lists
returns
list
contains
elements
arguments
may
also
assume
names
single
passenger
list
unique
within
original
flight
lists
flights
match
hint
careful
consistent
types
data
come
go
function
define
merge
flight
lists
lambda
cond
null
else
merge
flight
lists
rest
merge
flight
first
define
merge
flight
lambda
cond
null
list
flights
match
first
cons
merge
flights
first
rest
else
cons
first
merge
flight
rest
define
merge
flights
lambda
make
flight
flight
origin
flight
departure
flight
destination
flight
arrival
merge
lists
flight
passengers
flight
passengers
evaluate
following
expressions
scheme
interpreter
drscheme
case
display
expressions
executed
1
15
4
40
4
110
1
point
2
55
5
12
false
1
point
3
100
cond
5
10
2
37
else
6
137
2
points
1
true
false
features
capabilities
scheme
make
best
choice
great
majority
programming
tasks
false
2
true
false
programmer
knowledge
java
can
sure
knowledge
will
enough
sustain
productive
innovative
40
year
career
false
students
course
applied
epistemology
101
graded
two
items
midterm
final
exam
100
points
possible
midterm's
weight
40
course
grade
final
worth
60
write
function
ae101
score
takes
two
arguments
student's
midterm
score
final
exam
score
returns
student's
overall
weighted
score
class
range
0
100
write
two
constant
definitions
weights
contract
brief
purpose
statement
scheme
function
definition
two
tests
form
boolean
expressions
return
true
function
works
correctly
define
mt
weight
0
40
also
40
arithmetic
later
right
define
final
weight
0
60
60
1
point
defining
correctly
ae101
score
number
number
number
1
point
part
credit
midterm
number
compute
weighted
score
given
midterm
final
scores
0
100
1
2
missing
blatantly
untrue
define
ae101
score
lambda
midterm
final
midterm
mt
weight
final
final
weight
tests
0
ae101
score
0
0
100
ae101
score
100
100
1
point
correct
tests
returning
boolean
scoring
code
1
point
correct
form
define
define
ae101
score
lambda
anything
def
anything
1
point
correct
parameter
list
two
names
parentheses
ae101
score
using
indiana
style
1
point
attempt
add
something
involving
arguments
1
point
completely
correct
arithmetic
1
point
everything
else
correct
parentheses
must
right
except
counting
trailing
ones
complete
definition
function
number
number
number
boolean
return
true
first
argument's
value
second
third
inclusive
examples
7
0
10
true
3
3
4
true
1
2
3
false
define
1
point
right
form
compare
value
low
compare
value
high
lambda
value
low
high
1
pt
correctness
going
right
way
switching
low
high
value
low
value
high
parens
around
comparisons
must
right
1
2
trailing
parens
matter
complete
definition
item
list
item
list
expression
list
boolean
return
true
expression
occurs
list
define
item
list
lambda
item
cond
empty
false
equal
item
first
true
else
item
list
item
rest
scoring
2
points
empty
case
1
test
1
returning
false
2
points
matching
case
1
test
1
returning
true
2
points
recursive
case
1
attempt
recursive
call
1
getting
correct
okay
use
comparison
besides
equal
note
okay
split
nested
conds
book
minus
3
cross
cond
just
call
member
correctly
anybody
uses
member
without
deleting
cond
cond
true
member
item
else
'whatever
want
hear
get
credit
may
deduct
points
nontrivial
syntax
problems
beware
double
jeopardy
answers
may
right
follow
pattern
rubric
score
appropriate
consult
necessary
date
structure
make
date
month
day
year
month
symbol
'jan
'feb
day
number
1
31
year
number
1000
3000
1
define
structure
date
field
names
given
define
struct
date
month
day
year
parentheses
correct
general
parentheses
correct
except
counting
parentheses
end
definition
get
field
names
wrong
deduct
1
2
point
2
define
date
object
called
today
appropriate
values
define
today
make
date
'oct
19
2004
day
1
2
think
care
3
complete
following
definition
predicate
function
valid
date
takes
expression
checks
whether
appears
valid
date
use
functions
defined
previous
problems
necessary
valid
date
anything
boolean
define
monthlist
list
'jan
'feb
'mar
'apr
'may
'jun
'jul
'aug
'sep
'oct
'nov
'dec
define
valid
date
lambda
line
1
1
point
date
line
2
1
point
date
month
1
point
monthlist
line
3
4
1
point
line
4
1
point
1000
3000
date
structure
item
list
month
valid
date
day
1
31
day
valid
date
year
year
valid
4
define
predicate
function
valid
dates
valid
dates
list
boolean
return
true
items
list
valid
dates
list
empty
return
true
define
valid
dates
lambda
cond
empty
true
valid
date
first
valid
dates
rest
else
false
1
point
correct
define
lambda
cond
5
points
rest
logically
equivalent
version
one
okay
might
give
point
empty
non
matching
cases
three
points
recursive
case
suppose
wish
write
spelling
checker
takes
string
text
input
returns
list
misspelled
words
string
input
may
contain
white
space
punctuation
will
need
extract
words
string
word
string
characters
separated
next
word
white
space
punctuation
precise
characters
count
white
space
punctuation
worry
define
function
spell
check
takes
string
returns
list
words
string
misspelled
precisely
words
occur
dictionary
correctly
spelled
words
use
following
definition
first
word
function
takes
string
returns
first
word
string
rest
words
function
takes
string
returns
copy
string
first
word
removed
string
empty
function
takes
string
returns
true
empty
contains
white
space
punctuation
dictionary
long
list
correctly
spelled
words
word
string
spell
check
string
list
strings
return
list
words
input
string
dictionary
define
spell
check
1
point
correct
define
lambda
argument
list
lambda
1
point
dividing
problem
3
cases
relate
somehow
arg
cond
1
point
correctly
identifying
empty
base
case
continued
string
empty
empty
item
list
first
word
dictionary
spell
check
rest
words
else
cons
first
word
spell
check
rest
words
1
point
correctly
returning
empty
empty
base
case
1
point
attempt
use
first
word
rest
words
traverse
list
1
point
correct
use
first
word
rest
words
least
one
case
traverse
list
1
point
traversal
list
using
first
word
rest
words
completely
correct
cases
1
point
attempt
find
first
word
dictionary
1
point
correct
location
first
word
dictionary
item
list
member
1
2
rewriting
1
point
correct
case
first
word
dictionary
word
added
return
list
1
point
correct
case
first
word
dictionary
consing
first
word
onto
return
list
1
point
everything
else
correct
problem
may
use
predefined
functions
member
list
ref
may
use
functions
defined
earlier
exam
may
lose
points
re
implement
something
already
described
1
define
function
position
list
position
list
list
number
return
place
list
first
input
occurs
zero
list
empty
examples
position
list
'a
'
1
position
list
1
empty
0
position
list
3
'
2
3
4
2
define
position
list
lambda
item
cond
empty
0
equal
item
first
1
else
1
position
list
item
rest
scoring
1
empty
case
2
matching
case
3
increment
recursive
case
2
define
function
item
position
item
position
number
list
input
list
return
item
specified
input
number
empty
range
examples
item
position
3
'
item
position
7
'
empty
item
position
0
'
3
4
empty
define
item
position
lambda
cond
empty
empty
0
empty
1
first
else
item
position
1
rest
scoring
1
handling
empty
input
list
1
handling
index
0
checking
negative
okay
3
recognizing
item
right
position
returning
3
correct
recursive
case
partial
credit
warranted
3
define
next
list
may
wish
use
predefined
function
length
returns
number
items
list
hint
use
prior
definitions
recursion
next
list
list
return
item
input
list
follows
first
input
empty
none
examples
next
list
'b
'
next
list
'c
empty
next
list
'x
'
empty
next
list
'a
empty
empty
define
next
list
lambda
item
cond
0
position
list
item
empty
length
position
list
item
empty
else
item
position
1
position
list
item
scoring
2
points
correctly
recognizing
input
list
returning
empty
2
points
correctly
recognizing
last
item
list
returning
empty
3
points
returning
correct
next
item
otherwise
4
define
next
circular
list
next
circular
list
expression
list
expression
like
next
list
item
last
list
first
item
example
next
circular
list
'c
'
define
next
circular
list
lambda
item
cond
0
position
list
item
empty
length
position
list
item
first
else
item
position
1
position
list
item
scoring
3
points
correctly
handling
circular
case
2
points
everything
else
right
deduct
mistakes
previous
part
deduct
messed
something
new
5
define
function
next
month
uses
constant
monthlist
see
problem
take
symbol
'jan
'feb
representing
month
return
symbol
following
month
next
month
symbol
symbol
take
month
name
'jan
'feb
return
name
following
month
define
next
month
lambda
month
next
circular
list
month
monthlist
6
define
function
advance
month
takes
date
see
problem
returns
date
moved
one
month
future
advance
month
date
date
advance
input
date
one
month
day
define
advance
one
month
lambda
make
date
next
month
date
month
date
day
cond
eq
date
month
'dec
1
date
year
else
date
year
scoring
2
points
returning
date
call
make
date
three
arguments
2
points
correct
call
next
month
3
points
handling
december
correctly
1
point
everything
else
correct
7
suppose
list
dates
representing
events
calendar
decide
take
month's
skiing
vacation
february
need
postpone
events
scheduled
february
perhaps
moving
one
month
later
generalize
function
clear
month
clear
month
symbol
list
dates
list
dates
return
input
list
advancing
one
month
every
date
whose
month
matches
input
symbol
define
clear
month
lambda
cond
empty
empty
eq
date
month
first
cons
advance
one
month
first
clear
month
rest
else
cons
first
clear
month
rest
scoring
1
point
empty
case
4
points
matching
month
case
1
point
non
matching
case
8
define
function
days
start
month
symbol
number
return
number
days
january
1
start
named
month
non
leap
years
examples
days
start
month
'jan
0
days
start
month
'feb
31
define
daysinmonth
'
31
28
31
30
31
30
31
31
30
31
30
31
will
useful
key
currently
available
9
define
function
days
jan1
date
number
return
number
days
january
1
year
specified
date
inclusive
examples
days
jan1
make
date
'jan
3
2005
3
days
jan1
make
date
'feb
1
2005
32
key
currently
available
two
sets
data
shown
draw
binary
search
tree
results
inserting
items
order
shown
distinguish
left
branches
clearly
right
branches
1a
13
19
22
7
17
10
2
1b
scheme
python
java
fortran
basic
balanced
2
points
linear
left
2
points
2
trees
traverse
tree
order
printing
node
result
2a
result
1a
2
7
10
13
17
19
22
2b
result
1b
basic
fortran
java
python
scheme
evaluate
following
scheme
expressions
1
local
define
make
checker
lambda
threshold
lambda
threshold
define
a1
filter
make
checker
6
'
3
1
4
1
5
9
2
6
define
a2
filter
make
checker
4
'
3
1
4
1
5
9
2
6
list
a1
a2
3
1
4
1
5
2
3
1
1
2
correct
numbers
order
list
structure
wrong
1
branching
wrong
way
equality
another
1
2
local
define
make
checker
lambda
comparison
op
threshold
lambda
comparison
op
threshold
define
b1
filter
make
checker
1
'
3
1
4
1
5
9
2
6
define
b2
filter
make
checker
3
'
3
1
4
1
5
9
2
6
list
b1
b2
1
1
3
4
5
9
6
deduct
problems
mentioned
problem
involves
restaurant
collection
program
part
indicate
answer
making
additions
changes
deletions
table
data
shown
part
1
suppose
collection
contains
information
shown
thai
dishes
thai
434
3434
mee
krob
10
95
remove
jacopo's
pizzeria
pizza
343
3434
goat
cheese
pizza
12
00
mitsuki
japanese
232
5353
edamame
4
50
tommy
tang's
thai
454
4545
paht
woon
sen
8
75
remove
thai
touch
thai
242
2424
larb
guy
9
95
remove
kitayama
japanese
335
3535
okonomiyaki
8
50
result
returned
following
code
show
results
making
changes
table
change
values
cross
lines
add
new
lines
appropriate
define
thai
lambda
equal
rrant
cuisine
'thai
collection
remove
thai
2
suppose
collection
contains
information
shown
thai
dishes
thai
434
3434
mee
krob
10
95
jacopo's
pizzeria
pizza
343
3434
goat
cheese
pizza
12
00
mitsuki
japanese
232
5353
edamame
4
50
remove
tommy
tang's
thai
454
4545
paht
woon
sen
8
75
thai
touch
thai
242
2424
larb
guy
9
95
kitayama
japanese
335
3535
okonomiyaki
8
50
remove
result
following
expression
collection
remove
lambda
equal
rrant
cuisine
'japanese
3
suppose
collection
contains
information
shown
thai
dishes
thai
434
3434
mee
krob
10
95
remove
jacopo's
pizzeria
pizza
343
3434
goat
cheese
pizza
12
00
mitsuki
japanese
232
5353
edamame
4
50
remove
tommy
tang's
thai
454
4545
paht
woon
sen
8
75
remove
thai
touch
thai
242
2424
larb
guy
9
95
remove
kitayama
japanese
335
3535
okonomiyaki
8
50
remove
result
following
expression
collection
remove
lambda
thai
equal
rrant
cuisine
'japanese
4
suppose
collection
contains
information
shown
thai
dishes
thai
434
3434
mee
krob
10
95
11
95
jacopo's
pizzeria
pizza
343
3434
goat
cheese
pizza
12
00
mitsuki
japanese
232
5353
edamame
4
50
tommy
tang's
thai
454
4545
paht
woon
sen
8
75
9
75
thai
touch
thai
242
2424
larb
guy
9
95
10
95
kitayama
japanese
335
3535
okonomiyaki
8
50
result
following
expression
define
raise
price
lambda
make
rrant
rrant
name
rrant
cuisine
rrant
phone
rrant
dish
1
00
rrant
price
collection
change
thai
raise
price
5
suppose
collection
contains
information
shown
thai
dishes
thai
434
3434
mee
krob
10
95
remove
11
95
jacopo's
pizzeria
pizza
343
3434
goat
cheese
pizza
12
00
remove
mitsuki
japanese
232
5353
edamame
4
50
tommy
tang's
thai
454
4545
paht
woon
sen
8
75
9
75
thai
touch
thai
242
2424
larb
guy
9
95
remove
10
95
kitayama
japanese
335
3535
okonomiyaki
8
50
result
following
expression
collection
remove
collection
change
thai
raise
price
raise
price
defined
lambda
rrant
price
10
00
6
suppose
collection
contains
information
shown
thai
dishes
thai
434
3434
mee
krob
10
95
8
95
jacopo's
pizzeria
pizza
343
3434
goat
cheese
pizza
12
00
10
00
mitsuki
japanese
232
5353
edamame
4
50
remove
tommy
tang's
thai
454
4545
paht
woon
sen
8
75
remove
thai
touch
thai
242
2424
larb
guy
9
95
7
95
kitayama
japanese
335
3535
okonomiyaki
9
50
result
following
expression
collection
change
collection
remove
lambda
rrant
price
9
00
lambda
equal
rrant
cuisine
'pizza
equal
rrant
cuisine
'thai
lambda
make
rrant
rrant
name
rrant
cuisine
rrant
phone
rrant
dish
rrant
price
2
00
definitions
five
functions
1
write
next
five
routines
recursive
2
write
next
five
routines
tail
recursive
routines
may
may
neither
consider
function
independently
others
pay
attention
functions
given
function
calls
define
print
stars
lambda
cond
zero
newline
else
begin
two
things
order
shown
print
stars
1
print
1
stars
display
print
star
define
print
stars
rt
lambda
cond
zero
newline
else
begin
two
things
order
shown
display
print
star
print
stars
1
print
1
stars
define
keep
matches
lambda
cond
null
empty
equal
first
cons
first
keep
matches
rest
else
keep
matches
rest
define
keep
matches
neither
lambda
keep
matches
help
'
define
keep
matches
help
rt
lambda
list
far
cond
null
list
far
equal
first
keep
matches
help
rest
cons
first
list
far
else
keep
matches
help
rest
list
far
suppose
list
called
rl
restaurants
menus
according
usual
definitions
define
struct
rrant
name
cuisine
phone
menu
menu
list
dishes
define
struct
dish
name
price
define
following
function
name
phone
serving
dish
listof
rrant
string
listof
name
phone
list
returns
list
names
phone
numbers
restaurants
serve
dish
named
second
input
name
phone
number
pair
list
example
cobras
matadors
343
3434
la
cote
basque
344
3334
define
name
phone
serving
dish
lambda
rl
dishname
map
make
name
phone
filter
lambda
rrant
serves
dish
dishname
rl
probably
best
way
handle
define
functions
like
individually
first
menu
includes
menu
string
boolean
appears
return
true
string
name
dish
menu
define
menu
includes
length
filter
lambda
string
dish
name
0
rrant
serves
dish
rrant
string
boolean
return
true
string
name
menu
item
rrant
define
rrant
serves
dish
menu
includes
rrant
menu
make
name
phone
rrant
list
returns
list
containing
rrant's
name
phone
define
make
name
phone
list
rrant
name
rrant
phone
determining
whether
given
restaurant
serves
specified
dish
3
points
2
points
examining
menu
1
point
extracting
menu
restaurant
solution
2
points
captured
menu
includes
rewrote
thing
wrote
2
rather
just
calling
lose
point
task
different
way
okay
1
point
captured
rrant
serves
dish
okay
achieve
way
selecting
restaurants
list
pass
test
ideally
test
whether
restaurant
serves
dish
question
point
credit
select
restaurants
list
using
criterion
1
point
specifying
correct
restaurant
choice
criterion
correctly
applying
equivalent
rrant
serves
dish
list
1
point
returning
list
name
phone
pairs
two
element
lists
technically
pairs
2
points
solution
captured
make
name
phone
get
result
way
everything
else
correct
including
using
explicit
recursion
2
points
says
coded
right
using
recursion
can
get
7
9
definitions
map
filter
define
map
define
filter
cond
cond
empty
empty
empty
empty
else
cons
first
first
map
rest
cons
first
filter
rest
else
filter
rest
1
write
definition
function
process
abstracts
map
filter
hint
may
find
useful
think
two
functions
define
always
true
true
define
change
define
process
cond
empty
empty
first
cons
first
process
rest
else
process
rest
2
write
new
one
line
definitions
map
filter
call
process
define
map2
process
always
true
define
filter2
process
change
nested
list
items
nl
either
1
empty
2
cons
item
nl
3
cons
nl
nl
write
definition
function
deep
unique
described
deep
unique
nl
list
items
return
list
items
occur
input
matter
deeply
nested
duplications
order
result
matter
example
deep
unique
'
3
17
3
huey
huey
17
returns
3
17
huey
may
assume
predicate
list
already
defined
return
true
argument
list
false
otherwise
define
deep
unique
deep
unique
aux
empty
define
deep
unique
aux
unique
list
cond
empty
unique
list
list
first
deep
unique
aux
rest
deep
unique
aux
first
unique
list
member
first
unique
list
deep
unique
aux
rest
unique
list
else
deep
unique
aux
rest
cons
first
unique
list
produces
reverse
order
fwd
rev
ok
written
david
kay
1995
2004
corrections
solutions
felix
morariu
fall
2005
david
kay
kay
uci
edu
wednesday
november
23
2005
8
40
