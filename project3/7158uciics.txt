schnyder's grid embedding algorithm 
schnyder's straight line embedding algorithm 
ics
163
265
graph
algorithms
walter
schnyder's
grid
embedding
algorithm
1st
acm
siam
symp
discrete
algorithms
1990
walter
schnyder
presented
nice
algorithm
placing
vertices
planar
graph
grid
straight
line
segments
vertices
form
planar
drawing
graph
input
schnyder's
algorithm
assumed
planar
graph
without
self
loops
multiple
adjacencies
topology
planar
layout
already
specified
terms
clockwise
ordering
edges
vertex
results
hopcroft
tarjan
linear
time
planar
embedding
algorithms
addition
face
layout
including
outer
face
assumed
triangle
necessary
one
can
add
edges
graph
subdivide
faces
triangles
using
following
fact
will
also
need
later
lemma
1
let
outerplanar
graph
planar
graph
face
contains
vertices
vertex
whose
neighbors
two
adjacent
vertices
proof
saw
discussing
properties
planar
graphs
weak
dual
graph
formed
planar
dual
removing
dual
tree
tree
leaf
corresponding
face
shares
one
edges
since
least
three
vertices
path
edges
contains
vertex
neighbors
adjacent
vertices
path
vertex
satisfies
conditions
lemma
face
triangle
can
use
lemma
graph
edges
connecting
vertices
face
find
vertex
can
connected
vertices
face
subdividing
face
triangles
without
adding
multiple
adjacencies
shown
care
faces
can
triangulated
way
linear
time
one
faces
graph
will
designated
external
rest
internal
edge
vertex
internal
belong
external
face
schnyder's
method
depends
two
closely
related
concepts
triangulated
planar
graph
normal
labelling
realization
normal
labelling
assignment
numbers
1
2
3
corners
interior
triangle
triangle
three
labels
clockwise
order
labels
around
internal
vertex
form
contiguous
blocks
1's
2's
3's
clockwise
order
realization
assignment
direction
internal
edge
number
1
2
3
internal
edge
internal
vertex
exactly
one
outgoing
edge
three
numbers
edges
appear
clockwise
order
two
outgoing
edges
labeled
incoming
edges
label
6
see
normal
labelling
realization
graph
internal
edge
normal
labelling
must
three
labels
adjacent
triangle
corners
two
different
label
one
end
label
twice
end
can
form
realizer
orienting
edge
toward
end
doubled
label
giving
label
conversely
realizer
can
form
normal
labelling
assigning
label
6
corners
outgoing
edges
labeled
check
illustration
will
see
normal
labelling
realizer
related
way
two
concepts
equivalent
easily
converted
lemma
2
realizer
edges
external
vertex
oriented
towards
vertex
label
proof
euler's
formula
number
internal
vertices
3
number
internal
edges
3n
9
internal
vertex
three
outgoing
edges
number
edges
outgoing
internal
vertices
also
3n
9
edges
left
outgoing
external
vertices
since
edges
realizer
oriented
towards
external
vertex
corners
vertex
corresponding
normal
labelling
must
label
edges
realizer
must
label
well
realizer
path
edges
around
one
outer
corners
drawing
starts
ends
edge
pointing
outward
must
vertex
middle
path
edges
point
away
vertex
contracting
vertex
outer
corner
produces
realizer
graph
one
fewer
vertex
lemma
3
realizer
edges
label
form
spanning
tree
internal
vertices
rooted
external
vertex
label
proof
induction
size
graph
using
contraction
step
described
reduce
smaller
graph
conversely
planar
triangulation
vertex
along
path
can
contracted
outer
corner
without
creating
multiple
adjacencies
lemma
1
applied
vertices
path
one
can
construct
realizer
original
graph
uncontracting
realizer
contracted
graph
allows
us
develop
linear
time
algorithm
normal
labelling
planar
triangulation
expressed
pseudo
python
syntax
def
normallabel
set
data
structures
stack
neighborcounts
contractible
path
edges
around
external
vertex
1
neighborcount
number
edges
vertices
path
neighborcount
2
contractible
push
repeatedly
contract
graph
internal
vertices
left
contractible
pop
stack
push
contract
external
vertex
vertices
added
contraction
adjust
neighborcounts
neighbors
move
vertices
contractible
count
becomes
2
2
build
graph
back
reversing
contractions
len
stack
0
uncontract
stack
pop
label
two
new
uncontracted
triangles
finally
ready
define
grid
embedding
graph
since
realizer
graph
spanning
tree
label
path
label
edges
vertex
external
vertex
three
paths
divide
graph
three
regions
use
numbers
triangle
region
three
dimensional
coordinates
set
coordinates
2n
5
coordinates
lie
plane
triangle
graph
oriented
correctly
since
corner
labeled
highest
i'th
coordinate
three
vertices
triangle
since
triangles
oriented
correctly
layout
fold
must
non
crossing
layout
example
using
shown
although
coordinates
3
dimensional
can
view
barycentric
coordinates
two
dimensional
triangular
grid
position
lines
bottom
edge
triangle
lines
right
left
edge
lines
left
right
edge
alternatively
can
form
layout
square
grid
dropping
third
coordinate
schnyder
goes
find
slightly
compacter
layout
counting
vertices
region
including
path
bordering
region
clockwise
side
counterclockwise
side
result
embedding
positive
integer
coordinates
plane
2
two
dimensions
2
2
grid
linear
time
