source code grid code 
grid 
grid
source
code
last
updated
2
13
2013
introduction
grid
code
fast
efficient
implementation
classic
problem
handling
continuous
range
queries
top
large
number
moving
objects
even
though
code
implemented
time
ago
unaware
solution
faster
setup
problem
assumption
one
multiple
servers
track
locations
moving
objects
number
objects
can
high
millions
users
issue
top
spatial
domain
large
number
continuous
monitoring
queries
unlike
one
time
queries
continuous
queries
executed
certain
period
time
updating
results
situation
changes
objects
move
location
based
serves
continuous
range
query
crq
one
important
query
types
main
challenge
develop
efficient
scalable
crq
solution
traditional
approach
processing
crqs
build
index
objects
data
utilize
query
processing
moving
object
environment
approach
suffers
need
frequent
index
updates
thereby
often
results
poor
performance
solve
efficiency
scalability
challenges
problem
proposed
novel
algorithmic
technique
called
query
indexing
qi
query
indexing
relies
reversing
role
queries
data
namely
spatial
index
qindex
built
continuous
queries
index
built
objects
data
query
results
computed
issuing
point
queries
object
locations
qindex
finding
matches
objects
queries
realized
crq
problem
can
solved
memory
moving
objects
since
keeping
necessary
info
main
memory
rest
disk
data
fits
memory
average
workstation
showed
different
types
indexes
perform
better
memory
specifically
developed
grid
indexing
techniques
processing
queries
moving
object
databases
resulting
orders
magnitude
improvement
competing
strategies
nowadays
course
many
research
efforts
use
memory
grid
based
solutins
norm
interesting
aspect
solution
unlike
many
techniques
impose
many
common
constraints
restriction
object
speeds
trajectories
making
much
wider
applicability
cite
using
code
please
cite
main
memory
evaluation
monitoring
queries
moving
objects
dmitri
kalashnikov
prabhakar
hambrusch
distributed
parallel
databases
international
journal
dapd
15
2
117
135
march
2004
download
paper
efficient
evaluation
continuous
range
queries
moving
objects
dmitri
kalashnikov
sunil
prabhakar
susanne
hambrusch
walid
aref
proc
int'l
conf
database
expert
systems
applications
dexa
sep
2
6
2002
download
paper
publications
describe
grid
based
approach
detail
bibtex
entries
publications
article
dapd04
dvk
author
dmitri
kalashnikov
sunil
prabhakar
susanne
hambrusch
title
main
memory
evaluation
monitoring
queries
moving
objects
journal
distributed
parallel
databases
international
journal
volume
15
number
2
pages
117
135
month
mar
year
2004
inproceedings
dexa02
dvk
author
dmitri
kalashnikov
sunil
prabhakar
susanne
hambrusch
walid
aref
title
efficient
evaluation
continuous
range
queries
moving
objects
booktitle
proc
int'l
conf
database
expert
systems
applications
dexa
2002
year
2002
month
september
2
6
address
aix
en
provence
france
downloading
code
code
can
de
downloaded
grid
code
zip
license
solution
implemented
code
designed
unix
general
code
tested
solaris
linux
mac
os
gcc
used
compile
code
last
tested
gcc
4
7
recommend
using
latest
version
gcc
often
generates
faster
code
code
single
threaded
sped
implementing
parallel
multi
threaded
version
code
will
report
cycle
time
iteration
cycle
time
time
needed
move
objects
process
queries
idea
minimize
cycle
time
compiling
code
unzip
grid
code
zip
file
code
inside
code
folder
main
file
test
cpp
code
folder
subfolders
will
contains
mak
batch
files
edit
mak
files
change
path
gcc's
compiler
located
system
compile
run
mak
inside
code
folder
compilation
will
produce
executable
file
called
index
running
code
index
nxcell
nycell
query
perc
query
sz
skewed
num
point
num
query
navq
sz
nav
stepx
options
nxcellthe
number
cells
per
dimension
nxcell
nycell
grid
good
values
try
100
200
500
1000
nycellthe
number
cells
per
dimension
nxcell
nycell
grid
good
value
nycell
nxcell
query
percnot
used
unless
moving
query
part
uncommented
code
needed
specify
percentage
queries
will
move
iteration
set
0
zero
query
szspecifies
query
size
set
0
01
queries
will
size
0
01
0
01
skewparameter
skew
can
set
0
1
2
mean
see
papers
exact
meaning
0
uniform
code
will
generate
points
queries
distributed
uniformly
0
1
1
normal
code
will
generate
points
queries
distributed
normally
0
1
2
hyper
skew
code
will
generate
points
queries
hyper
skewed
0
1
num
pointthe
number
points
generate
thousands
25
means
25
000
num
querythe
number
queries
generate
thousands
15
means
15
000
navq
sznot
used
unless
moving
query
part
uncommented
code
needed
specify
size
navigational
moving
query
set
0
01
nav
stepxnot
used
unless
moving
query
part
uncommented
code
needed
specify
step
navigational
moving
query
makes
set
0
001
examples
1
running
code
1
million
moving
objects
100
000
continuos
range
queries
size
0
01x0
01
using
1000x1000
grid
index
1000
1000
0
0
01
0
1000
100
0
001
0
0001
2
running
code
500
000
moving
objects
25
000
continuos
range
queries
size
0
01x0
01
using
100x100
grid
index
100
100
0
0
01
0
500
25
0
001
0
0001
back
kalashnikov's
homepage
copyright
2013
dmitri
kalashnikov
rights
reserved
