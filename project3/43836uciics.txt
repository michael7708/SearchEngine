statements 

statements
introduction
computer
science
iii
ics
21
22
23
introduction
statements
like
complete
imperative
sentences
java
commands
java
perform
action
just
said
java
evaluates
expressions
say
java
executes
statements
already
studied
java
declaration
statement
declares
variables
optionally
initializes
will
classify
many
statements
control
structures
statements
control
conditionally
repetition
execution
statements
lecture
will
first
learn
write
simplest
kind
statement
java
expression
statement
simplest
control
structure
java
block
statement
will
also
begin
discussing
two
analysis
tools
hand
simulation
via
trace
tables
statement
boxing
statement
equivalent
oval
diagrams
expressions
will
learn
java's
important
control
structures
starting
statements
decisions
simple
break
statements
looping
will
extend
analysis
tools
trace
tables
boxing
cover
statements
eventually
will
generalize
loop
cover
two
variants
looping
statements
finally
will
begin
learning
java's
try
catch
statement
control
structure
programmers
use
process
exceptions
sometimes
operator
method
fails
throwing
exception
denote
failure
program
just
signal
program
must
take
special
action
will
continue
exploring
use
try
catch
statement
next
lecture
context
file
thus
can
summarize
language
features
learn
lecture
statement
local
declaration
statement
expression
statement
block
statement
statement
statement
break
statement
statement
statement
try
catch
statement
will
explore
semantics
following
control
structures
detail
block
execute
sequence
statements
order
decide
statement
execute
loop
repeatedly
execute
statement
break
terminate
execution
loop
try
catch
execute
sequence
statements
one
throws
exception
execute
alternative
sequence
statements
declaring
variables
review
extension
already
discussed
aspects
declaration
statement
depth
recall
simplest
declarations
start
type
variable
followed
name
variable
ended
semicolon
complex
variable
declarations
can
specify
multiple
variable
names
declared
type
one
starts
declaration
variable
can
initialized
value
originally
specified
ebnf
declarator
variable
declarator
identifier
expression
said
expression
literal
kind
expression
knew
time
now
know
much
complicated
expressions
including
literals
variables
operators
methods
can
use
declare
initial
values
variables
pragmatically
intializations
use
either
literals
calls
prompt
methods
form
arise
less
frequently
examples
int
0
int
prompt
forint
enter
int
int
math
max
1
1
declation
intialized
using
literal
0
declation
initialized
result
returned
calling
prompt
forint
method
declation
initialized
using
value
previous
declared
intialized
variable
finally
declation
initialized
result
returned
expression
involving
method
call
operator
literal
value
previously
declared
variable
addition
java
allows
keyword
final
appear
optionally
local
variable
declaration
statement
final
type
variable
declarators
semantically
declaration
includes
final
variables
declares
must
include
initializer
value
store
must
never
changed
use
state
change
operators
final
variables
declared
final
double
pi
3
14159265358979323846
java
detect
report
error
later
wrote
pi
3
0
thus
can
use
final
declare
named
constants
whose
value
guaranteed
java
change
expression
statements
can
make
expression
expression
statement
appending
semicolon
end
statement
tells
java
evaluate
expression
ebnf
rule
expression
statements
simply
expression
statement
expression
fact
discarding
option
can
write
just
semicolon
simplest
kind
expression
statement
statement
nothing
java
imposes
one
important
syntax
constraint
expression
statements
expression
option
included
expression
must
apply
state
change
operator
method
call
last
expression
thus
following
statements
legal
examples
expression
statements
satisfies
syntax
constraint
average
score1
score2
score3
3
gamecount
counter1
counter2
counter3
0
system
println
played
gamecount
games
recall
state
change
operators
low
precedence
will
naturally
evaluated
last
expression
statement
methods
whose
prototype
lists
void
type
result
return
result
anyway
methods
system
println
often
called
last
evaluating
expression
statements
note
1
legal
expression
statement
last
operator
applies
computes
value
process
value
store
anywhere
print
writing
expression
serves
purpose
java
compiler
detects
reports
error
case
finally
notice
syntax
constraint
still
allows
prompt
forint
enter
values
legal
expression
statement
even
though
method
returns
int
result
processed
block
statements
scope
airlines
restrict
one
carry
bag
show
three
small
bags
let
plane
buy
fourth
big
bag
put
original
three
fourth
everything
will
fine
java's
syntax
sometimes
forces
kind
behavior
places
mostly
inside
control
structures
will
study
later
reading
one
statement
allowed
want
multiple
statements
must
put
inside
one
big
statement
single
big
statement
called
block
statement
sometimes
just
block
ebnf
rule
blocks
block
statement
statement
ebnf
rule
outer
braces
stand
inner
ones
mean
repetition
blocks
number
statements
enclosed
braces
block
statement
inside
can
put
statements
although
write
ebnf
rule
one
line
block
statements
code
often
span
many
lines
statement
inside
block
appearing
line
indented
braces
semantically
java
executes
block
sequentially
executing
statements
contains
exact
order
appear
block
giving
directions
humans
computers
often
order
directions
followed
critical
directions
say
disarm
bomb
cut
blue
wire
cut
red
wire
good
idea
us
change
order
wires
cut
statement
inside
block
declares
variable
variable
can
used
subsequent
statements
inside
block
java
executes
statements
block
block
finished
executing
variables
declared
inside
block
become
undeclared
variables
called
local
variables
exist
locally
inside
block
statements
executing
technically
call
places
variable
can
used
scope
variable
scope
local
declarations
blocks
include
subsequence
statements
block
blocks
can
nested
variables
declared
outer
block
can
used
inner
block
example
outer
block
int
1
inner
block
system
println
refers
outer
block
3
refers
outer
block
system
println
example
illustrates
scope
variable
includes
whole
outer
block
includes
inner
block
inner
block
just
one
statement
included
outer
block
one
bigger
statement
example
java
prints
1
followed
3
moved
declaration
outer
block
start
inner
block
java
detect
report
error
compile
time
outer
block
inner
block
int
1
system
println
refers
inner
block
3
refers
inner
block
system
println
error
inner
block
undeclared
statement
placement
variable
accessible
outside
inner
block
unknown
final
print
method
scope
just
inner
block
declared
putting
everything
together
finally
putting
together
everything
learned
java
following
block
contains
variety
statements
perform
simple
computation
declaring
variables
prompting
user
values
store
variables
calling
method
performing
simple
calculation
variables
storing
result
another
variable
state
change
operator
displaying
result
console
window
double
gravity
meter
sec
sec
double
height
meters
double
time
sec
input
gravity
prompt
fordouble
enter
gravity
height
prompt
fordouble
enter
height
drop
calculate
time
math
sqrt
2
height
gravity
output
system
println
system
println
drop
time
time
secs
note
intializing
variables
declared
simplify
code
writing
follows
blocks
ultimate
produce
results
input
double
gravity
prompt
fordouble
enter
gravity
double
height
prompt
fordouble
enter
height
drop
calculate
double
time
math
sqrt
2
height
gravity
output
system
println
system
println
drop
time
time
secs
fact
need
program
variables
can
squeeze
entire
program
just
one
statement
using
escape
sequence
inside
one
huge
4
line
output
statement
system
println
ndrop
time
math
sqrt
2
prompt
fordouble
enter
height
drop
prompt
fordouble
enter
gravity
secs
although
program
smallest
yet
bit
complicated
follow
calculation
includes
two
prompts
user
part
formula
computed
thus
smaller
generally
better
sometimes
storing
partial
calculations
nicely
named
variables
helps
us
write
clearer
easier
understand
programs
main
goal
ics
21
course
program
needs
use
values
entered
user
store
variables
avoid
reprompting
user
information
multiple
times
hand
simulating
state
changes
programmers
must
able
analyze
programs
verify
correct
detect
bugs
occur
hard
part
fix
easier
part
important
way
analyze
code
able
hand
simulate
input
hand
simulation
variables
current
values
called
initial
state
block
code
sequence
statements
needed
values
user
enters
prompts
console
output
hand
simulation
variables
resulting
values
contents
console
called
final
state
hand
simulation
construct
trace
table
state
changes
statement
executed
block
code
include
changes
states
variables
changes
state
console
input
output
program
simple
example
input
output
trace
table
assume
int
5
int
8
block
beginning
students
asked
predict
code
common
response
swaps
values
see
really
happens
using
trace
table
note
table
cell
shows
value
stored
variable
statement
line
finished
statementxyconsoleinitial
states58
8
8
see
values
variables
swapped
y's
initial
value
ends
stored
sense
simplest
thing
two
variables
exchange
values
yet
intuitive
way
write
code
task
incorrect
gloss
observation
important
kind
reasoning
programmer
state
changes
code
different
kind
reasoning
mathematician
equations
one
correct
way
swap
values
stored
two
variables
int
temp
temp
hand
simulation
illustrating
correctness
using
initial
state
statementxytempconsoleinitial
states58undeclared
int
temp
5
8
temp
5undeclared
note
temp
shown
undeclared
block
executed
also
becomes
undeclared
java
finishes
executing
block
temp
plays
crucial
part
computation
java
executing
statements
block
declared
final
example
examine
trace
table
block
variables
initial
state
block
execute
double
prompt
fordouble
enter
math
pow
3
system
println
cubed
finally
prompted
user
will
enter
5
1
console
statementxyconsoleinitial
statesundeclaredundeclared
double
prompt
fordouble
enter
5
1
enter
5
1y
math
pow
3
132
651
system
println
cubed
undeclaredundeclared5
1
cubed
132
651
console
column
shows
line
first
line
prompt
value
user
enters
second
line
answer
certainly
lot
work
simple
example
can
easily
write
trace
tables
can
use
debug
code
much
subtler
errors
boxing
statements
just
used
oval
diagrams
understand
structure
expressions
subexpressions
will
use
box
diagrams
understand
statements
case
control
structures
substatements
right
now
know
three
kinds
statements
declaration
statements
expression
statements
block
statements
declaration
statements
expression
statements
contain
never
contain
substatements
block
statements
contain
substatements
statements
block
executed
sequentially
example
includes
multiple
occurences
kinds
statements
statement
appears
inside
box
practice
skill
boxing
statements
learn
see
statements
inside
statements
way
programmer
notice
consistent
indenting
code
makes
task
easier
statements
java
statements
allow
us
choose
whether
execute
another
statement
one
many
statements
execute
like
option
alternative
forms
ebnf
three
forms
statements
java
else
cascaded
cascaded
else
general
form
statements
given
one
ebnf
rule
statement
expression
statement
else
statement
syntax
constraint
expression
must
result
boolean
value
java
compiler
detects
reports
error
note
else
keywords
java
test
expression
matter
simple
complicated
must
always
appear
inside
parentheses
finally
although
write
ebnf
rule
one
line
write
statements
code
span
least
two
often
many
lines
contain
indented
statements
statement
discarding
option
decides
whether
execute
statement
write
test
statement
recall
statement
can
also
block
two
statement
examples
0
mynumber
roulettenumber
mywins
mypurse
stakes
notice
opening
closing
brace
appear
block
standard
style
will
always
use
blocks
inside
statements
semantically
java
executes
statement
follows
evaluate
test
expression
true
execute
single
statement
test
false
skip
single
statement
test
test
evaluates
true
second
example
java
executes
block
statement
executes
block
sequentially
executing
two
expression
statements
contains
test
evaluates
false
second
example
java
skips
block
statement
executing
neither
statements
contains
else
statement
including
option
decides
one
two
statements
execute
write
test
statement1
else
statement2
recall
statement1
statement2
can
also
block
two
example
else
statements
2
0
even
2
else
3
1
min
max
else
min
max
semantically
java
executes
else
statement
follows
evaluate
test
expression
true
execute
statement1
appears
directly
test
skip
statement2
false
skip
statement1
execute
statement2
appears
directly
keyword
else
else
statements
java
always
executes
one
two
substatements
controls
bit
different
plain
statement
decides
whether
execute
one
statement
controls
cascaded
cascaded
else
decides
one
many
statements
execute
general
form
cascade
java
test1
statement1
else
test2
statement2
else
test3
statement3
else
else
testn
statementn
test1
statement1
else
test2
statement2
else
test3
statement3
else
else
testn
statementn
else
statementn
1
cascaded
built
many
else
statements
statements
else
part
another
else
statement
except
possibly
lst
one
example
cascaded
statement
assuming
declaration
char
grade
testscore
90
grade
'a'
else
testscore
80
grade
'b'
else
testscore
70
grade
'c'
else
testscore
60
grade
'd'
else
grade
'f'
semantically
java
executes
cascaded
statement
follows
evaluate
first
test
expression
true
execute
statement
test
terminate
cascaded
check
tests
execute
statements
false
evaluate
second
test
expression
true
execute
statement
test
terminate
cascaded
check
tests
execute
statements
continue
following
rules
form
true
test
found
last
test
evaluated
last
test
true
execute
statement
test
terminate
cascaded
tests
check
last
test
false
statement
terminate
cascaded
else
statement
execute
statement
else
keyword
cascaded
exactly
one
statement
one
first
true
test
executed
tests
true
either
statements
executed
last
statement
statement
last
else
executed
graphically
can
summarize
control
flow
three
kinds
ifs
hand
simulating
statements
can
extend
use
trace
tables
hand
simulations
statements
include
special
explanation
column
indicate
result
evaluating
test
statement
java
executes
next
write
two
trace
tables
hand
simulating
first
statement
shown
statementxconsoleexplanationinitial
state
5
0
true
execute
next
statementx
5
finished
statementxconsoleexplanationinitial
state5
0
false
skip
next
statement
finished
next
write
two
trace
tables
hand
simulating
second
else
statement
shown
statementxyminmaxconsoleexplanationinitial
state53
true
execute
next
statementmin
3
1st
statement
blockmax
5
2nd
statement
block
block
finished
statementxyminmaxconsoleexplanationinitial
state35
false
execute
statement
elsemin
3
1st
statement
blockmax
5
2nd
statement
block
block
finished
trace
table
example
values
stored
equal
produce
correct
result
can
change
test
still
always
get
result
can
two
different
ways
getting
result
finally
write
trace
table
hand
simulating
cascaded
statement
shown
statementtestscoregradeconsoleexplanationinitial
state73
testscore
90
false
execute
elseif
testscore
80
false
execute
elseif
testscore
70
true
execute
next
statementgrade
'c'
'c'
cascaded
finished
clock
example
take
quick
look
interesting
task
combines
statements
studied
assume
declared
following
variables
military
style
clock
00
00
represents
midnight
9
03
represents
9
03am
14
23
represents
2
23
pm
23
59
represents
11
59pm
int
minute
range
0
59
inclusive
int
hour
range
0
23
inclusive
also
assume
method
emitbeeps
takes
single
int
operand
emits
many
beeps
finally
assume
following
code
called
minute
operating
system
study
java
threads
will
learn
arrange
action
occur
repeatedly
minute
59
minute
else
emitbeeps
hour
1
minute
0
hour
23
hour
else
hour
0
time
code
called
advances
minute
hour
necssary
ensuring
store
legal
values
hour
code
beeps
many
times
1
twice
2am
12
times
noon
13
times
1pm
24
times
midnight
write
two
trace
tables
hand
simulating
code
two
different
initial
situations
first
10
15
10
15am
statementhourminuteconsoleexplanationinitial
state1015
minute
59
true
execute
next
statementminute
16
else
finished
minute
incremented
1
nothing
else
happens
now
lets
write
trace
table
initial
situation
22
59
10
59pm
statementhourminuteconsoleexplanationinitial
state2259
minute
59
false
execute
statement
elseemitbeeps
hour
1
beep
23
times1st
statement
blockminute
0
0
2nd
statement
blockif
hour
23
true
execute
next
statementhour
23
inner
else
finished
outer
else
finished
much
happens
clock
beeps
23
times
11
00pm
minute
reset
0
hour
advances
23
caution
vs
ifs
imagine
want
write
code
doubles
value
stored
int
variable
stores
10
following
statement
proposes
solve
problem
10
2
carefully
examine
test
written
10
10
see
first
time
read
students
common
mistake
programmers
write
accidentally
instead
tests
good
news
java
compiler
will
detect
report
syntax
constraint
error
result
type
test
boolean
situations
though
java
compiler
will
detect
mistake
will
detected
expression
type
boolean
code
left
uses
one
right
uses
boolean
doit
boolean
doit
doit
true
doit
true
system
println
yes
system
println
yes
assume
cases
code
evalutes
false
left
test
evaluates
false
print
message
right
test
stores
true
doit
wiping
value
computed
evaluates
true
semantics
operator
print
message
java
compiler
report
error
type
expression
cases
boolean
brings
us
style
point
writing
true
false
if's
test
unnecessary
prone
error
boolean
expression
can
write
just
instead
true
can
write
instead
false
avoiding
true
false
literals
sign
mature
programmer
finally
already
seen
accidentally
write
expression
statement
0
java
compiler
will
detect
report
syntax
constraint
error
last
operator
applied
expression
statement
state
change
operator
older
languages
allow
expression
statements
cause
programmers
end
debugging
problems
java
disallowed
instead
forcing
reported
compilation
dangling
else
examine
following
two
statements
test1
test1
test2
test2
statement1
statement1
else
else
statement2
statement2
left
code
looks
like
else
inside
right
code
looks
like
inside
else
see
based
whitespace
indentation
java
sees
exactly
tokens
test1
test2
statement1
else
statement2
whitespace
removed
java
tokenizes
program
java
interprets
code
fragments
exactly
way
interpretation
java
use
tokens
need
extra
syntax
rule
helps
us
gree
interpretion
correct
one
else
belongs
recently
seen
can
belong
java
uses
left
interpretation
force
interpretation
matching
else
first
must
use
block
write
test1
test2
statement1
else
statement2
now
else
outside
block
possibly
belong
inside
block
parts
statement
must
reside
entirely
block
final
else
now
belongs
first
called
th
dangling
else
problem
hard
programmers
see
must
carefully
indent
statements
accurately
reflect
elses
belong
otherwise
program
will
contain
subtle
error
hard
us
locate
fact
programmers
advocate
always
using
block
else
statements
avoid
dangling
elses
disadvantage
approach
simple
cases
extra
blocks
create
code
harder
read
will
discuss
style
principles
detail
later
quarter
pragmatics
writing
decisions
determine
correct
form
else
cascaded
unsure
one
correct
try
simpler
forms
first
indent
parts
statements
contains
illustrate
logical
structure
blocks
used
place
braces
positions
shown
examples
ensure
indentation
making
code
easier
humans
read
accurately
reflects
java
reads
tokens
beware
dangling
else
key
understanding
statement
understanding
test
ensure
values
variables
every
test
can
evaluate
true
false
otherwise
test
probably
wrong
example
wrong
following
code
study
carefully
hand
simulate
different
values
2
5
test
really
right
one
probably
int
value
stored
makes
test
false
try
find
one
correctly
simplify
code
removing
whole
statement
simplifying
just
always
performs
action
statements
java
statements
allow
us
repeatedly
execute
another
statement
begin
present
simple
useful
legal
incomplete
form
statement
ebnf
rule
simplified
statement
statement
statement
call
statement
body
loop
although
write
ebnf
rule
one
line
write
statements
code
span
least
two
often
many
lines
finally
note
keyword
java
typical
form
statement
statements
sequence
statements
inside
block
body
block
semantically
java
executes
statement
executing
body
thus
done
executing
body
java
loops
back
re
executes
often
refer
statement
loop
loop
runs
forever
accurately
java
executes
break
statement
inside
loop
discussed
next
section
forces
java
terminate
loop
two
example
loops
infinite
system
println
great
int
count
0
system
println
count
count
first
example
fills
screen
your're
great
second
example
starts
displaying
value
0
1
2
3
etc
next
value
displayed
becoming
larger
one
iteration
hand
simulate
second
example
write
trace
table
statementcountconsoleexplanationinitial
stateundeclared
int
count
0
0
execute
body
first
timesystem
println
count
01st
statement
blockcount
1
last
statement
blockfor
execute
body
againsystem
println
count
011st
statement
blockcount
2
last
statement
blockfor
execute
body
againsystem
println
count
0121st
statement
blockcount
3
last
statement
block
course
process
continues
endlessly
show
complete
trace
table
code
infinite
loop
can
always
terminate
program
eclipse
using
pressing
red
square
console
window
suspect
program
infinite
loop
want
stop
next
section
will
explain
break
statement
allows
program
terminate
loop
break
statements
ebnf
rule
break
statement
simple
break
statement
break
java
imposes
syntax
constraint
break
statement
must
appear
inside
body
loop
finally
note
break
another
keyword
java
real
programs
break
statements
appear
inside
statements
inside
bodies
loops
typical
example
count
0
break
semantically
whenever
break
statement
executed
java
terminates
inner
loop
apears
breaks
loop
terminating
loop
means
java
next
executes
statement
body
loop
mean
program
terminates
putting
break
statement
inside
statement
can
control
based
test
whether
break
statement
executed
test
determines
whether
loop
terminates
iteration
tyical
combination
break
statements
int
countdown
3
system
print
countdown
countdown
0
break
countdown
system
println
blastoff
hand
simulate
example
write
trace
table
call
break
combination
count
loop
statementcountdownconsoleexplanationinitial
stateundeclared
int
countdown
3
3
execute
body
first
timesystem
print
countdown
3
1st
statement
blockif
countdown
0
false
skip
next
break
statement
finishedcountdown
2
last
statement
blockfor
execute
body
againsystem
print
countdown
3
2
1st
statement
blockif
countdown
0
false
skip
next
break
statement
finishedcountdown
1
last
statement
blockfor
execute
body
againsystem
print
countdown
3
2
1
1st
statement
blockif
countdown
0
false
skip
next
break
statement
finishedcountdown
0
last
statement
blockfor
execute
body
againsystem
print
countdown
3
2
1
0
1st
statement
blockif
countdown
0
true
execute
next
break
statement
break
terminate
loopsystem
println
blastoff
3
2
1
0
blastoff1st
statement
loop
body
can
graphically
summarize
control
flow
cooperating
break
statements
break
examples
look
two
interesting
kinds
loops
combine
break
first
called
count
loop
variable
counts
value
stored
variable
max
notice
max
declared
initialized
value
entered
user
int
max
prompt
forint
enter
number
sum
int
0
stores
value
add
sum
int
sum
0
stores
sum
added
max
break
sum
system
println
1
2
max
sum
assuming
user
enters
5
prompted
hand
simulate
statements
write
trace
table
statementmaxxsumconsoleexplanationinitial
stateundeclaredundeclaredundeclared
int
max
prompt
5
enter
5
int
0
0
int
sum
0
0
execute
body
first
timeif
max
false
skip
next
break
statement
finishedx
1
sum
1
last
statement
blockfor
execute
body
againif
max
false
skip
next
break
statement
finishedx
2
sum
3
last
statement
blockfor
execute
body
againif
max
false
skip
next
break
statement
finishedx
3
sum
6
last
statement
blockfor
execute
body
againif
max
false
skip
next
break
statement
finishedx
4
sum
10
last
statement
blockfor
execute
body
againif
max
false
skip
next
break
statement
finishedx
5
sum
15
last
statement
blockfor
execute
body
againif
max
true
execute
next
break
statementbreak
terminate
loopsystem
println
enter
51
2
5
151st
statement
loop
body
second
example
called
sentinel
terminated
loop
user
enters
special
value
called
sentinel
inform
program
values
input
sentinel
processed
normal
code
loop
body
int
count
0
int
sum
0
int
score
prompt
forint
enter
score
1
terminate
score
1
break
count
sum
score
system
println
average
double
sum
double
count
assuming
user
enters
value
3
6
4
sentinel
1
respectively
prompted
hand
simulate
statements
write
trace
table
statementcountsumscoreconsoleexplanationinitial
stateundeclaredundeclaredundeclared
int
count
0
0
int
sum
0
0
execute
body
first
timeint
score
prompt
forint
3enter
3
score
1
false
skip
next
break
statement
finishedcount
1
sum
score
3undeclared
last
statement
blockfor
execute
body
againint
score
prompt
forint
6enter
3enter
6
score
1
false
skip
next
break
statement
finishedcount
2
sum
score
9undeclared
last
statement
blockfor
execute
body
againint
score
prompt
forint
4enter
3enter
6enter
4
score
1
false
skip
next
break
statement
finishedcount
3
sum
score
13undeclared
last
statement
blockfor
execute
body
againint
score
prompt
forint
1enter
3enter
6enter
4enter
1
score
1
true
execute
next
break
statementbreak
undeclared
terminate
loopsystem
println
average
4
33333331st
statement
loop
body
notice
time
loop
executes
body
declares
intializes
undeclares
local
variable
score
variable
declared
left
uninitialized
loop
int
score
appear
loop
just
score
prompt
forint
enter
score
1
terminate
values
stored
variable
never
never
used
outside
loop
chosen
even
declare
variable
outside
loop
fact
variable
declared
undeclared
many
times
affect
correctness
speed
code
compact
trace
tables
hand
simulate
programs
complicated
control
structures
trace
table
occupied
information
relating
control
structures
deciding
statements
execute
next
opposed
statements
actually
change
state
variables
console
window
trace
tables
cumbersome
create
hard
read
compact
trace
tables
remove
information
related
control
structures
instead
focus
state
changes
variables
console
window
construct
compact
trace
table
list
variables
console
separate
columns
omit
explanation
code
changes
state
variable
console
window
update
information
appropriate
column
always
right
beneath
last
entry
column
note
lose
compact
trace
table
gain
conciseness
indication
order
different
variables
state
changed
column
shown
compactly
possible
blank
entries
correlation
among
columns
whose
states
changed
compact
trace
tables
three
standard
trace
tables
shown
first
count
loop
countdownconsoleundeclared
blank
33
23
2
13
2
1
03
2
1
0
3
2
1
0
blastoff
next
count
loop
maxxsumconsoleundeclaredundeclaredundeclared
blank
500enter
number
sum
5
111
2
5
15
23
36
410
515
finally
sentinel
terminated
loop
countsumscoreconsoleundeclaredundeclaredundeclared
blank
003enter
score
1
terminate
3136enter
score
1
terminate
6294enter
score
1
terminate
4313
1enter
score
1
terminate
1
average
4
333333
remember
compact
trace
table
blank
entries
bottom
column
column
entry
filled
column
entries
top
filled
general
break
can
write
looping
code
using
break
know
general
form
statement
allows
use
write
many
loops
compactly
clearly
study
arrays
iterators
self
referential
objects
forms
will
become
useful
general
statement
packages
information
needed
count
count
loop
one
locality
making
easier
read
write
understand
ebnf
rule
general
statement
expression
list
expression
expression
init
type
variable
declarators
expression
list
update
expression
list
statement
identifier
init
expression
update
statement
note
discard
options
back
statement
studied
syntax
constraint
expression
option
middle
semi
colons
included
resulting
type
must
boolean
part
called
continuation
test
also
expression
expression
list
must
adhere
constraints
expression
statement
must
apply
state
change
operator
method
call
last
expression
example
can
use
statements
simplify
code
sums
integers
max
int
max
prompt
forint
enter
number
sum
int
sum
0
holds
sum
1
int
1
makes
loop
powerful
way
groups
together
one
locality
information
controls
loop
standard
compact
trace
table
illustrating
semantics
code
statementmaxxsumconsoleexplanationinitial
stateundeclaredundeclaredundeclared
int
max
5
enter
5
int
sum
0
0
int
1
1
initialize
test
true
execute
bodysum
1
last
statement
bodyfor
int
1
2
increment
test
true
execute
bodysum
3
last
statement
bodyfor
int
1
3
increment
test
true
execute
bodysum
6
last
statement
bodyfor
int
1
4
increment
test
true
execute
bodysum
10
last
statement
bodyfor
int
1
5
increment
test
true
execute
bodysum
15
last
statement
bodyfor
int
1
undeclared
increment
test
false
terminate
loopsystem
println
enter
51
2
5
151st
statement
loop
body
note
variable
becomes
undeclared
statement
terminates
thus
refer
loop's
body
print
statistics
write
name
java
compiler
detect
report
error
want
refer
value
statement
finishes
write
int
max
prompt
forint
enter
number
sum
int
sum
0
holds
sum
1
int
1
xfor
semantics
will
now
show
ebnf
rule
statements
explain
semantics
general
statement
using
simple
break
statements
ebnf
statements
statement
expression
statement
statement
statement
expression
semantically
can
mechanically
translate
general
loop
loop
loop
equivalent
simple
loop
java
compiler
performs
just
kind
transformation
generates
machine
instructions
corresponding
kinds
loops
init
continue
update
statement
init
continue
break
statement
update
continue
statement
continue
break
statement
even
continue
statement
statement
statement
continue
continue
break
general
statement
example
means
int
1
note
value
declared
inside
special
block
outermost
one
described
variable
disappears
statement
outermost
block
shown
translation
terminates
statements
just
variants
continuation
condition
always
tested
first
last
loop's
body
case
loop
body
always
executed
pragmatically
will
see
many
loops
loops
finally
students
two
problems
understanding
general
loops
realize
update
done
done
loop
body
right
continue
retested
also
note
1
valid
expression
statements
can
used
update
1
contains
state
change
operator
try
use
variable
declared
init
outside
loop
terminated
variable
can
used
inside
loop
break
pragmatics
following
rules
can
help
synthesize
analyze
fix
bugs
loops
designing
iterative
code
think
terms
simple
break
statements
determine
statements
belong
loop
initialization
code
statements
belong
inside
body
loop
condition
terminates
loop
condition
tested
inside
loop
iteration
allow
progress
towards
termination
condition
loop
making
test
true
sometimes
easier
write
body
loop
first
determine
initialization
necessary
loop
sylistically
write
loops
shown
block
braces
shown
body
loop
slightly
indented
typically
2
spaces
hand
simulating
loops
pay
special
attention
first
last
iterations
certain
kinds
errors
occur
beginning
ending
loop
ensure
variables
properly
initialized
examined
expressions
java
compiler
will
help
errors
due
incorrect
initialization
easy
spot
carefully
hand
simulate
first
iteration
loop
among
frequent
category
errors
break
statement
important
statement
inside
loop
clearly
mark
break
statements
using
white
space
special
comments
comment
sandwich
ensure
possible
initial
states
variables
loop
eventually
terminates
test
statement
containing
break
will
always
eventually
evaluate
true
loops
even
industrial
code
need
one
break
combination
loop
solve
complicated
problem
may
require
multiple
break
combinations
can
often
localized
grouped
together
loop
solves
complicated
kind
problems
may
require
multiple
break
combinations
distributed
throughout
loop's
body
mark
good
programmer
write
simple
loops
simple
terminations
frequent
occuring
location
break
first
statement
body
loop
try
first
move
elsewhere
necessary
break
combination
can
also
written
loop
finally
use
general
form
statement
maximum
advantage
clarify
loops
may
use
loops
extra
thought
goes
considering
fact
often
harder
think
continuation
condition
rather
termination
condition
means
use
infrequently
preferring
break
combination
boxing
break
statements
continuing
analysis
boxing
statements
illustrate
box
break
statements
well
expression
block
statements
notice
everything
can
syntactically
considered
statement
box
includes
declarations
statements
none
expression
statements
blocks
entire
statements
break
statements
entire
statements
general
loops
boxed
similar
manner
none
information
within
parentheses
considered
statements
try
catch
ebnf
try
catch
statement
complex
control
structure
seen
far
tipoff
programming
java
exception
handling
interesting
fact
many
java
courses
cover
exceptions
exception
handling
much
later
quarter
think
core
concepts
can
demonstrated
early
can
used
good
advantage
stereotypical
ways
easy
understand
can
returned
repeatedly
complicated
contexts
spiral
approach
learning
general
form
try
catch
statement
parameter
type
identifier
catch
clause
catch
parameter
block
statement
try
catch
statement
try
block
statement
catch
clause
finally
block
statement
although
write
try
catch
statement
ebnf
rule
one
line
try
catch
statements
written
code
often
span
many
lines
contain
mandatory
blocks
can
contain
many
statements
different
lines
names
exceptions
actually
special
reference
types
although
getting
bit
ahead
will
use
following
reference
types
exception
names
arithmeticexception
numberformatexception
illegalargumentexception
illegalstateexception
ioexception
exception
generic
name
includes
others
syntax
constraint
right
hand
side
try
catch
statement
must
least
one
catch
clause
one
finally
can
many
former
combination
take
0
repetitions
catch
clause
time
discard
finally
block
actually
encode
restriction
ebnf
make
complicated
description
look
even
complex
semantics
statement
might
expect
complicated
well
java
starts
try
catch
sequentially
executing
statements
block
statement
immediately
following
keyword
try
known
try
block
just
execute
block
one
two
things
happen
statement
try
block
throws
exception
last
statement
block
executed
java
executes
finally
block
option
included
java
now
done
try
catch
statement
executes
next
statement
following
statement
try
block
throws
exception
rest
statements
block
skipped
java
tries
find
catch
clause
whose
parameter
matches
name
exception
thrown
generic
name
exception
matches
exception
names
name
found
java
executes
associate
block
java
executes
finally
block
option
included
java
now
done
try
catch
statement
executes
next
statement
following
name
found
java
executes
finally
block
option
included
java
skips
code
looks
another
outer
try
catch
statement
one
whose
catch
clause
name
exception
one
found
follow
rule
note
return
original
inner
try
catch
statement
one
found
java
terminates
programs
citing
uncaught
exception
typically
results
trace
prints
console
name
uncaught
exception
methods
active
exception
thrown
simple
example
section
will
present
simplified
example
useful
real
programs
useful
illustrate
semantics
try
catch
statements
recall
operator
throws
exception
named
arithmeticexception
second
operand
zero
let
us
examine
effect
placing
following
try
catch
statement
program
int
percentage
code
try
int
attended
prompt
forint
enter
attendance
int
capacity
prompt
forint
enter
capacity
percentage
100
attended
capacity
system
println
percentage
computed
ok
catch
arithmeticexception
system
println
capacity
0
assume
percentage
100
percentage
100
code
division
succeeds
percentage
set
correctly
ok
message
printed
try
block
finishes
normally
execution
continues
afterward
says
code
finally
block
hand
division
fails
throwing
arithmeticexception
percentage
set
operator
never
evaluted
requires
result
division
just
seen
thrown
exception
ok
message
skipped
java
locates
appropriate
catch
clause
statements
catch
clause
block
executed
try
block
finishes
execution
continues
afterward
says
code
finally
block
replaced
arithmeticexception
exception
code
execute
identically
exception
matches
raised
exceptions
replaced
arithmeticexception
name
say
ioexception
java
find
matching
exception
assuming
outer
try
catch
statement
catch
exception
java
terminate
program
print
trace
console
one
reason
example
realistic
can
easily
check
whether
division
will
fail
statement
avoid
need
try
catch
statement
together
int
percentage
code
int
attended
prompt
forint
enter
attendance
int
capacity
prompt
forint
enter
capacity
capacity
0
percentage
100
attended
capacity
system
println
percentage
computed
ok
else
system
println
capacity
0
assume
percentage
100
percentage
100
code
following
two
examples
much
realistic
will
need
try
catch
statement
solve
problem
use
statement
check
whether
exception
thrown
prompting
try
catch
section
will
present
realistic
example
fact
similar
code
appears
inside
prompt
forint
method
understanding
code
works
requires
mastery
semantics
many
java
statements
first
must
know
integer
parseint
method
java
library
following
prototype
int
integer
parseint
string
throws
numberformatexception
methods
takes
string
argument
argument
represents
value
legal
integer
returns
value
int
represent
legal
integer
return
reasonable
value
throws
numberformatexception
thus
integer
parseint
10
returns
int
10
integer
parseint
1x0
throws
numberformatexception
method
java
provides
check
whether
integer
parseint
will
throw
exception
call
method
see
now
let
us
see
following
code
combination
loop
break
statement
try
catch
prompts
usre
enters
valid
integer
whose
value
stored
answer
int
answer
try
answer
integer
parseint
prompt
forstring
enter
integer
break
catch
numberformatexception
system
println
error
please
enter
valid
integer
process
answer
loop
repeatedly
executes
try
catch
statement
first
let
us
see
happens
user
enters
valid
integer
first
iteration
loop
java
executes
first
statement
user
enters
valid
integer
read
string
passed
integer
parseint
method
method
throw
exception
instead
returns
result
stored
answer
thus
second
statement
block
reached
break
statement
terminates
entire
loop
execution
continue
loop
says
process
answer
now
let
us
see
happens
user
enters
invalid
integer
first
iteration
loop
java
executes
first
statement
user
enters
invalid
integer
read
string
passed
integer
parseint
method
method
throws
numberformatexception
java
skips
break
statement
instead
finds
catch
matching
exception
following
block
prints
error
message
now
try
catch
statement
finished
statement
body
loop
executed
therefore
loop
will
continue
executing
long
user
enters
invalid
integer
first
time
user
enters
valid
integer
see
description
value
will
stored
answer
break
statement
following
will
executed
terminate
loop
generally
designed
code
potentially
repeatedly
performs
operation
exception
thrown
next
section
will
design
code
repeatedly
performs
operation
exception
thrown
anticipating
exception
will
eventually
terminate
loop
continues
executing
together
two
forms
occur
frequently
exception
handing
code
reading
files
try
catch
section
will
present
another
realistic
example
fact
code
similar
will
present
programs
read
files
first
must
learn
readint
method
java
library
class
written
following
prototype
int
readint
throws
numberformatexception
endoffileexception
method
skips
white
space
file
returns
next
integer
value
contains
succeeds
two
ways
fail
denoted
different
exception
name
value
file
integer
case
method
throws
numberformatexception
values
type
file
case
method
throws
endoffileexception
following
code
assumes
variable
inputfile
refer
object
representing
file
learn
later
lecture
reads
every
value
file
accumulating
sum
ultimately
printing
int
sum
0
try
int
avalue
inputfile
readint
sum
avalue
catch
endoffileexception
eofe
break
system
println
sum
sum
let
us
see
happens
file
contains
two
integers
java
starts
execute
loop
contains
just
one
statement
try
block
first
iteration
loop
java
executes
first
statement
try
block
calling
readint
method
reads
valid
integer
file
stores
avalue
next
statement
sum
incremented
value
try
block
finished
loop
executes
second
time
second
iteration
loop
java
executes
first
statement
try
block
calling
readint
method
reads
another
valid
integer
file
stores
avalue
next
statement
sum
incremented
new
value
try
block
finished
loop
executes
third
time
third
iteration
loop
java
executes
first
statement
try
block
calling
readint
methods
causes
throw
endoffileexception
values
file
read
error
caught
catch
endoffileexception
eofe
clause
whose
block
contains
break
statement
terminates
loop
java
continues
executing
statement
loop
printing
accumulated
sum
code
repeatedly
performs
operation
exception
thrown
note
non
integer
value
appears
file
calling
readint
method
causes
throw
numberformatexception
exception
caught
try
catch
shown
java
terminates
program
prints
trace
console
finally
place
avalue
used
add
sum
can
simplify
code
bit
write
int
sum
0
try
sum
inputfile
readint
catch
endoffileexception
eofe
break
system
println
sum
sum
problem
set
ensure
understand
material
lecture
please
solve
announced
problems
read
lecture
get
stumped
problem
go
back
read
relevant
part
lecture
still
questions
please
get
help
instructor
ca
student
explain
following
state
change
expressions
legal
illegal
assume
declared
int
2
prompt
forint
enter
system
println
success
following
expression
statements
carefully
apply
knowledge
syntax
tokens
operator
precedence
associativity
semantics
explain
values
stored
variables
whose
states
changed
result
computed
expression
oval
diagram
illustrates
parts
assume
statement
executed
just
declaration
int
3
5
8
1
1
1
system
println
system
println
explain
displayed
console
top
bottom
block
assume
declared
int
char
ascii
equivalent
'a'
65
'a'
system
println
65
system
println
show
displayed
console
window
java
executes
following
expression
statements
careful
show
word
occurs
lines
remember
escape
character
starts
new
line
system
print
system
println
course
system
print
human
nevents
system
print
system
print
becomes
system
println
necessary
system
print
one
nation
sever
examine
following
6
blocks
permutations
three
statements
classify
block
syntactically
legal
illegal
hint
certain
statement
orderings
illegal
violate
constraint
variable
declared
inside
block
can
used
blocks
legal
determine
whether
swap
values
stored
int
temp
temp
int
temp
temp
int
temp
temp
temp
int
temp
temp
int
temp
temp
int
temp
examine
following
statements
determine
whether
true
false
prepared
support
answer
show
counter
example
block
can
empty
contain
statements
block
can
unitary
contain
1
statement
statements
identical
meanings
declare
int
5
8
java
executes
expression
statement
immediately
followed
3
now
store
3
single
statement
can
change
state
one
variable
following
block
rejected
compile
time
java
compiler
write
error
message
java
reports
explain
makes
sense
recognize
problem
report
error
int
system
println
following
easier
understand
single
statement
double
statement
verify
perform
computation
mypurse
stakes
0
mywins
mywins
mypurse
stakes
assume
declare
char
grade
guarantee
stores
letter
corresponding
uci
grade
'a'
'b'
'c'
'd'
'f'
write
statement
computes
number
quality
points
grade
stores
int
qp
worth
4
worth
3
worth
2
worth
1
worth
0
assume
declare
int
hours
write
statement
computes
pay
cents
due
worker
according
following
formulas
625
hours
hours
worked
less
equal
40
625
hours
725
hours
40
hours
worked
greather
40
store
result
int
centspay
try
examples
40
hours
verify
statement
correct
assume
declare
int
boolean
isit
write
trace
table
hand
simulation
following
java
statements
one
stores
3
stores
5
another
stores
5
stores
3
state
whether
results
different
case
isit
true
isit
true
else
isit
false
isit
false
statement
side
equivalent
expression
statement
isit
assume
declare
int
studentanswer
correctanswer
wrongcount
explain
wrong
following
statement
syntax
error
studentanswer
correctanswer
else
wrongcount
explain
fix
problem
simple
way
modify
cascaded
computing
grades
grade
stores
'
'
testscore
outside
range
0
100
inclusive
write
trace
table
clock
code
clock
starts
11
59pm
one
minute
midnight
assume
declare
double
signum
write
cascaded
statement
stores
signum
value
1
less
0
0
equal
0
1
greater
0
assume
declare
double
min
max
write
cascaded
statement
stores
value
min
less
min
max
greater
max
nothing
new
otherwise
assume
declare
int
min
write
statement
stores
min
minimum
values
stored
try
minimum
amount
code
re
examine
cascade
computes
course
grade
following
statements
equivalent
thing
values
stored
testscore
testscore
60
testscore
60
grade
'd'
grade
'f'
else
testscore
70
testscore
70
grade
'c'
grade
'd'
else
testscore
80
testscore
80
grade
'b'
grade
'c'
else
testscore
90
testscore
90
grade
'a'
grade
'b'
else
else
grade
'f'
grade
'a'
simple
changes
correct
incorrect
code
suppose
modify
clock
code
call
emitbeeps
bottom
block
also
change
argument
just
hour
will
code
always
work
hour
minute
combination
will
fail
minute
59
minute
else
minute
0
hour
23
hour
else
hour
0
emitbeeps
hour
note
correct
code
must
correct
every
hour
minute
24x60
1
440
different
possiblities
ones
crucial
check
suppose
modify
clock
code
follows
will
code
always
work
hour
minute
will
fail
minute
minute
60
minute
0
hour
emitbeeps
hour
hour
24
hour
0
note
correct
code
must
correct
every
hour
minute
24x60
1
440
different
possiblities
ones
crucial
check
assume
declare
int
hour
storing
values
0
23
described
write
statement
display
console
hour
standard
format
hour
stores
3
display
3am
hour
stores
15
display
3pm
hour
stores
0
display
12midnight
hour
stores
12
display
12noon
try
simplest
possible
code
write
standard
trace
table
following
code
user
enter
value
3
write
compact
trace
table
value
user
enters
7
int
cyclecount
0
int
test
prompt
forint
enter
value
test
cyclecount
test
1
break
test
2
0
test
test
2
else
test
3
test
1
system
println
finished
cyclecount
cycles
following
two
code
fragments
identical
original
count
code
appears
different
locations
inside
loop
write
standard
trace
table
showing
behavior
results
can
change
test
produce
original
results
int
countdown
3
countdown
0
break
system
println
countdown
countdown
system
println
blastoff
int
countdown
3
system
println
countdown
countdown
countdown
0
break
system
println
blastoff
following
code
fragment
identical
original
sentinel
code
appears
different
location
inside
loop
write
standard
trace
table
showing
behavior
results
int
count
0
int
sum
0
int
score
score
prompt
forint
enter
score
1
terminate
count
sum
score
score
1
break
system
println
average
double
sum
double
score
rewrite
countdown
loop
compactly
uses
general
statement
without
break
body
rewrite
sentinel
loop
twice
uses
loop
loop
can
done
problem
arises
following
code
can
used
ensure
user
enters
positive
value
write
standard
trace
table
following
code
assuming
user
enters
values
5
1
8
respectively
int
positive
positive
prompt
forint
enter
positive
value
positive
1
break
system
println
sorry
positive
postive
system
println
positive
positive
changes
necessary
ensure
user
entered
positive
even
value
write
compact
trace
table
following
code
assuming
user
enters
values
4
5
7
3
7
8
8
11
15
5
9
100
respectively
int
zcc
0
int
prompt
forint
enter
value
int
prompt
forint
enter
value
100
break
0
0
zcc
system
println
final
zcc
zcc
write
compact
trace
table
following
code
assuming
user
enters
values
4
5
7
3
7
7
8
11
15
5
9
1
respectively
int
ll
0
int
cl
0
int
prompt
forint
enter
value
cl
ll
ll
cl
int
prompt
forint
enter
value
1
break
cl
else
cl
0
system
println
final
ll
ll
write
code
see
previous
two
problems
inspiration
determines
whether
values
prompts
use
1
sentinel
strictly
increasing
order
value
greater
one
precedes
store
final
answer
boolean
variable
named
isincreasing
write
two
compact
trace
tables
code
assuming
user
enters
values
4
5
3
5
2
4
1
first
time
4
5
7
7
1
second
time
write
code
counts
number
strictly
increasing
pairs
values
user
enters
use
1
sentinel
store
final
answer
int
variable
named
increasingpaircount
write
two
compact
trace
tables
code
assuming
user
enters
values
4
5
3
3
7
6
8
9
2
5
4
1
input
finds
5
pairs
4
5
3
7
6
8
8
9
2
5
explain
following
loop
contains
error
spotted
java
compiler
int
1
explain
following
loop
displays
hint
display
even
numbers
1
10
write
loop
accomplish
task
int
1
translate
following
loop
loop
break
body
int
5
0
system
println
assume
declared
int
width
height
stored
values
variables
write
pair
nested
loops
print
rectangle
'
'
height
width
height
5
width
20
display
syntactically
wrong
following
loop
careful
can
rewrite
satisfy
syntax
still
intended
thing
int
0
double
0
0
velocity
0
01
suppose
prompting
code
always
want
set
answer
0
terminate
loop
user
fails
enter
valid
integer
change
code
implement
requirement
hint
change
requires
just
changing
block
catch
clause
explain
whether
code
correctly
reads
integer
values
file
prints
sum
note
code
contains
loop
try
catch
statements
break
statement
original
code
solve
problem
contained
try
catch
break
statement
loop
int
sum
0
try
int
avalue
inputfile
readint
sum
avalue
catch
endoffileexception
eofe
system
println
sum
sum
suppose
file
reading
code
lecture
want
ignore
non
integer
values
encountered
keep
reading
values
file
read
can
change
code
implement
requirement
might
better
just
ignore
print
error
message
can
accomplished
finally
modify
code
solve
problem
hint
look
catch
clause
appears
ebnf
try
catch
statements
failing
read
int
non
int
value
appears
file
will
cause
java
throw
numberformatexception
