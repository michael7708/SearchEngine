deliverable 4 implementation 
implementation 1st demonstration 
informatics
117
project
software
system
design
winter
quarter
2009
implementation
due
date
march
5
2009
overview
implement
system
according
design
requirements
implementation
will
handed
two
parts
assignment
corresponds
initial
coding
phase
unit
testing
debugging
next
assignment
corresponds
software
integration
integration
system
testing
debugging
enhancements
conjunction
coding
unit
team
must
develop
unit
test
plans
covering
implemented
units
assignment
must
turn
descriptive
document
code
listings
described
source
code
documented
sufficient
informative
comments
unit
test
plans
test
execution
histories
functionally
test
unit
implementation
organize
unit
test
plans
test
history
documentation
much
way
units
organized
implementation
need
print
results
testing
activity
show
enough
results
executing
unit
test
plans
convince
us
units
ready
integration
specify
correspondence
software
design
implementation
show
correspondence
way
feel
appropriate
make
notations
throughout
document
minutes
means
include
discussion
overview
section
implementing
software
will
undoubtedly
reveal
inadequacies
previous
documents
please
note
problems
done
solve
forget
include
meeting
minutes
performance
appraisals
document
refer
syllabus
complete
check
list
turned
deliverable
objectives
quality
keep
mind
key
objectives
implementation
translate
design
code
will
satisfy
requirements
identify
inadequacies
design
requirements
document
decisions
rationale
provide
reference
tool
readable
developers
testers
maintainers
addition
keep
mind
implementation
document
satisfy
following
qualities
complete
everything
requirements
design
implemented
consistent
mismatched
interfaces
consistent
design
stylistic
exhibits
good
programming
style
safe
constructs
information
hiding
well
defined
types
reasonable
module
sizes
complexity
well
defined
module
interfaces
avoids
side
effects
understandable
code
constructed
easy
read
necessarilly
easy
write
modifiable
living
document
desensitized
change
maintains
information
hiding
specified
design
confirmable
verifiable
testable
can
tell
met
design
requirements
document
contents
introduction
expand
introduction
discuss
specific
approaches
implementation
system
organization
document
description
essentially
just
updated
version
introduction
included
previous
deliverable
description
guide
reader
understanding
needed
expand
understanding
section
previous
document
make
sure
add
descriptions
additional
steps
actions
took
understand
technology
software
phase
make
changes
section
add
text
describing
change
necessary
accurately
reflects
new
understanding
section
need
different
understanding
changed
project
plan
will
iterative
expansion
previous
submission
expand
project
plan
represent
accomplished
work
far
reassess
project
risks
expand
task
network
work
breakdown
structure
include
effort
expended
complete
task
based
work
done
revise
estimates
much
team
can
accomplish
deliver
update
time
estimates
remaining
work
make
changes
add
text
describing
change
necessary
will
improve
ability
team
accomplish
work
proposed
implementation
overview
software
implementation
implementation
organization
system
size
source
lines
packages
see
note
presentation
instructions
show
major
limitations
current
implementation
source
code
listings
list
modules
objects
within
system
complete
listings
software
system
listings
free
syntax
errors
module
object
must
documented
standard
ways
defining
purpose
works
interface
straight
design
unit
test
plan
test
history
includes
unit
test
plans
capable
demonstrating
unit
meets
design
requirements
traceable
unit
unit
test
plans
based
functional
test
heuristics
based
functional
description
unit
black
box
shows
selected
results
testing
activity
enough
raise
confidence
software
show
ready
integration
final
testing
particular
show
representative
selection
test
results
unit
test
plan
test
results
show
test
case
executed
whether
failures
detected
faults
debugged
hopefully
eventually
passed
unit
test
plan
test
execution
history
test
case
test
case
identification
purpose
test
case
item
tested
input
specification
output
specification
expected
results
test
oracle
mechanism
test
environmental
needs
special
test
procedures
test
results
pass
fail
failures
detected
faults
debugged
final
test
result
hopefully
passed
fixed
document
demonstration
plan
update
will
demonstrate
chance
continue
planning
final
demonstration
tracking
control
mechanisms
update
configuration
management
modules
objects
maintained
file
structure
sub
directories
makefiles
etc
persistent
data
design
cross
reference
files
contain
modules
objects
design
table
mapping
module
object
file
make
sure
complete
consistent
modifications
prior
documents
update
design
modules
objects
interactions
changed
added
deleted
make
explicit
highlight
design
changed
added
deleted
customer
developer
etc
design
changed
state
requirements
requirements
changed
added
deleted
make
explicit
highlight
requirement
changed
added
deleted
customer
developer
etc
requirements
changed
state
glossary
update
defines
terms
used
specifications
documentation
update
section
reserved
additional
documentation
may
developed
phase
project
specifically
course
developing
understanding
various
technologies
involved
project
discovered
items
documented
important
include
implementation
presentations
march
5th
team
prepare
20
minute
presentation
presentation
include
following
brief
context
project
current
state
project
plan
sure
include
table
showing
many
hours
originally
planned
phase
many
hours
actually
spent
phase
phases
large
difference
25
provide
explanation
highlights
implementation
including
overview
architecture
one
module
object
implementations
associated
unit
test
plans
requirements
design
cross
reference
highlighted
code
description
many
lines
code
written
many
files
files
organized
good
way
showing
tree
reflecting
file
directory
structure
leaf
node
annotated
number
lines
code
node
non
leaf
node
annotated
aggregate
number
source
lines
subsidiary
directories
files
significant
modifications
requirements
design
arose
result
coding
