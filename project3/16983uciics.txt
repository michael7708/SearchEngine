understanding software process redesign using modeling analysis simulation 
paper draft html 
understanding
software
process
redesign
using
modeling
analysis
simulation
presented
prosim'99
workshop
software
process
simulation
modeling
silver
springs
27
29
june
1999
revised
version
appear
software
process
improvement
practice
walt
scacchi
information
computer
science
dept
university
california
irvine
ca
92697
3425
usa
wscacchi
ics
uci
edu
http
www
ics
uci
edu
wscacchi
abstract
paper
introduces
problem
understanding
software
process
redesign
spr
software
process
modeling
analysis
simulation
may
used
support
provides
overview
research
results
business
process
redesign
help
draw
attention
importance
treating
process
redesign
process
organizational
process
transformation
turn
requires
examining
practicing
spr
approach
combines
organizational
change
management
together
process
management
technologies
discussion
follows
identifies
number
topic
areas
require
study
order
make
spr
subject
software
process
research
practice
keywords
software
process
process
redesign
business
process
redesign
process
modeling
simulation
1
overview
software
process
improvement
spi
traditionally
focussed
addressing
improve
capabilities
software
development
organization
maturing
comparative
benchmarking
software
processes
capability
maturity
model
software
engineering
institute
visible
spi
initiative
kind
however
cmm
targeted
incremental
improvement
existing
software
processes
cmm
top
level
optimization
level
5
characterizes
organizations
whose
software
processes
incrementally
improved
refined
monitoring
measurement
reflexive
analysis
well
defined
well
managed
processes
nonetheless
cmm
provide
specific
guidance
maturity
level
implicitly
prescribes
fundamentally
rethink
optimize
software
processes
achieve
order
10x
improvement
radical
transformation
radical
transformations
software
processes
incremental
evolutionary
improvements
probably
though
appear
lie
along
common
dimension
metric
characterizes
scale
scope
process
change
sought
software
process
redesign
spr
merits
investigation
determine
whether
might
lead
dramatic
improvements
process
efficiency
effectiveness
study
presented
paper
introduces
topic
spr
describes
concepts
techniques
tools
software
process
modeling
analysis
simulation
may
employed
support
spr
studies
particular
three
research
questions
explore
elaborate
topics
can
identified
follows
software
process
redesign
relate
business
process
redesign
can
modeling
analysis
simulation
help
redesigning
software
processes
approach
needed
acquiring
checking
applying
knowledge
required
dramatically
continuously
improve
software
processes
accordingly
sections
follow
questions
addressed
elaborated
investigated
turn
2
software
process
redesign
spr
concerned
identification
application
refinement
new
ways
improve
software
processes
software
processes
interest
include
associated
software
development
also
software
system
acquisition
sb98
use
evolution
redesign
heuristics
serve
main
source
knowledge
dramatically
improve
cycle
time
defect
prevention
cost
effectiveness
various
kinds
software
business
processes
vs99
however
heuristics
come
can
learn
results
business
process
redesign
bpr
studies
web
useful
source
spr
knowledge
let
us
consider
turn
2
1
spr
heuristics
come
spr
heuristics
can
derived
empirical
studies
focal
processes
redesigned
sn97
results
studies
often
cast
forms
experience
reports
case
studies
lessons
learned
best
practices
dp98
o98
rather
controlled
carefully
designed
experiments
zw98
generalizability
studies
usually
limited
story
contexts
insights
may
convey
can
enlightening
sensitizing
accordingly
attention
drawn
heuristic
knowledge
guide
spr
nonetheless
spr
heuristics
can
also
derived
theoretical
propositions
characterize
effectively
redesign
complex
processes
patterns
measurable
properties
formal
representations
processes
redesign
spr
heuristics
may
domain
independent
therefore
applicable
large
set
processes
alternatively
spr
heuristics
may
domain
specific
thus
applicable
specific
processes
particular
settings
domain
independent
domain
specific
spr
heuristics
sought
examining
spr
heuristics
applied
can
learn
circumstances
different
types
heuristics
effective
least
effective
similarly
can
learn
process
redesigns
considered
effective
desirable
view
participants
working
redesigned
process
redesigns
considered
undesirable
participants
sn97
vs99
however
part
challenge
identifying
spr
heuristics
kind
unless
explicit
heuristics
implicit
means
likely
found
comparison
across
diverse
sample
redesign
case
studies
rather
conveniently
found
single
repository
kind
comparative
domain
analysis
can
high
skill
labor
intensive
activity
nonetheless
new
technologies
creating
options
may
make
activity
manageable
therefore
useful
acknowledge
finding
ferreting
spr
heuristics
difficult
task
however
structured
scheme
taxonomically
classifying
spr
heuristics
repository
populated
spr
heuristics
likely
valuable
assets
research
purposes
commercial
applications
spr
motivation
finding
heuristics
well
building
alternative
classification
taxonomies
repositories
spr
2
2
lessons
business
process
redesign
work
hammer
davenport
colleagues
brought
attention
problem
business
process
redesign
bpr
process
reengineering
following
advice
existing
legacy
software
processes
either
obliterated
automated
h90
else
understood
measured
ds90
turn
innovative
software
processes
designed
prototyped
using
leading
edge
software
engineering
information
technologies
new
foundation
coordinating
software
development
use
activities
ds90
however
ability
successfully
realize
benefits
radical
based
changes
business
processes
elusive
reflective
studies
problems
pitfalls
best
practices
bpr
find
certain
organizational
variables
rather
key
achieving
successful
bpr
outcomes
bmr94
hrw93
many
bpr
projects
examined
bpr
failure
reported
outcome
70
time
bmr94
can
bpr
failure
avoided
redesigning
software
processes
available
research
results
bpr
studies
indicate
critical
conditions
help
realize
success
include
participation
commitment
top
management
executives
empowered
workers
shared
vision
realistic
expectations
changes
worker
roles
responsibilities
new
performance
measurements
worker
incentives
like
bmr94
hrw93
conversely
organizational
conditions
insignificant
missing
expect
application
bpr
software
processes
fail
dilemma
realize
benefits
successful
bpr
project
avoiding
likelihood
failure
gave
rise
series
empirical
field
studies
surveys
track
source
variation
causality
results
representative
investigations
cjs94
ess95
gj
95
emphasized
importance
addressing
bpr
implementation
within
broader
context
organizational
change
complex
socio
technical
environment
cf
ks82
instance
organizations
may
choose
reengineer
set
processes
software
life
cycle
processes
time
order
learn
succeeds
fails
cjs94
applying
lesson
learned
caron
colleagues
cjs94
software
process
reveals
spr
efforts
implemented
within
organization
bottom
process
end
users
rather
imposed
top
senior
management
cf
h90
succeed
following
senior
management
provide
strategic
vision
effort
redesign
software
processes
empowers
process
staff
participate
directing
implementing
effort
ess95
similarly
change
management
strategies
techniques
technological
competence
tactical
planning
project
management
training
personnel
processes
factors
related
success
redesigning
software
processes
gj
97gjkw95
drawing
emerging
theoretical
basis
bpr
kg95
redesigning
software
processes
focus
creation
organizational
environment
support
change
management
strategies
central
among
organizational
commitments
foster
process
learning
experimentation
environment
knowledge
sharing
supplemented
software
technologies
internal
external
partnering
measurable
process
improvements
prerequisites
bpr
success
similarly
reengineering
software
development
processes
effort
directed
enhancing
level
team
development
cooperative
work
collaborative
learning
jw
97
finally
recent
studies
bpr
establish
ties
process
change
consequence
organizational
performance
example
applying
results
guha
colleagues
gg
97
reengineering
software
processes
require
creation
learning
organization
articulating
interdependencies
change
environment
process
management
change
management
focus
last
redesigning
software
processes
management
control
organizational
resources
software
acquisition
development
process
expenditures
must
remain
effective
though
perhaps
streamlined
manner
sn97a
2
3
can
web
help
us
learn
spr
can
use
web
conduct
global
search
information
retrieval
though
may
find
little
matching
search
software
process
redesign
search
process
redesign
process
reengineering
will
return
much
might
find
case
studies
experience
reports
best
practices
lessons
learned
narrative
documents
posted
academic
non
profit
commercial
sites
clearly
quality
knowledge
results
gleaned
sources
web
may
erratic
found
system
research
studies
searching
spr
heuristics
potentially
relevant
source
materials
found
hyperlinks
can
used
label
associate
connection
materials
heuristics
instantiate
subsequently
heuristic
potential
candidate
use
redesigning
software
process
source
can
browsed
reexamined
help
determine
similarity
relevancy
trajectory
outcome
subsequently
interest
spr
activities
outcomes
grows
spr
case
studies
experience
reports
lessons
learned
best
practices
counter
examples
caveats
may
soon
find
way
onto
web
thus
spr
heuristics
spr
knowledge
repositories
viewed
growth
areas
rather
topic
can
exhaustively
analyzed
limited
effort
3
can
modeling
analysis
simulation
help
spr
growing
body
studies
techniques
address
modeling
analysis
simulation
software
processes
p98
yet
none
extant
studies
address
subject
spr
primary
focus
however
spr
often
implicit
motivating
factor
practical
applications
software
process
modeling
simulation
can
modeling
analysis
simulation
software
processes
employed
directly
support
spr
3
1
modeling
process
redesign
knowledge
already
noted
spr
knowledge
often
cast
heuristics
derived
results
empirical
theoretical
studies
results
may
coded
production
rules
use
rule
based
system
pattern
directed
inference
system
n97
tuples
records
relation
attribute
instance
values
can
stored
relational
database
ks96
nonetheless
alternative
representation
schemes
focus
needs
modeled
focus
modeling
standpoint
need
potentially
model
many
kinds
forms
spr
knowledge
include
process
redesigned
legacy
form
redesign
redesign
heuristics
transformations
applied
process
resulting
redesign
empirical
sources
narrative
case
studies
heuristics
derived
furthermore
might
also
choose
model
sequence
steps
process
different
redesign
heuristics
applied
progressively
transform
process
outcome
modeling
processes
identified
already
within
realm
process
modeling
simulation
capabilities
however
pose
challenges
previously
addressed
software
process
modeling
technologies
furthermore
must
interrelated
interlinked
process
models
greatest
value
external
validation
traceability
incremental
evolution
purposes
vs99
zw98
finally
software
process
modeling
will
play
role
facilitating
continuing
evolution
refinement
spr
knowledge
web
3
2
analyzing
processes
redesign
software
process
models
can
analyzed
number
ways
ms90
sm97
analysis
generally
targeted
improving
quality
process
model
well
detect
prevent
common
errors
omissions
appear
large
models
nonetheless
software
process
redesign
poses
additional
challenges
analyzing
process
models
first
necessary
analyze
consistency
completeness
traceability
correctness
multiple
interrelated
process
models
somewhat
analogous
happens
software
development
project
multiple
notations
system
specification
architectural
design
coding
testing
used
therefore
requiring
analysis
across
well
within
software
notations
second
necessary
account
software
process
resources
throughout
redesign
effort
example
resources
appear
process
replicated
replaced
subsumed
removed
process
spr
can
change
flow
resources
process
thus
want
observe
measure
changes
process
performance
last
one
approach
determining
domain
independent
process
redesign
heuristics
can
apply
results
measuring
structural
attributes
formal
internal
representation
semantic
network
directed
attributed
graph
process
index
selecting
process
redesign
heuristics
n97
n98
sn97
challenges
necessitates
description
refinement
well
characterizing
can
interact
simplifying
complicating
manner
3
3
simulating
processes
redesign
software
process
models
can
simulated
number
interesting
insightful
ways
using
either
knowledge
based
discrete
entity
system
dynamics
systems
p98
s99
however
still
need
another
type
system
simulate
processes
performed
process
users
control
considering
role
simulation
supporting
software
process
redesign
number
challenges
arise
example
much
performance
improvement
individual
redesign
heuristic
realize
will
different
process
workload
throughput
characterizations
lead
corresponding
variations
simulated
performance
process
models
much
performance
improvement
multiple
redesign
heuristics
realize
considered
different
workloads
throughputs
can
simulation
help
reveal
whether
transformations
applied
whether
realized
small
incremental
redesign
improvements
simulation
context
spr
raises
new
interesting
problems
requiring
investigation
experimentation
suggested
earlier
need
simulate
processes
also
transformation
processes
following
results
bpr
research
literature
transforming
process
counterpart
requires
organizational
change
management
considerations
process
users
enacting
controlling
transformation
process
can
benefit
contribute
modeling
analysis
processes
sm97
s99
similarly
users
can
recognize
possible
process
pathologies
observing
graphic
animations
process
simulations
however
logic
process
simulation
may
transparent
easy
understand
terms
process
users
can
readily
comprehend
conventional
approaches
process
simulation
may
empowering
people
primarily
enact
software
use
processes
cf
sn97
instead
another
option
may
needed
one
process
users
can
interactively
traverse
simulate
new
process
process
via
computer
supported
process
walk
fly
simulation
user
roles
simply
modeled
objects
procedural
functions
instead
users
play
roles
order
get
first
person
view
feel
new
process
analogous
flight
simulators
used
help
train
aircraft
pilots
user
participation
may
raise
shared
awareness
alternatives
make
sense
transformations
needed
transition
process
sequenced
within
organizational
setting
simulation
spr
raises
need
new
approaches
person
loop
simulation
environments
4
approach
results
given
challenges
identified
previous
section
modeling
analysis
simulation
can
support
spr
section
presents
approach
initial
results
effort
three
areas
4
1
modeling
approach
results
developing
models
processes
spr
used
two
tools
first
order
represent
spr
knowledge
formally
reason
loom
knowledge
representation
system
selected
mb95
loom
mature
language
environment
constructing
ontologies
intelligent
systems
can
accessed
web
vr
99
using
loom
re
implement
articulator
process
meta
model
ontology
ms90
ms96
formal
models
software
business
processes
classification
taxonomies
process
redesign
heuristics
can
represented
manipulated
turn
process
knowledge
can
analyzed
queried
browsed
relevant
redesign
alternatives
processes
can
identified
linked
source
materials
web
nonetheless
loom
impose
discipline
formally
representing
declarative
knowledge
structures
terms
concepts
object
pattern
types
relations
link
types
associate
concept
instances
concept
link
attribute
values
loom's
deductive
classifier
utilizes
forward
chaining
semantic
unification
object
oriented
truth
maintenance
technologies
enables
compile
declarative
knowledge
network
designed
efficiently
support
line
deductive
query
processing
mb95
loom's
classifier
can
used
taxonomically
classify
update
spr
knowledge
base
new
spr
cases
entered
formally
modeled
turn
enables
spr
knowledge
web
evolve
automated
support
vs99
second
order
support
visualization
knowledge
bases
process
models
constructed
web
browser
interface
loom
system
called
ontosaurus
used
on99
ontosaurus
client
side
tool
loom
server
loaded
one
knowledge
bases
replies
queries
produces
web
pages
describing
several
aspects
knowledge
base
also
able
provide
simple
facilities
producing
general
queries
editing
contents
knowledge
bases
figure
1
shows
browser
window
accessing
ontosaurus
display
consists
three
window
panels
toolbar
top
reference
left
side
content
right
side
toolbar
panel
consists
buttons
perform
various
operations
select
domain
theory
display
theory
save
updates
etc
reference
content
panels
designed
display
contents
selected
ontology
links
panels
display
contents
content
window
facilitates
exploring
various
links
associated
word
concept
reference
window
without
need
continuously
go
back
forth
bookmark
window
holds
user
selected
links
web
pages
ontosaurus
pages
managed
buttons
bottom
bookmark
window
now
describe
built
knowledge
based
system
represent
diagnose
models
spr
system
based
ontology
business
processes
expressed
loom
loom
provides
semantic
network
knowledge
representation
framework
based
description
logics
nodes
loom
semantic
network
define
concepts
roles
slots
specify
attributes
key
feature
description
logic
representations
semantics
representation
language
precisely
specified
precise
specification
makes
possible
classifier
determine
whether
one
concept
subsumes
another
based
solely
formal
definitions
two
concepts
classifier
important
tool
evolving
ontologies
can
used
automatically
organize
set
loom
concepts
classification
hierarchy
taxonomy
based
solely
definitions
capability
particularly
important
ontology
becomes
large
since
classifier
will
find
subsumption
relations
people
might
overlook
well
modeling
errors
make
knowledge
base
inconsistent
figure
1
ontosaurus
display
process
concept
definition
loaded
reference
window
process
redesign
instance
contents
window
overall
30
process
redesign
heuristics
identified
classified
far
six
taxonomies
also
identified
grouping
organizing
access
bpr
cases
found
web
taxonomies
classify
index
cases
according
generic
type
organization
process
redesign
financial
manufacturing
research
software
development
etc
problems
existing
process
line
information
processing
workflow
delays
lack
information
sharing
etc
solutions
sought
redesigned
process
automate
line
information
processing
tasks
streamline
workflow
use
email
databases
share
information
etc
use
intranet
extranet
web
based
process
redesign
solutions
build
intranet
portal
project
staff
information
store
version
controlled
software
development
objects
web
server
use
html
forms
data
entry
validation
process
steps
etc
spr
guidelines
lessons
learned
explicit
methods
steps
understand
model
process
identify
process
redesign
alternatives
involve
process
users
selecting
redesign
alternatives
etc
spr
heuristics
parallelize
sequence
mutually
exclusive
tasks
unfold
multi
stage
review
approval
loops
disintermediate
flatten
project
management
structures
move
process
data
quality
validation
checks
beginning
logically
centralize
information
can
shared
rather
routed
etc
turn
taxonomies
represented
hierarchically
nested
indices
web
links
corresponding
cases
navigation
nested
indices
portals
familiar
web
users
typically
taxonomy
indexes
60
120
cases
total
set
200
found
web
studied
means
cases
appear
one
taxonomy
another
cases
might
appear
one
still
others
might
appear
taxonomies
judged
possess
minimal
information
needed
characterization
modeling
4
2
analysis
approach
results
first
challenge
analysis
processes
redesign
point
three
types
problems
arise
modeling
business
processes
first
consistency
problems
refer
conflicts
specification
several
properties
given
process
example
typical
consistency
problem
process
name
one
outputs
something
occurs
surprisingly
often
practice
perhaps
output
often
visible
characteristic
process
second
completeness
problems
cover
incomplete
specifications
process
instance
typical
completeness
problem
occurs
specify
process
inputs
miracle
can
produce
outputs
inputs
outputs
black
hole
inputs
disappear
without
generating
output
third
traceability
problems
caused
incorrect
specification
origin
model
author
agent
responsible
authoring
update
source
materials
derived
subsequently
process
model
consistent
complete
traceable
can
said
internally
correct
thus
solving
model
checking
problems
required
process
models
formalized
one
main
reasons
loom
interesting
formal
process
representation
language
capability
represent
abstract
patterns
data
definition
problems
discussed
capability
useful
producing
simple
readable
representations
model
checking
analyses
example
possible
define
incomplete
process
model
plain
english
process
outputs
black
hole
can
described
loom
process
provides
exactly
zero
resources
defconcept
black
hole
process
exactly
0
process
provide
resource
using
process
modeling
representations
discussed
user
describes
process
model
ontosaurus
processing
loom
system
diagnoses
model
provided
one
advantages
using
loom
define
instance
loom
automatically
applies
classifier
engine
find
concepts
match
apply
instance
offers
big
advantage
since
need
specify
algorithm
analysis
process
instead
process
models
analyzed
automatically
new
model
specified
addition
classifier
performs
truth
maintenance
therefore
process
model
updated
correct
problem
found
system
classifier
will
immediately
retract
assertion
problem
applies
process
thus
classifier
automates
knowledge
maintenance
activity
order
provide
direct
interface
diagnosis
system
ontosaurus
browser
extended
display
two
new
types
pages
first
displays
description
process
less
loom
specific
way
reporting
purposes
second
displays
list
problems
found
current
process
model
input
figure
2
shows
screenshot
web
page
constructed
server
describe
problems
found
model
sample
process
two
challenges
analyzing
processes
support
spr
can
addressed
common
capability
builds
one
just
described
since
formal
representation
software
process
model
can
viewed
semantic
network
directed
attributed
graph
possible
measure
complexity
attributes
network
graph
basis
graph
transformation
simplification
optimization
means
measures
richly
attributed
process
flow
chart
reveal
attributes
number
process
steps
length
sequential
process
segments
degree
parallelism
process
control
flow
others
n97
n98
subsequently
redesign
heuristics
can
coded
patterns
structure
process
representation
turn
becomes
possible
cast
process
redesign
heuristic
production
rule
pattern
directed
inference
rule
whose
antecedent
stipulates
process
complexity
measure
pattern
whose
consequent
specifies
optimization
transformation
applied
process
representation
n98
example
analyzing
software
process
model
sequence
process
steps
linear
flow
inputs
outputs
steps
mutual
exclusive
process
steps
can
performed
parallel
transformation
reduces
time
required
execute
redesigned
process
sequence
thus
process
analysis
spr
can
focus
measurement
attributes
formal
representation
software
process
model
internally
correct
similar
compilers
perform
code
optimizations
compilation
parsing
semantic
analysis
prior
code
generation
figure
2
generated
report
loom
analysis
process
redesign
case
4
3
simulation
approach
results
questions
pertaining
simulated
process
throughput
performance
user
workloads
process
redesign
can
already
addressed
process
simulation
tools
techniques
p98
s99
significant
advances
required
similarly
knowledge
based
simulation
capabilities
can
employed
determine
process
performance
improvements
multiple
redesign
heuristics
used
create
alternative
scenarios
software
process
enactment
cf
cjs94
s99
nonetheless
challenge
support
transformation
software
processes
redesigned
alternatives
addressed
existing
process
simulation
approaches
thus
new
direction
required
one
key
requirement
managing
organizational
transformation
redesigned
software
process
engagement
motivation
empowerment
process
users
goal
enable
users
direct
control
process
redesign
efforts
well
select
process
redesign
alternatives
implementation
enactment
direct
use
available
simulation
packages
may
present
obstacle
many
process
users
another
means
support
process
management
change
management
needed
approach
choose
engage
process
user
community
multi
site
organizational
setting
partner
redesigning
software
use
processes
sn97
particular
developed
provided
demonstrated
prototype
wide
area
process
walkthrough
simulator
enable
process
redesign
participants
means
model
redesign
walkthrough
processes
span
multiple
settings
accessed
internet
environment
10
process
redesign
heuristics
found
applicable
process
users
chose
9
implement
sn97
eventually
achieved
factor
10x
cycle
time
reduction
reductions
number
process
steps
2
1
10
1
software
use
processes
redesigned
sn97
process
simulator
played
central
role
redesign
demonstration
prototyping
processes
realized
4
3
1
process
simulator
example
process
prototyping
computer
supported
technique
enabling
software
process
models
enacted
without
integrating
tools
artifacts
required
modeled
process
sm97
allows
process
users
ability
interactively
observe
browse
process
model
step
step
across
levels
process
decomposition
modeled
using
common
web
browser
graphic
user
interface
creating
basic
process
execution
run
time
environment
entails
taking
prototyped
process
model
integrating
tools
helper
applications
manipulate
process
task
artifacts
attached
manually
automatically
generated
web
intranet
hyperlinks
urls
ns99
consider
following
example
simple
software
development
process
displayed
figure
3
figure
3
simple
software
development
process
depicted
directed
graph
process
can
modeled
terms
process
flow
precedence
relations
decomposition
can
also
attributed
user
roles
tools
artifacts
process
step
suggested
directed
attributed
graph
constitutes
internal
representation
process
can
viewed
browsed
hyperlinked
structure
can
navigated
web
browser
resulting
capability
allows
process
users
ability
traverse
walkthrough
modeled
process
task
task
according
modeled
process's
control
flow
turn
realizes
web
based
intranet
based
process
simulator
system
figure
4
provides
view
set
artifacts
might
associated
process
figure
3
figure
5
provides
similar
view
selected
task
edit
tool
emacs
editor
artifact
loaded
emacs
edit
buffer
associated
user
role
developer
shown
addition
lower
right
frame
figure
5
displays
record
history
process
task
events
transpired
far
figure
4
set
artifacts
associated
software
process
figure
3
using
process
prototyping
technology
work
process
users
iteratively
incrementally
model
processes
subsequently
modeled
processes
interactively
traversed
using
web
browser
interface
resulting
process
simulator
process
users
independent
time
location
access
process
model
provide
feedback
refinement
evaluation
saw
web
based
process
simulator
simulators
successful
helping
process
users
learn
operational
sequences
problem
solving
tasks
constitute
software
process
cf
kg95
gg
97
flight
simulators
already
demonstrated
result
many
times
flight
operations
process
users
aircraft
pilots
process
walkthrough
simulators
can
identify
potential
patterns
software
process
user
behavior
well
potential
performance
workflow
bottlenecks
use
information
turn
can
help
identify
parameter
values
discrete
event
simulation
process
however
yet
attempted
figure
5
software
process
enactment
step
presented
process
simulator
overall
discrete
event
knowledge
based
simulation
systems
together
process
walkthrough
simulators
constitute
learning
knowledge
sharing
measurement
experimentation
environment
can
support
empower
process
users
redesigning
software
processes
cf
bmr94
kg95
gg
97
therefore
process
simulation
capabilities
together
organizational
change
management
techniques
help
minimize
risk
failure
redesigning
software
processes
used
complex
organizational
settings
5
discussion
given
introduction
subject
spr
explanation
explanation
software
process
modeling
analysis
simulation
fit
demonstrated
can
operate
examples
still
work
done
thus
purpose
discussion
identify
future
needs
become
apparent
investigation
first
whether
dealing
real
software
process
real
world
setting
browsing
one
found
web
capturing
formalizing
otherwise
modeling
processes
cumbersome
part
problem
hand
organizations
lack
explicit
well
defined
well
managed
processes
starting
point
spr
effort
consequently
attention
often
directed
focus
creation
alternatives
without
establishing
baseline
without
baseline
spr
efforts
will
increase
likelihood
failure
bmr94
ds90
gk95
hrw93
thus
need
new
ways
means
rapid
capture
codification
software
processes
facilitate
spr
second
need
rapid
generation
processes
models
spr
heuristics
well
tools
techniques
acquiring
applying
appear
significant
face
value
can
help
rapidly
produce
process
alternatives
however
knowledge
construct
enact
transformation
process
way
incorporates
change
management
techniques
process
management
tools
open
problem
study
needed
third
spr
heuristics
transformation
taxonomies
may
serve
foundation
developing
theoretical
framework
best
represent
spr
knowledge
similarly
framework
stipulate
kinds
software
process
concepts
links
instances
represented
modeled
analyzed
facilitate
spr
nonetheless
also
practical
need
design
tailor
spr
taxonomies
specific
software
process
domains
organizational
settings
point
unclear
whether
heuristics
redesigning
software
use
processes
equally
applicable
software
acquisition
development
evolution
processes
can
said
combination
types
software
processes
fourth
preceding
section
software
tools
supporting
modeling
analysis
simulation
software
processes
redesign
introduced
however
tools
developed
start
single
integrated
environment
thus
capabilities
can
demonstrated
help
elucidate
possible
possible
practical
widespread
deployment
production
usage
thus
need
new
environments
support
modeling
analysis
simulation
software
processes
can
redesigned
life
cycle
engineered
sm97
continuously
improved
knowledge
automatically
captured
web
last
highlighted
results
bpr
research
studies
first
hand
experience
sn97
process
users
need
involved
redesigning
processes
accordingly
temptation
seek
fully
automated
approaches
generating
alternative
process
designs
analysis
process
model
must
mitigated
question
understand
fully
automated
spr
desirable
kinds
organizational
settings
example
can
spr
situations
automated
redesign
may
suitable
goal
outcome
organizational
settings
process
users
seek
empowerment
involvement
redesigning
controlling
process
structures
workflow
settings
ability
access
search
query
select
evaluate
possible
process
redesign
alternatives
system
capabilities
described
may
desirable
cf
sn97
thus
ultimate
purpose
support
environment
spr
may
supporting
empowering
process
users
direct
redesign
processes
rather
automating
spr
beyond
one
goals
spr
minimize
risk
failed
spr
effort
solutions
focus
exclusively
development
technology
driven
technology
approaches
spr
seemed
doomed
fail
thus
remains
challenge
choose
technology
path
spr
effectively
demonstrate
approach
can
succeed
kinds
organizational
settings
kinds
skilled
process
participants
6
conclusions
paper
addresses
three
research
questions
identify
describe
software
process
redesign
software
process
modeling
simulation
fit
approach
spr
might
look
like
spr
proposed
technique
achieving
radical
order
magnitude
improvements
reductions
software
process
attributes
spr
builds
empirical
theoretical
results
area
business
process
reengineering
however
also
builds
knowledge
can
gathered
web
though
quality
knowledge
variable
sources
derived
experience
reports
case
studies
lessons
learned
best
practices
similar
narratives
can
formally
represented
hyperlinked
browsed
subsequent
use
reuse
central
result
knowledge
collected
far
spr
must
combine
focus
techniques
changing
organization
software
processes
redesigned
well
identifying
software
engineering
information
technology
based
process
management
tools
concepts
can
applied
software
process
modeling
analysis
simulation
technology
can
successfully
employed
support
spr
particular
knowledge
based
tools
techniques
concepts
appear
offer
promising
avenue
exploration
application
regard
however
new
process
modeling
analysis
simulation
challenges
also
identified
give
rise
need
investigate
new
tools
techniques
capturing
representing
utilizing
new
forms
process
knowledge
knowledge
spr
heuristics
can
play
central
role
rapidly
identifying
process
redesign
alternatives
software
process
simulation
techniques
particular
may
require
support
person
driven
process
simulations
enable
process
users
observe
walk
fly
process
redesign
alternatives
finally
software
process
modeling
analysis
simulation
capabilities
support
spr
activities
may
deployed
engage
facilitate
needs
users
share
processes
across
multiple
organizational
settings
using
mechanisms
can
deployed
web
last
approach
spr
utilizes
web
based
tools
software
process
modeling
analysis
person
driven
simulation
presented
initial
experiences
using
tools
together
business
process
reengineering
change
management
techniques
embody
indicates
objective
order
magnitude
reductions
software
process
cycle
time
process
steps
can
demonstrated
achieved
complex
organizational
settings
whether
results
can
replicated
classes
software
processes
acquisition
development
usage
evolution
remains
subject
investigation
similarly
research
problems
identified
advances
software
process
modeling
simulation
can
lead
experimental
studies
theoretical
developments
art
practice
software
process
redesign
acknowledgements
research
described
paper
benefit
collaborations
following
people
andre
valente
usc
information
sciences
institute
developed
modeling
analysis
system
prototype
loom
ontosaurus
displayed
figures
1
2
john
noll
now
computer
science
dept
university
colorado
denver
developed
modeling
process
simulation
walkthrough
intranet
shown
figures
4
5
process
measurement
technique
rule
based
formulation
used
automated
process
redesign
analysis
first
developed
mark
nissen
now
systems
management
dept
naval
postgraduate
school
monterey
ca
contributions
gratefully
acknowledged
references
apl95
ahrens
prywes
lock
software
process
reengineering
toward
new
generation
case
technology
systems
software
30
1
71
84
1995
bmr94
bashein
markus
riley
preconditions
bpr
success
prevent
failures
information
systems
management
11
2
7
13
spring
1994
cjs94
caron
jarvenpaa
stoddard
business
reengineering
cigna
corporation
experiences
lessons
learned
first
five
years
mis
quarterly
18
3
233
250
september
1994
dp98
davenport
prusak
working
knowledge
organizations
manage
know
harvard
business
school
press
boston
ma
1998
ds90
davenport
short
new
industrial
engineering
information
technology
business
process
redesign
sloan
management
review
34
4
1
27
1990
ess95
earl
sampler
short
strategies
business
process
reengineering
evidence
field
studies
management
information
systems
12
1
31
56
1995
gj
95
grover
jeong
kettinger
wang
implementation
business
process
reengineering
management
information
systems
12
1
104
144
1995
gg
97
guha
grover
kittenger
teng
business
process
change
organizational
performance
exploring
antecedent
model
management
information
systems
14
1
119
154
1997
hrw93
hall
rosenthal
wade
make
reengineering
really
work
harvard
business
review
119
131
november
december
1993
h90
hammer
reengineering
work
automate
obliterate
harvard
business
review
68
4
104
112
july
august
1990
jw
97
janz
wetherbe
davis
noe
reengineering
systems
development
process
link
autonomous
teams
business
process
outcomes
management
information
systems
14
1
41
68
1997
kg95
kettinger
grover
special
section
toward
theory
business
process
change
management
management
information
systems
12
1
9
30
1995
ks82
kling
scacchi
web
computing
computer
technology
social
organization
yovits
ed
advances
computers
21
3
90
1982
ks96
ku
suh
tecuci
building
intelligent
business
process
reengineering
system
case
based
approach
intelligent
systems
accounting
finance
management
5
1
25
39
1996
mb95
macgregor
bates
inside
loom
description
classifier
sigart
bulletin
2
3
88
92
1995
ms90
mi
scacchi
knowledge
based
environment
modeling
simulating
software
engineering
processes
ieee
trans
knowledge
data
engineering
2
3
283
294
1990
also
appears
nikkei
artificial
intelligence
20
1
176
191
1991
japanese
ms96
mi
scacchi
meta
model
formulating
knowledge
based
models
software
development
decision
support
systems
17
3
313
330
1996
n97
nissen
reengineering
rfp
process
knowledge
based
systems
acquisition
review
quarterly
4
1
87
100
1997
n98
nissen
redesigning
reengineering
measurement
driven
inference
mis
quarterly
22
4
509
534
december
1998
ns99
noll
scacchi
supporting
software
development
projects
virtual
enterprises
journal
digital
information
1
4
february
1999
o98
o'leary
enterprise
knowledge
management
computer
31
3
54
61
1998
on99
ontosaurus
web
browser
home
page
http
www
isi
edu
isd
ontosaurus
html
p98
proceedings
prosim'98
workshop
software
process
simulation
modeling
silver
falls
june
1998
s98
scacchi
modeling
simulating
enacting
complex
organizational
processes
life
cycle
approach
prietula
carley
gasser
eds
simulating
organizations
computational
models
institutions
groups
aaai
press
mit
press
menlo
park
ca
153
168
1998
s99
scacchi
experiences
software
process
simulation
modeling
systems
software
46
2
183
192
1999
sb98
scacchi
boehm
virtual
system
acquisition
approach
transitions
acquisition
review
quarterly
5
2
185
216
spring
1998
sm97
scacchi
mi
process
life
cycle
engineering
knowledge
based
approach
environment
intelligent
systems
accounting
finance
management
6
83
107
1997
sn97
scacchi
noll
process
driven
intranets
life
cycle
support
process
reengineering
ieee
internet
computing
1
5
42
49
september
1997
sn97a
sia
neo
reengineering
effectiveness
redesign
organizational
control
case
study
inland
revenue
authority
singapore
management
information
systems
14
1
69
92
spring
1997
vr
99
valente
russ
macgregor
swartout
building
re
using
ontology
air
campaign
planning
ieee
intelligent
systems
14
1
27
36
1999
vs99
valente
scacchi
developing
knowledge
web
business
process
redesign
ijcai
99
workshop
workflow
process
management
august
1999
zw98
zelkowitz
wallace
experimental
models
validating
technology
computer
31
5
23
3
1
may
1998
