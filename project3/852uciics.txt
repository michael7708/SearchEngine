smart ics core knowledge skills chart bren school information computer sciences 
ics 22 cse 22 
site
will
look
much
better
browser
supports
web
standards
accessible
browser
internet
device
school
bren
ics
mission
dean's
welcome
bren
gift
donald
bren
hall
visit
bren
school
contact
us
equity
diversity
departments
computer
science
informatics
statistics
research
research
areas
research
centers
research
highlights
education
graduate
apply
degrees
tuition
costs
courses
faq
research
areas
policies
forms
contact
counselor
graduate
housing
computing
support
visit
bren
school
undergraduate
computing
support
computer
lab
information
contact
counselor
course
listings
degrees
faq
financial
aid
honors
program
housing
ics
jobs
mentor
program
policies
recently
admitted
student
council
student
life
student
resources
tuition
costs
prospective
undergrad
uci
parents
people
faculty
staff
graduate
students
community
alumni
friends
parent
programs
leadership
council
make
gift
news
get
involved
tech
talks
information
sessions
sponsor
projects
leadership
council
corporate
partners
sponsor
interns
icsjobs
butterworth
competition
bren
school
home
undergraduate
admissions
transfer
students
smart
ics
program
core
knowledge
skills
smart
ics
core
knowledge
skills
chart
core
knowledge
skills
ics
22
cse
22
introduction
computer
science
ii
courses
6d
21
23
51
52
132
sections
catalog
description
course
prerequisites
restrictions
prerequisite
skills
concepts
minimum
knowledge
skills
ics
22
cse
22
catalog
descriptionsecond
three
quarter
introductory
sequence
abstract
behavior
classic
data
structures
stacks
queues
priority
queues
tables
trees
alternative
implementations
analysis
time
space
efficiency
recursion
object
oriented
functional
programming
ics
22
cse
22
course
prerequisitesics
21
cse
21
grade
better
ics
22
cse
22
restrictionsonly
one
course
ics
22
cse
22
ics
h22
informatics
42
may
taken
credit
ics
22
cse
22
knowledge
prerequisites
skills
conceptsstudents
must
passed
ics
21
cse
21
grade
better
expected
knowledge
skills
specified
ics
21
cse
21
ics
22
cse
22
minimum
knowledge
skillsalgorithm
analysis
derive
polynomial
describing
execution
time
simple
iterative
code
nested
loops
proficiency
'big'
notation
recognize
use
providing
machine
language
problem
size
independent
description
algorithm's
performance
mastery
recognize
distinguish
growth
rate
common
function
classes
including
exponential
polynomial
squared
log
linear
log
constant
mastery
recognize
limitations
distinguishing
constant
factor
differences
performance
applying
small
mastery
recognize
informally
notation
common
operations
classic
data
structures
described
mastery
given
polynomial
state
notation
mastery
recognize
informally
notation
simple
recursive
algorithm
using
recursion
trace
diagram
proficiency
reason
performance
functions
programs
evaluating
significance
proposed
optimizations
trade
offs
constant
time
improvements
less
important
large
enough
notation
improvements
frequently
executed
methods
better
candidates
optimization
rarely
executed
routines
proficiency
classic
data
structures
describe
abstract
behavior
describing
changes
results
series
operations
stack
push
pop
top
isempty
mastery
queue
enqueue
dequeue
front
isempty
mastery
map
indexed
key
insert
search
member
remove
isempty
distinguishing
sorted
unsorted
maps
mastery
recognize
operations
inconsistent
abstract
behavior
stack
queue
map
direct
access
third
item
stack
mastery
given
real
world
problem
whose
solution
one
data
structures
serves
appropriate
model
identify
data
structures
appropriate
proficiency
conventional
algorithms
recognize
describe
terms
behavior
notation
implement
following
conventional
algorithms
linear
binary
search
mastery
opening
reading
writing
closing
handling
errors
associated
sequential
text
files
mastery
arraylist
singly
linked
list
traversing
applying
operation
element
list
mastery
moving
within
adding
items
deleting
items
list
mastery
implementation
understand
distinction
single
dimension
arrays
arraylists
able
make
appropriate
choice
use
implementation
using
arrays
non
list
use
cases
arrays
boolean
flags
proficiency
understand
appropriate
use
array
arraylist
based
implementations
stacks
queues
maps
proficiency
implement
singly
linked
list
iterator
mastery
implement
dynamically
allocated
linked
implementations
stacks
queues
maps
sorted
unsorted
simple
linear
fashion
linked
lists
proficiency
identify
costs
advantages
coding
techniques
dynamically
allocated
linked
data
structures
single
linking
trailing
pointers
double
linking
header
trailer
nodes
vs
head
tail
pointers
circular
vs
non
circular
linking
proficiency
recognize
performance
implications
time
storage
alternative
implementations
covered
proficiency
recognize
trade
situations
using
space
saves
execution
time
vice
versa
proficiency
recursion
recognize
implement
recursive
algorithms
three
types
tail
recursive
linear
non
tail
recursive
return
value
multiple
recursive
calls
proficiency
sorting
understand
general
concept
sorting
applies
numbers
also
arbitrary
comparable
objects
mastery
object
oriented
programming
navigate
documentation
class
hierarchy
identify
appropriate
class
methods
task
proficiency
design
object
oriented
solutions
problems
using
data
structures
described
proficiency
write
understand
program
containing
multiple
classes
arranged
inheritance
hierarchy
well
code
uses
inheritance
hierarchy
polymorphically
proficiency
recognize
situations
inheritance
preferable
design
strategy
containment
composition
vice
versa
proficiency
recognize
design
patterns
offer
well
understood
solutions
commonly
occurring
object
oriented
design
problems
exposure
understand
role
appropriate
use
interfaces
java
proficiency
java
programming
write
code
read
write
sequential
text
external
files
proficiency
write
code
using
standard
exceptions
appropriately
including
exceptions
arise
dealing
files
mastery
write
programmatic
unit
tests
verify
portions
program
behave
specified
scratch
using
testing
framework
junit
proficiency
trace
flow
control
code
raises
exceptions
handles
via
catch
clauses
proficiency
recognize
importance
resource
deallocation
including
role
java's
automatic
garbage
collector
resources
files
require
explicit
deallocation
java
exposure
write
static
methods
mastery
alternative
approaches
program
design
functional
programming
describe
differences
functional
programming
paradigm
object
oriented
imperative
programming
proficiency
recognize
situations
functional
programming
advantageous
approach
exposure
return
top
page
uc
copyright
uci
directory
intranet
site
map
icswebmaster
ics
uci
edu
updated
june
11
2012
