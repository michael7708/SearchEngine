writing methods 

writing
classes
javadoc
introduction
computer
science
iii
ics
21
22
23
introduction
already
learned
lot
using
classes
prewritten
libraries
reading
javadoc
understand
lecture
will
discuss
form
meaning
writing
java
classes
javadoc
will
examine
language
features
already
used
now
perspective
writing
classes
discussion
starts
investigating
methods
general
will
discuss
write
static
methods
first
learn
special
main
method
application
program
simple
library
classes
math
prompt
programs
can
import
will
learn
call
frames
pictures
illustrate
universal
parameter
passing
mechanism
java
copy
value
will
also
learn
write
methods
throw
exceptions
called
objects
arguments
meet
preconditions
finally
will
learn
write
interesting
classes
focusing
declaring
fields
mostly
instance
variables
using
writing
constructors
methods
process
will
see
use
various
features
eclipse
ide
edit
view
debug
perspective
facilitate
analyzing
writing
debugging
classes
method
definitions
parameter
initialization
start
discussing
examining
simple
method
defines
min
method
inside
math
class
illustrates
interesting
aspects
static
method
definitions
reading
code
quickly
scan
ebnf
method
definition
public
static
int
min
int
int
divide
method
definitions
two
parts
header
body
method
header
comprises
access
modifiers
public
static
return
type
int
method
name
min
parameters
int
int
method
threw
exceptions
listed
next
familiar
reading
method
headers
javadoc
previous
lectures
method
body
block
statement
immediately
follows
method
header
lecture
will
focus
attention
writing
block
statements
use
parameter
names
just
like
variable
names
fact
often
call
parameter
variables
make
similarity
explicit
already
discussed
method
called
parameter
variables
always
initialized
matching
arguments
first
method
body
executes
using
values
compute
return
result
can
also
use
local
variables
declared
intialized
block
help
computation
wrote
statement
system
println
math
min
3
5
display
3
declared
int
3
8
wrote
statement
system
println
math
min
3
5
display
8
generally
call
method
writing
name
followed
parentheses
arguments
one
parameter
method's
header
header
parameters
separated
commas
arguments
separated
commas
well
call
method
java
first
evaluates
argument
can
simple
complicated
expression
transmits
passes
matching
parameter
just
means
java
uses
argument's
value
initialize
matching
parameter
method
equivalent
writing
first
parameter
first
argument
second
parameter
second
argument
etc
thus
calling
math
max
3
5
first
parameter
initialized
value
14
3
5
equivalent
3
5
likewise
second
parameter
initialized
value
8
equivalent
java
executes
body
method
typically
performs
computation
using
initialized
parameters
finally
returns
result
mechanism
discuss
next
section
return
statement
will
now
discuss
another
java
statement
return
statement
whose
ebnf
simply
stated
return
keyword
return
statement
return
expression
syntax
constraint
java
requires
expression
must
compatible
return
type
specified
method's
header
either
implicitily
convertible
void
method
constructor
java
requires
us
discard
option
altogether
typically
expression
literal
variable
sometimes
general
expression
using
operators
method
calls
example
will
see
methods
include
return
statements
return
true
return
return
divisor
0
use
return
statement
terminate
method
specify
result
return
whenever
method
executes
return
matter
else
inside
loops
try
catch
method
immediately
terminates
returns
method
called
call
site
method
returns
value
method
call
replaced
value
returns
result
ideally
method
contain
just
one
return
statement
end
fact
can
prove
mathematically
always
way
write
method
one
return
statement
sometimes
methods
easier
understand
multiple
return
statements
thus
will
adopt
pragmatic
approach
putting
simplicity
paramount
aspect
code
write
multiple
return
statements
make
method
simpler
easier
understand
use
able
argue
just
use
sloppy
argue
example
min
method
defined
two
return
statements
simpler
one
one
return
statement
public
static
int
min
int
int
int
answer
instead
one
statement
method's
body
sequence
three
statements
declare
local
variable
decide
initialize
return
value
original
method
just
chose
parameters
returns
without
declaring
local
variable
think
original
method
simpler
easier
understand
fact
method
actually
defined
java
library
using
single
return
conditional
expression
public
static
int
min
int
int
return
sample
methods
following
method
definitions
compute
useful
interesting
values
practice
many
useful
methods
short
like
study
headers
especially
bodies
public
static
boolean
isleapyear
int
year
return
year
4
0
year
100
0
year
400
0
method
hides
messy
calculation
inside
well
named
easy
call
method
just
one
parameter
year
calculation
public
static
boolean
isbetween
int
low
int
middle
int
high
return
low
method
captures
common
pattern
explored
low
correctly
compute
required
value
correct
way
perform
test
bit
verbose
calling
method
can
simplify
code
public
static
double
distance
double
x1
double
y1
double
x2
double
y2
return
math
sqrt
x1
x2
x1
x2
y1
y2
y1
y2
method
computes
simple
euclidean
distance
two
points
must
specified
four
parameters
coordinate
point
although
better
method
use
two
parameters
instance
point
class
represent
four
values
methods
quite
parameters
see
even
public
static
boolean
incircle
double
centerx
double
centery
double
centerradius
double
pointx
double
pointy
return
distance
centerx
centery
pointx
pointy
method
calls
distance
compute
whether
point
whose
coordinates
pointx
pointy
falls
within
circle
whose
center's
coordinates
centerx
centery
whose
radius
centerradius
note
four
coordinate
parameters
incircle
become
arguments
call
distance
role
switch
common
methods
calling
methods
layering
methods
top
methods
kept
small
new
method
accomplishes
much
methods
calls
building
layer
mechanism
enables
power
programming
public
static
int
factorial
int
int
answer
1
int
2
method
interesting
declares
two
local
variables
answer
methods
can
declare
use
local
variables
along
parameters
one
finally
returned
writing
methods
beginners
sometimes
difficulty
determining
declare
parameter
variables
declare
local
variables
thinking
prototypes
helps
information
must
communicated
method
arguments
must
stored
parameter
variable
local
variables
help
computation
need
initialized
arguments
need
specify
factorial
computing
answer
always
initialized
1
always
initialized
2
loop
methods
fewest
number
parameters
possible
variable
can
declared
locally
public
static
int
forint
string
message
try
return
integer
parseint
prompt
forstring
message
catch
numberformatexception
nfe
system
println
enter
int
please
public
static
int
forint
string
message
int
low
int
high
int
answer
prompt
forint
message
low
high
utility
isbetween
low
answer
high
return
answer
system
println
entered
value
range
low
hight
overloaded
forint
methods
two
different
signatures
two
favorites
general
purpose
methods
can
use
many
different
programs
fact
useful
put
methods
prompt
class
can
easily
use
programs
write
also
one
calls
illustrates
power
composing
methods
even
first
calls
two
methods
integer
parseint
prompt
forstring
first
forint
uses
try
catch
ensure
value
entered
user
read
string
fact
legal
int
case
immediately
returns
value
user
enter
legal
value
integer
parseint
method
instead
throws
numberformatexception
return
can
finish
caught
processed
printing
error
message
executing
loop
prompting
user
enter
value
second
forint
passed
three
parameters
used
coordinate
prompting
user
message
enter
value
lower
higher
bound
method
rejects
entered
values
outside
range
prompting
user
enters
value
range
calling
previously
defined
forint
method
method
worry
exceptions
caused
incorrect
data
entry
method
handles
kinds
errors
layering
methods
useful
notice
sophisticated
use
return
statements
terminate
method
return
answer
need
break
statement
terminating
method
loop
terminated
public
static
int
multiroll
diceensemble
int
times
int
sum
0
int
1
finally
method
rolls
diceensemble
object
required
number
times
returning
sum
pips
seen
rolls
can
pass
reference
types
parameters
methods
easily
primitive
types
use
generic
identifier
index
counts
appropriate
number
throws
used
nowhere
else
code
also
written
countdown
loop
parameter
intialized
times
0
times
noting
parameter
times
initialized
method
called
matching
argument
loop
need
initialize
summary
can
define
simply
named
method
parameters
needed
calculation
body
hides
messy
calculation
can
debug
place
class
easily
use
software
write
forgetting
code
inside
always
one
method
name
away
hiding
whatever
complexity
program
requires
layering
methods
can
quickly
amplify
powers
hand
simulation
via
call
frames
section
will
begin
learn
hand
simulate
method
calls
using
call
frame
mechanism
mostly
concerned
passing
arguments
method
call
site
parameters
method
definition
will
expand
upon
mechanism
show
real
predictive
power
discuss
passing
references
objects
methods
next
section
general
form
call
frame
always
concrete
example
see
write
call
frame
min
method
definition
called
math
min
1
first
parameter
mechanism
java
called
copy
value
copy
value
java
copies
value
argument
arguments
evaluated
method
called
call
site
parameter
variable
pictured
always
box
labeled
parameter's
name
type
parameters
just
special
kinds
variables
always
initialized
value
matching
argument
call
site
local
variables
leave
blank
part
call
frame
call
frame
specified
parameters
initialized
java
executes
body
method
refers
parameters
compute
value
result
method
returns
5
replaces
method
call
call
site
system
println
statement
ultimately
5
printed
console
another
example
call
frame
factorial
method
note
returns
call
site
value
returns
result
stored
variable
besides
single
parameter
method
declares
two
local
variables
answer
loop
index
variable
initialized
declarations
1
2
respectively
java
executes
body
method
note
state
changes
variable
illustrated
crossing
old
value
writing
new
value
advanced
call
frames
section
will
explore
call
frames
bit
detail
looking
closely
difference
changing
state
variable
changing
state
object
referred
variable
start
hand
simulating
call
following
method
public
static
void
swap
int
int
int
temp
temp
assume
method
defined
class
named
utility
declare
int
5
8
call
utility
swap
values
ultimately
stored
variables
swapped
remain
unchanged
call
frame
shows
us
important
execute
return
statement
void
method
none
code
java
automatically
equivalent
return
reaches
end
block
body
method
java
allow
implicit
return
non
void
method
becuase
must
specify
expression
tells
java
value
method
returns
result
void
methods
return
nothing
java
can
reasonably
include
implicit
return
end
body
important
note
although
values
parameters
exchanged
code
values
stored
arguments
exchanged
values
stored
arguments
copied
parameters
method
called
transmission
mechanism
one
way
arguments
parameters
thus
parameter
transmission
asymmetrical
argument
variable
value
stored
variable
always
remains
unchanged
method
call
even
change
value
stored
matching
parameter
value
box
argument
changed
method
call
situation
gets
bit
complicated
interesting
references
everything
complicated
interesting
references
recall
copy
reference
variable
make
variable
refer
object
describes
references
passed
arguments
parameters
well
although
value
box
argument
changed
method
call
will
still
refer
object
state
object
refers
can
changed
body
method
calling
mutators
commands
look
call
frame
multiroll
method
illustrate
behavior
assume
method
defined
class
named
utility
declare
diceensemble
dice
new
diceensemble
2
6
call
system
println
utility
multiroll
dice
3
java
passes
argument
parameter
copying
reference
resulting
argument
dice
parameter
sharing
object
time
multiroll
method
calls
roll
state
shared
object
changes
see
rollcount
pips
instance
variables
different
values
returned
getpipsum
7
2
5
4
3
1
5
1
4
account
state
changes
shown
local
variable
sum
first
statement
prints
returned
value
sum
16
second
prints
value
rollcount
object
now
3
summary
change
arguments
method
call
changing
values
stored
matching
parameters
argument
parameter
share
object
can
change
state
object
calling
mutator
command
method
method
method
returns
result
argument
must
refer
object
object's
state
can
changed
final
parameters
finally
update
ebnf
rule
parameter
adds
option
specifying
keyword
final
type
parameter
final
type
identifier
parameter
variable
declared
final
must
treat
like
final
variable
change
state
throughout
method
body
will
always
store
value
initialized
matching
argument
frequently
always
case
method
examines
store
parameters
time
can
specify
parameter
final
java
style
standards
require
specifying
parameters
final
even
remain
unchanged
body
method
still
deciding
think
right
case
meanwhile
can
choose
either
include
final
code
write
emphasize
parameter
change
omit
whatever
choose
consistent
designing
methods
designing
method
first
think
descriptive
name
think
prototype
information
return
type
void
parameter
types
needs
headers
unlike
prototypes
also
supply
descriptive
names
parameters
parameter
variables
used
convey
special
information
method
information
controls
method
computes
methods
may
also
declare
local
variables
needed
temporarily
execution
method
values
initialized
arguments
outside
method
finally
typically
easiest
part
write
statements
implement
method
methods
perform
input
output
unless
primary
purpose
method
notice
except
promptint
methods
others
perform
input
output
sense
methods
get
inputs
parameters
supply
output
either
returned
result
changing
state
objects
parameters
refer
write
methods
perform
input
output
unless
primary
purpose
ebnf
defining
classes
including
package
imports
everything
java
defined
class
simple
programs
already
written
well
library
classes
ebnf
class
relies
heavily
definition
full
member
definition
note
package
class
keywords
package
declaration
package
package
name
class
body
full
member
definition
class
definition
package
statement
import
declaration
access
modifiers
class
identifier
class
body
braces
last
rule
stand
previous
rules
stand
standard
ebnf
repetition
named
classes
java
defined
java
file
examine
three
major
parts
class
definintion
first
package
statement
every
class
defined
one
package
specified
package
statement
option
omitted
class
said
defined
anonymous
also
known
default
package
name
package
characters
whatever
package
class
classes
package
automatically
imported
use
second
class
must
refer
classes
packages
must
imported
explicitly
import
declarations
finally
class
defined
specifies
access
modifiers
almost
always
jut
public
includes
number
full
member
definitions
trivial
complete
class
named
application
defined
anonymous
package
imports
neccessary
class
course
library
main
method
performs
trivial
console
import
edu
uci
ics
pattis
introlib
prompt
public
class
application
public
static
void
main
string
args
int
input
prompt
forint
enter
positive
system
println
entered
typically
class
stored
file
first
name
class
application
java
discussing
main
methods
will
see
define
complete
classes
simple
java
programs
libraries
define
methods
main
method
java
class
can
define
special
main
method
one
members
method
name
special
exactly
following
access
modifiers
header
method
specifies
array
string
parameter
although
will
use
parameter
study
use
java
command
line
will
see
tell
eclipse
ide
special
main
method
execute
public
static
void
main
string
args
can
direct
java
start
program
collection
one
classes
automatically
special
main
method
fact
project
can
include
multiple
classes
class
can
special
main
method
actually
quite
useful
will
discuss
feature
discuss
testing
classes
detail
situation
must
tell
java
special
main
method
start
eclipse
specify
class
whose
main
method
run
selecting
class
either
package
explorer
editor
methods
applications
seen
declare
one
special
static
method
class
java
execute
method
now
will
learn
define
call
static
methods
class
must
place
method
definitions
inside
class
along
main
method
can
call
method
main
static
method
class
can
call
static
method
class
just
using
name
supplying
arguments
match
signature
overloaded
one
signatures
can
also
bit
consistent
verbose
call
static
method
prepending
class
name
method's
name
following
application
class
shows
simple
example
code
import
edu
uci
ics
pattis
introlib
prompt
public
class
application
public
static
int
factorial
int
int
answer
1
int
2
date
calculator
1
program
program
defines
used
five
static
methods
twelve
static
fields
definition
order
java
uses
multi
pass
compiler
means
methods
fields
program
can
defined
order
java
first
reads
method
headers
fields
file
reads
bodies
checking
use
types
methods
fields
correctly
one
standard
way
write
methods
natural
order
body
method
calls
method
method
defined
method
example
might
following
program
form
method
a's
header
method
calls
method
b's
header
call
method
c's
header
method
calls
method
d's
header
calls
main
methods'
header
calls
fact
may
many
natural
orders
example
also
meet
natural
criteria
defining
method
method
even
method
main
method
calls
lots
methods
typically
appears
last
file
reverse
natural
order
body
method
calls
method
method
defined
method
case
main
method
calls
lots
methods
typically
appears
first
file
main
methods'
header
calls
method
d's
header
calls
method
c's
header
method
calls
method
b's
header
call
method
a's
header
method
calls
way
powerful
methods
appear
top
can
read
details
work
aftward
java
uses
multi
pass
compiler
two
orderings
others
legal
discuss
mutually
recursive
methods
will
return
topic
now
words
divide
conquer
program
complexity
now
putting
code
main
method
hundred
lines
code
practice
stopping
now
will
distributing
complexity
writing
methods
placing
application
program
class
libraries
can
write
test
debug
method
class
independently
method
including
main
comprise
one
two
dozen
statements
method
gets
complicated
write
method
method
original
method
call
two
new
methods
get
job
done
another
rule
keeping
complexity
method
small
prohibit
one
loop
complex
java
statement
think
per
method
allow
multiple
loops
nested
loops
notice
complexity
distibuted
date
calculator
program
method
even
main
contains
small
number
statements
throwing
exceptions
introduction
already
discussed
handle
thrown
exceptions
try
catch
statements
now
appropriate
time
begin
discussing
end
exception
processing
throw
detecting
problem
ebnf
rule
throwing
exception
using
keyword
throw
trivial
throw
statement
throw
expression
syntax
constraint
expression
must
refer
object
constructed
class
descended
throwable
class
will
discuss
class
hierarchies
later
now
seen
names
variety
classes
descended
throwable
eofexception
numberformatexception
important
current
needs
illegalargumentexception
illegalstateexception
exceptions
represented
classes
throwing
exception
requires
us
construct
new
instance
class
typically
initializing
state
string
describes
problem
string
can
examined
printed
exception
caught
given
factorial
method
works
non
negative
integers
might
modify
follows
detect
bad
argument
throw
illegalargumentexception
appropriate
message
rather
just
returning
1
notice
throws
illegalargumentexception
now
appears
factorial's
signature
public
static
int
factorial
int
throws
illegalargumentexception
0
throw
new
illegalargumentexception
factorial
must
non
negative
int
answer
1
int
2
simple
statement
first
method
determines
whether
argument
bad
throws
exception
common
check
necessary
preconditions
arguments
start
method's
body
grouping
code
together
separating
code
actually
performs
method's
task
executes
preconditions
parameters
checked
example
argument
matching
parameter
negative
value
java
constructs
instance
illegalargumentexception
class
initialized
appropriate
error
message
throws
exception
statement
throws
exception
java
abandons
sequential
execution
tries
locate
catch
clause
handle
exception
first
inside
method
thrown
method
one
java
goes
back
call
site
method
body
method
repeats
process
repeating
process
java
eventually
gets
back
special
main
method
matching
catch
clause
handle
exception
java
prints
exception
name
exception's
message
string
argument
exceptions
constructor
trace
methods
called
leading
problem
will
use
throw
statements
continue
learn
writing
constructors
methods
classes
will
come
back
topic
throw
statements
try
catch
statements
exception
classes
least
context
class
hierarchies
help
us
understand
complex
error
detection
recovery
mechanism
will
learn
write
new
exception
classes
difference
checked
unchecked
exceptions
methods
library
classes
although
static
methods
might
useful
just
one
application
many
general
enough
used
similar
applications
java
can
easily
collect
methods
class
related
methods
source
code
file
can
easily
import
use
programs
math
class
standard
java
library
serves
exactly
purpose
doe
prompt
class
course
library
collects
together
group
math
related
console
related
methods
example
ccould
easily
group
together
static
methods
fields
date
calculator
program
dateutility
class
shown
use
class
library
program
must
deal
dates
examine
date
calculator
2
program
see
exactly
mechanism
works
project
public
class
dateutility
returns
whether
year
leap
year
public
static
boolean
isleapyear
int
year
return
year
4
0
year
100
0
year
400
0
returns
number
days
month
year
public
static
int
daysin
int
month
int
year
throws
illegalargumentexception
year
1
throw
new
illegalargumentexception
daysin
year
year
positive
month
january
month
december
throw
new
illegalargumentexception
daysin
month
month
range
1
12
thirty
days
hath
september
april
june
november
month
april
month
june
month
september
month
november
return
30
rest
thirty
one
else
month
january
month
march
month
may
month
july
month
august
month
october
month
december
return
31
except
february
must
february
else
see
possible
exception
else
month
february
return
28
isleapyear
year
1
0
returns
ordinal
1st
2nd
3rd
etc
representing
month
day
year
public
static
int
ordinaldate
int
month
int
day
int
year
int
ordinal
0
scan
every
earlier
month
summing
days
month
int
january
month
ordinal
daysin
year
add
day
current
month
return
ordinal
day
returns
date
american
european
string
february
10
1954
return
2
10
1954
10
2
1954
public
static
string
americanformat
int
month
int
day
int
year
return
month
day
year
public
static
string
europeanformat
int
month
int
day
int
year
return
day
month
year
fields
public
static
final
constants
supplied
class
private
use
class
heck
let
programmers
use
class
final
nothing
programmer
can
change
public
static
final
int
january
1
public
static
final
int
february
2
public
static
final
int
march
3
public
static
final
int
april
4
public
static
final
int
may
5
public
static
final
int
june
6
public
static
final
int
july
7
public
static
final
int
august
8
public
static
final
int
september
9
public
static
final
int
october
10
public
static
final
int
november
11
public
static
final
int
december
12
recall
final
variables
constants
java
written
upper
case
identifiers
name
consists
multiple
words
separate
underscores
max
class
size
given
use
library
class
main
method
application
class
must
refer
members
using
class
name
member
name
int
ordinal
dateutility
ordinaldate
month
day
year
observe
inside
class
refer
member
just
name
outside
class
application
class
must
refer
static
member
class
name
followed
member
name
finally
note
constructors
class
likewise
instance
variables
construct
objects
class
just
use
class
name
directly
refer
methods
want
call
class
methods
fields
eclipse
ide
methods
common
programming
various
parts
eclipse
ide
built
deal
easily
will
examine
mechanisms
java
debugger
views
help
us
use
methods
programs
editor
includes
mechanism
locate
display
method
easily
program
library
class
class
active
editor
outline
window
lists
methods
class
can
easily
view
method
editor
clicking
name
outline
window
number
methods
class
grows
mechanism
becomes
useful
quickly
navigating
files
left
method
header
small
shaded
circle
containing
either
minus
sign
plus
sign
minus
sign
means
method
fully
disclosed
plus
sign
means
method
body
non
disclosed
elided
see
header
clicking
circle
toggles
disclosed
elided
method
bodies
can
also
use
debugger
better
understand
methods
debug
methods
written
options
displayed
stepping
program
appear
middle
step
button
arrow
pointing
bar
discussed
executes
method
black
box
show
happens
inside
stepped
method
just
executes
entire
body
one
fell
swoop
left
step
button
arrow
pointing
two
bars
executes
method
first
showing
parameters
local
variables
variables
tab
can
step
statement
method
watch
executes
step
return
statement
will
returned
code
called
method
method
stepping
calls
another
method
can
choose
step
step
call
right
step
button
arrow
pointing
two
bars
executes
remaining
statements
current
method
including
return
statement
note
single
bar
middle
button
represents
entire
statement
stepping
means
ignoring
details
methods
called
statement
double
bars
left
right
buttons
represent
block
code
implementing
method
can
step
method
start
executing
first
line
code
methods
step
method
finish
executing
last
line
code
method
step
method
parameter
local
variables
appear
variables
tab
parameters
will
intialized
values
matching
arguments
name
method
will
also
appear
underneath
thread
main
debug
tab
calls
another
method
method's
name
will
appear
now
directly
underneath
thread
main
whenever
method
returns
name
removed
debug
tab
control
returns
method
called
one
right
debug
tab
click
method
name
debug
tab
will
show
code
executing
method
editor
window
method's
parameters
local
variables
variables
tab
way
easy
shift
focus
among
methods
currently
executing
application
main
method
remains
bottom
method
names
debug
tab
throughout
execution
program
example
looking
bottom
daysin
method
note
parameters
initialized
month
2
year
2006
fact
method
already
called
isleapyear
method
top
methods
one
currently
executing
refocused
attention
back
daysin
method
called
selecting
method
debug
tab
select
isleapyear
method
continue
single
stepping
return
ordinaldate
method
shows
position
executing
body
loop
parameters
local
variables
listed
order
declared
parameters
month
day
year
local
variables
ordinal
loop
index
practice
using
three
kinds
stepping
using
two
date
calculator
programs
time
spend
becoming
familiar
debugging
features
will
pay
many
times
semester
debugging
hard
tools
help
tremendously
defining
classes
construct
objects
will
now
shift
focus
simple
classes
static
members
towards
interesting
useful
classes
can
construct
manipulate
objects
instances
will
first
examine
classes
declare
instance
variables
although
instance
variables
declared
private
wll
learn
members
class
can
manipulate
will
learn
write
constructors
help
initialize
instance
variables
finally
will
build
knowledge
methods
learn
write
methods
manipulate
instance
variables
will
discuss
multiple
uses
keyword
context
classes
construct
objects
classes
java
combine
elements
state
behavior
state
embodied
object's
private
instance
variables
behavior
embodied
class's
public
constructors
methods
manipulate
instance
variables
programmers
think
classes
three
important
different
viewpoints
user
implementor
designer
programmer
thinks
using
class
interested
solely
public
members
constructors
can
used
build
objects
methods
can
called
perform
useful
operations
objects
programmer
interested
can
done
done
long
implementation
works
efficient
reading
javadoc
prime
way
learn
information
programmer
thinks
implementing
class
interested
first
public
members
class
will
supply
programmers
using
class
will
able
addition
also
interested
members
can
implemented
typically
knowing
requires
reading
javadoc
knowing
requires
writing
java
code
specifies
state
object
will
store
method
bodies
work
manipulate
state
programmer
often
presented
many
interesting
decisions
many
ways
implement
functionality
programmer
thinks
designing
class
interested
solely
public
members
class
supplies
person
must
decide
members
include
specify
semantics
member
users
understand
class
implementors
understand
implement
designers
writing
public
prototypes
class
documenting
javadoc
three
views
bit
simplification
often
one
person
takes
multiple
roles
even
three
programmer
might
need
use
class
specific
application
designs
general
class
will
usable
application
hopefully
others
impelments
class
closing
circle
uses
application
good
design
hard
designer
often
needs
lots
experience
using
implementing
classes
can
effective
design
others
can
use
implement
easily
course
will
mostly
take
roles
users
previous
lectures
implementors
will
one
implementors
will
typically
given
design
required
implement
accomplish
process
will
indentify
state
object
stores
declare
define
required
constructors
methods
finally
tests
classes
will
see
classes
may
tested
three
prespectives
designer
tests
class
developing
test
suite
along
javadoc
designer
know
anything
implementation
black
box
testing
test
suites
open
ended
driver
closed
will
learn
junit
testing
implementor
tests
class
running
designer's
tests
implementation
fixing
errors
exposed
testing
implementor
might
also
develop
tests
based
actual
implementation
used
white
box
testing
user
class
implicitly
tests
application
program
application
work
expected
may
indicate
class
es
using
correct
user
may
just
using
incorrectly
situation
non
working
application
interesting
whose
fault
user
class
using
incorrectly
writer
class
implementing
incorrectly
will
examine
perspective
end
lecture
summarize
classes
focusing
private
members
important
thing
know
class
member
defined
class
can
refer
member
defined
class
even
access
modifier
private
access
modifiers
restrict
members
defined
outside
class
can
access
restrict
members
defined
inside
class
can
access
rule
allows
class
implementor
declare
instance
variables
private
directly
accessed
code
outside
class
still
write
constructors
method
inside
class
access
fact
often
accessor
query
methods
just
return
values
stored
private
instance
variable
illustrate
material
will
closely
examine
two
classes
drivers
simplediceensemble
rational
instance
variables
start
looking
implementation
details
two
sample
classes
simplediceensemble
class
must
store
information
characterizing
ensemble
number
dice
sides
per
die
information
current
state
number
rolls
pip
sum
whether
die
show
numer
pips
declares
instance
variables
follows
private
int
numberofdice
private
int
sidesperdie
private
int
rollcount
private
int
pipsum
private
boolean
allsame
rational
class
much
simpler
must
store
numerator
denominator
rational
number
fraction
declares
instance
variables
follows
private
int
numerator
private
int
denominator
classes
typically
group
declarations
fields
top
bottom
although
rules
requiring
placement
recall
javadoc
pages
show
fields
first
declaring
top
reasonable
another
perspective
instance
variables
private
details
declaring
bottom
way
reasonable
whenever
new
constructs
object
first
thing
process
field
declarations
class
includes
reserving
space
field
initializing
unlike
local
variables
fields
initialized
declared
explicitly
initialize
declarations
java
implicitly
initializes
primitive
types
uses
0
int
0
double
false
boolean
null
character
char
reference
types
uses
null
meaning
refer
object
examples
instance
variables
initialized
0
false
simplediceensemble
explicitly
written
private
int
numberofdice
0
private
int
sidesperdie
0
private
int
rollcount
0
private
int
pipsum
0
private
boolean
allsame
false
will
soon
see
constructors
can
often
store
appropriate
values
variables
based
arguments
supply
constructor
technically
constructor
stores
value
instance
variable
reinitialization
initialization
initial
value
already
stored
java
executes
declaration
still
will
speak
initializing
instance
variables
constructors
reinitialization
want
precise
constructors
main
purpose
constructor
ensure
instance
variables
object
constructed
initialized
correctly
done
body
constructor
contains
exactly
statements
can
appear
inthe
body
void
method
instance
variables
constructor
may
nothing
special
leaves
initial
values
received
declared
cases
initializes
actually
reinitializes
given
discussion
instance
variables
using
arguments
passed
constructor's
parameters
constructor
often
validates
arguments
first
throwing
illegalargumentexception
incorrect
classes
quite
complicated
constructors
take
arguments
reinitialize
fields
cases
fields
initialized
correctly
declarations
either
explicitly
implicitly
timer
class
one
example
kind
class
constructor
looks
like
public
timer
fact
fail
define
constructor
class
java
will
automatically
supply
one
looks
like
one
appropriate
class
name
define
even
one
constructor
class
java
will
overload
constructor
defining
one
classes
define
least
one
constructor
many
overload
constructor
constructors
always
parameter
help
reinitialize
instance
variables
simplediceensemble
first
constructor
defined
simplediceensemble
class
public
simplediceensemble
int
numberofdice
int
sidesperdie
throws
illegalargumentexception
numberofdice
1
throw
new
illegalargumentexception
simplediceensemble
constructor
number
dice
numberofdice
1
sidesperdie
1
throw
new
illegalargumentexception
simplediceensemble
constructor
sides
per
die
sidesperdie
1
numberofdice
numberofdice
sidesperdie
sidesperdie
rollcount
see
declaration
implicit
initializaton
0
pipsum
allsame
indeterminate
roll
first
validates
values
two
parameters
either
make
sense
must
least
one
die
must
least
one
side
constructor
throws
illegalargumentexception
appropriate
message
parameters
make
sense
copies
two
instance
variables
reinitializing
three
instance
variables
reinitialized
initial
values
received
decared
correct
rollcount
always
start
zero
pipsum
allsame
although
store
zero
false
really
represent
nothing
dice
rolled
yet
values
work
interlude
variable
name
conflicts
resolving
must
take
briefly
diversion
discuss
variable
name
conflicts
resolve
keyword
three
kinds
variable
names
java
name
parameter
defined
constructor
method
header
name
local
variable
defined
constructor
method
body
name
field
defined
class
java
compiler
automatically
implements
syntax
constraint
prohibits
defining
parameter
name
local
variable
compiler
detect
report
error
following
code
public
static
int
returnit
int
int
1
return
fact
java
points
local
variable
declaration
says
variable
'a'
already
defined
method
java
allow
instance
variables
names
parameters
local
variables
happens
called
variable
name
conflict
use
common
name
conflict
means
whenever
variable
name
conflict
name
never
refers
instance
variable
always
refers
parameter
local
variable
instead
want
refer
instance
variable
must
preface
name
keyword
constructor
reference
object
constructed
numberofdice
refers
numberofdice
instance
variable
defined
inside
class
fact
writing
numberofdice
always
legal
way
refer
numberofdice
instance
variable
object
constructed
whether
variable
name
conflict
constructor
parameter
variables
name
conflict
two
instance
variables
statements
check
numberofdice
sidesperdie
testing
parameter
variables
statements
numberofdice
numberofdice
sidesperdie
sidesperdie
store
values
parameter
variables
disappear
constructor
finishes
executing
instance
variables
exist
long
object
exists
wrote
numberofdice
numberofdice
java
just
store
parameter's
value
back
parameter
variable
stores
nothing
instance
variable
statement
can
cause
hard
locate
bug
another
way
around
whole
name
conflict
problem
change
parameter
names
use
number
sides
name
conflicts
can
write
just
numberofdice
number
sidesperdie
sides
often
case
well
chosen
name
instance
variable
replicated
parameter
name
captures
exactly
right
description
cases
must
understand
name
conflicts
use
resolve
help
avoid
confusion
style
guidelines
java
specify
every
access
instance
variable
prefixed
indicated
explicitly
accessing
field
still
fence
style
rule
back
discussing
constructors
second
simplediceensemble
constructor
much
different
form
first
parameters
second
throw
exceptions
information
specified
constructor's
header
written
constructor
public
simplediceensemble
numberofdice
2
sidesperdie
6
