ics 32 winter 2013 project 2 send me on my way 
project 2 
ics
32
winter
2013
news
course
reference
schedule
project
guide
code
examples
alex
ics
32
winter
2013
project
2
send
way
due
date
time
monday
february
4
11
59pm
project
done
pairs
using
pair
programming
technique
background
relatively
interesting
programs
written
programming
language
completely
self
contained
almost
program
can
think
fit
description
interesting
way
will
either
read
input
write
output
source
external
program
allows
us
use
program
solve
different
problems
albeit
different
problems
type
use
solutions
programs
doubt
seen
previous
coursework
course
one
way
program
take
external
input
read
file
principle
work
start
word
processor
like
microsoft
word
double
clicking
document
stored
hard
drive
word
processor
opened
reads
document
displays
contents
along
whatever
formatting
art
included
within
course
word
processors
much
less
useful
incapable
opening
existing
documents
however
files
story
ends
programs
capable
reading
input
writing
output
ways
learning
use
mechanisms
python
programs
pushes
boundaries
around
can
accomplish
think
programs
use
every
day
take
long
realize
ones
hold
interest
strongest
enable
exciting
outcomes
read
input
write
output
connecting
computers
somewhere
else
world
via
internet
use
many
programs
web
browsers
email
clients
mobile
applications
multiplayer
games
every
day
want
able
programs
write
python
project
allows
take
first
step
connected
world
introducing
use
sockets
objects
python
represent
one
end
connection
one
program
another
might
machine
another
machine
room
machine
halfway
across
world
learn
importance
protocols
communication
programs
will
implement
game
can
play
either
standalone
computer
students
course
via
internet
connection
along
way
also
introduced
detail
use
modules
python
writing
programs
comprise
one
module
technique
revisit
repeatedly
size
complexity
programs
write
begins
increase
find
design
decisions
make
keeping
functions
small
self
contained
organizing
functions
code
putting
appropriate
modules
will
important
part
able
complete
work
additionally
use
small
library
providing
order
seed
work
project
sure
look
code
examples
related
sockets
internet
continue
covering
topics
lecture
will
provide
background
need
order
implement
part
program
program
project
implement
console
based
game
will
initially
able
play
computer
will
extend
can
play
students
connecting
via
internet
using
sockets
game
project
implement
console
based
implementation
game
called
connect
four
rules
game
straightforward
many
may
already
know
familiar
rules
game
seen
wikipedia's
connect
four
page
good
place
go
become
familiar
note
implementation
will
include
traditional
rules
regarding
dropping
pieces
columns
also
pop
variation
discussed
wikipedia
page
connect
four
boards
come
variety
sizes
implementation
will
default
7x6
seven
columns
six
rows
also
one
minor
wrinkle
adding
rules
wikipedia
page
red
player
always
moves
first
starting
point
connectfour
module
unlike
previous
project
project
begins
starting
point
form
library
already
implemented
contains
underlying
game
logic
will
required
build
game
top
will
allowed
change
will
instructive
experience
learning
use
people's
libraries
without
make
modifications
valuable
ability
proceeding
much
project
might
good
idea
spend
time
reading
code
docstrings
comments
get
understanding
provided
can
also
try
focused
experimentation
python
interpreter
can
understand
provided
module
works
need
understanding
order
complete
work
connectfour
py
sure
respect
constants
defined
module
example
whenever
possible
use
connectfour
board
columns
denote
number
columns
board
connectfour
board
rows
denote
number
rows
board
possible
change
values
constants
reasonable
alternative
values
program
still
work
adjust
example
number
columns
rows
changes
requirements
program
will
allow
play
one
game
connect
four
one
three
modes
startup
user
picks
one
modes
using
console
interaction
networks
sockets
acting
client
case
user
will
need
specify
ip
address
port
program
connect
connection
unsuccessful
print
error
message
specifying
program
end
connection
successful
game
proceed
client
acting
red
player
moving
first
server
acting
yellow
player
red
player
moves
user
specify
move
console
yellow
player
moves
program
wait
input
via
socket
acting
server
case
user
will
need
specify
port
program
listen
note
ip
address
necessary
listen
address
127
0
0
1
whatever
port
user
specifies
client
connects
game
proceed
client
acting
red
player
moving
first
server
acting
yellow
player
red
player
moves
program
wait
input
via
socket
yellow
player
moves
user
specify
move
console
game
proceeds
user
shown
current
state
game
board
move
always
following
format
0
1
2
3
4
5
6
user
asked
specify
move
invalid
one
specified
dropping
column
full
error
message
printed
user
asked
specify
move
general
erroneous
input
console
cause
program
crash
simply
cause
user
asked
specify
move
ics
32
connect
four
protocol
i32cfp
protocol
though
will
writing
completely
separate
program
programs
expected
able
play
connect
four
one
another
via
internet
requires
us
agree
single
mechanism
program
will
know
precisely
inform
moves
made
game
progresses
part
agreement
use
standard
abstraction
internet
communication
called
sockets
socket
object
hides
underlying
detalis
network
connection
though
underlying
network
technology
complex
though
information
actually
sent
across
internet
breaking
small
pieces
sending
pieces
network
separately
may
arrive
destination
different
order
sent
parts
may
arrive
will
re
sent
socket
hides
makes
connection
appear
program
consist
two
streams
input
stream
ouptut
stream
data
placed
output
stream
one
program's
socket
will
arrive
order
input
stream
other's
important
realize
networks
unreliable
guarantee
data
send
will
ever
get
recipient
can
guaranteed
will
placed
input
stream
recipient's
socket
order
sent
using
sockets
enough
though
time
want
programs
able
communicate
internet
needs
protocol
set
rules
governing
party
will
send
receive
will
can
think
protocol
like
rigidly
defined
kind
conversation
participating
knowing
role
will
know
say
expect
participant
say
given
time
many
protocols
defined
govern
various
programs
send
receive
information
via
internet
example
hypertext
transfer
protocol
http
browser
uses
connect
web
server
request
web
page
receive
response
protocol
defined
detail
link
nothing
project
curious
real
network
protocol
defined
look
note
primary
author
protocol
uci
time
since
browsers
web
servers
conform
http
protocol
can
interoperate
even
though
writen
different
groups
people
run
different
operating
systems
provide
different
user
interfaces
project
need
protocol
protocol
custom
protocol
called
ics
32
connect
four
protocol
since
technical
people
fond
acronyms
use
acronym
i32cfp
definition
i32cfp
i32cfp
conversations
relatively
simple
predominantly
centered
around
sending
moves
back
forth
assumption
conversants
will
able
determine
game's
state
simply
applying
moves
locally
reason
game's
state
transmitted
conversants
i32cfp
conversations
two
participants
call
server
client
server
participant
listens
accepts
conversation
client
participant
initiates
client
always
red
player
server
always
yellow
player
means
client
always
moves
first
i32cfp
conversations
proceed
following
sequence
server
awaits
connection
clientthe
client
makes
socket
connection
serverthe
server
accepts
client's
connectionthe
client
sends
characters
i32cfp
hello
followed
newlinethe
server
sends
characters
ready
followed
newlinefrom
client
server
alternate
sending
moves
opposite
participant
responding
time
continues
game
ended
participant
wants
drop
piece
column
characters
drop
col
followed
newline
sent
col
column
number
piece
droppedwhen
participant
wants
pop
piece
bottom
column
characters
pop
col
followed
newline
sent
instead
col
column
number
piece
poppedafter
move
sent
opposite
participant
responds
either
characters
ok
followed
newline
characters
invalid
followed
newline
participant's
turn
game
characters
done
followed
newline
sent
opposite
participant
responds
characters
participants
close
connections
example
conversation
game
player
continually
drops
pieces
column
looks
like
clientserveri32cfp
helloreadydrop
3okdrop
4okdrop
3okdrop
4okdrop
3okdrop
4okdrop
3okdonedone
handle
erroneous
socket
input
program
permitted
assume
input
receives
will
correct
receives
input
conform
protocol
program
must
immediately
close
connection
rudimentary
nonetheless
effective
form
security
someone
connects
play
rules
hang
note
invalid
moves
drop
9
seven
column
board
violations
protocol
input
recognizable
incorrect
like
respond
invalid
wait
participant
try
note
design
i32cfp
may
wonder
first
message
cryptic
others
first
message
i32cfp
hello
instead
just
hello
others
regular
english
words
just
like
important
file
formats
contain
enough
information
make
clear
format
file
example
jpeg
image
format
contains
characters
exif
particular
place
well
couple
distinguishing
characteristics
nothing
image
represent
also
important
protocol
begins
message
will
distinguish
protocols
starting
conversation
something
special
like
i32cfp
hello
server
can
sure
client
intends
conversation
using
protocol
rather
something
else
can
connect
program
uses
sockets
even
browser
connect
four
implementation
though
conversation
get
far
server
realizes
receiving
wrong
kind
traffic
hangs
module
requirements
one
goals
project
explore
writing
programs
consisting
multiple
python
modules
will
required
separate
program
three
modules
divided
follows
provided
connectfour
py
module
one
three
implements
underlying
game
logic
performs
interaction
user
nothing
sockets
network
communication
one
module
implements
i32cfp
socket
handling
going
bind
listen
accept
connect
read
write
etc
via
socket
functions
written
module
one
module
implements
user
interface
provides
program's
entry
point
one
name
'
main
'
block
bottom
one
execute
order
run
program
can
name
two
modules
whatever
like
usual
names
meaningful
indicate
modules'
purpose
advice
working
incrementally
programs
write
get
larger
becomes
progressively
important
work
little
bit
time
talked
already
quarter
always
hunt
stable
ground
program
part
even
small
part
supposed
can
verify
got
portion
program
working
verified
stable
ground
quite
often
think
might
call
big
picture
small
picture
kinds
stable
ground
generally
working
toward
bigger
picture
goal
within
work
toward
sequence
smaller
picture
goals
divide
bigger
picture
problem
smaller
parts
recommend
similar
approach
lot
ways
cut
problem
like
one
sequence
bigger
picture
goals
might
find
helpful
familiarize
code
provided
connectfour
py
file
including
spending
time
python
interpreter
experimenting
public
functions
implement
console
mode
worry
yet
sockets
context
work
however
consider
ways
might
divide
code
parts
interact
console
replaced
socket
interactions
instead
onus
will
finding
ways
break
larger
functions
smaller
ones
read
code
wrote
connectfour
py
note
many
small
utility
functions
note
often
reused
multiple
places
implement
server
mode
use
network
tool
like
putty
telnet
connect
server
type
i32cfp
commands
hand
verifying
output
go
finally
implement
client
mode
using
server
servers
written
students
aid
testing
reusing
code
affects
quality
design
score
program
operates
three
modes
console
server
client
substantial
similarities
game
still
proceeds
move
move
user
still
shown
current
state
board
move
made
local
player
asked
specify
move
console
writing
three
separate
programs
even
writing
three
separate
stand
alone
modules
one
program
certain
ways
behaves
differently
depending
configuration
goal
design
perspective
find
ways
avoid
duplicating
code
three
modes
example
might
one
loop
iterates
moves
game
depending
mode
might
ask
user
choose
move
wait
move
sent
socket
one
important
aspects
design
considering
assessing
program's
quality
design
score
limitations
socket
related
code
use
socket
module
python
standard
library
handle
sockets
general
need
open
sockets
reading
writing
fuller
featured
tools
standard
library
asynchat
socketserver
hide
lot
underlying
details
may
find
modules
useful
later
quarter
like
experience
managing
sockets
project
deliverables
one
two
partners
submit
project
aware
partnerships
will
able
figure
project
submissions
belong
pairing
put
names
student
ids
partners
comment
top
py
files
submit
files
checkmate
take
moment
sure
submitted
files
follow
link
discussion
submit
project
via
checkmate
aware
holding
rules
specified
document
including
one
says
responsible
submitting
version
project
want
greaded
regrade
project
simply
submitted
wrong
version
accidentally
submit
connectfour
py
necessary
hurt
anything
however
please
aware
testing
program
original
connectfour
module
provided
even
submit
one
one
requirements
project
use
connectfour
module
can
submit
deadline
yes
possible
subject
late
work
policy
course
described
section
titled
late
work
link
originally
written
alex
thornton
winter
2013
