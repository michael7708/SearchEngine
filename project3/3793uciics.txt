ian g harris projects 
projects 
ian
harris
associate
professor
department
computer
science
university
california
irvine
home
publications
courses
projects
contact
short
descriptions
current
projects
hardware
assisted
host
based
intrusion
detection
investigating
technique
implement
host
based
intrusion
detection
hids
hardware
attacks
can
detected
soon
behavior
deviates
correct
system
behavior
system
anomaly
based
model
correct
system
behavior
generated
compile
time
deviations
correct
behavior
must
indicate
attack
characterize
correct
system
behavior
finite
state
machine
accepts
legal
system
call
sequences
execution
system
calls
detected
hardware
syscall
detector
examining
instruction
clock
cycle
contents
specific
internal
registers
legal
system
call
sequences
captured
finite
state
machine
implemented
hardware
syscall
sequence
recognizer
way
execution
illegal
call
sequence
can
detected
single
clock
cycle
occurs
directed
random
security
testing
network
applications
propose
new
directed
random
fuzzing
system
applies
static
analysis
target
source
code
generate
fuzzing
constraints
rapidly
expose
vulnerabilities
constraints
identified
will
increase
execution
frequency
potential
vulnerabilities
networked
applications
receive
network
messages
input
respond
messages
common
source
software
security
vulnerabilities
directly
exposed
attack
via
internet
networked
applications
property
large
part
code
execution
depends
directly
values
fields
network
messages
received
input
example
behavior
http
server
will
depend
request
method
header
fields
tftp
server
will
depend
opcode
mode
fields
analyze
source
code
networked
application
identify
dependencies
use
constrain
test
generation
specification
based
hardware
verification
misunderanding
specification
significant
source
design
errors
detection
errors
requires
tests
generated
directly
specification
order
identify
differences
specification
implementation
transaction
level
models
tlms
used
abstractly
describe
system
behavior
set
functions
encapsulate
details
function
communication
tlms
abstract
formal
description
specification
use
generate
specification
based
test
sequences
transactions
describe
sequences
input
events
trigger
behavior
correct
system
behavior
design
specification
based
error
match
mutated
transaction
generate
tests
mutating
existing
transactions
create
tests
will
differentiate
teh
behavior
correct
erroneous
designs
