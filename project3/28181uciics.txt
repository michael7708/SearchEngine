secure software architecture architectural access control 
secure software architecture july 2003 december 2005 
jie
ren
¥ôªN
areasoftwareadvisorrichard
taylore
mailjie
ics
uci
edu
biography
research
teach
work
service
publication
contact
secure
software
architecture
methodology
focuses
architectural
access
control
integrating
concepts
access
control
models
base
xadl
architecture
description
language
form
secure
xadl
language
access
control
models
approach
supports
multiple
security
models
widely
used
practice
classic
access
control
model
dominant
security
enforcement
mechanism
model
system
contains
set
subjects
permissions
set
objects
also
called
resources
permissions
can
exercised
access
matrix
specifies
permission
subject
particular
object
rows
matrix
correspond
subjects
columns
correspond
objects
cell
lists
allowed
permissions
subject
object
recent
role
based
access
control
model
trust
management
model
can
viewed
extensions
basic
access
control
model
role
based
model
introduces
concept
roles
indirection
organize
permissions
assignments
subjects
instead
assigning
permissions
directly
subjects
permissions
assigned
roles
trust
management
model
provides
decentralized
approach
manage
subjects
delegate
permissions
since
difficult
set
centrally
managed
repository
subjects
decentralized
environment
trust
management
models
use
attributes
subjects
identify
local
subject
can
check
attributes
based
information
present
local
subject
subjects
can
delegate
permissions
several
efforts
made
provide
unified
view
models
secure
xadl
subject
principal
resource
permission
privilege
safeguard
policy
inspired
unified
view
introduce
following
core
concepts
necessary
model
access
control
architecture
level
subject
principal
resource
privilege
safeguard
policy
extend
base
xadl
language
concepts
get
new
language
secure
xadl
syntax
secure
xadl
described
xadl
schema
best
knowledge
first
effort
model
security
concepts
directly
architectural
description
language
subject
user
whose
behalf
software
executes
subject
key
concept
security
missing
traditional
software
architectures
traditional
software
architecture
generally
assumes
components
connectors
execute
subject
subject
can
determined
design
time
will
change
runtime
either
advertently
intentionally
even
change
impact
software
architecture
result
modeling
facility
capture
allowed
subjects
architectural
components
connectors
extend
basic
component
connector
constructs
subject
perform
subject
can
take
multiple
principals
essentially
principals
encapsulate
credentials
subject
possess
acquire
permissions
classic
access
control
model
principal
synonymous
subject
directly
designating
identity
subject
role
based
access
control
model
principal
can
role
subject
takes
since
subject
can
assume
multiple
roles
can
possess
several
principals
trust
management
model
principal
can
public
key
credentials
subject
possesses
principals
provide
indirection
abstraction
necessary
advanced
access
control
models
resource
entity
whose
access
protected
example
read
file
modified
password
database
can
changed
administrators
privileged
port
can
opened
root
user
traditionally
resources
passive
accessed
active
software
components
operating
different
subjects
software
architecture
model
resources
can
also
active
software
components
connectors
resources
whose
access
protected
active
view
lacking
traditional
architectural
modeling
explicitly
enabling
view
can
give
architects
analysis
design
powers
improve
assurance
permissions
describes
possible
operation
object
another
important
security
feature
missing
traditional
adls
privilege
describe
permissions
component
possess
depending
executing
subjects
model
two
types
privileges
corresponding
two
types
resources
first
type
handles
passive
resources
subject
read
write
access
files
second
type
handles
active
resources
privileges
include
architecturally
important
privileges
instantiation
destruction
architectural
constituents
connection
components
connectors
execution
reading
writing
architecturally
critical
information
corresponding
notion
safeguard
permissions
required
access
interfaces
protected
components
connectors
safeguard
attached
component
connector
specifies
privileges
components
connectors
possess
can
access
protected
component
connector
policy
ties
mentioned
concepts
together
specifies
privileges
subject
access
resources
protected
safeguards
foundation
making
access
control
decisions
adopt
extensible
access
control
markup
language
xacml
basis
architectural
security
policy
modeling
language
based
xml
makes
natural
fit
xml
based
adl
language
extensible
currently
core
specifies
classic
access
control
model
profile
role
based
access
control
profile
trust
management
also
development
modular
approach
makes
language
evolvable
just
like
xadl
modular
approach
algorithm
check
architectural
access
control
present
algorithm
can
check
whether
architectural
access
software
architecture
description
granted
denied
first
checks
whether
accessing
interface
accessed
interface
connected
architecture
topology
algorithm
denies
architectural
access
connected
algorithm
proceeds
find
interface
path
nearest
accessed
interface
accessing
interface
accessed
interface
directly
connected
direct
accessing
interface
accessing
interface
privileges
direct
accessing
interface
accumulated
using
various
contexts
safeguards
policies
accessed
interface
policy
explicitly
specified
architect
policy
consulted
decide
whether
accumulated
privileges
sufficient
access
explicit
policy
access
granted
accumulated
privileges
contain
accumulated
safeguards
subset
contexts
architectural
access
control
architectural
modeling
viewpoint
components
connectors
making
security
decisions
decisions
might
based
entities
decision
maker
protected
resource
use
context
designate
relationships
involved
architectural
access
control
specifically
context
can
include
1
nearby
components
connectors
component
connector
2
explicitly
modeled
sub
architecture
contains
component
connector
3
type
component
connector
4
global
architecture
modeling
security
context
makes
architectural
security
implications
explicit
architectural
changes
impact
security
become
apparent
context
integrated
policy
modeling
xacml
provides
concept
policy
combination
combines
several
policies
integrated
policy
set
different
policy
combination
algorithms
permit
override
deny
override
provided
part
standard
extend
structure
override
type
override
gives
structure
type
final
authority
granting
permissions
xacml
framework
combined
explicit
modeling
architectural
context
supplies
necessary
flexibility
modeling
architecture
security
connector
centric
approach
connectors
play
key
role
approach
regulate
enforce
security
properties
specified
components
decide
subjects
connected
components
executing
inspect
whether
components
sufficient
privileges
communicate
connectors
potentials
provide
secure
interaction
insecure
components
connectors
can
composite
connectors
composite
connector
combines
several
connectors
together
large
connector
achieve
composite
security
policy
using
connectors
regulate
enforce
security
policies
leveraging
advanced
connector
capabilities
will
facilitate
supporting
multiple
security
models
advanced
connector
capabilities
include
reflective
architectural
derivation
connectors
component
specifications
composing
connectors
existing
connectors
replacing
one
connector
another
connector
architectural
operations
identify
three
types
run
time
architectural
operations
architectural
instantiation
creates
components
connectors
based
architecture
description
architectural
connection
binds
interfaces
components
connectors
together
message
routing
event
based
architecture
styles
connector
also
vital
architectural
operations
participates
deciding
whether
architectural
connections
made
rejecting
inappropriate
connections
architecture
manager
consults
connection
assists
determining
whether
message
routed
intended
recipient
discarding
improper
messages
routed
secure
connector
makes
decisions
based
specified
security
policies
message
can
inspect
architectural
properties
message
content
message
make
decision
delivery
tool
support
tool
support
included
part
base
architecture
development
environment
archstudio
tools
include
editor
describe
secure
software
architecture
written
secure
xadl
checker
apply
access
control
analysis
algorithm
execution
engine
execute
secure
architectural
operations
event
based
software
architectures
thesis
presentations
detailed
description
connector
centric
approach
architectural
access
control
can
found
thesis
summary
presentation
also
available
flyer
larger
poster
last
modified
april
25
2006
