three dynamic programs 
regular expression matching dynamic programming 
ics
161
design
analysis
algorithms
lecture
notes
march
5
1996
three
dynamic
programs
saw
last
time
basic
idea
dynamic
programming
simple
start
inefficient
recursive
algorithm
speed
solving
subproblem
remembering
solution
later
use
maybe
rearrange
order
subproblem
computation
convenient
loop
instead
recursion
promised
talk
regular
expression
matching
start
also
describe
algorithms
partitioning
sets
equal
size
subsets
finding
optimal
order
multiplying
matrices
regular
expressions
regular
expression
string
ba
na
bo
strings
interpreted
patterns
match
longer
strings
using
three
basic
operations
concatenation
pattern
p1
matches
string
s1
p2
matches
s2
p1p2
matches
s1s2
pattern
concatenates
three
subpatterns
ba
na
bo
patterns
two
letter
combinations
concatenations
single
letters
iteration
pattern
matches
string
pattern
matches
number
copies
concatenated
together
number
can
zero
also
matches
empty
string
alternation
pattern
p1
matches
string
s1
p2
matches
s2
p1
p2
matches
s1
s2
pattern
na
bo
matches
either
na
bo
combinations
nabo
instance
pattern
matches
strings
bano
banano
babono
banabobonano
etc
algorithms
going
describe
test
whether
string
matches
regular
expression
generally
want
know
much
whether
substring
matches
can
solve
problem
introducing
wildcards
denote
question
mark
ba
na
bo
match
string
substring
matching
ba
na
bo
graphs
regular
expressions
given
regular
expression
natural
way
transforming
certain
kind
graph
make
subgraph
piece
expression
one
incoming
one
outgoing
edge
form
overall
graph
hook
subgraphs
together
certain
ways
one
concatenation
side
side
alternation
looping
back
iteration
graph
original
pattern
ba
na
bo
strings
matched
pattern
correspond
exactly
sequences
letters
go
vertices
paths
graph
can
think
regular
expression
matching
problem
one
finding
appropriate
path
graph
one
goes
right
vertices
right
order
apply
dynamic
programming
start
recursive
algorithm
problem
tests
given
vertex
graph
suffix
input
whether
path
start
vertex
matches
substring
recursive
match
graph
vertex
string
strlen
vertex
recursive
match
graph
string
strlen
1
matches
string
strlen
1
return
true
return
false
turn
dynamic
program
just
remember
solutions
value
vertex
strlen
parameters
choices
vertex
denotes
length
pattern
choices
strlen
length
string
matched
mn
subproblems
takes
time
compute
involves
loop
vertex
total
time
2
think
speed
turn
graph
path
problem
make
new
big
graph
think
cartesian
product
string
smaller
pattern
graph
already
constructed
vertex
new
graph
will
correspond
pair
vertex
pattern
graph
index
string
add
edge
can
get
without
processing
characters
edge
1
can
get
matching
single
character
string
instance
string
bano
product
graph
looks
like
four
copies
original
pattern
graph
copy
keeps
edges
involve
matching
character
different
copies
connected
edges
depend
corresponding
positions
string
bano
pattern
matching
problem
turns
equivalent
reachability
graph
since
graph
mn
vertices
edges
can
test
reachability
solve
regular
expression
matching
problem
time
mn
partition
problem
suppose
20
files
store
lengths
measured
megabytes
total
size
200
mb
two
100
mb
drives
can
fit
onto
disks
answer
sometimes
yes
sometimes
file
sizes
18x5
1x47
1x63
possible
two
big
files
together
big
separate
neither
side
multiple
ten
4x38
16x3
possible
put
2x38
8x3
side
tell
automatically
problem
can
solved
usual
start
recursive
algorithm
given
sequence
x1
x2
x3
xn
positive
integers
target
sum
20
100
group
values
adds
either
xn
group
problem
solvable
either
sum
solvable
x1
1
xn
solvable
x1
1
partition
0
return
true
else
return
partition
1
partition
1
often
happens
simple
recursive
algorithm
inefficient
problem
values
leads
two
subproblems
1
values
2
recursive
calls
can
make
minor
improvement
test
whether
0
return
false
immediately
still
enough
really
speed
algorithm
now
turn
dynamic
program
usual
start
memoizing
version
based
recursion
storing
subproblem
solutions
store
array
contains
three
values
true
false
undefined
initially
values
assumed
initialized
undefined
partition
0
return
false
else
0
return
true
else
undefined
partition
1
partition
1
return
analysis
call
takes
constant
time
unless
fill
new
array
value
nt
array
values
fill
involves
constant
time
plus
1
subroutine
calls
total
nt
time
usual
can
simplify
reordering
getting
bottom
dynamic
program
partition
array
boolean
values
1
0
true
1
1
else
1
1
return
longest
common
subsequence
problem
reordering
saves
space
simplifies
method
even
partition
array
boolean
0
true
1
return
like
previous
two
dynamic
programs
can
turned
graph
reachability
problem
making
one
vertex
per
subproblems
connecting
two
vertices
edge
one
depends
finish
looking
problem
matrix
multiplication
different
far
can
tell
related
paths
graphs
also
good
example
dynamic
program
recursive
call
constant
time
optimum
matrix
multiplication
two
facts
need
know
matrices
multiplying
matrix
matrix
produces
matrix
takes
time
ijk
actually
somewhat
faster
algorithms
based
complicated
divide
conquer
schemes
affect
rest
section
given
sequence
integers
x1
x2
x3
xn
corresponding
matrices
x1
x2
x2
x3
x3
x4
several
ways
multiplication
taking
different
total
times
x1x2x3
x1x3x4
x1x2x4
x2x3x4
best
way
multiply
matrices
much
time
take
four
integers
sequence
three
matrices
can
just
compare
possibilities
longer
sequences
may
exponentially
many
different
multiplication
orders
test
like
find
best
one
without
testing
basic
idea
algorithm
look
last
multiplication
note
two
groups
optimally
multiplied
inside
knew
split
solve
problem
using
two
recursive
subproblems
fortunately
allowed
reorder
matrices
different
possible
splits
simply
try
easier
understand
solution
instead
look
list
dimensions
splits
two
groups
x1
x2
xk
xk
1
xn
note
two
overlap
one
integer
want
find
optimal
value
can
try
possible
values
choose
one
gives
best
total
matrix
multiplication
cost
usual
start
recursive
procedure
mtime
1
return
0
cost
infinity
1
1
cost
min
cost
mtime
mtime
return
cost
inefficient
takes
exponential
time
2
subproblems
solved
many
ways
choosing
can
memoize
storing
solution
array
1
1
1
mtime
1
return
0
else
0
return
cost
infinity
1
1
cost
min
cost
mtime
mtime
cost
return
cost
call
takes
constant
time
unless
fills
entry
case
takes
time
2
entries
fill
total
time
memoizing
dynamic
program
3
finally
write
bottom
version
computes
answers
simpler
order
careful
work
1
1
one
thing
problem
makes
sense
also
order
need
recursive
values
computed
whole
idea
simpler
order
test
whether
value
computed
instead
know
order
already
just
look
one
idea
works
pretty
well
compute
order
difference
mtime
array
1
1
1
1
0
infinity
1
1
min
return
1
now
even
obvious
total
time
3
just
look
three
nested
loops
ics
161
dept
information
computer
science
uc
irvine
last
update
02
may
2000
20
17
38
pdt
