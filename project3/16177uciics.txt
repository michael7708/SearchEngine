sorting 
sorting lower bounds heap sort 
ics
161
design
analysis
algorithms
lecture
notes
january
16
1996
sorting
alphabetize
list
words
sort
list
numbers
information
saw
last
time
one
reason
can
apply
binary
search
problem
comes
programming
comparison
sorting
abstract
model
sorting
assume
given
list
objects
sort
particular
order
sorted
minimum
amount
information
can
get
away
still
able
sort
particular
case
sorting
problem
able
sort
lists
two
objects
comparing
two
objects
determine
comes
first
sorted
order
now
assume
two
objects
equal
one
always
go
sorting
algorithms
can
also
handle
objects
complicates
problem
algorithms
sort
list
based
comparisons
pairs
using
information
sorted
instance
arithmetic
numbers
called
comparison
sorting
algorithms
care
abstract
restrictive
model
sorting
write
one
routine
sorting
can
used
without
rewrite
re
debug
new
sorting
problem
need
solve
fact
even
write
one
routine
provided
qsort
routine
unix
library
problems
obvious
anything
comparisons
gave
example
research
geometric
problem
quadtree
construction
involved
comparing
points
represented
pairs
coordinates
computing
bitwise
exclusive
ors
coordinates
comparing
numbers
using
result
determine
coordinates
compare
easier
design
analyze
algorithms
without
think
unnecessary
problem
specific
detailssome
comparison
sorting
algorithms
work
quite
well
much
need
something
else
sorting
algorithms
dozens
sorting
algorithms
baase
covers
around
seven
probably
time
four
heapsort
merge
sort
quicksort
bucket
sort
useful
algorithm
also
helps
introduce
new
ideas
heapsort
shows
one
can
start
slow
algorithm
selection
sort
adding
simple
data
structures
transform
much
better
one
merge
sort
quick
sort
different
examples
divide
conquer
general
algorithm
design
technique
one
partitions
input
parts
solves
parts
recursively
recombines
subproblem
solutions
one
overall
solution
two
differ
partition
recombination
merge
sort
allows
partition
result
recursive
solution
parts
two
interleaved
sorted
lists
must
combine
one
somewhat
complicated
way
quick
sort
instead
complicated
partition
one
subproblem
contains
objects
less
value
contains
objects
greater
value
recombination
stage
trivial
just
concatenate
quick
sort
example
randomization
average
case
analysis
bucket
sort
shows
abstraction
always
good
idea
can
derive
improved
sorting
algorithms
numbers
alphabetical
words
looking
carefully
details
objects
sorted
sorting
time
bounds
sort
time
bounds
expect
first
measure
time
comparison
sorting
algorithm
really
say
many
machine
instructions
will
take
will
vary
depending
complicated
comparisons
since
comparisons
usually
end
dominating
overall
time
bound
measure
time
terms
number
comparisons
made
sorting
algorithms
range
time
bounds
reason
two
typical
time
bounds
comparison
sorting
mergesort
heapsort
average
case
quicksort
take
log
insertion
sort
selection
sort
worst
case
quicksort
take
2
see
log
best
hope
achieve
2
worst
describes
amount
time
taken
algorithm
performs
every
possible
comparison
log
significantly
faster
2
log
2
10
33
100
100
665
10k
1000
10
4
10
6
10
6
2
10
7
10
12
10
9
3
10
10
10
18
even
sorting
small
lists
pays
use
good
algorithm
quicksort
instead
poor
one
like
bubblesort
even
excuse
bubblesort
easier
since
get
decent
sorting
algorithm
program
merely
call
qsort
lower
bounds
lower
bound
mathematical
argument
saying
hope
go
faster
certain
amount
precisely
every
algorithm
within
certain
model
computation
running
time
least
amount
usually
proved
worst
case
running
times
also
sort
thing
average
case
best
case
want
necessarily
mean
faster
algorithms
completely
impossible
want
go
faster
stick
abstract
model
look
carefully
problem
linear
time
bound
see
later
bucketsort
contradict
log
lower
bounds
prove
now
lower
bounds
useful
two
reasons
first
give
idea
good
algorithm
expect
find
know
room
optimization
second
lower
bound
slower
amount
time
want
actually
spend
solving
problem
lower
bound
tells
break
assumptions
model
computation
somehow
prove
lower
bounds
sorting
terms
number
comparisons
suppose
sorting
algorithm
examines
data
making
comparisons
pairs
objects
use
random
numbers
model
describe
can
extended
deal
randomized
algorithms
gets
complicated
assume
particular
comparison
sorting
algorithm
know
anything
runs
using
assumption
prove
worst
case
time
least
certain
amount
since
assumption
make
comparison
sorting
algorithm
fact
will
true
algorithms
decision
trees
given
comparison
sorting
algorithm
particular
number
draw
tree
corresponding
different
sequences
comparisons
might
make
input
length
first
comparison
algorithm
makes
objects
positions
will
make
comparison
matter
list
length
input
comparison
model
information
far
make
decision
lists
second
comparison
will
always
algorithm
might
something
different
result
first
comparison
can
draw
tree
node
represents
positions
involved
comparison
path
tree
describes
sequence
comparisons
results
particular
run
algorithm
node
will
two
children
representing
possible
behaviors
program
depending
result
comparison
node
example
3
1
2
2
3
1
3
1
2
3
1
3
2
1
3
2
3
1
3
2
3
1
2
2
3
1
3
2
1
tree
describes
algorithm
first
comparison
always
first
second
positions
list
information
denoted
1
2
root
tree
object
position
one
less
object
position
two
next
comparison
will
always
second
third
positions
list
2
3
root
left
subtree
second
less
third
can
deduce
input
already
sorted
write
1
2
3
denote
permutation
input
causes
sorted
second
greater
third
still
remain
two
possible
permutations
distinguished
make
third
comparison
1
3
comparison
sorting
algorithm
can
always
put
form
since
comparison
chooses
make
point
time
can
depend
answers
previously
asked
comparisons
conversely
tree
like
can
used
sorting
algorithm
given
list
follow
path
tree
determine
comparisons
made
permutation
input
gives
sorted
order
reasonable
way
represent
algorithms
sorting
small
lists
case
3
larger
values
works
better
use
pseudo
code
however
tree
also
useful
discovering
various
properties
original
algorithm
worst
case
number
comparisons
made
algorithm
just
longest
path
tree
one
can
also
determine
average
case
number
comparisons
made
complicated
leaf
tree
comparisons
made
therefore
know
sorted
order
possible
sorted
order
corresponds
permutation
least
leaves
might
instance
stupid
algorithm
tests
whether
even
already
discovered
sorting
lower
bound
longest
path
binary
tree
leaves
least
log
proof
one
two
subtrees
least
half
leaves
lp
1
lp
2
result
follows
induction
number
comparisons
sort
least
log
turns
roughly
log
distinguish
lower
bounds
upper
bounds
write
little
differently
big
omega
rather
big
write
lower
bound
omega
log
precisely
log
log
reasonably
simple
proof
follows
product
1
log
sum
log
1
sum
log
1
sum
log
log
1
log
sum
log
1
let
last
term
sum
log
can
write
recurrence
bounding
sum
log
1
2
sum
log
sum
log
1
2
1
terms
first
sum
equal
log
2
2
1
log
2
terms
second
sum
logs
numbers
1
2
numbers
0
1
can
simplify
equation
2
sum
log
2
1
2
solves
2n
completes
proof
log
log
2n
note
class
got
argument
slightly
wrong
lost
factor
two
recurrence
can
get
slightly
accurate
formula
sterling's
formula
prove
sqrt
pi
log
log
1
4427
1
2
log
826
compute
couple
examples
see
accurate
log
formula
gives
10
21
8
33
22
14
43
18
8
100
524
8
664
4
144
3
520
1
enough
math
actual
algorithms
selection
sort
understand
heap
sort
start
selection
sort
experiment
write
list
numbers
done
tell
sorted
order
5
2
100
19
22
7
go
finding
probably
looked
list
first
number
looked
next
one
etc
one
way
formalizing
process
called
selection
sort
selection
sort
list
list
empty
nonempty
remove
smallest
element
add
time
analysis
one
loop
executed
times
total
time
remember
counting
comparisons
remove
smallest
element
take
many
comparisons
need
look
carefully
part
loop
part
adding
element
also
depends
store
can
done
constant
time
reasonable
implementations
case
require
comparisons
counting
obvious
method
finding
removing
smallest
element
scan
keep
track
smallest
object
produces
nested
inner
loop
time
length
total
time
sum
2
one
slow
algorithms
fact
slow
possible
always
makes
every
possible
comparison
describing
many
better
algorithms
heap
sort
heap
sort
invented
williams
looks
exactly
like
pseudo
code
selection
sort
simply
uses
data
structures
perform
main
step
selection
sort
quickly
operations
need
perform
starting
list
turning
copy
whatever
data
structure
using
finding
smallest
object
data
structure
andremoving
smallest
element
many
suitable
data
structures
instance
avl
trees
studied
ics
23
describe
structure
called
binary
heap
heap
also
supports
possible
operations
adding
objects
list
useful
algorithm
maybe
later
will
see
heaps
talk
minimum
spanning
trees
shortest
paths
simple
analysis
heap
sort
can
build
data
structure
list
time
finding
removing
smallest
object
takes
time
total
time
will
ny
case
will
will
log
total
time
will
log
log
heap
data
structure
form
binary
tree
certain
properties
elements
placed
nodes
tree
node
holds
one
element
element
placed
one
node
tree
balanced
far
concerned
means
paths
length
log
baase
uses
stronger
property
two
paths
leaf
differ
length
one
heap
property
one
node
parent
another
value
parent
always
smaller
value
child
can
think
heap
property
similar
property
family
trees
parent's
birthday
always
earlier
childrens'
birthdays
another
example
corporate
hierarchy
salary
boss
almost
always
bigger
underlings
can
find
smallest
heap
element
looking
root
tree
boss
whole
company
biggest
salary
easy
see
since
node
tree
smaller
value
descendants
transitivity
remove
say
company
boss
quits
fill
place
promote
somebody
satisfy
heap
property
will
person
biggest
salary
must
one
two
direct
underlings
one
two
bigger
salary
promoting
person
leaves
vacancy
lower
can
fill
sort
way
pseudo
code
remove
node
node
leaf
delete
else
right
child
left
right
move
value
left
child
remove
node
left
child
else
left
child
right
left
move
value
right
child
remove
node
right
child
baase
complicated
procedure
since
wants
maintain
stronger
balanced
tree
property
essentially
idea
pick
someone
bottom
tree
new
root
notice
violates
heap
property
trade
value
best
child
longer
causes
violation
results
twice
many
comparisons
technical
advantages
terms
able
store
heap
space
sorted
list
constructing
number
comparison
steps
operation
just
length
longest
path
tree
log
fits
comparison
sorting
framework
information
use
determine
promoted
compare
pairs
objects
total
number
comparisons
heapsort
log
much
time
takes
set
heap
build
heap
ran
time
see
next
time
ics
161
dept
information
computer
science
uc
irvine
last
update
02
may
2000
20
17
36
pdt
