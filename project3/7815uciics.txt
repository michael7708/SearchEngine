ics 22 cse 22 fall 2012 lab manual 
front page lab manual 
ics
22
cse
22
fall
2012
news
course
reference
schedule
lab
manual
code
examples
alex
ics
22
cse
22
fall
2012
lab
manual
projects
lab
assignment
0
optional
project
1
perfect
candidateproject
2
find
thereproject
3
simple
trueproject
4
gone
moviesproject
5
signal
noiseproject
6
expresso
love
introduction
quarter
work
six
programming
projects
five
will
written
java
will
written
functional
programming
style
using
programming
language
called
racket
will
discover
projects
increase
size
difficulty
quarter
goes
put
appropriate
amount
effort
find
skill
level
will
rise
steadily
match
rising
difficulty
projects
will
work
pairs
using
technique
called
pair
programming
others
will
give
opportunity
work
individually
projects
will
include
starting
point
form
documented
code
provide
means
getting
started
quarter
progresses
find
asked
write
code
write
scratch
build
programs
made
progressively
larger
number
interacting
parts
method
madness
will
course
strengthen
ability
write
individual
java
methods
will
also
begin
cultivate
understanding
design
ever
larger
programs
projects
will
evaluated
based
well
work
also
well
designed
written
poorly
written
code
works
will
viewed
critically
well
written
code
bugs
worry
though
presume
experience
designing
programs
providing
plenty
help
along
way
end
quarter
successfully
worked
projects
surprised
much
skills
improved
pair
programming
pair
programming
projects
course
will
required
employ
approach
called
pair
programming
pair
programming
just
two
programmers
working
separately
task
work
divvied
pair
programming
two
programmers
share
one
computer
one
driver
controls
keyboard
mouse
navigator
observes
asks
questions
suggests
solutions
thinks
slightly
longer
term
strategies
two
programmers
switch
roles
every
15
20
minutes
goal
partners
complete
mental
ownership
work
done
even
though
one
person
time
typing
obligates
partners
communicate
one
another
understand
partner
bringing
one
speed
necessary
partners
firmer
grasp
least
importantly
way
pair
programmers
described
nearly
always
beats
stereotypical
solitary
loner
similar
ability
pair
produces
high
quality
code
less
time
far
two
one
margin
projects
require
pair
programming
requiring
follow
model
will
keeping
track
students
reserve
right
penalize
students
routinely
refuse
work
pair
programmers
industry
software
development
environments
use
pair
programming
documented
good
effect
reality
individual
programming
still
widely
used
strategy
real
world
many
future
courses
take
will
require
individual
work
well
study
study
shows
working
pairs
stage
development
computer
scientists
will
strengthen
abilities
work
individually
well
pairs
still
use
pair
programming
portion
course
projects
will
require
individual
work
acclimate
demands
future
courses
future
employers
rest
assured
successful
pairing
point
made
ready
work
individually
working
individually
beginning
also
remember
course
staff
tas
lab
tutors
help
pairing
rules
paired
assignment
will
required
select
lab
partner
also
enrolled
lab
section
variety
logistical
reasons
pairing
students
different
lab
sections
will
allowed
circumstances
additionally
will
required
partner
someone
partnered
previously
course
took
ics
21
cse
21
previously
will
ideally
find
partners
ones
worked
course
well
deciding
pair
assignment
notify
ta
pairing
via
email
sure
include
names
ucinetids
partners
email
pairing
advice
best
time
find
partner
ics
22
help
center
shy
talk
people
part
benefit
university
education
social
network
finished
true
story
every
job
since
enrolled
student
uci
including
one
directly
connected
uci
experience
trouble
finding
partner
talk
ta
will
happy
help
find
one
bad
idea
find
partner
whose
skill
level
similar
one
skilled
areas
less
skilled
always
possible
sometimes
hard
compare
skill
levels
students
tell
us
data
support
pairs
productive
partners
level
still
people
often
pair
another
whose
skills
abilities
different
differences
may
great
small
one
member
may
strengths
exactly
like
real
world
working
situations
part
accomplishing
task
get
member
make
member
stronger
productive
subsequent
tasks
clearly
stronger
partner
may
feel
frustrated
slowed
partner
stronger
partner
benefits
teamwork
many
ways
partner's
requests
clarification
often
point
flaws
approach
solution
teamwork
skills
gained
great
value
job
market
exercise
providing
clear
explanation
solidifies
deepen's
explainer's
understanding
less
strong
partner
may
feel
questions
hold
partner
back
benefit
participating
actively
pair
programming
studies
show
paired
work
consistently
better
work
stronger
partner
individually
part
partner's
job
understand
whole
task
means
asking
questions
necessary
answering
possible
expected
work
partner
outside
scheduled
lab
sections
generally
yes
likely
need
spend
time
least
projects
working
outside
scheduled
lab
sections
assumption
always
able
get
projects
done
working
strictly
within
lab
sections
projects
will
take
time
understand
though
pair
programming
separate
locations
talking
via
instant
messages
sending
code
back
forth
via
email
even
talking
phone
pair
programming
requires
partners
room
sitting
behind
computer
one
acting
driver
acting
navigator
unsympathetic
fact
scheduling
time
work
together
difficult
requirement
course
aware
front
evaluation
work
evaluation
criteria
projects
except
last
one
will
graded
using
15
point
scale
work
projects
naturally
primary
goal
write
program
works
correctly
however
writing
correctly
working
program
sole
objective
projects
will
evaluated
following
basis
qualityvaluedescriptioncorrectness
robustness6
pointswhen
program
given
valid
input
generate
correct
output
output
spacing
correct
issue
short
program
supposed
input
meets
project
specifications
program
given
unusual
erroneous
input
handled
gracefully
programs
crash
situations
print
informative
messages
user
continue
executing
possible
quality
solution
documentation
style6
pointsparticularly
awkward
cumbersome
inappropriate
ways
approaching
problems
will
score
highly
cleaner
better
designed
ones
program
divided
logical
parts
using
classes
appropriate
encapsulating
single
idea
task
large
methods
broken
smaller
ones
simpler
jobs
enough
comments
make
program
clear
reader
though
noted
good
modularity
well
named
identifiers
make
commenting
burden
significantly
lighter
identifier
names
chosen
reflect
function
names
meaningful
reader
course
style
standards
followed
testing3
pointshow
comprehensively
tested
program
considered
representative
set
normal
cases
cases
well
chosen
reflect
variety
program
conditions
chosen
haphazardly
tests
also
address
robubstness
program
including
representative
set
error
boundary
conditions
keep
mind
number
tests
necessarily
important
will
ask
specific
number
test
cases
words
concentrate
efforts
quality
rather
quantity
total15
points
last
project
will
write
racket
will
structured
somewhat
differently
others
will
graded
using
different
scale
will
weight
others
final
course
grade
programs
compile
submit
program
compile
will
able
execute
thus
will
able
evaluate
correctness
responsibility
turn
code
compiles
reserve
right
assign
zero
points
correctness
robustness
portions
project
score
program
compile
regardless
much
code
close
working
rule
place
impractical
us
evaluate
correctness
non
compiling
code
impress
upon
importance
issue
real
world
excuse
submitting
code
compile
first
blush
sounds
like
harsh
policy
difficult
sounds
make
sure
program
compiles
develop
program
one
small
piece
time
ensuring
program
compiles
runs
ideally
runs
correctly
moving
next
piece
never
good
idea
write
hundreds
lines
code
attempting
compile
run
program
yet
many
students
code
everything
compile
approach
can
successful
small
programs
may
written
courses
prior
one
scale
well
problems
size
will
face
course
urge
consider
working
programs
step
step
compiling
running
make
progress
sure
individual
steps
talk
ta
lab
tutor
eager
help
late
work
things
happen
ten
week
quarters
can
unforgiving
unreasonable
expect
may
find
difficult
finish
one
projects
time
even
top
things
time
get
emails
often
students
saying
things
like
just
one
day
work
get
done
hand
consistently
behind
recipe
struggle
course
moving
quickly
will
progressively
harder
catch
farther
behind
get
best
balance
two
realities
everyone
allowed
tough
time
project
quarter
maybe
underestimated
difficulty
assignment
maybe
three
midterms
paper
due
day
maybe
sudden
outside
commitment
avoided
reason
offering
following
late
work
policy
student
permitted
submit
one
project
48
hours
late
questions
asked
prior
notification
required
purposes
clarification
additional
details
policy
works
required
notify
us
advance
fact
honesty
prefer
lot
students
course
represent
lot
extra
work
us
looking
submissions
48
hours
beyond
deadline
project
paired
projects
late
submission
will
apply
partners
will
permitted
neither
partner
previously
submitted
late
project
ten
minute
grace
period
due
date
allowing
time
get
files
submitted
checkmate
submitted
files
12
08am
11
59pm
due
date
fine
best
play
fire
though
already
done
11
59pm
12
11am
used
one
time
extension
exceptions
first
project
submit
late
will
fall
policy
subsequent
project
submit
late
will
accepted
words
submit
two
projects
late
wait
see
one
get
better
score
grading
second
one
one
file
submitted
beyond
ten
minute
grace
period
entire
project
considered
late
tracking
throughout
quarter
course
will
grant
extension
anyone
accommodate
unforeseen
issues
might
otherwise
prevent
finishing
project
time
late
work
accepted
course
ordinary
circumstances
sometimes
warrant
exceptions
policy
faced
problem
preventing
getting
work
done
time
either
single
assignment
chronically
please
contact
can
talk
best
approach
problem
style
standards
organization
corporate
environment
even
open
source
project
good
software
development
just
writing
program
works
also
requires
writing
program
easy
understand
original
author
others
may
work
future
important
program
can
maintained
easily
bugs
found
new
user
needs
inevitably
arise
style
standards
including
certainly
limited
documentation
requirements
help
ensure
code
written
within
organization
can
understood
everyone
else
within
course
defined
set
style
standards
requiring
follow
write
programs
standards
will
ensure
easier
time
reading
programs
help
grade
importantly
also
will
help
instill
good
code
cleanliness
habits
will
carry
long
course
submitting
projects
complete
project
must
submit
us
electronically
follow
link
detailed
description
submit
projects
understand
will
accept
projects
submitted
using
procedure
described
accept
printed
copies
projects
accept
via
email
circumstances
responsible
submitting
version
project
want
graded
will
grade
recent
submission
made
deadline
accidentally
submitting
wrong
version
will
considered
grounds
regrade
development
environment
officially
supported
development
environment
ics
22
cse
22
eclipse
classic
4
2
free
integrated
software
development
environment
eclipse
full
featured
commercial
tool
common
industry
also
boasts
features
will
supportive
work
course
automatically
compiling
code
whenever
save
error
messages
somewhat
friendly
emanate
oracle's
command
line
compiler
built
support
testing
tool
junit
using
eclipse
available
use
ics
labs
encourage
spend
much
time
working
especially
projects
require
pair
programming
also
understand
reality
many
will
want
work
home
work
individually
laptops
wherever
least
part
time
certainly
welcome
though
noted
responsible
obtaining
installing
required
software
machine
unfortunately
realistically
support
home
installations
need
following
software
can
obtained
free
charge
java
development
kit
jdk
7
update
7
7u7
part
java
se
7
suite
tools
available
download
oracle's
java
se
downloads
page
package
already
installed
machines
ics
labs
can
somewhat
tricky
install
written
document
explains
set
java
machine
want
eclipse
classic
4
2
can
download
link
www
eclipse
org
eclipse
classic
4
2
requires
already
installed
jdk
smaller
package
called
jre
lacks
tools
might
find
useful
go
forward
java
cross
platform
programs
write
run
way
regardless
operating
system
compiler
using
long
running
java
7
still
subtle
bugs
differences
exist
feel
graded
unfairly
account
bug
let
us
know
make
sure
grade
adversely
affected
incompatibilities
virtual
machines
point
will
rare
occurrence
indeed
many
years
taught
uci
using
java
occurred
couple
times
set
java
computer
document
written
describes
set
java
computer
running
windows
mac
os
use
linux
solaris
jdk
7
can
downloaded
oracle's
java
se
downloads
page
way
can
windows
can
also
downloaded
using
built
package
managers
installation
procedures
vary
one
distribution
linux
another
ample
documentation
available
online
java
links
wondering
particular
class
java
library
works
java
api
documentation
exactly
need
writing
java
code
spend
lot
time
can
remember
parameters
methods
java
library
besides
learning
look
things
existing
documentation
invaluable
skill
real
software
development
environment
best
start
developing
skill
now
course
sure
look
happy
help
racket
links
work
racket
quarter
will
using
environment
called
drracket
free
environment
built
specifically
teaching
learning
racket
fully
functional
support
work
need
class
drracket
runs
windows
mac
os
various
flavors
unix
linux
beginning
quarter
latest
stable
version
5
3
though
new
versions
come
fairly
frequently
may
find
newer
version
time
download
install
design
programs
online
textbook
intended
introductory
programming
courses
taught
using
racket
book
refers
scheme
book
well
beyond
scope
limited
coverage
racket
might
find
useful
reference
interested
learning
racket
personally
think
fascinating
stuff
academic
honesty
policy
ics
22
cse
22
students
expected
know
follow
academic
honesty
policies
bren
school
ics
university
whole
please
take
minutes
read
policies
can
found
link
lab
work
expected
completed
solely
partner
paired
assignments
worker
larger
groups
sharing
code
students
partners
permitted
note
high
level
discussion
course
material
better
understanding
permitted
encouraged
comes
time
sit
write
code
expected
done
alone
submissions
compared
one
another
using
automated
plagiarism
detection
system
system
extraordinarily
good
finding
similarities
submissions
even
superficial
differences
note
also
compare
submissions
submitted
previous
quarters
whenever
one
assignments
given
previous
quarter
exceedingly
bad
idea
turn
even
refer
code
written
friend
took
course
already
since
work
expected
completed
solely
partner
paired
assignments
will
held
responsible
even
plagiarize
small
portion
someone
else's
work
permitted
reuse
code
wrote
along
partner
previous
quarter
may
reuse
code
wrote
may
reuse
project
paired
quarter
reason
rule
simply
want
students
repeating
course
pair
someone
new
deprive
opportunity
work
project
besides
repeating
course
generally
good
idea
start
fresh
solidify
ideas
missed
first
time
around
academic
honesty
two
way
street
providing
code
students
turn
permitted
anymore
turning
someone
else's
code
resist
temptation
give
code
friends
reference
based
experience
can
say
friends
may
well
betray
turn
anyway
naturally
midterm
final
exam
also
expected
individual
efforts
dishonest
behavior
exam
will
tolerated
violators
academic
honesty
policies
subject
penalties
described
bren
school
ics
policy
also
subject
immediate
course
grade
will
allowed
drop
course
avoid
grade
also
aware
single
documented
case
academic
dishonesty
may
preclude
switching
computing
majors
registering
computing
minors
joining
ics
honors
program
graduating
computing
major
honors
lesson
okay
moral
story
wise
avoid
cheating
believe
relatively
rare
students
enter
course
conscious
intent
cheat
way
come
uci
planning
get
something
coursework
people
cheat
every
quarter
every
course
answers
vary
easiest
way
can
boil
numerous
conversations
students
caught
cheating
courses
years
fell
behind
figure
catch
things
happen
ten
week
quarters
unforgiving
might
get
sick
might
issues
crop
family
might
campus
job
demanding
much
time
might
trying
decide
whether
path
want
things
many
others
can
make
hard
keep
fall
little
behind
fall
little
behind
pretty
soon
situation
seems
hopeless
pressure
temptation
gets
better
feel
like
beginning
slip
course
things
getting
beyond
control
best
thing
talk
us
sooner
rather
later
help
understand
reality
taking
large
sized
courses
large
sized
institution
going
know
need
unless
tell
us
things
happening
life
tell
us
specific
comfortable
fact
often
way
work
things
fact
usually
late
number
updates
clarifications
alex
thornton
winter
2012
fair
amount
updating
alex
thornton
winter
2008
including
new
late
work
policy
changes
standards
evaluating
work
restructured
several
places
alex
thornton
winter
2007
section
pair
programming
partly
adapted
similar
page
norman
jacobson
turn
adapted
similar
page
david
kay
section
academic
honesty
adjusted
alex
thornton
winter
2006
additional
pieces
advice
added
alex
thornton
fall
2005
minor
bits
pieces
updated
alex
thornton
winter
2005
portions
rewritten
new
version
ics
22
alex
thornton
fall
2004
project
links
brought
top
page
convenience
two
new
sections
java
links
scheme
links
added
alex
thornton
winter
2003
typically
minor
modifications
alex
thornton
fall
2002
relatively
insignificant
tweaks
alex
thornton
summer
2002
changes
project
grading
criteria
minor
changes
removal
one
project
alex
thornton
spring
2002
originally
written
alex
thornton
winter
2002
portions
cannibalized
ics
22
lab
manual
fall
2001
alex
thornton
table
software
qualities
adapted
similar
document
written
david
kay
