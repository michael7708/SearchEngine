ics 260 lecture notes optimal triangulation 
optimal triangulation 
ics
260
fall
2001
lecture
notes
october
23
dynamic
programming
optimal
triangulation
1
three
seemingly
unrelated
problems
optimal
scheduling
matrix
multiplications
matrices
two
dimensional
arrays
can
multiplied
standard
formulas
linear
algebra
sum
dimensions
dimensions
time
performing
sums
straightforward
way
efficient
complicated
matrix
multiplication
algorithms
really
relevant
today's
lecture
matrix
multiplication
many
applications
including
computer
graphs
relevance
ranking
information
retrieval
now
suppose
two
matrices
multiply
matrix
multiplication
obeys
associative
law
one
order
multiplication
however
amount
time
might
different
say
10
1000
1000
4
4
200
multiplying
take
rougly
10
1000
200
1000
4
200
operations
multiplying
way
give
much
smaller
number
10
1000
4
10
4
200
generally
given
sequence
matrices
mi
multiply
ranging
1
sizes
matrices
given
one
dimensional
array
mi
dimensions
1
spend
small
amount
time
planning
optimal
order
multiply
matrices
lead
big
savings
time
actually
perform
multiplications
however
number
different
multiplication
orderings
grows
exponentially
take
long
examine
one
determine
operation
count
can
find
optimal
multiplication
ordering
amount
time
measured
slowly
growing
function
optimal
binary
search
tree
construction
suppose
situation
will
need
match
input
text
list
keywords
standard
technique
binary
search
tree
tree
internal
node
represents
string
comparison
leaf
represents
one
keywords
searching
perform
search
following
path
tree
performing
indicated
comparison
node
reach
leaf
keep
things
simple
lecture
going
assume
comparisons
type
rather
allowing
equality
tests
three
way
comparisons
will
search
strings
already
list
keywords
simple
example
time
search
given
word
just
length
path
word
root
example
words
height
require
three
comparisons
per
search
however
idea
frequencies
encounter
word
can
better
average
search
time
sum
frequency
probability
seeing
word
height
tree
words
like
apple
relatively
high
frequencies
others
like
cherimoya
low
ones
can
reduce
average
time
moving
high
frequency
words
higher
tree
expense
increasing
path
lengths
low
frequency
words
given
sequence
words
frequencies
word
can
come
optimal
search
tree
one
minimum
possible
value
sum
optimal
triangulation
simple
polygons
finite
element
method
technique
solving
numerical
problems
stress
heat
flow
simulations
involves
dividing
input
shape
simple
elements
triangles
setting
set
linear
equations
describing
relations
simulated
quantities
element
solving
equations
solution
time
accuracy
depend
quality
triangulation
generally
desired
triangles
close
equilateral
possible
lot
work
finite
element
mesh
generation
community
measure
mesh
quality
one
commonly
used
measure
quality
single
triangle
area
divided
sum
squares
three
edge
lengths
goal
find
triangulation
every
triangle
quality
greater
threshhold
large
possible
trying
maximize
minimum
quality
triangle
closely
related
problem
theoretical
interest
find
triangulation
maximizing
sum
lengths
edges
one
reasons
interesting
input
just
set
vertices
triangulation
must
cover
convex
hull
know
problem's
complexity
polynomial
time
algorithm
proof
hard
however
simple
polygons
polygons
without
holes
triangulation
vertices
allowed
lie
polygon
vertices
optimal
triangulation
problems
can
solved
dynamic
programming
2
abstract
formulation
viewing
problems
abstractly
can
view
problems
common
framework
take
point
view
third
problem
optimal
triangulation
now
restrict
attention
triangulations
regular
polygons
assume
possible
triangle
triangulation
quality
binary
operation
lets
us
combine
quality
several
triangles
seek
triangulation
regular
gon
minimizes
maximizes
t0
t1
t2
t0
t1
t2
etc
denote
triangles
triangulation
order
make
sense
independent
indexing
triangles
binary
operation
commutative
associative
examples
will
one
sum
minimum
maximum
operations
3
relation
abstraction
initial
problems
optimal
triangulation
simple
polygons
easy
see
abstract
problem
matches
optimal
simple
polygon
triangulation
problem
vertex
simple
polygon
can
correspond
one
one
vertex
regular
polygon
correspondence
takes
triangulations
simple
polygon
triangulations
regular
polygon
case
max
min
quality
triangulation
can
measure
quality
regular
polygon
triangle
examining
quality
corresponding
triangle
input
however
triangle
disallowed
crosses
input
polygon's
boundary
give
corresponding
regular
polygon
triangle
quality
zero
let
min
seek
maximize
t0
t1
t2
just
minimum
quality
triangle
triangulation
input
zero
regular
polygon
triangulation
correspond
triangulation
input
similarly
represent
minimum
weight
triangulation
problem
let
perimeter
infinity
regular
polygon
triangle
corresponds
triangle
crossing
boundary
input
polygon
let
sum
seek
minimize
t0
t1
t2
just
perimeter
input
polygon
plus
twice
weight
chosen
diagonals
optimal
binary
search
tree
construction
see
regular
polygon
triangulation
problem
corresponds
construction
optimal
binary
search
trees
draw
search
tree
words
order
around
polygon's
sides
except
top
side
will
correspond
tree
root
form
tree
placing
node
triangle
connecting
across
three
sides
triangle
neighboring
nodes
words
outside
polygon
conversely
search
tree
reverse
process
form
triangulation
quality
search
tree
sum
frequencies
words
node
sum
sum
frequencies
sides
top
edge
triangulation
find
optimal
binary
search
tree
look
triangulation
minimizing
t0
t1
t2
optimal
scheduling
matrix
multiplications
view
matrix
multiplication
ordering
optimal
triangulation
problem
label
sides
regular
polygon
except
top
matrix
names
vertices
polygon
matrix
dimensions
label
diagonal
triangulation
product
two
labels
triangle
meaning
opposite
top
edge
top
edge
will
end
labeled
formula
multiplying
matrices
together
conversely
formula
can
determine
triangulation
count
number
operations
matrix
multiplication
simply
let
sum
product
three
numbers
written
corners
triangle
4
dynamic
programming
solution
recall
dynamic
programming
problem
want
identify
set
subproblems
solve
following
properties
small
number
distinct
subproblems
original
problem
subproblem
can
solved
quickly
know
values
certain
smaller
subproblems
algorithm
works
solving
subproblems
systematic
order
using
array
store
subproblem
values
optimal
triangulation
problems
define
subproblem
optimal
triangulation
smaller
polygon
lying
one
diagonals
original
polygon
subproblem
can
indexed
pair
numbers
positions
vertices
either
end
diagonal
numbers
used
index
array
matrix
multiplication
problem
subproblem
can
solved
trying
possibilities
top
triangle
using
precomputed
values
smaller
subproblems
either
side
top
triangle
pseudocode
subproblem
values
stored
array
quality
triangle
measured
function
positions
three
triangle
corners
assume
trying
minimize
t0
t1
t2
applications
trivial
modify
code
maximize
instead
mesh
generation
application
use
python
syntax
minor
modifications
use
operation
intuitive
syntax
loops
integers
means
takes
integer
values
make
comparisons
true
constant
id
denotes
identify
element
operation
zero
addition
infinity
maximization
0
last
line
pseudocode
constructs
list
1
values
finds
minimum
value
list
line
expanded
loop
constant
time
operations
0
student
pointed
class
outer
loop
needs
run
backwards
smaller
values
will
available
needed
since
algorithm
consists
three
nested
loops
iterates
times
total
time
n3
longest
common
subsequence
problem
code
merely
computes
value
optimal
solution
find
solution
involves
simple
linear
time
backtracking
procedure
computed
array
values
