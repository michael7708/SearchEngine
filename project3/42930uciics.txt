model classes mvc pattern 

model
classes
mvc
pattern
introduction
computer
science
iii
ics
21
22
23
introduction
lecture
will
learn
little
new
java
will
explore
various
classes
make
pattern
writing
applications
controlled
graphic
user
interfaces
guis
pattern
named
model
view
controller
mvc
consists
writing
application
three
main
classes
implementing
one
aspect
gui
objects
constructed
three
classes
coordinate
behavior
accomplish
goal
application
lecture
will
focus
writing
model
classes
discuss
two
simple
gui
applications
first
allows
user
experiment
combining
various
strengths
colors
red
green
blue
designing
backgrounds
html
pages
second
uses
array
simulate
number
balls
bouncing
bounded
box
can
download
color
calculator
bouncingballs
gui
applications
unzip
run
examine
classes
will
focus
ther
model
classes
applications
upcoming
programming
assignments
will
supply
view
controller
classes
will
write
model
class
interacts
later
semester
will
return
programs
examine
view
controller
classes
detail
last
assignment
semester
will
supply
model
class
will
write
view
controller
classes
program
mvc
pattern
programming
patterns
good
ideas
something
bigger
code
can
used
programming
projects
mvc
pattern
good
way
think
writing
gui
applications
separates
application
three
main
classes
interact
coordinate
entire
application
model
class
bridge
control
view
user
activates
control
calls
method
model
tell
change
state
notifies
view
state
changed
point
view
calls
methods
model
supply
information
displays
model
initiates
actions
accepts
commands
controller
processes
one
can
use
model
many
different
view
controller
classes
one
might
allow
user
much
easier
way
interact
application
view
class
coordinates
appearance
gui
decides
controls
displays
go
labels
text
fields
buttons
etc
notified
model
model
changed
state
view
redisplays
calling
methods
model
return
information
view
must
display
view
class
typically
long
boring
programming
perspective
contains
lots
specifics
gui
looks
things
like
fonts
sizes
foreground
background
colors
placement
components
requires
lots
details
writing
one
involves
understanding
lots
classes
standard
java
library
inheritance
controller
class
collects
together
controls
gui
whenever
user
activates
control
calls
method
model
tell
change
state
appropriately
listeners
specified
controller
complicated
small
chunks
java
code
detect
action
user
call
method
model
takes
care
action
writing
controllers
involves
understanding
lots
classes
standard
java
library
inheritance
using
mvc
pattern
tiny
gui
application
overkill
probably
harder
understand
gui
written
way
compared
writing
one
big
class
necessary
code
gui
applications
get
even
bit
bigger
partitioning
code
three
classes
allows
us
keep
complexity
class
small
enough
manage
easily
remember
divide
conquer
division
also
makes
testing
debugging
easier
well
adding
new
features
typically
edit
just
one
classes
make
small
related
changes
three
classes
encapsulate
different
aspect
gui
modifying
code
start
asking
aspect
need
change
even
relatively
small
gui
applications
like
ones
will
study
semester
will
easier
understand
follow
mvc
pattern
get
experience
using
pattern
finally
tiny
main
method
application
class
coordinates
pattern
creating
objects
three
classes
calling
special
methods
object
allow
access
objects
needs
call
methods
main
method
starts
gui
disappears
gui
stays
around
even
main
method
terminated
main
body
typically
dozen
lines
code
every
main
method
controlling
application
written
via
mvc
pattern
looks
similar
every
one
color
calculator
color
calculator
application
implemented
using
model
view
controller
pattern
allows
us
see
color
hexadecimal
value
change
red
green
blue
components
range
0
255
can
change
component
directly
entering
legal
value
text
field
labeled
name
color
pressing
button
increment
decrement
current
value
shows
swatch
resulting
color
along
hex
value
can
use
directly
html
specify
background
foreground
color
swatch
shown
color
component
must
store
display
legal
value
range
0
255
view
split
left
labels
red
green
blue
text
fields
display
current
value
intensity
color
editable
user
can
also
type
value
directly
increment
decrement
buttons
labeled
10
10
right
color
swatch
used
intensity
values
colors
display
legal
value
hex
value
color
currently
shown
word
unknown
swatch
displayed
screen
shot
application
running
download
run
color
calculator
now
experimenting
entering
text
pressing
buttons
controller
three
editable
text
fields
one
color
six
buttons
two
right
color
one
increment
color's
value
10
one
decrement
value
10
model
stores
instance
variables
intensity
colors
references
modularcounter
values
instance
variable
stores
null
denotes
intensity
color
yet
entered
correctly
also
stores
reference
view
can
call
update
method
see
changecolorviatextfield
changecolorviabutton
methods
whenever
user
changes
state
model
entering
new
intensity
incrementing
decrementing
intensity
pressing
one
buttons
textfield
conrol
activated
either
user
presses
enter
entering
text
user
moves
another
control
entering
text
calls
changecolorviatextfield
method
model
class
method
passed
strings
color
activated
information
entered
box
supposed
intensity
range
0
255
intensity
string
can
parsed
int
range
instance
variables
storing
color's
intensity
reset
value
otherwise
reset
null
either
case
model
tells
view
update
afterwards
button
control
activated
pressed
calls
changecolorviabutton
method
model
class
method
passed
string
color
activated
int
change
either
10
10
depending
button
pressed
instance
variable
storing
intensity
color
non
null
incremented
decremented
appropriately
otherwise
remains
null
either
case
model
tells
view
update
afterwards
whenever
button
pressed
cursor
moved
new
textfield
enter
pressed
textfield
controller
displays
trace
message
inside
console
window
console
used
input
output
guis
often
used
help
debug
guis
message
includes
description
happens
parameters
sent
model
method
subsequently
called
whenever
view's
update
method
called
calls
getred
getgreen
getblue
accessor
query
methods
model
displays
values
textbox
legal
values
also
displays
swatch
color
calls
gethex
accessor
query
method
model
displays
value
beneath
swatch
package
access
explore
actual
definitions
model
class
colorcalculator
package
will
learn
another
access
modifier
frequently
used
recall
ebnf
access
modifiers
far
will
add
later
access
modifiers
public
private
static
final
always
specified
either
public
private
fact
alternatives
appear
option
can
discard
discard
option
writing
neither
public
private
say
resulting
access
package
friendly
just
package
access
package
friendly
java
considers
public
classes
defined
package
private
classes
defined
packages
bit
restrictive
making
memember
public
public
classes
less
restrictive
making
private
private
classes
defined
package
application
described
contains
classes
model
view
controller
colorcalculator
package
members
declared
private
instance
variables
helper
methods
others
declared
public
constructors
new
uses
application
class
anonymous
package
package
friendly
model
methods
called
controller
update
method
view
class
called
model
class
recall
class
defined
package
need
import
classes
package
java
compiler
automatically
imports
exactly
implicitly
imported
classes
can
access
package
friendly
members
color
calculator
model
definitions
now
will
examine
detail
model
class
defined
colorcalculator
package
defines
following
instance
variables
private
view
view
private
modularcounter
red
green
blue
color
instance
variables
initially
store
null
meaning
values
yet
first
assigned
values
via
changecolorviatextfield
method
described
view
instance
variable
reinitialized
main
method
application
class
constructs
object
class
calls
addview
argument
public
void
addview
view
view
recall
method
must
public
application
class
calling
defined
anonymous
package
colorcalculator
constructor
model
class
simply
public
model
nothing
color
instance
variables
class
correctly
initialized
declared
four
main
accessor
query
methods
int
getred
return
red
null
1
red
getvalue
int
getgreen
return
green
null
1
green
getvalue
int
getblue
return
blue
null
1
blue
getvalue
string
gethex
return
gh
getred
gh
getgreen
gh
getblue
methods
defined
package
friendy
thus
callable
methods
classes
defined
colorcalculator
package
case
methods
view
class
view
class
expects
first
three
methods
return
int
values
1
meaning
definition
methods
examine
appropriate
instance
variable
supply
correct
information
gethex
method
calls
private
gh
helper
method
three
times
one
color
catenating
results
together
called
three
methods
return
non
1
values
next
will
examine
two
main
mutators
commands
called
controller
void
changecolorviatextfield
string
color
string
intensity
color
equals
red
red
null
else
color
equals
green
green
null
else
color
equals
blue
blue
null
else
return
good
color
try
int
integer
parseint
intensity
color
equals
red
red
new
modularcounter
256
color
equals
green
green
new
modularcounter
256
color
equals
blue
blue
new
modularcounter
256
catch
exception
set
value
use
null
one
system
println
state
view
null
case
model's
main
application's
running
view
update
call
method
updates
one
color
instance
variables
note
identifier
exception
name
class
matches
exception
thrown
method
first
cascaded
statement
uses
color
parameter
store
null
instance
variable
color
whose
textfield
modified
way
value
entered
bad
either
number
range
0
255
instance
variable
now
stores
correct
result
try
block
first
tries
parse
intensity
parameter
throws
numberformatexception
skips
code
storing
instance
variable
still
stores
null
throw
exception
instance
variable
assigned
new
modularcounter
intensity
range
0
255
constructor
throws
illegalargumentexception
result
instance
variable
still
stores
null
values
range
instance
variable
stores
reference
modularcounter
object
correct
value
finally
regardless
instance
variable
updated
method
prints
state
console
window
calls
update
updates
gui
calling
accessors
queueris
discussed
determine
display
next
examine
method
called
buttons
pressed
gui
void
changecolorviabutton
string
color
int
amount
color
equals
red
red
null
red
update
amount
else
color
equals
green
green
null
green
update
amount
else
color
equals
blue
blue
null
blue
update
amount
else
return
good
color
system
println
state
view
null
case
model's
main
application's
running
view
update
method
bit
shorter
less
complex
easier
understand
cascaded
statement
uses
color
parameter
determine
whether
instance
variable
can
updated
must
already
store
correct
value
value
stored
modularcounter
object
incremented
decremented
udpate
one
value
stored
parameter
amount
regardless
instance
variable
updated
method
prints
state
console
window
calls
update
updates
gui
calling
accessors
queueris
discussed
determine
display
finally
tostring
method
follows
standard
form
method
must
declared
public
will
learn
discuss
inheritance
public
string
tostring
return
model
red
red
green
green
blue
blue
note
automatically
called
system
println
state
written
system
println
state
tostring
just
system
println
state
tostring
model
debugging
gui
applications
often
use
console
window
display
information
useful
debugging
purposes
controller
class
every
user
action
displays
console
window
example
pressing
red
10
button
prints
message
debug
controller
color
button
10
10
button
pressed
red
10
console
window
way
can
determine
whether
activating
controls
correctly
model
class
every
time
one
methods
calls
view
update
first
prints
state
model
three
important
instance
variables
console
window
example
first
thing
enter
10
red
textfield
model
prints
state
model
red
10
mod
256
green
null
blue
null
console
window
way
can
display
textual
representation
state
model
class
scrollable
window
can
examine
entire
history
interaction
gui
changes
made
one
another
interesting
way
test
model
class
even
without
access
view
controller
classes
may
even
written
model
finished
certainly
like
test
class
independently
others
soon
written
can
write
driver
similar
drivers
test
classes
case
will
actually
write
driver
main
method
class
also
done
classes
examined
delayed
introducing
material
bit
sophisticated
writing
classes
recall
every
class
allowed
define
special
main
method
class
appears
public
static
void
main
string
args
model
new
model
system
println
state
try
system
println
menu
system
println
changecolorviatextfield
system
println
changecolorviabutton
system
println
view
accessors
system
println
quit
char
selection
prompt
forchar
enter
command
tb
selection
't'
string
color
prompt
forstring
enter
color
string
intensity
prompt
forstring
enter
intensity
changecolorviatextfield
color
intensity
else
selection
'b'
string
color
prompt
forstring
enter
color
int
amount
prompt
forint
enter
amount
changecolorviabutton
color
amount
else
selection
'
'
system
println
getred
getred
system
println
getgreen
getgreen
system
println
getblue
getblue
getred
1
getgreen
1
getblue
1
system
println
gethex
colors
missing
else
system
println
gethex
gethex
system
println
else
selection
'q'
break
else
system
println
selection
unknown
command
catch
exception
system
println
exception
caught
handled
getmessage
method
first
constructs
object
model
class
drivers
displays
menu
options
prompts
user
call
method
prompts
user
whatever
arguments
needed
call
method
calls
method
will
recall
prints
state
model
whenever
state
changes
thus
prompting
menu
entry
arguments
takes
place
activating
control
direct
java
execute
main
method
instead
one
application
class
change
java
target
main
class
text
field
contains
colorcalculator
model
discussed
detail
general
lecture
main
methods
recall
application
anonymous
package
prefaced
package
name
since
model
colorcalculator
package
must
prefaced
name
short
session
driver
state
model
red
null
green
null
blue
null
menu
changecolorviatextfield
changecolorviabutton
view
accessors
quit
enter
command
tb
enter
color
red
enter
intensity
100
state
model
red
100
mod
256
green
null
blue
null
menu
changecolorviatextfield
changecolorviabutton
view
accessors
quit
enter
command
tb
enter
color
red
enter
amount
10
state
model
red
90
mod
256
green
null
blue
null
menu
changecolorviatextfield
changecolorviabutton
view
accessors
quit
enter
command
tb
getred
90
getgreen
1
getblue
1
gethex
colors
missing
finally
reason
mutator
command
includes
view
null
case
model's
main
application's
running
view
update
instead
just
calling
view
update
case
running
main
model
class
view
never
set
refer
object
stores
initial
value
null
main
run
application
class
will
always
first
call
setview
method
appropriately
bouncing
balls
bouncing
balls
application
also
implemented
using
model
view
controller
pattern
addition
model
class
uses
arrays
length
doubling
can
create
number
balls
clicking
window's
screen
array
stores
ball
appears
clicked
location
initialized
random
color
change
random
velocity
balls
reach
boundaries
window
bounce
back
interior
panel
buttons
top
application
buttons
start
stop
simulation
button
reset
stop
remove
balls
clearing
screen
screen
shot
application
running
download
run
bouncing
balls
now
experimenting
clicking
window
pressing
buttons
application
runs
mainly
defining
timer
kind
control
automatically
fires
every
100
milliseconds
fires
first
calls
updateall
method
model
class
calls
update
method
every
ball
object
array
model
stores
ball
object
computes
new
coordinate
based
current
coordinate
horizontal
vertical
velocities
including
whether
bounces
wall
changes
horizontal
vertical
velocity
move
opposite
direction
next
timer
calls
displayall
method
model
class
clears
window
calls
display
method
every
ball
object
array
model
stores
ball
object
displays
window
current
coordinate
update
display
actions
happen
quickly
looks
like
balls
moving
smoothly
methods
model
class
also
called
whenever
user
presses
start
stop
reset
button
first
two
buttons
toggle
instance
variable
determines
simulation
running
actually
updateall
nothing
simulation
stopped
reset
pressed
current
ball
objects
removed
array
bouncing
balls
model
definitions
now
will
examine
detail
model
class
defined
bouncingballs
package
defines
following
instance
variables
private
view
view
private
ball
balls
refer
ball
private
int
used
much
balls
array
used
private
boolean
running
whether
updateall
update
balls
private
int
cyclecount
times
updateall
called
since
reset
used
similar
top
rear
storing
stack
queue
collections
stores
number
indexed
members
stored
balls
locations
0
used
1
ball
class
used
declare
array
small
defines
just
one
constructor
three
methods
ball
int
int
int
vx
int
vy
void
update
dimension
box
void
display
graphics
public
string
tostring
will
used
methods
defined
model
class
notice
methods
defined
package
friendly
except
tostring
always
must
declared
public
dimension
graphics
two
classes
declared
standard
java
library
view
instance
variable
reinitialized
main
method
application
class
constructs
object
class
calls
addview
argument
public
void
addview
view
view
recall
method
must
public
application
class
calling
defined
anonymous
package
bouncingballs
constructor
model
class
public
model
reset
definition
reset
void
reset
running
false
cyclecount
0
used
0
balls
new
ball
1
whenever
model
object
constructed
calls
reset
also
whenever
reset
button
pressed
controller
calls
method
reinitializing
instance
variables
methods
others
discussed
section
defined
package
friendy
callable
methods
classes
defined
bouncingballs
package
two
accessor
query
methods
also
simple
int
getcyclecount
return
cyclecount
int
getballcount
return
used
likewise
two
methods
besides
reset
controller
calls
simple
void
start
running
true
void
stop
running
false
sets
running
instance
variables
examined
updateall
method
see
first
interesting
method
called
controller
whenever
user
clicks
somewhere
window
receives
arguments
coordinate
click
window
click
count
2
means
double
click
although
last
parameter
ignored
void
mouseclick
int
int
int
clickcount
used
balls
length
doublelength
balls
used
new
ball
randominrange
10
10
randominrange
10
10
randomcolor
method
puts
new
ball
object
rear
array
doubling
length
enough
room
discuss
helper
method
defined
similarly
seen
ball
object
constructed
state
initially
coordinate
click
horiztontal
vertical
velocities
random
values
range
10
10
random
color
will
examine
random
helper
methods
read
actual
class
definition
now
seen
every
method
called
user
interaction
controller
reset
start
stop
mouseclick
now
focus
two
methods
automatically
called
every
100
milliseconds
controller
updateall
displayall
void
updateall
running
return
cyclecount
int
0
used
balls
update
view
getenclosingbox
system
println
state
note
instance
variable
running
false
method
returns
immediately
otherwise
increments
cyclecount
just
calls
update
method
ball
object
stores
telling
dimensions
box
balls
bouncing
information
view
class
provides
commented
output
statement
generate
much
data
normal
circumstances
although
end
section
show
results
using
output
simple
simulation
method
mostly
acts
dispatcher
controller
says
time
model
change
state
iterates
ball
objects
stores
instructs
update
state
way
distributed
complexity
model
manages
collection
ball
objects
something
model
just
balls
likewise
displayall
method
void
displayall
graphics
int
0
used
balls
display
controller
says
time
model
re
display
blank
window
iterates
ball
objects
stores
instructs
display
even
understand
details
ball
object
updates
displays
can
write
code
manages
collection
ball
objects
result
bodies
methods
model
produces
interesting
simulation
simple
note
calls
view
update
class
timer
fires
automatically
calls
method
calls
displayall
technically
new
ball
object
added
simulation
can
take
100
milliseconds
appears
window
finally
tostring
method
follows
standard
form
loop
looking
much
tostring
methods
collection
classes
public
string
tostring
string
answer
model
used
used
running
running
cyclecount
cyclecount
int
0
used
answer
balls
balls
return
answer
uncommented
output
statement
updateall
trace
two
ball
objects
follows
notice
example
1st
cycle
coordinate
first
ball
object
moved
initial
value
76
84
79
91
expect
given
vx
3
vy
7
debug
controller
mouse
clicked
1
76
84
debug
controller
mouse
clicked
1
251
193
debug
controller
start
button
pressed
state
model
used
2
running
true
cyclecount
1
balls
0
ball
79
91
vx
3
vy
7
color
java
awt
color
39
37
151
balls
1
ball
257
203
vx
6
vy
10
color
java
awt
color
102
10
174
state
model
used
2
running
true
cyclecount
2
balls
0
ball
82
98
vx
3
vy
7
color
java
awt
color
39
37
151
balls
1
ball
263
213
vx
6
vy
10
color
java
awt
color
102
10
174
state
model
used
2
running
true
cyclecount
3
balls
0
ball
85
105
vx
3
vy
7
color
java
awt
color
39
37
151
balls
1
ball
269
223
vx
6
vy
10
color
java
awt
color
102
10
174
state
model
used
2
running
true
cyclecount
4
balls
0
ball
88
112
vx
3
vy
7
color
java
awt
color
39
37
151
balls
1
ball
275
233
vx
6
vy
10
color
java
awt
color
102
10
174
writing
models
one
generally
think
writing
model
class
given
matching
controller
view
class
model
think
sitting
desk
various
telephones
one
method
controller
viewer
might
call
also
various
note
cards
desk
written
value
one
instance
variables
model's
job
take
calls
phones
update
information
appropriately
cards
colorcalculator
model
will
telephone
labelled
changecolorviabutton
called
controller
user
presses
increment
decrement
button
telephone
labelled
changecolorviatextfield
called
controller
user
enters
text
one
color
fields
called
changecolorviabutton
phone
told
color
amount
increment
decrement
parameters
called
changecolorviatextfield
phone
told
color
amount
time
amount
string
may
may
contain
legal
integer
value
model
figure
model
need
three
note
cards
one
amount
red
green
blue
current
color
using
modularcounters
values
always
range
0
255
use
null
mean
amount
color
yet
set
method
call
potentially
changes
one
cards
also
phones
called
view
asking
information
getred
getgreen
getblue
methods
accessors
queries
called
one
phones
tell
caller
int
value
representing
intensity
color
also
gethex
phone
called
must
compute
return
string
stores
one
integer
written
base
16
represents
red
green
blue
components
value
need
stored
instance
variable
just
computed
necessary
red
green
blue
instance
variables
model
classes
really
initiate
actions
respond
requests
either
requests
originate
controller
change
state
requiests
originate
view
examine
current
state
course
model
notify
view
state
changed
causing
call
back
methods
model
examine
new
state
must
redisplay
problem
set
ensure
understand
material
lecture
please
solve
announced
problems
read
lecture
get
stumped
problem
go
back
read
relevant
part
lecture
still
questions
please
get
help
instructor
ca
tutor
student
suppose
color
field
contains
legal
value
user
enters
bad
one
rewrite
model
redisplay
store
old
value
right
wrong
one
entered
instead
redisplaying
message
enter
0
255
happens
comment
call
view
update
changecolorviabutton
changecolorviatextfield
methods
instead
initializing
colors
model
null
rewrite
model
initialize
0
random
numbers
0
255
range
bouncing
balls
application
can
eliminate
reset
method
initializing
instance
variables
declared
random
helper
methods
bouncingballs
model
defined
static
defined
non
static
doublelength
helper
method
defined
non
static
defined
static
uncomment
output
statement
updateall
method
bouncing
ball
simulation
will
never
see
running
false
examine
javadoc
color
class
standard
java
library
assume
defined
color
randomcolor
randomcolor
write
code
stores
reference
color
object
whose
red
green
blue
components
average
a's
b's
color
components
rewrite
bouncingballs
model
class
remove
ball
object
displayed
within
distance
2
ball
object
rewrite
bouncingballs
model
class
fuse
ball
object
displayed
within
distance
2
ball
object
fusing
means
average
velocities
color
rewrite
colorcalculator
model
class
simpler
using
use
3
value
array
store
color
components
arrays
might
helpful
try
simplify
code
much
possible
public
access
modifier
used
constructor
model
class
package
friendly
change
another
class
allow
defined
package
friendly
