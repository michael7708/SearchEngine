michael franz 
project 
uci
ics
franz
onr
sponsored
research
home
comprehensive
context
mobile
code
deployment
introduction
given
acknowledged
importance
existing
emerging
mobile
code
technologies
remarkably
little
attention
far
devoted
management
mobile
programs
far
predominant
model
example
underlies
distribution
java
applets
internet
identifies
dynamically
linkable
parts
mobile
programs
url
string
model
assumes
constituent
parts
make
mobile
program
will
downloaded
single
location
verified
linked
possibly
dynamically
compiled
finally
executed
location
immediately
obvious
model
far
primitive
capture
whole
spectrum
meaningful
distribution
schemes
mobile
code
many
modes
mobile
code
dissemination
deployment
likely
highly
useful
badly
supported
current
distribution
models
architectures
needed
overarching
architecture
can
describe
current
modes
mobile
code
deployment
also
meaningful
future
ones
physical
separation
machines
performing
verification
dynamic
compilation
execution
support
existence
multiple
levels
security
along
code
distribution
pipeline
conducting
methodical
research
implement
prototype
mobile
code
distribution
architecture
first
developing
comprehensive
model
can
capture
meaningful
modes
mobile
code
deployment
including
issues
code
versioning
code
migration
differentiation
code
validation
dynamic
code
translation
instruction
formats
code
execution
potentially
occur
multiple
physically
disjoint
sites
model
provides
taxonomy
mobile
code
distribution
modes
simultaneously
casting
model
actual
extensible
distributed
safe
secure
code
management
architecture
practical
application
architecture
currently
implementing
prototype
system
native
code
generated
firewall
mobile
code
distribution
format
downloaded
computationally
restricted
devices
deployed
theater
via
secure
high
bandwidth
short
range
wireless
link
significant
issue
compiling
mobile
code
native
code
sheer
size
java
api
compiler
apply
optimizations
compile
methods
classes
program
references
resulting
code
size
large
mobile
devices
avoid
class
explosion
problem
compiler
performs
rapid
type
analysis
powerful
technique
determines
callable
methods
based
classes
instantiated
program
compiling
callable
methods
dramatically
reduces
code
size
without
rapid
type
analysis
native
codestream
typical
helloworld
graphical
application
nearly
megabyte
rapid
type
analysis
reduces
code
size
around
100
kilobytes
shown
additionally
control
flow
graph
constructed
uncallable
methods
deleted
precise
original
counterpart
thus
dataflow
analysis
revised
control
flow
graph
faster
accurate
allowing
better
optimizations
generated
code
facilitate
fast
efficient
recompilation
diverse
platforms
compiler
caches
intermediate
results
hence
can
use
highly
optimized
intermediate
representation
across
platforms
final
focus
making
greater
range
security
policies
amenable
automatic
verification
creating
source
language
constructs
accompanying
type
systems
representing
properties
directly
source
language
level
policy
can
cast
language
construct
enables
mechanical
checking
code
receiver
side
also
directly
exposes
policies
programmer
rather
hiding
behind
api
thereby
raises
semantic
level
mobile
code
can
reasoned
enhances
programmer
understanding
process
proxyvm
infrastructure
overview
proxyvm
framework
increases
utility
resource
constrained
mobile
devices
software
techniques
framework
positions
powerful
server
infrastructure
proxy
mobile
devices
internet
proxy
includes
just
time
compiler
bytecode
translator
high
bandwidth
low
latency
secure
wireless
connection
mediates
communication
proxy
mobile
devices
vicinity
users
can
request
internet
applications
normally
web
browser
proxy
intercepts
requests
reissues
remote
internet
server
server
sends
proxy
application
mobile
code
format
proxy
verifies
application
compiles
native
code
sends
part
generated
code
target
remainder
code
executes
proxy
significantly
reduce
execution
time
resource
consumption
partitioning
decision
adapted
application
execution
response
feedback
target
proxyvm
status
currently
infrastructure
enables
resource
efficient
mobile
code
execution
sharp
zaurus
pda
64mb
ram
16mb
rom
206
mhz
strongarm
cpu
architecture
consists
proxy
bytecode
compiler
desktop
pc
runtime
system
zaurus
typical
transaction
user
requests
class
file
internet
proxy
intercepts
request
downloads
required
classes
compiles
classes
native
code
sends
binary
pda
runtime
system
executes
code
mapping
memory
thereafter
code
executes
without
using
java
support
handheld
past
year
added
support
several
essential
java
constructs
including
floating
point
instructions
exceptions
threads
garbage
collection
strings
interfaces
math
libraries
networking
libraries
abstract
window
toolkit
also
implemented
algorithms
identify
callable
methods
java
programs
selective
compilation
methods
reduces
compilation
time
code
size
memory
consumption
target
novel
features
enable
remote
execution
graphical
programs
zaurus
presented
2001
uci
mobile
code
symposium
discussed
detail
recent
technical
report
augmenting
compiler
generate
intermediate
representation
register
based
code
portability
debugging
purposes
code
generator
will
output
elf
binaries
also
reducing
trusted
codebase
handheld
bare
minimum
loading
executing
programs
two
postdoctoral
fellows
five
senior
undergraduates
assisting
efforts
also
developing
experimental
platform
study
application
partitioning
driven
resource
constraints
platform
will
allow
us
evaluate
partitioning
choices
diverse
architectures
different
granularity
levels
including
source
level
bytecode
level
class
level
object
level
cost
function
will
characterize
application
behavior
statically
dynamically
incorporating
essential
runtime
information
communication
overhead
memory
requirements
battery
consumption
partitioning
algorithm
first
performs
static
global
program
analysis
compute
resource
requirements
determine
least
costly
partition
object
dependence
graph
dynamically
adapts
partitioning
decisions
respect
profiling
data
approach
differs
sharply
traditional
approaches
use
dynamic
strategies
alone
prior
approaches
might
effective
specific
optimization
criteria
significantly
increase
application
runtime
moreover
none
traditional
approaches
consider
optimization
criteria
approach
considers
approach
integrated
existing
proxyvm
compilation
execution
platform
last
update
29th
november
2003
franz
uci
edu
