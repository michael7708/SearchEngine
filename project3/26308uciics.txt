software architecture sites 
software architecture 
software
architectureresource
sites
bell
labsstars
software
architecture
technology
guideusc
center
software
engineeringcomputer
science
laboratory
srilaser
umass
amherstcs
carnegie
mellon
universitysei
carnegie
mellon
universityopen
implementation
xeroxaspect
oriented
programming
xeroxinter
language
unification
xeroxsystems
generator
utexasserl
ucoloradopatterns
uiucsoftware
design
networksa
honeywellsa
teknowledgesa
uc
irvinesa
gatechsa
oregon
graduate
instituterapide
stanfordtafim
disareuse
contractsarchitecture
composition
softwareworld
wide
institute
software
architects
world
wide
institute
software
architects
institute
software
architects
nonprofit
membership
organization
mission
accelerate
establishment
profession
software
architecture
provide
information
services
software
architects
clients
sa
bell
labs
site
contains
dewayne
perry's
collection
sa
material
includes
links
papers
sites
projects
individuals
architecture
composition
software
department
computer
science
business
administration
university
karlskrona
ronneby
arcs
research
group
formed
researchers
university
karlskrona
ronneby
university
kalmar
within
arcs
study
architecture
software
systems
composition
software
components
systems
primarily
perspective
object
oriented
paradigm
indicates
approach
software
architecture
influenced
experiences
object
oriented
frameworks
class
libraries
design
patterns
advanced
object
oriented
computation
models
research
perspective
taken
arcs
group
based
three
observations
insufficient
support
provided
describing
system
architectures
reasoning
architectural
issues
lately
research
efforts
started
address
issues
things
far
solved
remains
notoriously
difficult
construct
systems
composing
reused
components
especially
component
adaptation
lacks
support
well
understood
design
system
architecture
potentially
conflicting
non
functional
requirements
reuse
contracts
reuse
contract
methodology
novel
methodology
managing
reuse
evolution
software
development
methodology
addresses
incremental
iterative
development
reusable
software
components
models
build
highly
customized
applications
based
components
models
much
inspiration
developing
reuse
contracts
drawn
practical
experience
developing
object
oriented
frameworks
see
communications
acm
paper
october
1997
practical
method
builds
existing
object
oriented
analysis
design
methods
casu
uml
yet
distinguishes
methodologies
formal
foundation
support
evolution
reused
components
way
reused
formally
described
contract
hence
name
forms
basis
tools
managing
change
checking
consistency
models
code
formal
notation
simple
enough
every
day
use
can
explained
hour
rapide
stanford
rapide
language
effort
focuses
developing
new
technology
building
large
scale
distributed
multi
language
systems
technology
based
upon
new
generation
computer
languages
called
executable
architecture
definition
languages
eadls
innovative
toolset
supporting
use
eadls
evolutionary
development
rigorous
analysis
large
scale
systems
rapide
designed
support
component
based
development
large
multi
language
systems
utilizing
architecture
definitions
development
framework
rapide
adopts
new
event
based
execution
model
distributed
time
sensitive
systems
timed
poset
model
posets
provide
detailed
formal
basis
date
constructing
early
life
cycle
prototyping
tools
later
life
cycle
tools
correctness
performance
analysis
distributed
time
sensitive
systems
software
architecture
technology
guide
purpose
node
provide
dod
software
developers
overview
software
architecture
technology
serve
virtual
road
map
additional
web
resources
understanding
applying
architectural
techniques
domain
specific
reuse
reader
guided
software
architecture
concepts
representation
methods
architecture
focused
software
efforts
recommended
readings
additional
sources
including
adequate
treatment
architecture
description
languages
software
architecture
technology
information
effort
sponsored
department
defense
oasd
c3i
information
technology
directorate
contracted
air
force
electronic
systems
center
esc
part
software
technology
adaptable
reliable
systems
stars
program
center
software
engineering
dr
barry
boehm
founded
center
university
southern
california
1993
purpose
provide
environment
research
teaching
areas
large
scale
software
design
development
processes
generic
domain
specific
software
architectures
software
engineering
tools
environments
cooperative
system
design
economics
software
engineering
work
software
architecture
focuses
representing
software
architectures
fitting
software
architectures
software
process
architecting
product
line
specific
domain
using
infrastructure
technologies
tool
set
tools
assist
architect
managing
multiple
view
architecture
software
architecture
projects
sri
two
major
projects
area
software
architecture
one
focused
development
fundamental
enabling
technology
applying
development
useful
architectural
standard
projects
multiyear
involve
collaboration
researchers
stanford
university
interested
formal
methods
also
consider
sri
cambridge
computer
science
research
centre
laboratory
advanced
software
engineering
research
research
done
laser
falls
following
categories
process
object
management
analysis
software
systems
software
architecture
works
fits
interoperability
problem
looking
stratgies
architectures
allow
tools
developed
different
languages
operate
shared
data
passing
control
among
computer
science
carnegie
mellon
university
carnegie
mellon
university's
able
project
concerned
exploring
formal
basis
software
architecture
developing
concept
architectural
style
building
tools
practicing
software
architects
might
find
useful
tool
development
effort
focused
aesop
system
toolkit
rapidly
producing
software
architecture
design
analysis
environments
customized
support
specific
architectural
styles
formal
work
revolves
around
wright
language
composable
systems
group
focuses
three
research
areas
software
architecture
formal
methods
tractable
software
analysis
develop
new
models
theories
methods
languages
tools
classifying
specifying
analyzing
designing
software
systems
beyond
component
level
support
lead
substantial
reduction
maintenance
costs
improvement
software
resuse
increase
quality
software
design
practice
make
transition
innovative
routine
design
knowledge
must
captured
organized
disseminated
handbooks
popular
means
one
example
perry's
chemical
engineers'
handbook
tome
several
inches
thick
filled
tables
diagrams
schematics
cover
topics
basics
metric
system
intricate
innards
heat
pumps
bulk
text
noted
practioners
give
useful
specific
advice
standard
solutions
common
design
tasks
vitruvius
project
cmu
taking
steps
toward
goal
establishing
just
codificaiton
practice
software
engineering
institute
sei
federally
funded
research
development
center
operated
since
1984
carnegie
mellon
university
sponsorship
defense
department's
advanced
research
projects
agency
objective
provide
leadership
software
engineering
transition
new
technology
software
engineering
practice
number
resources
available
site
aspect
oriented
programming
xerox
modules
correspond
directly
blocks
executable
code
different
aspects
concern
cross
cut
executable
code
modules
end
tangled
mess
aspects
believe
tangling
aspects
phenomenon
heart
much
complexity
existing
software
systems
believe
adjusting
scale
modules
level
programming
languages
help
without
addressing
root
cause
tangling
instead
needed
able
work
abstractions
correspond
directly
aspects
concern
blocks
executable
code
working
new
programming
paradigm
aspect
oriented
programming
aop
just
aop
works
allowing
programmers
first
express
system's
aspects
concern
separate
natural
form
automatically
combine
separate
descriptions
final
executable
form
using
tool
called
aspect
weaver
inter
language
unification
xerox
inter
language
unification
system
ilu
multi
language
object
interface
system
object
interfaces
provided
ilu
hide
implementation
distinctions
different
languages
different
address
spaces
operating
system
types
ilu
can
used
build
multi
lingual
object
oriented
libraries
class
libraries
well
specified
language
independent
interfaces
can
also
used
implement
distributed
systems
can
also
used
define
document
interfaces
modules
non
distributed
programs
ilu
interfaces
can
specified
either
omg's
corba
interface
definition
language
omg
idl
ilu's
interface
specification
language
isl
ilu
2
0
supports
programming
languages
ansi
python
will
support
java
common
lisp
1
8
release
also
contains
support
modula
3
contributed
support
modula
3
ilu
2
0
available
ilu
installed
flavors
unix
sunos
solaris
hp
ux
aix
osf
irix
freebsd
linux
lynxos
sco
unix
etc
ms
windows
3
1
95
nt
supports
threaded
posix
solaris
nt
franz
acl
ppcr
modula
3
event
loop
xt
tk
xview
operation
one
implementation
goals
maximize
compatibility
existing
open
standards
result
ilu
provides
support
use
omg
corba
idl
interface
description
language
can
thought
corba
orb
system
though
omissions
extensions
corba
spec
ilu
also
includes
self
contained
implementation
onc
rpc
possible
describe
use
existing
rpc
services
ilu
objects
ilu
also
includes
self
contained
implementation
world
wide
web's
hypertext
transfer
protocol
http
can
thus
used
implement
object
oriented
web
browsers
servers
ilu
available
free
'ftp
ftp
parc
xerox
com
pub
ilu
ilu
html'
xerox
open
implementation
open
implementation
new
design
principle
consideration
number
researchers
practitioners
workers
xerox
parc
forefront
exploring
design
notion
implication
system's
architecture
simply
put
focus
work
open
implementation
oi
develop
techniques
whereby
module
can
reusable
tailorable
exposing
certain
crucial
aspects
implementation
well
normal
interface
clients
can
allow
clients
adjust
module
better
suit
needs
recent
work
open
implementation
produced
initial
oi
analysis
design
methodology
helps
designers
work
aspects
implementation
module
expose
software
systems
generator
research
group
software
system
generators
tools
assembling
complex
software
interchangeable
reusable
components
developed
genvoca
domain
independent
model
software
construction
defines
systems
algebraic
equations
terms
components
genvoca
successfully
applied
many
domains
including
database
management
systems
avionics
data
structures
results
demonstrated
genvoca
generators
can
substantially
improve
productivity
application
run
time
performance
software
engineering
research
laboratory
software
engineering
research
laboratory
serl
part
computer
science
department
university
colorado
focus
research
global
software
engineering
consequently
research
topics
work
focuses
wide
area
software
development
deployment
context
patterns
home
page
site
organizes
material
variety
sites
regarding
patterns
pattern
languages
ps
see
also
introduction
design
patterns
patterns
can
considered
micro
architectural
view
system
work
patterns
component
design
reuse
perspective
patterns
can
found
portland
pattern
repository
software
design
network
primary
mission
sdn
promote
disseminate
information
concerning
research
software
architectures
sdn
worldwide
virtual
enterprise
faculty
students
interested
research
software
architectures
sdn
project
partially
funded
nasa
ivandv
facility
fairmont
west
virginia
started
virtual
enterprise
several
departments
research
centers
wvu
1994
conjunction
nasa
earth
observing
system
eos
project
national
library
medicine
dssa
honeywell
engineers
often
draw
annotated
diagrams
components
relationships
describe
high
level
design
architecture
system
seek
make
intuitive
notion
architecture
rigorous
defining
precise
meanings
notations
specifications
means
using
machine
processable
languages
capture
architecture
specifications
tools
analyze
architectures
estimate
system
properties
tools
automate
production
testing
software
architecture
specification
applied
principles
develop
architecture
specification
languages
real
time
systems
special
attention
paid
include
guidance
navigation
control
functions
specify
example
architectures
can
easily
adapted
meet
requirements
families
related
products
teknowledge's
dssa
prototech
projects
teknowledge's
domain
specific
software
architectures
dssa
project
home
page
also
provides
information
prototech
prototyping
technologies
project
projects
funded
arpa
sisto
dssa
ardec
army
prototech
onr
navy
software
architecture
research
irvine
software
architecture
research
directed
reducing
cost
application
development
focusing
attention
high
level
design
issues
increasing
reuse
c2
style
component
message
based
architectural
style
component
reuse
flexible
system
composition
dynamic
architecture
techniques
tools
modifying
software
architectures
execution
argo
design
environment
graphical
design
environment
constructing
analyzing
generating
c2
architectures
georgia
tech
software
architecture
reading
group
gt
sarg
reading
group
set
college
computing
people
interested
discussing
issues
related
software
architecture
gt
sarg
began
weekly
meetings
winter
quarter
1995
will
continue
long
interest
remains
reading
group
organized
gregory
abowd
faculty
member
college
computing
whose
research
interests
cover
models
evaluation
software
architectures
software
design
reliability
reuse
oregon
graduate
institute
goal
sdrr
project
create
technology
generation
software
components
phase
blackberry
project
successfully
completed
january
31
1995
created
technology
tested
compared
state
art
template
based
software
technology
sdrr
technology
demonstrated
3
times
increase
programmers'
productivity
sdrr
just
productivity
technical
architecture
framework
information
management
tafim
intended
guide
development
architectures
satisfy
requirements
across
missions
functional
areas
functional
activities
tafim
mandatory
use
dod
specific
technical
architectures
missions
functions
will
developed
using
standard
architecture
guidance
development
methodologies
provided
tafim
