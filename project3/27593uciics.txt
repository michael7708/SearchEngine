ics 142 winter 2004 assignment 1 
assignment 1 
ics
142
winter
2004
news
course
reference
schedule
lab
manual
ics
142
newsgroup
alex
ics
142
winter
2004
assignment
1
due
date
time
monday
january
26
11
59pm
introduction
first
step
compilation
scanning
sometimes
called
lexical
analysis
discussed
class
objective
scanning
take
source
program
reality
stream
characters
turn
stream
lexemes
words
instead
raises
level
abstraction
source
program
low
cost
since
scanning
can
done
efficiently
time
spent
scanning
pays
many
times
next
step
compilation
parsing
much
higher
cost
per
symbol
scanning
fewer
symbols
parser
deals
less
time
memory
used
compiler
much
efficient
parser
deals
lexemes
rather
characters
assignment
write
scanner
hypothetical
language
called
monkie2004
using
java
based
scanner
generator
called
jflex
majority
solution
assignment
jflex
scanner
generator
java
jflex
scanner
generator
takes
input
script
uses
regular
expressions
describe
set
lexeme
patterns
generates
java
class
implementing
scanner
recognizes
patterns
associated
pattern
action
chunk
java
code
time
scanner
recognizes
pattern
associated
action
executed
jflex
generates
efficient
scanner
saving
trouble
designing
implementing
dfa
hand
worse
yet
hand
coding
scanner
scratch
understanding
jflex
requires
rough
understanding
class
will
generate
well
awareness
various
settings
can
modified
class
will
behave
like
following
sections
seek
give
understanding
general
structure
jflex
script
jflex
scripts
follow
general
structure
user
code
options
declarations
lexical
rules
three
sections
script
separated
appearing
line
user
code
section
contains
code
appears
outside
scanner
class
typically
will
contain
import
package
declarations
include
additional
class
like
personally
prefer
putting
additional
classes
separate
java
files
remember
code
related
scanner
go
jflex
script
purpose
jflex
script
just
generate
class
represents
scanner
look
replacement
one
java
class
generated
code
section
will
appear
generated
scanner
class
java
file
generated
jflex
options
declarations
section
contains
three
things
specification
various
options
name
scanner
class
return
type
name
next
token
method
etc
full
list
options
listed
jflex
user
manual
need
options
ones
specified
example
declaration
additional
code
placed
scanner
class
need
add
fields
helper
methods
scanner
class
put
declarations
regular
expression
macros
establish
shorthands
commonly
appearing
subexpressions
complex
subexpressions
will
make
sense
given
name
brief
example
options
declarations
section
class
myscanner
sets
name
scanner
class
myscanner
public
makes
scanner
class
public
type
token
sets
return
type
scanner
method
token
function
getnexttoken
sets
name
scanner
method
getnexttoken
code
copied
scanner
class
verbatim
use
add
additional
fields
methods
scanner
class
necessary
private
int
anextrafield
public
int
ahelpermethod
return
anextrafield
macros
regular
expressions
can
used
next
section
building
bigger
regular
expressions
want
use
basically
reason
want
named
constants
program
readability
writability
lineterminator
whitespace
lineterminator
example
obviously
precisely
want
assignment
gives
idea
section
used
lexical
rules
section
heart
scanner
section
specify
regular
expression
describes
type
lexeme
like
recognize
along
action
executed
whenever
matching
lexeme
found
time
want
actions
contain
return
statement
statement
will
return
value
scanner
method
case
patterns
indicate
text
ignored
whitespace
comments
may
want
action
empty
instead
stands
reason
type
value
return
action
compatible
return
type
specified
options
section
examples
lexical
rules
public
return
new
token
token
public
yytext
protected
return
new
token
token
protected
yytext
private
return
new
token
token
private
yytext
return
new
token
token
identifier
yytext
examples
action
associated
rule
specifies
return
token
hypothetical
object
represents
one
token
programming
language
one
way
design
scanner
return
token
lexeme
pairs
example
token
constructed
token
type
assumed
int
constant
defined
token
class
token
identifier
lexeme
recognized
recognized
lexeme
can
accessed
calling
yytext
method
regular
expressions
jflex
style
syntax
regular
expressions
used
jflex
similar
syntax
used
many
tools
support
regular
expressions
lex
flex
grep
unix
linux
well
scripting
language
perl
also
regular
expression
package
java
library
complete
specification
can
found
jflex
user
manual
quick
list
ones
probably
find
useful
single
character
expression
matches
character
character
class
specifies
range
characters
roughly
way
expect
example
specifies
lowercase
letters
za
z0
9
specifies
uppercase
letters
lowercase
letters
digits
character
classes
can
negated
starting
character
careful
feature
character
class
specifies
characters
entire
character
set
'a'
'x'
just
'y'
'z'
string
expression
alex
matches
exactly
string
alternation
operation
specified
character
just
discussed
class
expression
matches
either
concatenation
operation
specified
juxtaposing
two
expressions
just
discussed
class
thus
expression
matches
string
begins
followed
lowercase
letter
kleene
closure
star
operation
specified
character
just
discussed
class
example
expression
specifies
strings
lowercase
letters
least
one
letter
shorthand
one
operator
can
used
expression
equivalent
shorthand
zero
one
operator
can
used
expression
equivalent
macros
used
surrounding
curly
braces
expression
whitespace
match
one
characters
whitespace
assuming
appropriately
defined
macro
called
whitespace
character
appearing
outside
string
matches
character
character
set
except
newline
expression
matches
strings
begin
lowercase
additional
operators
none
will
matter
much
assignment
jflex
script
given
input
script
jflex
generates
one
corresponding
java
file
primarily
made
class
implements
scanner
default
class
name
lexer
though
can
change
name
anything
want
specifying
value
class
option
script
also
advise
making
class
public
specifying
public
option
well
heart
scanner
class
method
returns
next
token
input
stream
can
control
specification
method
including
name
return
type
specifying
options
example
relevant
options
type
monkietoken
function
getnexttoken
will
give
next
token
method
following
signature
public
monkietoken
getnexttoken
throws
java
io
ioexception
can
also
control
aspects
method's
signature
including
exceptions
throws
end
input
reached
interested
details
refer
jflex
user
manual
primary
reason
need
kind
control
signature
scanning
method
scanner
just
small
piece
compiler
central
job
return
next
token
input
whenever
asked
next
stage
compilation
parser
will
continually
ask
scanner
next
token
work
making
sure
scanner
parser
can
integrate
together
correctly
vitally
important
especially
using
automated
parser
generator
tool
later
quarter
scanning
method
will
work
way
input
wherever
left
previously
looking
occurrence
one
patterns
specified
will
always
match
longest
occurrence
one
patterns
can
find
example
specified
two
patterns
keyword
one
lowercase
letters
remaining
input
begins
format
followed
whitespace
jflex
will
match
format
second
pattern
even
though
matched
first
pattern
mat
left
reason
simple
expect
programming
languages
behave
example
wrote
following
statement
java
program
returnx
slightest
bit
surprised
get
compiler
error
says
something
like
hey
never
declared
variable
called
returnx
crazy
expect
compiler
discover
statement
really
interpreted
mean
return
older
programming
languages
notably
fortran
treated
whitespace
optional
way
rules
now
considered
cause
problems
solve
order
specify
patterns
also
turns
important
strings
will
match
one
pattern
two
patterns
string
actually
matches
jflex
resolves
conflict
always
choosing
first
pattern
specified
specified
patterns
order
string
considered
identifier
rather
keyword
exercise
caution
ordering
patterns
believe
much
scanning
theory
discussed
class
appears
chapter
2
textbook
embodied
within
jflex
quick
tour
jflex
source
code
reveals
classes
like
regexp
dfa
nfa
implementations
algorithms
translating
regular
expression
nfa
nfa
dfa
including
methods
necessary
jobs
like
adding
states
transitions
well
calculating
£`
closures
nfa
states
creating
using
scanner
object
jflex
creates
scanner
class
two
constructors
one
takes
java
io
reader
parameter
another
takes
java
io
inputstream
parameter
easy
create
scanner
reads
input
either
file
system
calling
appropriate
constructor
two
examples
creating
scanner
object
assuming
scanner
class
called
myscanner
creates
scanner
reads
input
file
called
filename
myscanner
s1
new
myscanner
new
filereader
filename
creates
scanner
reads
input
system
myscanner
s2
new
myscanner
system
scanner
object
created
can
repeatedly
call
scanning
method
end
input
reached
ways
configure
scanner
handle
end
input
suggest
leaving
default
behavior
returning
null
assuming
scanning
method
returns
object
type
class
token
used
example
input
want
know
course
plenty
documentation
available
jflex
like
read
complete
user
manual
can
found
link
copy
file
called
manual
html
also
present
prepared
installation
provided
manual
also
references
academic
papers
reference
books
really
interested
subject
want
depth
can
also
educational
fun
like
sort
thing
look
code
jflex
generates
script
claim
gone
fine
tooth
comb
paged
get
general
flavor
discovered
surprisingly
clean
makes
basically
good
sense
even
includes
comments
example
noticed
uses
techniques
table
compression
like
ones
described
section
2
5
textbook
reduce
memory
requirement
good
stuff
looking
also
helps
understand
snippets
java
code
jflex
script
actually
go
can
come
handy
writing
jflex
script
using
jflex
ics
labs
jflex
already
installed
windows
workstations
ics
labs
jflex
primarily
driven
via
command
line
use
start
bringing
command
prompt
window
lab
machines
jflex
configured
work
default
time
start
command
prompt
need
load
settings
executing
two
commands
cd
opt
ics142
start142
done
can
compile
jflex
script
blah
flex
command
jflex
blah
flex
will
create
java
source
file
lexer
java
forget
compile
java
file
executing
program
note
machines
lab
start142
bat
file
might
called
start
bat
instead
installation
bug
eradicated
fully
since
machines
always
time
update
case
execute
command
instead
start
dot
backslash
necessary
start
actually
windows
shell
command
installing
jflex
home
case
prefer
work
home
prepared
installation
jflex
cup
parser
generator
tool
using
later
quarter
windows
easy
use
zip
archive
basically
one
provided
lab
minor
differences
assuming
already
installed
java
system
installation
will
snap
expand
zip
archive
whatever
folder
comfortable
folder
will
batch
file
called
start142
bat
temporarily
sets
jflex
cup
use
need
make
one
change
can
use
though
open
file
text
editor
set
jflex
cup
home
environment
variable
folder
extracted
archive
information
within
start142
bat
file
one
caveat
mention
prepared
installation
assumes
presence
environment
variable
called
java
home
contains
path
base
folder
installed
java
sdk
j2sdk1
4
2
03
environment
variable
already
set
system
set
globally
many
existing
java
programs
tools
use
installation
configuration
remember
change
value
environment
variables
refer
document
setting
installing
java
got
installation
finished
bring
command
prompt
change
folder
extracted
archive
type
command
start142
now
ready
use
jflex
aware
just
like
labs
need
run
start142
command
every
time
bring
new
command
prompt
settings
stick
settings
loaded
can
compile
jflex
script
blah
flex
command
jflex
blah
flex
will
create
java
source
file
lexer
java
forget
compile
java
file
executing
program
course
prefer
install
jflex
especially
difficult
experience
installing
java
based
programs
follow
instructions
documentation
like
download
normal
jflex
distribution
can
obtained
free
charge
jflex
de
stick
current
stable
version
1
3
5
users
linux
mac
os
operating
systems
unfortunately
nothing
windows
machines
home
office
great
supposed
assignment
use
jflex
write
scanner
hypothetical
programming
language
called
monkie2004
scanner
normally
stand
alone
component
generally
integrated
program
processes
input
text
greater
purpose
compilation
interpretation
even
finding
replacing
text
time
however
like
scanner
stand
alone
meaning
will
need
surrounded
driver
program
creates
scanner
object
breaks
input
file
whose
name
specified
command
line
parameter
token
lexeme
pairs
prints
token
lexeme
pairs
system
goes
along
lexemes
matter
printed
evident
token
type
roughly
means
print
lexeme
associated
tokens
like
identifiers
string
literals
keywords
operators
might
tempted
place
printing
output
scanner
embedding
action
associated
lexical
rule
requiring
scanner
return
token
lexeme
pair
back
caller
driver
program
caller
printing
reason
clear
software
engineering
perspective
properly
designed
scanner
functional
many
contexts
meaning
break
input
tokens
lexemes
return
token
lexeme
pairs
caller
processing
parsing
printing
whatever
else
continue
monkie2004
example
building
parser
subsequent
assignment
able
use
scanner
parser
without
modification
make
easier
grade
assignments
couple
requirements
naming
jflex
script
must
appear
file
called
monkie
flex
driver
program
must
main
method
public
class
called
driver
appearing
file
called
driver
java
may
include
many
java
files
like
none
files
use
package
directive
effect
requirements
able
compile
run
program
using
following
commands
jflex
monkie
flex
javac
java
java
driver
inputfile
monkie
inputfile
monkie
name
file
containing
monkie2004
program
monkie2004
language
monkie2004
language
simple
imperative
style
language
two
basic
data
types
integers
strings
functions
zero
arguments
one
return
type
procedures
zero
arguments
return
type
reasonably
straightforward
mathematical
relational
logical
operations
kinds
imperative
style
statements
assignment
statements
statement
one
kind
loop
course
build
scanner
necessary
know
complete
specification
programming
language
though
cases
helps
will
stick
brief
example
program
lexical
specification
kind
token
looks
like
without
regard
tokens
put
together
write
monkie2004
program
example
program
example
monkie2004
program
deliberately
written
somewhat
verbosity
necessary
order
demonstrate
language
features
square
function
returns
square
integer
function
square
integer
integer
0
result
0
result
variable
holds
function's
return
value
else
var
integer
declares
variable
result
program
procedure
program
begins
execution
somewhat
akin
main
method
java
procedure
program
var
integer
square
3
square
call
print
var
string
lexical
specification
monkie2004
monkie2004
program
made
sequence
lexemes
can
classified
one
particular
token
type
unless
otherwise
specified
lexeme
returned
scanner
actual
chunk
source
text
35
types
tokens
rules
govern
appearance
follows
identifiers
must
begin
uppercase
lowercase
letter
followed
optionally
number
uppercase
letters
lowercase
letters
digits
underscores
'
'
identifier
may
end
underscore
may
contain
two
consecutive
underscores
integer
literal
sequence
digits
optionally
preceded
'
'
character
indicating
negative
number
string
literal
sequence
characters
within
double
quotes
unlike
languages
like
java
special
escape
sequences
couple
rules
need
specified
string
literals
however
end
line
may
occur
within
string
literal
always
error
need
handle
error
scanner
may
wish
want
put
double
quote
character
string
literal
can
putting
two
double
quotes
row
example
string
literal
favorite
song
streets
name
today
legal
monkie2004
string
literal
represents
following
string
text
favorite
song
streets
name
today
noted
contents
string
literal
returned
lexeme
example
lexeme
favorite
song
streets
name
today
without
beginning
ending
double
quotes
pairs
double
quotes
within
compressed
one
following
keywords
reserved
monkie2004
recognized
separate
token
type
call
else
function
implies
procedure
ref
var
xor
following
characters
character
sequences
special
meaning
operators
parentheses
recognized
separate
token
type
left
right
parentheses
left
right
brackets
arithmetic
operators
relational
operators
assignment
opearator
string
concatenation
semicolon
colon
comma
comments
begin
two
dashes
continue
end
line
appear
comments
ignored
scanner
meaning
constitute
lexeme
whitespace
monkie2004
program
ignored
constitute
lexeme
sample
input
output
sample
input
semi
infamous
hello
9
program
procedure
program
var
integer
3
3
call
print
hello
notice
comments
show
output
call
print
sample
output
procedure
identifier
program
left
paren
right
paren
left
bracket
var
identifier
colon
identifier
integer
semicolon
identifier
assignment
op
integer
literal
3
multiplication
op
integer
literal
3
semicolon
call
identifier
print
left
paren
string
literal
hello
right
paren
semicolon
call
identifier
print
left
paren
identifier
right
paren
right
bracket
program's
output
need
exactly
like
mine
convey
message
line
show
one
token
associated
lexeme
naturally
necessary
program
work
just
sample
input
testing
several
input
programs
together
test
lexical
specification
described
previous
section
need
provide
error
handling
may
assume
input
file
consists
legal
monkie2004
program
deliverables
submit
jflex
script
java
files
comprise
driver
program
need
submit
java
file
created
jflex
regenerating
grading
process
anyway
remember
name
jflex
script
must
monkie
flex
driver
program's
main
method
must
appear
file
called
driver
java
follow
link
discussion
submit
assignment
remember
accept
paper
submissions
assignments
accept
via
email
circumstances
limitations
jflex
features
prefer
use
assignment
know
features
list
need
find
unless
curious
may
use
yybegin
yystate
lexical
states
set
lexical
rules
may
use
yypushback
may
use
lookahead
trailing
context
may
use
pre
existing
shorthand
character
classes
letter
uppercase
digit
may
use
line
column
character
counting
wish
though
serve
purpose
assignment
originally
written
alex
thornton
winter
2004
