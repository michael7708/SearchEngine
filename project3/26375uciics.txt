lab assignment e 
lab assignment e 
informatics
42
winter
2012
david
kay
uc
irvine
lab
assignment
assignment
due
end
lab
monday
march
5
will
first
real
opportunity
explore
enhance
simulator
whose
home
page
http
www
ics
uci
edu
kay
courses
i42
wildride
spend
least
20
minutes
running
simulator
using
larger
sets
test
data
available
web
page
perhaps
sets
make
work
assignment
develop
list
improvements
enhancements
simulator
including
least
two
categories
functionality
features
program
provides
suggestions
something
think
implement
enough
time
just
ask
moon
obligated
actually
implement
enhancements
suggest
something
basically
understand
build
user
interface
program
interacts
user
suggest
things
think
implement
just
say
make
gui
little
animations
customer
ride
coding
style
program
including
variable
class
method
names
physical
arrangement
code
program's
overall
design
problem
organized
classes
responsibilities
class
relationships
classes
question
whether
changes
organization
make
modifications
enhancements
easier
one
may
little
tough
point
central
issue
software
design
give
thought
run
time
efficiency
program
choice
data
structures
algorithms
affects
performance
one
optional
point
gotten
deeply
program's
internal
design
pick
one
functionality
changes
propose
give
sketch
implement
half
page
text
possibly
diagrams
describes
high
level
part
program
change
classes
methods
changes
devise
least
three
micro
test
cases
can
use
verify
actual
step
step
behavior
rides
customers
matches
specification
example
might
park
one
ride
one
customer
whose
progress
can
track
tick
tick
cases
can
examine
types
customers
rides
different
locations
park
feel
free
coordinate
tests
groups
test
things
along
set
data
describe
behavior
trying
test
loading
behavior
cycle
rides
movement
customer
around
park
results
expected
results
actually
obtained
got
something
different
expected
determine
whether
discrepancy
due
ambiguity
misunderstanding
specifications
mistake
hand
calculation
expected
result
bug
code
group
can
identify
document
actual
bug
code
place
behavior
clearly
contradicts
specification
will
receive
reward
identify
questionable
program
behavior
ambiguities
spec
will
also
receive
lesser
rewards
bring
ta's
attention
pick
two
functions
part
one
class
simulator
write
unit
tests
write
set
assert
statments
test
thoroughly
function
works
correctly
spirit
wrote
check
expect
expressions
racket
may
need
create
simple
test
objects
use
assertions
depending
functions
choose
run
code
make
sure
none
assertions
fails
writing
tests
really
hard
take
time
insisting
write
comprehensively
every
function
every
program
done
quarter
choose
limited
time
effectively
spent
kind
serious
programming
effort
spent
writing
good
unit
tests
advance
well
paid
back
life
software
now
time
modify
code
make
copy
work
copy
time
add
feature
test
successfully
make
another
copy
continue
working
new
copy
way
get
trouble
can
roll
back
previous
copy
without
messed
previous
work
simulator
displays
statistics
attractions
statistics
customers
also
display
overall
statistics
customers
total
number
visitors
park
number
people
get
park
arrived
closing
time
total
time
spent
park
line
riding
rides
average
time
per
customer
spent
park
line
riding
rides
likewise
calculate
print
following
overall
statistics
attractions
total
number
attractions
park
total
number
riders
average
riders
per
ride
total
time
spent
riding
average
riding
time
per
ride
total
time
spent
waiting
line
average
waiting
time
per
ride
using
random
sentence
generator
either
partner's
parts
generate
random
customer
data
simulator
along
lines
discussed
class
optionally
find
web
lists
popular
names
family
names
male
female
given
names
grammar
generate
realistically
representative
list
names
may
optionally
also
generate
random
ride
data
presumably
just
involve
preparing
different
grammar
requiring
now
least
test
data
generator
generate
valid
data
nice
choose
realistic
seeming
names
numbers
plausible
ranges
test
generated
data
asking
simulator
read
turn
text
document
containing
grammar
customer
data
sample
customers
generated
suppose
wanted
make
tick
clock
last
one
second
instead
one
minute
change
program
data
make
list
changes
implement
yet
optionally
implement
separate
copy
code
hesitate
make
change
think
micro
test
cases
lot
tedious
track
behavior
second
second
optional
walking
ride
customer
might
change
mind
customer
might
walk
ride
looks
interesting
short
line
customer
might
get
hungry
stop
snack
model
every
kind
mind
changing
behavior
can
allow
customer
recalculate
priorities
every
steps
might
think
measure
decisiveness
high
zero
customer
seldom
re
thinks
low
customer
frequently
reevaluates
modify
simulator
allow
customers
transit
reprioritize
agendas
according
existing
strategy
means
might
decide
keep
going
place
every
steps
specify
customer
input
beginning
line
currently
specifies
customer
type
make
modification
separate
copy
simulator
may
want
go
back
original
version
later
assignments
usual
admonitions
advice
administrivia
apply
assignment
get
started
early
read
re
read
specifications
partner
worked
yet
quarter
make
sure
joel
knows
pairing
use
checkmate
submissions
usual
pair
submit
just
one
solution
parts
submit
text
document
word
pdf
rtf
plain
text
suggestions
implementation
sketch
actual
sketches
graphics
welcome
required
parts
submit
text
documents
part
unit
tests
remain
simulator
code
turn
later
nothing
separate
turn
part
submit
source
code
one
py
file
goes
optional
part
usual
grading
criteria
lab
assignments
apply
fill
partner
evaluation
eee
written
david
kay
winter
2005
modified
alex
thornton
winter
2007
david
kay
winter
2006
winter
2008
winter
2012
