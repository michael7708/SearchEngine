informatics 102 spring 2012 assignment 1 aspect oriented programming using aspectj 
assignment 1 
informatics
102
spring
2012
news
course
reference
schedule
lab
manual
code
examples
alex
informatics
102
spring
2012
assignment
1
aspect
oriented
programming
using
aspectj
due
date
time
tuesday
april
17
11
59pm
introduction
object
oriented
programming
oop
become
predominant
approach
used
design
implementation
software
systems
software
developers
become
increasingly
adept
using
keep
designs
simpler
flexible
weaknesses
oop
become
ever
clearer
oop
provides
mechanisms
like
classes
inheritance
polymorphism
help
us
follow
principle
separation
concerns
concerns
can
separated
using
language
features
particular
concerns
call
crosscutting
concerns
tend
affect
many
parts
class
program
requiring
code
added
affected
areas
quite
often
duplicated
verbatim
one
central
tenets
good
software
engineering
duplicating
code
yet
code
duplication
often
arises
possible
solution
oop
concerns
crosscut
designs
aspect
oriented
programming
aop
arose
solution
problem
separating
crosscutting
concerns
allowing
programmers
encapsulate
crosscutting
concerns
constructs
called
aspects
aspect
contains
three
things
1
specification
parts
program
affected
aspect
2
specification
changes
introduced
parts
program
3
additional
code
supports
feature
including
changes
static
structure
existing
classes
introducing
new
methods
fields
inheritance
relationships
well
methods
fields
within
aspect
wide
variety
aop
languages
tools
available
gradually
made
way
research
professional
open
source
software
development
projects
one
languages
aspectj
natural
choice
us
given
based
java
aspectj
aspect
oriented
programming
language
extends
java
adding
aspects
assignment
will
provide
experience
defining
aspects
applying
aspectj
programs
will
also
demonstrate
eclipse
ide
can
used
languages
java
getting
started
downloading
installing
eclipse
aspectj
development
tools
ajdt
plug
proceeding
assignment
sure
completed
assignment
0
led
steps
downloading
installing
necessary
software
machine
note
steps
3
4
assignment
0
applicable
even
working
machines
ics
labs
especially
true
step
4
downloading
aspectj
development
tools
ajdt
plug
may
execute
time
sit
new
machine
labs
one
executed
instructions
machine
previously
creating
aspectj
projects
eclipse
beginning
new
eclipse
project
plan
use
aspectj
important
create
aspectj
project
rather
java
project
will
enable
compiler
compile
aspects
well
classes
also
will
link
project
necessary
run
time
support
libraries
required
aspectj
creating
aspectj
project
much
like
creating
java
project
package
explorer
right
click
empty
area
select
new
alternatively
file
menu
select
new
select
aspectj
project
ensuing
menu
aspectj
project
appear
menu
select
will
bring
dialog
titled
new
find
aspectj
project
list
folder
called
aspectj
now
see
dialog
box
much
like
one
see
create
new
java
project
fill
project
name
specify
settings
see
screenshot
defaults
use
provided
informatics
102
eclipse
workspace
click
finish
now
see
new
project
appear
package
explorer
eclipse
window
first
time
create
aspectj
project
may
asked
want
turn
something
called
jdt
weaving
service
within
eclipse
recent
versions
ajdt
plug
default
may
still
asked
service
optional
can
improve
experience
things
like
searching
code
base
presence
aspects
cost
performance
eclipse
runs
whether
want
run
service
will
dramatically
affect
work
assignment
creating
new
classes
aspects
aspectj
projects
aspectj
projects
eclipse
behave
just
like
java
counterparts
ways
primary
difference
support
two
things
1
creation
manipulation
aspects
2
user
interface
tools
cross
references
tab
help
visualize
effect
various
aspects
program
begin
work
one
thing
need
able
create
new
aspects
create
aspect
right
click
project
package
explorer
select
new
select
aspect
ensuing
menu
aspect
appear
menu
select
instead
find
aspect
list
folder
called
aspectj
now
see
dialog
box
much
like
one
see
create
new
class
java
project
opt
use
packages
can
fill
name
field
leave
others
using
packages
also
want
fill
package
field
creating
compiling
running
project
create
new
aspectj
project
import
files
tracing
code
example
lecture
can
import
files
aspectj
project
way
import
java
project
eclipse
will
compile
project
every
time
save
files
java
projects
running
program
requires
right
clicking
file
containing
main
method
selecting
run
selecting
aspectj
java
application
select
java
application
java
program
current
version
eclipse
appears
bug
causes
java
bytecode
verifier
fail
cases
using
aspectj
may
see
error
message
like
one
exception
thread
main
java
lang
verifyerror
expecting
stackmap
frame
branch
target
24
method
main
offset
4
java
lang
class
getdeclaredmethods0
native
method
java
lang
class
privategetdeclaredmethods
unknown
source
java
lang
class
getmethod0
unknown
source
java
lang
class
getmethod
unknown
source
sun
launcher
launcherhelper
getmainmethod
unknown
source
sun
launcher
launcherhelper
checkandloadmain
unknown
source
workaround
problem
apply
solution
2
article
change
default
vm
arguments
java
runtime
environment
include
xx
usesplitverifier
experimenting
tracing
aspect
first
understand
program
can
run
either
without
tracing
aspect
place
either
performs
tracing
method
calls
tracing
aspect
included
including
excluding
aspect
simple
eclipse
right
click
tracing
aj
file
package
explorer
select
build
path
popup
menu
either
select
exclude
exclude
aspect
program
include
include
way
can
toggle
individual
aspects
try
excluding
including
tracing
aspect
run
program
ways
see
output
differs
next
spend
minutes
making
modifications
tracing
aspect
help
become
comfortable
aspectj
example
see
happens
remove
within
tracing
allmethodbodies
pointcut
recompile
run
program
rewrite
pointcut
will
trace
methods
class
will
continue
trace
others
rewrite
pointcut
also
will
trace
method
class
method's
name
begins
word
get
will
continue
trace
others
successfully
made
modifications
tracing
aspect
ready
proceed
next
part
assignment
part
1
30
points
part
assignment
like
write
aspect
counts
different
kinds
method
calls
java
program
aspect
meet
following
requirements
aspect
maintain
following
counts
calls
public
methodscalls
private
methodscalls
protected
methodscalls
package
private
methods
public
private
protected
calls
static
methodscalls
non
static
methodscalls
methods
note
sets
methods
mutually
exclusive
method
can
example
public
non
static
count
every
method
call
excluding
main
method
began
program
sure
count
method
calls
made
within
executions
methods
call
public
method
calls
public
method
calls
public
method
add
3
count
calls
public
methods
3
count
calls
methods
include
constructors
counts
include
calls
methods
java
library
include
method
calls
library
methods
make
library
methods
good
news
means
asking
try
weave
advice
existing
java
library
code
advice
aspect
calls
methods
include
method
calls
count
program
ending
print
message
system
indicates
value
counts
simple
tabular
form
message
appear
output
generated
program
aspect
specific
particular
program
possible
weave
existing
java
program
may
assume
program
will
one
main
method
one
method
signature
public
static
void
main
string
args
main
methods
will
call
output
showing
method
calls
counts
appear
last
main
method
returning
may
assume
aspect
will
compiled
together
source
code
program
modifies
however
parts
program
must
dependent
upon
contents
aspect
possible
compile
program
without
aspect
method
counting
feature
program's
behavior
change
result
include
aspect
leaving
part
2
40
points
problem
suppose
leading
large
open
source
project
consisting
many
interrelated
programs
tools
though
intend
group
charge
money
software
hope
business
can
eventually
built
around
consulting
support
services
now
number
successful
business
like
eye
toward
commercially
friendly
future
becomes
important
software
professionally
acceptable
large
number
developers
thousands
lines
new
modified
code
streaming
project
weekly
basis
difficult
single
person
keep
careful
track
present
projects
send
logging
output
console
system
output
can
redirected
operating
system
level
files
destinations
first
step
toward
ensuring
professionalism
software
can
counted
now
future
decide
mandate
output
sent
console
projects
inoffensive
potential
customers
offensive
words
eliminated
least
replaced
build
list
offensive
words
since
difficult
one
person
imagine
might
considered
offensive
instead
poll
contributors
customers
lawyers
get
idea
words
avoided
considering
options
decide
write
aspect
implement
new
functionality
will
allow
easily
weave
projects
automatically
also
opt
leave
choose
aspect
meet
following
requirements
every
time
string
object
printed
system
using
either
system
print
system
println
system
format
output
checked
see
offensive
words
included
offensive
words
replaced
sequence
characters
equal
length
offensive
word
new
text
occurrences
offensive
words
replaced
characters
printed
console
make
sure
format
output
spacing
newlines
etc
otherwise
will
change
provided
skeletal
list
offensive
words
class
called
offensivewords
consists
one
static
method
called
getoffensivewords
returns
list
offensive
words
aspect
must
use
class
figure
words
offensive
can
easily
plug
set
offensive
words
use
testing
aspect
offensive
words
case
insensitive
meaning
alex
included
list
offensive
words
words
many
variations
list
considered
offensive
alex
alex
alex
alex
output
contains
offensive
word
within
longer
word
offensive
portion
word
filtered
example
base
offensive
words
list
baseball
appear
output
ball
database
appear
data
databases
appear
data
version
output
sent
output
devices
including
files
network
connections
even
printstreams
system
filtered
way
furthermore
output
sent
system
means
system
print
system
println
system
format
need
filtered
filtering
offensive
words
built
one
call
system
print
system
println
system
format
required
can
like
additional
challenge
example
alex
offensive
word
list
choice
whether
filter
system
print
al
system
println
ex
part
1
aspect
specific
particular
program
possible
weave
existing
java
program
without
program
otherwise
dependent
upon
part
3
30
points
background
aspects
used
concerns
crosscut
entire
programs
also
allow
separate
behaviors
single
class
saw
one
code
example
lecture
lineup
example
injected
specific
behavior
just
one
class
rather
general
behavior
many
technique
may
seem
unimportant
face
least
couple
benefits
1
simplifying
class
pulling
complex
features
aspect
2
allowing
features
included
left
including
leaving
aspect
compiling
program
suppose
written
program
manages
information
payroll
small
businesses
program
class
called
person
additionally
different
kinds
people
system
employees
managers
contractors
etc
details
important
example
since
payroll
program
intended
manage
small
numbers
people
stores
collection
person
objects
arraylist
person
lookups
done
using
linear
searches
based
first
last
names
like
good
entrepreneur
realized
rewrite
portions
software
might
able
open
new
markets
large
companies
governments
however
still
like
sell
limited
version
program
cheaply
small
businesses
selling
beefier
expensive
version
larger
organizations
will
much
easier
maintain
multiple
versions
software
end
duplicating
code
will
ideally
one
code
base
multiple
configurations
used
compile
nice
argument
favor
using
aspects
solve
problems
crosscut
classes
system
can
either
included
left
depending
whether
feature
included
full
version
product
dealing
information
much
larger
numbers
people
decided
use
suitable
data
structure
well
versed
data
structures
algorithms
chosen
treemap
balanced
binary
search
tree
implementation
map
course
store
objects
treemap
decide
key
object
keys
need
least
following
three
properties
uniqueness
key
must
uniquely
identify
object
map
comparability
needs
possible
compare
pairs
keys
determine
smaller
stability
object
must
always
identified
key
even
many
properties
object
change
time
changing
property
object
can
cause
key
change
treemap
will
suddenly
order
change
property
need
introduce
convoluted
mechanism
restructure
treemap
whenever
changes
made
choose
key
carefully
three
properties
names
comparability
property
since
compared
alphabetically
necessarily
unique
since
two
people
may
name
stable
since
person's
name
may
change
many
properties
person
height
weight
salary
job
description
similar
problems
decide
introduce
notion
personid
full
version
program
person
will
uniquely
identified
numeric
id
furthermore
want
person
class
implement
comparable
interface
want
changes
made
full
version
program
limited
version
unchanged
problem
part
assignment
like
write
aspect
makes
necessary
modifications
existing
person
class
may
modify
person
class
way
aspect
needs
introduce
changes
can
compiled
either
without
aspect
first
link
code
person
class
person
java
aspect
introduce
following
changes
person
class
add
integer
field
person
class
person's
id
will
stored
add
code
person
constructor
initialize
field
containing
person's
id
assign
person
id's
consecutively
first
person
constructed
will
given
id
1
second
will
given
id
2
make
person
class
implement
comparable
person
interface
two
persons
will
compared
based
ids
sorted
will
sorted
ascending
order
ids
update
existing
equals
method
person
class
include
person
id
comparison
preserving
remaining
functionality
remember
allowed
change
person
class
directly
necessary
changes
must
introduced
aspect
deliverables
part
submit
aspects
files
named
aj
extension
java
code
require
checkmate
need
submit
java
programs
used
test
aspects
submit
class
files
files
generated
development
environment
follow
link
discussion
submit
assignment
via
checkmate
aware
holding
rules
specified
document
including
one
says
responsible
submitting
version
assignment
want
graded
regrade
assignment
simply
submitted
wrong
version
accident
updated
reflect
new
versions
eclipse
ajdt
plug
including
new
bug
eclipse
affects
work
alex
thornton
spring
2012
originally
written
portions
adapted
assignment
ics
141
fall
2005
alex
thornton
winter
2009
