alternative approaches 
alternatives dynamic architectures 
alternatives
dynamic
software
architectures
wide
variety
techniques
supporting
runtime
software
change
popular
techniques
listed
noted
however
designers
traditionally
sought
alternatives
runtime
change
altogether
several
reasons
account
usually
avoidable
runtime
change
critical
aspect
many
software
systems
several
techniques
devised
circumvent
need
runtime
change
altogether
regularly
scheduled
downtimes
functional
redundancy
clustering
manual
overrides
examples
techniques
increases
risk
system
integrity
reliability
robustness
difficult
ensure
light
runtime
change
increases
cost
typically
marked
performance
overhead
associated
supporting
runtime
change
additionally
techniques
limited
expertise
lack
proven
techniques
supporting
runtime
change
exasperate
engineering
costs
programming
language
based
approaches
gjb96
describe
approach
modeling
changes
statement
procedure
level
simple
imperative
programming
language
dynamic
programming
languages
many
dynamic
programming
languages
lisp
smalltalk
haskel
phl97
supported
runtime
software
change
decades
dynamic
linking
mechanisms
dynamic
link
libraries
available
operating
systems
unix
microsoft
windows
apple
macintosh
time
new
approaches
dynamic
linking
fra97
hope
significantly
reduce
runtime
performance
overhead
associated
using
mechanisms
dynamic
object
technology
corba
omg96
com
broc94
support
runtime
locations
loading
binding
software
objects
components
also
see
may
1997
special
issue
communications
acm
return
dynamic
software
architectures
home
page
pages
maintained
peyman
oreizy
send
comments
via
mail
