final review key 
answers 
uc
irvine
information
computer
science
david
kay
informatics
42
winter
2012
review
questions
final
exam
answers
questions
representative
actual
exam
questions
appeared
exams
past
actually
sample
exam
since
number
distribution
questions
match
actual
exam
document
includes
one
question
type
extra
practice
harder
concepts
also
course
actual
exam
may
cover
topic
course
even
represented
questions
simulator
program
possible
example
overall
form
exam
will
look
less
like
last
quarter's
final
quizzes
though
course
longer
1
can
find
analogies
classic
data
structures
literary
world
large
dictionaries
encyclopedias
thumb
tabs
letter
cut
outs
edge
volume
reader
can
turn
directly
first
page
listings
letter
access
beginning
letter's
listings
like
stack
queue
array
tree
linked
list
array
direct
access
cookbooks
describe
complicated
recipes
break
sub
recipes
much
like
procedures
programming
language
thus
recipe
cake
might
say
use
chocolate
icing
recipe
page
23
chocolate
icing
recipe
might
say
turn
see
page
195
instructions
melting
chocolate
data
structure
use
represent
sequence
recipes
sub
recipes
carried
given
moment
make
convenient
return
calling
recipe
sub
recipe
completed
stack
queue
array
tree
linked
list
stack
saving
context
book's
table
contents
chapters
sections
sub
sections
like
stack
queue
array
tree
linked
list
tree
hierarchical
newspapers
run
new
crossword
puzzle
every
day
puzzle
generally
says
solution
tomorrow's
newspaper
sequence
puzzles
solutions
like
stack
queue
array
tree
linked
list
linked
list
points
next
item
people
rigid
reading
newspapers
chronological
order
read
one
day's
newspaper
unless
read
previous
days'
papers
order
even
days
weeks
go
time
read
paper
save
papers
order
read
order
time
permits
arrangement
like
stack
queue
array
tree
linked
list
queue
first
first
2
right
binary
tree
order
nodes
visited
preorder
traversal
kiefjgcdabh
postorder
traversal
eficabdghjk
inorder
traversal
eifkcgadbjh
breadth
first
traversal
kijefghcdab
3
draw
binary
search
tree
results
inserting
items
order
31
41
59
26
53
58
62
4
consider
following
function
int
dosomething
int
int
precondition
assume
0
0
return
else
return
dosomething
1
1
returned
following
statements
dosomething
3
1
dosomething
6
2
dosomething
29
5
dosomething
25000
23000
one
english
word
mathematical
notation
describe
value
function
returns
terms
arguments
subtraction
recurrence
relations
matter
recurrence
relation
representation
operations
required
recursive
code
typically
stated
terms
base
case
terms
recursive
case
relatively
easy
determine
recurrence
relation
code
takes
little
effort
solve
recurrence
relation
converting
closed
form
polynomial
polynomial
can
easily
determine
notation
now
look
function
int
dosomethingelse
int
int
precondition
assume
0
0
return
else
return
dosomethingelse
1
1
1
dosomethingelse
produce
results
dosomething
explain
results
differ
yes
produce
results
2
routines
tail
recursive
dosomething
dosomethingelse
neither
non
tail
recursive
routine
indicate
specific
operation
code
makes
non
tail
recursive
dosomethingelse
tail
recursive
last
subtraction
done
returning
recursive
call
5
state
transition
diagram
fsa
machine
reads
whole
word
time
rather
character
time
class
following
strings
circle
accept
fsa
accepts
string
reject
accept
reject
jill
eats
tantrums
accept
reject
joe
eats
loud
big
bad
big
big
apples
accept
reject
joe
throws
apples
accept
reject
jill
eats
accept
reject
joe
throws
loud
loud
tantrums
accept
reject
jill
throws
joe
draw
transition
table
fsa
shown
may
leave
transitions
error
state
blank
rather
writing
error
jill
joe
throws
eats
big
bad
loud
tantrums
apples
s1
s2
s3
s4
modify
fsa
diagram
jane
may
also
occur
anywhere
joe
jill
may
occur
language
accepted
fsa
draw
new
fsa
accepts
language
containing
following
six
sentences
others
joe
likes
plums
joe
likes
big
plums
joe
likes
big
plums
joe
eats
plums
joe
eats
big
plums
joe
eats
big
plums
6
state
transition
diagram
fsa
give
three
examples
strings
machine
described
accepts
aba
aaaaaba
abaaaaa
aaabaaa
give
three
examples
strings
using
alphabet
machine
described
rejects
ab
ba
aaaab
hello
one
brief
english
sentence
describe
language
machine
implements
surrounded
one
a's
end
describe
language
using
regular
expression
using
just
input
symbols
parentheses
union
symbol
asterisks
aa
baa
modify
fsa
diagram
accepts
language
bc
string
zero
'a's
followed
followed
zero
'a's
may
draw
answer
printed
diagram
draw
state
transition
table
reflects
new
machine
described
part
7
one
way
represent
transitions
finite
state
machine
transition
table
entries
table
show
machine's
next
state
given
current
state
particular
input
table
left
implements
machine
shown
right
give
four
examples
strings
machine
described
accepts
ab
abab
abab
empty
give
four
examples
strings
using
alphabet
machine
described
rejects
aba
abb
baa
one
brief
english
sentence
describe
language
machine
implements
sequence
zero
ab
strings
describe
language
using
regular
expression
using
just
input
symbols
parentheses
union
symbol
asterisks
ab
modify
fsa
diagram
accepts
language
bc
string
zero
parts
part
contains
number
'a's
followed
'b'
'c'
init
s1
accept
s1
s1
s1
s2
s2
s1
modify
transition
table
reflect
new
machine
described
part
s1
s1
s2
xx
s2
xx
xx
s1
8
finite
state
machine
accepts
telephone
numbers
'digit'
means
decimal
digit
0
9
draw
state
transition
table
fsa
may
leave
blank
unspecified
transitions
may
omit
error
state
supplied
horizontal
lines
will
supply
vertical
lines
everything
else
hint
treat
digits
following
approach
shown
class
statements
shown
part
program
implement
fsa
transition
table
circle
one
best
answer
table
state
token
state
state
table
state
token
table
state
token
table
state
token
table
state
token
state
table
state
token
one
token
table
state
token
bnf
grammar
also
describes
telephone
numbers
phone
number
local
number
area
code
local
number
area
code
1
digit
digit
digit
local
number
exchange
hyphen
number
exchange
digit
digit
digit
hyphen
number
digit
digit
digit
digit
digit
0
1
2
3
4
5
6
7
8
9
unfortunately
bnf
grammar
fsa
reproduced
convenience
specify
language
string
listed
circle
valid
bnf
invalid
bnf
indicate
strings
can
generated
phone
number
grammar
given
circle
accepted
fsa
rejected
fsa
indicate
strings
accepted
fsa
valid
bnf
invalid
bnf
824
5072
accepted
fsa
rejected
fsa
valid
bnf
invalid
bnf
123
4567
accepted
fsa
rejected
fsa
valid
bnf
invalid
bnf
411
accepted
fsa
rejected
fsa
valid
bnf
invalid
bnf
2
9
7689
accepted
fsa
rejected
fsa
valid
bnf
invalid
bnf
310
825
2695
accepted
fsa
rejected
fsa
valid
bnf
invalid
bnf
1
000
000
0000
accepted
fsa
rejected
fsa
modify
fsa
drawing
diagram
accepts
exactly
phone
numbers
bnf
grammar
accepts
9
suppose
conventional
stack
operations
push
pop
top
printed
following
sequence
operations
push
5
push
4
print
top
push
7
push
12
pop
print
top
print
top
pop
contents
stack
end
sequence
operations
mark
clearly
top
bottom
stack
10
give
recurrence
relation
describes
execution
time
second
routine
shown
print
member
function
collection
class
counting
println
statements
just
give
recurrence
solve
def
print
member
function
restaurant
print
name
name
print
cuisine
cuisine
print
phone
phone
print
best
dish
dish
print
price
price
def
print
method0
restaurant
collection
self
isempty
collection
empty
print
print
newline
else
else
print
first
restaurant
first
print
collection
rest
print
print
rest
collection
recursively
0
1
5
1
11
following
code
segments
give
average
case
run
time
polynomial
notation
count
line
contains
assignment
statement
except
controlling
loops
procedure
call
input
output
statement
example
print
line
executed
total
0
range
readaninteger
count
line
total
2
0
print
print
total
print
total
print
end
example
answer
runtime
polynomial
2
2
1
2
3
2
5n
5
range
range
1
1
range
2
data
print
whole
rather
philadelphia
2
1
3
2
1
3
print
powerful
tools
print
comes
power
screw
print
new
spectacular
ways
1
4
1
1
2
1
1
1
1
1
2
3n
5
2
print
now
star
belly
sneetches
bellies
stars
print
plain
belly
sneetches
none
upon
thars
1
3
log
1
1
1
64000
2
1
1
1
2
2n
log
64002
log
5
log
deduct
1
2
point
simply
wrong
arithmetic
suppose
three
program
segments
included
one
function
notation
function
3
whatever
highest
order
term
parts
12
one
way
implement
priority
queue
binary
search
tree
ordered
priority
value
node
tree
representing
distinct
priority
value
stores
items
priority
linked
list
ordered
arrival
time
shown
diagram
approach
following
priority
item
pairs
enqueued
5
8
5
2
7
7
diagram
draw
results
enqueueing
items
8
2
3
1
designing
web
server
software
will
handle
thousands
requests
information
web
site
decide
requests
prioritized
perhaps
system
troubleshooting
receives
top
priority
full
rate
paying
customers
receive
next
priority
discount
customers
receive
lower
priority
guests
receive
lowest
decide
use
priority
queue
requests
consider
three
different
data
structures
implementing
structure
unordered
array
element
contains
priority
time
request
arrived
information
request
also
additional
field
contains
number
requests
currently
stored
structure
ii
binary
search
tree
described
may
assume
priority
nodes
never
get
deleted
just
may
empty
item
lists
items
priority
dequeued
structure
iii
linear
linked
list
completely
ordered
priority
equal
priorities
arrival
time
correct
item
dequeue
always
front
table
fill
notation
execution
time
specified
operation
alternative
data
structure
average
case
assume
average
requests
whole
data
structure
different
items
different
priority
value
different
priority
values
use
whichever
variables
appropriate
answers
also
assume
operation
implemented
efficiently
possible
java
without
adding
unspecified
variables
otherwise
changing
structure
described
operations
structure
structure
ii
structure
iii
front
number
comparisons
log
1
enqueue
number
comparisons
1
log
enqueue
number
data
movements
1
1
1
dequeue
number
comparisons
log
1
dequeue
number
data
movements
1
1
1
sizeof
number
comparisons
1
2
terms
appropriate
notation
storage
required
structure
assume
also
array
maximum
size
storage
required
1
priority
queue
gets
large
structure
provides
fastest
enqueueing
unordered
array
2
priority
queue
gets
large
structure
provides
fastest
dequeueing
iii
ordered
linear
list
3
priority
queue
gets
large
structure
provides
best
overall
performance
enqueueing
dequeueing
ii
bst
give
convincing
real
world
example
can
necessarily
web
server
software
implementing
priority
queue
1
enqueues
quickly
possible
operations'
performance
less
important
1
might
useful
items
enqueued
come
rapid
source
want
backing
entrance
system
takes
data
real
time
measurements
might
like
radar
aircraft
want
miss
enqueueing
sighting
quickly
case
one
needs
dequeueing
processing
fastest
2
dequeues
quickly
possible
operations'
performance
less
important
2
perhaps
something
queue
long
matter
takes
get
someone
line
someone's
time
get
served
want
right
away
server
wait
printer
queue
might
fit
dispatcher
emergency
services
3
even
performance
enqueueing
dequeueing
13
suppose
conventional
queue
operations
enqueue
dequeue
front
following
sequence
operations
print
enqueue
3
enqueue
7
enqueue
5
print
front
dequeue
print
front
enqueue
9
contents
queue
end
sequence
operations
indicate
clearly
front
end
queue
14
suppose
priority
queue
operations
enqueue
dequeue
front
priority
item
value
first
item
dequeued
item
greatest
numerical
value
following
sequence
operations
print
enqueue
3
enqueue
7
enqueue
5
print
front
dequeue
print
front
enqueue
9
contents
queue
end
sequence
operations
indicate
clearly
front
end
queue
15
suppose
need
implement
collection
least
50
000
items
various
operations
suppose
considering
four
alternative
data
structures
whose
performance
operation
shown
table
number
items
currently
collection
operation
structure
structure
ii
structure
iii
structure
iv
add
new
item
1
log
search
item
log
log
delete
item
assuming
already
know
location
1
log
print
items
order
print
items
particular
order
log
log
suppose
gathering
statistics
email
messages
item
collection
represents
one
message
name
sender
recipient
date
time
sent
information
computer
containing
collection
will
connected
network
backbone
can
collect
email
traffic
goes
fast
gathered
data
day
might
convert
collection
representation
monitoring
task
structure
ii
iii
iv
efficient
just
words
structure
ii
fastest
add
items
collection
1
1
suppose
storing
telephone
directory
used
directory
assistance
operators
item
contains
someone's
name
address
telephone
number
operations
listed
expect
frequent
collection
data
searching
frequent
happens
lot
often
new
customer
added
2
structure
ii
iii
iv
choose
implement
telephone
directory
just
words
probably
structure
iii
structure
fastest
time
searching
important
phone
directory
structure
iii
faster
add
delete
delete
item
practice
requires
locating
item
actually
removing
occurs
collection
structure
ii
iii
iv
efficient
entire
process
deleting
item
structure
iii
process
log
others
combination
structure
never
used
based
performance
measures
structure
iv
worst
tied
everything
give
best
brief
description
can
structures
ii
iii
iv
listed
can
describe
just
couple
words
including
tree
queue
stack
linked
list
array
sure
indicate
whether
items
stored
order
whether
additional
data
fields
trailing
pointers
number
items
required
may
include
clear
picture
like
structure
ordered
array
log
binary
search
add
remove
preserving
order
structure
ii
unordered
linked
list
constant
time
addition
deletion
re
linking
otherwise
linear
structure
iii
binary
search
tree
log
time
add
find
delete
linear
print
order
structure
iv
unordered
array
without
size
field
16
department
motor
vehicles
stores
registration
information
including
license
number
owner's
name
vehicle
description
millions
vehicles
practical
matter
dmv
store
information
every
vehicle
main
memory
ram
main
memory
will
contain
just
index
containing
perhaps
license
number
owner's
name
key
together
pointer
bulk
information
remains
disk
item's
key
found
index
rest
information
can
retrieved
one
access
disk
dmv
considering
four
different
structures
organizing
index
may
assume
disk
based
information
can
traversed
linear
time
necessary
structure
index
unordered
array
additional
field
contains
number
vehicles
currently
stored
structure
ii
index
array
sorted
license
number
additional
field
containing
number
vehicles
currently
stored
structure
iii
index
binary
search
tree
ordered
license
number
structure
iv
index
consists
two
binary
search
trees
one
ordered
license
number
one
ordered
owner's
name
table
fill
notation
alternative
data
structure
specified
operation
assume
vehicles
database
operation
implemented
efficiently
possible
java
operations
structure
structure
ii
structure
iii
structure
iv
add
new
vehicle
number
comparisons
1
log
log
log
add
new
vehicle
number
data
movements
1
1
1
search
item
given
license
number
log
log
log
search
item
given
owner's
name
log
print
items
order
print
items
order
owner's
name
log
log
log
table
give
notation
storage
main
memory
required
structure
assuming
vehicles
database
maximum
vehicles
possible
structure
designed
efficiently
possible
pascal
structure
structure
ii
structure
iii
structure
iv
main
memory
required
17
want
purchase
database
management
program
considering
three
different
products
fuzzybase
onbase
homebase
read
magazine
article
reviews
products
includes
two
graphs
performance
benchmark
task
designed
representative
typical
database
tasks
first
graph
shows
programs'
performance
three
relatively
small
sets
data
second
graph
following
page
shows
performance
task
three
relatively
large
sets
data
looking
small
files
graph
program
fastest
tests
shown
homebase
program
slowest
tests
shown
graph
fuzzybase
1000
item
test
10
times
larger
100
item
test
many
times
longer
fuzzybase
take
1000
item
test
100
item
test
ten
times
longer
15
0
vs
1
5
many
times
longer
homebase
take
1000
item
test
100
item
test
100
times
longer
10
0
vs
0
1
data
shown
likeliest
notation
execution
time
fuzzybase
benchmark
tests
data
shown
likeliest
notation
execution
time
homebase
benchmark
tests
squared
fastest
program
tests
best
notation
explain
can
estimate
execution
time
notation
explain
program
worse
notation
can
faster
tests
one
better
notation
answer
just
one
english
sentence
take
space
left
page
fastest
program
homebase
best
notation
can
happen
amount
data
relatively
small
low
order
terms
constants
can
overshadow
highest
order
term
determines
notation
notation
good
starting
value
forever
starting
point
small
bets
now
consider
graph
large
file
benchmarks
program
slowest
tests
shown
large
files
graph
homebase
program
fastest
tests
shown
large
files
graph
onbase
five
alternatives
alternative
gives
polynomial
expression
describes
execution
time
program
benchmark
tests
one
alternative
consistent
data
shown
alternative
potentially
correct
set
expressions
homebase
squared
must
homebase
squared
see
fuzzybase
always
little
slower
onbase
except
smallest
test
case
gives
us
onbase
fat
constant
shows
smallest
case
gets
bigger
larger
coefficient
fuzzybase's
term
dominates
fuzzybase
onbase
homebase
1500n
500
n2
10
n2
3n
23
n2
3n
23
1500n
50
000
750n
45
000
1500n
500
750n
45
000
n2
3n
23
1500n
50
000
750n
400
n2
3n
23
750n
400
n2
3n
23
1500n
500
one
brief
english
sentence
explain
fastest
program
small
file
tests
slowest
program
large
file
tests
small
bets
notation
constants
lower
order
terms
can
predominate
small
18
topics
familiar
might
show
cases
briefly
exam
classic
data
structures
lists
maps
stacks
queues
priority
queues
trees
conventional
operations
push
dequeue
built
python
data
structures
lists
dictionaries
tuples
sets
strings
formal
languages
describe
relate
natural
languages
basic
organization
functionality
amusement
park
simulator
provide
code
anything
detailed
basics
probability
expected
value
decision
making
techniques
relevance
trees
decision
trees
optimist
pessimist
regretist
strategies
exceptions
work
python
basic
advantages
pitfalls
concurrency
programming
languages
characteristics
topics
lectures
