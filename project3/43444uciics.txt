compsci 141 cse 141 informatics 101 fall 2009 assignment 6 
assignment 6 
compsci
141
cse
141
informatics
101
fall
2009
news
course
reference
schedule
lab
manual
code
examples
alex
compsci
141
cse
141
informatics
101
fall
2009
assignment
6
due
date
time
friday
december
4
9
00pm
introduction
assignment
5
began
exploration
concurrency
considering
shared
memory
concurrency
simultaneous
threads
manipulated
shared
objects
turns
concurrency
difficult
two
tasks
completely
separate
one
another
just
web
browser
often
directly
affect
mp3
player
two
threads
can
run
happily
problems
long
need
interact
course
often
case
threads
need
interact
way
can
collaborate
accomplishing
goal
historically
common
way
shared
objects
visible
modifiable
multiple
threads
however
one
things
may
realized
working
assignment
5
can
difficult
manage
sometimes
possibility
simultaneous
access
especially
one
thread
modifying
object
others
either
reading
modifying
can
cause
bugs
difficult
diagnose
unpredictable
hard
reproduce
furthermore
just
look
piece
code
understand
without
considering
ways
potentially
interact
code
running
threads
problems
insurmountable
difficult
solve
another
common
approach
concurrency
called
message
passing
concurrency
give
idea
shared
objects
favor
isolated
threads
capable
communicating
one
another
sending
messages
messages
can
sent
two
ways
synchronously
sender
waits
reply
asynchronously
sender
continues
working
waiting
reply
without
shared
objects
need
locking
java
synchronized
blocks
methods
notification
simpler
thread
message
queue
associated
problems
like
deadlock
can
still
exist
occur
much
less
frequently
java
provide
direct
built
support
message
passing
concurrency
plenty
capable
assignment
asks
engage
brief
exploration
message
passing
building
concurrent
java
program
uses
message
passing
strategy
since
java
lacks
plumbing
handle
message
passing
directly
provided
plumbing
use
plumbing
build
program
message
passing
framework
starting
point
assignment
providing
java
package
cs141
messaging
containing
two
classes
used
support
message
passing
messagingtask
task
executed
concurrently
within
thread
capable
receiving
messages
also
sending
tasks
class
handles
threading
issues
thread
creation
interruption
destruction
message
encapsulation
message
sent
one
concurrent
task
another
also
supports
notion
knowing
sent
original
message
reply
can
sent
required
use
classes
without
modification
encourage
take
little
time
read
code
comments
sure
understand
assignment6
zip
example
building
small
application
top
framework
available
code
examples
section
site
importing
code
eclipse
uses
java
packages
two
classes
comprise
message
passing
framework
java
package
placing
code
java
package
simple
requiring
two
things
include
package
directive
top
file
specifying
package
belongs
find
line
top
files
message
passing
framework
package
cs141
messaging
place
files
subfolders
mirroring
package
structure
import
files
eclipse
project
create
folder
called
cs141
src
folder
project
create
folder
called
messaging
within
cs141
place
java
files
messaging
folder
finally
right
click
eclipse
project
within
package
explorer
eclipse
select
refresh
see
cs141
messaging
package
show
along
two
files
inside
note
rest
program
java
package
need
include
lines
top
files
use
message
passing
framework
import
cs141
messaging
message
import
cs141
messaging
messagingtask
program
assignment
requires
rewrite
booos
simulator
assignment
5
use
message
passing
strategy
rather
shared
memory
strategy
previous
assignment
outwardly
interface
program
change
main
method
still
class
called
simulator
takes
two
command
line
arguments
however
internally
program
uses
threads
message
passing
communication
rather
shared
objects
need
threads
following
objects
addition
main
thread
program
will
thread
program
class
extend
messagingtask
file
will
object
extends
messagingtask
executes
within
thread
will
handle
messages
read
write
get
contents
string
printer
will
object
extends
messagingtask
executes
within
thread
will
handle
one
message
prints
contents
file
file
system
mapping
filenames
files
will
object
extends
messagingtask
executes
within
thread
will
handle
messages
create
files
get
file
given
filename
communication
objects
running
threads
will
require
messages
passed
back
forth
need
think
task
will
need
receive
message
message
will
need
contain
kind
reply
expected
find
parts
program
previous
assignment
particularly
parts
read
input
file
set
objects
programs
will
need
change
much
rest
program
will
probably
best
written
scratch
various
objects
make
simulator
isolated
threads
version
program
necessary
low
level
details
provided
messagingtask
will
find
need
use
synchronized
keyword
synchronization
communication
facilities
like
wait
notify
deliverables
need
submit
java
source
files
java
except
ones
provided
submit
compiled
versions
program
files
generated
development
environment
follow
link
discussion
submit
assignment
remember
accept
paper
submissions
assignments
accept
via
email
circumstances
words
context
work
pointed
assignment
exploration
style
concurrency
characterized
passing
messages
concurrent
processes
necessarily
best
style
use
java
java
built
primitive
support
passing
messages
needed
provide
plumbing
form
classes
like
message
messagingtask
though
can
certainly
done
using
objects
also
practical
limitations
number
simultaneous
threads
can
run
java
program
since
threads
relatively
heavyweight
requiring
among
things
potentially
large
run
time
stack
maximum
number
threads
can
run
productively
often
tops
hundreds
low
thousands
noted
programming
languages
limitations
exist
language
designs
include
programming
languages
offer
different
approaches
built
primitives
can
make
message
passing
concurrency
easier
one
example
erlang
concurrency
oriented
functional
language
used
build
among
things
highly
concurrent
fault
tolerant
distributed
systems
telecommunications
switches
includes
built
handling
message
queueing
sending
receiving
well
model
concurrency
built
atop
lightweight
processes
allowing
tens
thousands
simultaneous
processes
running
within
one
program
computer
powerful
typical
laptop
message
passing
concurrency
another
use
worth
considering
threads
may
running
different
machines
within
different
programs
long
possible
send
messages
one
program
another
already
possible
via
computer
networks
just
browser
fetched
web
page
displayed
program
uses
message
passing
can
distributed
can
run
multiple
machines
instead
just
one
context
like
one
shared
memory
per
se
message
passing
provides
one
ways
allow
programs
communicate
one
another
exciting
consider
future
holds
programming
languages
safe
say
next
decade
likely
one
constant
innovation
easy
use
natural
forms
concurrency
among
foremost
goals
let
fact
java
handled
issues
somewhat
cumbersome
way
leave
impression
concurrency
nature
cumbersome
broader
moral
assignment
one
preceded
lookout
models
approaches
make
concurrency
simpler
cleaner
safer
predictable
used
java
count
familiar
anything
else
gave
us
comfortable
medium
work
message
passing
framework
rewritten
alex
thornton
summer
2009
originally
written
alex
thornton
fall
2007
