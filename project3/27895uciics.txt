informatics 122 winter 2013 project 5 recovering satellites 
project 5 
informatics
122
winter
2013
news
course
reference
schedule
project
guide
code
examples
alex
informatics
122
winter
2013
project
5
recovering
satellites
due
date
time
monday
march
11
11
59pm
project
done
groups
three
will
assigned
introduction
previous
project
explored
use
dependency
injection
produce
decoupled
design
explicitly
focused
problem
making
design
amenable
unit
testing
benefits
dependency
injection
limited
scenario
technique
gained
mindshare
recent
years
good
reason
designs
use
technique
often
exhibit
level
flexibility
difficult
achieve
ways
individual
components
can
snapped
together
ways
initially
expect
completely
changing
behavior
one
component
often
easy
injecting
different
dependent
component
one
things
may
noticed
proceeding
previous
project
however
dependency
injection
led
fair
amount
manual
work
construct
little
trees
dependent
objects
passing
constructor
others
finally
objects
required
solve
particular
problem
problem
gets
progressively
worse
design
becomes
complex
objects
dependencies
gradually
become
deeply
nested
whenever
find
kind
grunt
work
attention
rapidly
shift
ways
can
automate
luck
problem
already
solved
multiple
times
java
community
number
dependency
injection
frameworks
available
basic
idea
underlying
dependency
injection
framework
rather
manually
creating
objects
passing
constructors
configure
kinds
objects
required
solve
certain
kinds
problems
ask
framework
build
return
right
objects
dependent
objects
wired
automatically
first
blush
sound
like
much
solution
seems
need
just
much
configuration
manually
previous
project
however
reality
can
often
configure
object's
type
one
place
reuse
throughout
large
part
system
framework
automatically
handling
details
determining
appropriate
type
object
build
deciding
whether
objects
shared
singletons
constructed
fresh
every
time
project
will
explore
design
use
one
framework
google
guice
3
0
will
need
experiment
framework
order
understand
use
primary
focus
will
reading
understanding
source
code
can
recover
document
details
design
able
understand
design
existing
code
vitally
important
skill
software
developers
stripes
newly
hired
organization
will
likely
existing
code
interface
modify
extend
want
use
existing
third
party
products
especially
open
source
projects
source
code
available
often
find
wanting
build
top
extend
modify
troubleshooting
quality
source
code
may
even
large
factor
willingness
adopt
product
allow
fear
someone
else's
code
much
gained
embracing
obviously
quality
design
one
determining
factor
ability
read
source
code
understand
experience
though
major
factors
include
patience
concentration
developing
early
sense
parts
program
likely
less
important
recognizing
well
known
design
patterns
techniques
can
understand
larger
components
without
hone
every
little
detail
applying
modularity
techniques
write
code
particular
trying
understand
individual
parts
trying
understand
whole
kind
work
people
share
ideas
can
big
help
require
work
project
groups
three
group
work
project
will
require
work
groups
three
will
randomly
assigned
group
will
receiving
email
specifying
partners
sending
send
email
entire
class
know
received
one
just
always
work
first
choice
people
real
world
projects
get
first
choice
either
something
worth
getting
used
everyone
course
something
offer
part
trick
succeeding
group
work
identify
exploit
complementary
skills
different
group
members
keep
notes
assessment
participation
level
member
group
will
assessing
formal
way
conclusion
project
part
score
determined
others'
perceptions
contribution
effort
partly
keep
everyone
honest
everyone
pulling
weight
partly
acclimate
idea
also
need
honestly
evaluate
others'
work
real
world
contexts
even
presence
social
political
implications
pre
group
preparation
getting
early
look
guice
begin
working
group
will
want
gain
background
knowledge
can
hit
ground
running
guice
accopmanied
comprehensive
well
written
documentation
detailing
use
first
order
business
read
begin
understand
problem
solves
solves
problem
can
integrate
existing
program
first
step
head
guice
wiki
good
place
start
motivation
page
user's
guide
nice
job
laying
guice's
approach
dependency
injection
also
background
dependency
injection
important
first
place
continue
user's
guide
worry
understand
every
detail
goal
first
reading
exposure
broad
understanding
prerequisite
java
knowledge
depending
courses
took
one
may
may
seen
two
features
java
will
important
want
complete
project
joining
group
sure
reasonably
familiar
concepts
java
annotations
provide
way
mark
classes
methods
fields
variables
ways
accessible
either
compilation
compilation
run
time
case
guice
annotations
used
run
time
allow
find
constructors
require
dependent
objects
created
injected
automatically
reflection
allows
java
programs
find
structure
run
time
example
possible
ask
object
class
belongs
ask
methods
constructors
class
parameters
take
annotations
ever
wondered
junit
able
find
execute
unit
tests
automatically
two
features
answer
annotations
allow
mark
method
test
reflection
allows
junit
find
methods
call
automatically
guice
uses
similar
techniques
different
purpose
automatically
identify
places
dependent
objects
need
injected
facilitate
injection
automatically
run
time
quick
code
example
another
courses
worth
reviewing
like
get
overview
refresher
topics
quickunit
unit
testing
framework
downloading
integrating
guice
eclipse
project
two
distributions
guice
3
0
want
download
order
complete
project
pre
packaged
jar
files
source
code
download
page
download
two
files
guice
3
0
zipguice
3
0
src
zip
use
guice
program
can
begin
extracting
guice
3
0
zip
within
find
collection
jar
files
contain
compiled
versions
entire
guice
framework
guice
complex
framework
need
use
stick
core
portion
framework
compiled
portion
contained
within
three
jar
files
guice
3
0
zip
guice
3
0
jarjavax
inject
jaraopalliance
jar
want
write
simple
program
using
guice
need
include
three
jars
build
path
project
simple
approach
follows
within
eclipse
project
folder
create
folder
called
lib
copy
three
jar
files
lib
folder
right
click
project
package
explorer
within
eclipse
select
refresh
lib
folder
now
show
within
project
package
explorer
right
click
jar
files
lib
folder
package
explorer
select
build
path
add
build
path
three
jar
files
now
listed
referenced
libraries
project
package
explorer
point
ready
write
short
program
exercise
guice
bit
proceed
particular
sure
know
implement
simple
abstractmodule
constructor
includes
inject
annotation
create
injector
ask
instance
object
includes
injected
dependents
recovering
design
guice
experimented
guice
acquired
feel
functionality
provides
use
time
begin
delving
source
code
extracting
source
code
focusing
right
parts
already
extract
guice
3
0
src
zip
archive
downloaded
earlier
inside
find
folder
called
guice
3
0
src
contains
number
things
note
collection
scripts
can
used
build
google
guice
compile
package
jar
files
can
safely
ignore
needing
build
folder
called
javadoc
contains
user
documentation
various
classes
framework
opening
file
javadoc
index
html
browser
will
reveal
documentation
looks
feels
lot
like
java
api
documentation
many
open
source
projects
find
documentation
varies
depth
quality
depending
look
general
useful
information
folder
called
core
contains
source
code
core
google
guice
framework
code
recovering
design
note
two
folders
inside
core
folder
src
contains
source
code
framework
test
contains
unit
tests
need
recover
design
unit
tests
though
might
find
useful
documentation
framework
behave
folder
called
examples
contains
small
example
program
uses
guice
folder
called
extensions
contains
variety
extensions
core
guice
framework
allowing
plugged
kinds
existing
systems
can
safely
ignore
folder
called
lib
contains
compiled
code
guice
depends
purposes
can
safely
ignore
well
deliverables
group
responsible
producing
following
deliverables
five
page
document
detailing
high
level
design
core
guice
framework
classes
core
src
within
guice
3
0
src
zip
examples
might
go
document
explanation
major
modules
fit
together
important
interfaces
classes
multiple
reasonable
ways
leave
freedom
organize
feel
free
include
diagrams
counted
five
page
requirement
document
describing
three
different
design
patterns
found
reading
source
code
case
address
following
questions
design
pattern
classes
involved
pattern
roles
play
include
uml
diagram
classes
relationships
pattern
include
every
detail
every
class
include
details
bearing
pattern
view
use
pattern
beneficial
design
detrimental
document
describing
three
ways
use
design
patterns
improve
something
design
guice
case
address
following
questions
design
pattern
employing
issues
design
trying
improve
employing
pattern
improve
newly
designed
classes
look
like
include
uml
diagram
new
classes
relationships
pattern
include
every
detail
every
class
include
details
bearing
pattern
documents
either
microsoft
word
doc
docx
pdf
pdf
format
making
group
best
begin
taking
individual
look
source
code
meeting
others
talking
will
ensure
everyone
entering
meetings
information
provide
readiness
benefit
others
say
without
everyone
prepared
meetings
can
unpleasant
frustrating
experience
investigative
documentation
work
done
fine
divvy
amongst
group
make
task
manageable
however
sure
meet
regularly
resync
everyone's
knowledge
successful
groups
will
ones
bring
everyone
along
ride
ensure
everyone
understanding
discovered
documented
given
task
theoretically
assigned
anyone
available
time
complete
word
warning
exploration
guice
deeper
previously
done
sure
will
reach
details
new
underlying
techniques
certainly
new
yet
read
digested
entire
design
guice
committed
helping
work
issues
understand
patterns
seeing
may
indulge
sometimes
ask
part
seen
always
starting
project
early
asking
questions
early
enough
process
can
afford
wait
answer
paramount
submitting
deliverables
submit
deliverables
checkmate
usual
ensure
right
version
graded
one
member
group
permitted
submit
sure
know
group
responsibility
follow
link
discussion
submit
files
via
checkmate
aware
holding
rules
specified
document
including
one
says
responsible
submitting
version
files
want
graded
regrade
project
simply
submitted
wrong
version
accident
assessing
work
partners
completed
submitted
project
please
download
fill
following
form
allows
comment
work
done
partners
along
anything
else
like
include
instructions
specified
form
please
email
form
back
completed
project
5
partner
evaluation
originally
written
alex
thornton
winter
2012
