asst 2 functional programming 
functional programming 
assignment
due
monday
january
31
deposit
assignment
locking
drop
box
room
cs
189
try
finish
assignment
friday
morning
can
ask
questions
discussion
summary
last
lab
became
comfortable
least
conversant
scheme
interpreter
scheme
syntax
recursive
style
list
processing
assignment
will
work
list
structures
explore
programming
techniques
using
higher
order
functions
draw
box
pointer
diagrams
shown
page
579
sebesta
following
expressions
empty
list
use
empty
cell
rather
cell
pointing
symbol
nil
sebesta
franz
klefstad
pratt
mehrotra
baldi
pratt
gennari
venkatasubramanian
mehrotra
mark
kobsa
ackerman
king
grudin
kling
define
fact
lambda
0
1
fact
1
write
scheme
expression
corresponds
two
box
pointer
diagrams
sebesta
defines
function
mapcar
commonly
called
map
map
action
list
returns
list
whose
elements
result
applying
action
function
corresponding
element
list
another
function
takes
another
function
argument
filter
filter
test
list
returns
list
elements
list
satisfy
test
predicate
function
returns
true
false
given
element
list
write
definition
filter
check
notes
scheme
handout
contains
function
task
now
look
third
function
accumulate
action
initial
value
list
defined
follows
define
accumulate
lambda
action
initial
value
list
cond
null
list
initial
value
else
action
first
list
accumulate
action
initial
value
rest
list
1
result
evaluating
expressions
try
hand
typing
check
answer
scheme
interpreter
exams
accumulate
0
'
1
2
3
4
5
accumulate
lambda
even
0
0
'
1
2
3
4
5
accumulate
cons
'
'
huey
dewey
louie
accumulate
max
1
'
1953
1956
1949
1991
1964
2
assume
function
interval
returns
list
integers
inclusive
interval
5
10
return
5
6
7
8
9
10
re
write
function
factorial
using
accumulate
interval
without
explicit
recursion
3
now
think
back
restaurant
database
assume
standard
lisp
list
called
rl
restaurant
objects
described
following
expressions
describe
one
english
sentence
value
returns
just
say
accumulate
plus
zero
map
give
description
expression
means
something
put
software
catalog
prospective
buyer
find
wanted
accumulate
0
map
lambda
1
rl
filter
lambda
equal
'ethiopian
rest
cuisine
rl
accumulate
0
map
lambda
rest
price
rl
accumulate
0
map
lambda
1
rl
let
prl
filter
lambda
equal
'pizza
rest
dish
rl
accumulate
0
map
lambda
rest
price
prl
accumulate
0
map
lambda
1
prl
4
using
map
filter
accumulate
write
expression
return
following
values
without
using
explicit
recursion
list
french
italian
restaurants
rl
list
names
french
italian
restaurants
rl
list
restaurants
rl
whose
best
dish
costs
10
00
20
00
inclusive
name
lowest
priced
french
restaurant
rl
extra
credit
list
restaurants
rl
every
french
restaurant
whose
best
dish's
price
less
average
price
best
dishes
french
restaurants
price
changed
average
price
required
code
run
solutions
problem
can
pencil
paper
however
coding
good
practice
can
help
verify
solutions
right
might
earn
bit
extra
credit
