informatics 102 spring 2012 assignment 4 mixed language programming 
assignment 4 
informatics
102
spring
2012
news
course
reference
schedule
lab
manual
code
examples
alex
informatics
102
spring
2012
assignment
4
mixed
language
programming
due
date
time
wednesday
may
30
11
59pm
introduction
talked
lecture
need
mixed
language
programming
many
real
world
projects
mixture
requirements
leads
situation
one
right
tool
job
right
tools
different
parts
job
trick
solving
larger
scale
software
problems
multiple
languages
getting
programs
written
different
languages
communicate
one
another
necessary
cases
multiple
language
programming
can
straightforward
earlier
quarter
mixed
java
aspectj
natural
match
one
another
since
run
java
virtual
machine
jvm
especially
since
aspectj
intended
extension
java
languages
whose
programs
run
jvm
scala
groovy
easily
interoperable
java
since
jvm
see
code
languages
different
java
code
similarly
native
code
generated
say
fortran
compilers
can
made
work
together
provided
agreement
least
compatibility
calling
linkage
conventions
data
gets
placed
runtime
stack
functions
called
values
returned
functions
etc
also
talked
lecture
ways
programs
communicate
run
common
infrastructure
even
potentially
machine
sockets
network
connections
allow
programs
send
stream
bytes
internet
applications
browsers
instant
messaging
clients
etc
use
files
one
program
can
write
information
file
can
read
another
databases
one
program
can
store
information
database
another
can
query
information
later
pipes
allow
data
sent
two
programs
machine
one
way
often
used
standard
output
system
java
one
program
wired
automatically
standard
input
system
java
another
though
can
used
flexibly
operating
system
shuttles
data
automatically
efficiently
common
thread
runs
examples
idea
information
needs
sent
one
program
across
socket
file
database
pipe
read
another
one
issue
arises
immediately
need
send
information
one
program
another
regardless
language
program
written
need
protocol
governing
communication
information
saved
file
need
file
format
describing
file
looks
like
information
sent
across
direct
connection
like
socket
pipe
need
agree
conversation
will
look
like
perspective
either
program
just
bits
written
file
sent
across
communication
mechanism
two
programs
agree
bits
mean
assignment
allows
explore
two
ways
connecting
code
written
multiple
languages
together
first
connect
erlang
programs
java
programs
using
erlang
ports
presents
fairly
low
level
mechanism
whereby
erlang
interpreter
can
launch
java
program
send
information
standard
input
system
receive
information
standard
output
system
information
transmitted
packets
containing
sequences
bytes
second
connect
two
java
programs
together
using
protocol
buffers
optionally
can
also
write
python
erlang
program
can
also
participate
part
protocol
buffers
full
fledged
programming
language
little
language
used
describe
structure
messages
can
read
written
variety
sources
files
sockets
pipes
compiler
generates
code
one
three
languages
java
python
capable
handling
messages
interchangeably
open
source
compilers
generate
code
wide
variety
languages
often
say
little
languages
like
protocol
buffers
called
domain
specific
languages
focus
efforts
narrow
problem
domain
opposed
general
purpose
languages
like
java
intended
used
solve
wider
variety
problems
domain
specific
languages
will
focus
remainder
course
part
1
combining
erlang
java
using
ports
30
points
write
erlang
module
called
sorter
file
called
sorter
erl
implements
erlang
process
whose
job
sort
lists
integers
sorter
module
export
four
functions
start
1
starts
sorter
process
returns
tuple
form
ok
pid
pid
pid
newly
created
sorter
process
function
start
sorter
process
function
returns
error
message
like
atom
long
match
pattern
ok
pid
argument
function
described
stop
1
takes
pid
sorter
process
stops
process
returning
ok
function
unable
stop
process
within
five
seconds
function
returns
couldnotstop
ascending
2
takes
pid
sorter
process
list
integers
returns
list
containing
integers
sorted
ascending
order
descending
2
takes
pid
sorter
process
list
integers
returns
list
containing
integers
sorted
descending
order
interesting
twist
ascending
2
descending
2
functions
permitted
actually
sort
integers
instead
required
use
erlang
ports
ask
java
program
also
need
write
perform
sort
instead
furthermore
java
program
relaunched
time
sort
performed
instead
launched
start
1
called
closed
stop
1
called
multiple
sorter
processes
running
instances
java
program
associated
argument
start
1
full
command
required
launch
java
program
jdk1
7
0
03
bin
java
cp
inf102
workspace
assignment4
bin
jdk1
7
0
03
lib
inf102
assignment4
main
accepting
argument
will
allow
us
automatically
test
program
even
though
may
java
installed
different
place
compiled
java
code
stored
different
place
things
need
think
order
successful
implementing
part
sure
look
code
example
demonstrates
using
erlang
ports
communicate
erlang
java
techniques
shown
code
readme
file
will
importance
minor
details
major
negative
impact
get
right
need
design
communication
protocol
similar
protocol
used
code
example
one
difference
though
messages
sending
back
forth
will
differ
lengths
packet
sizes
will
important
code
example
requirement
regarding
design
protocol
anything
works
permitted
remember
erlang
adds
removes
packet
lengths
automatically
java
program
will
need
read
write
explicitly
debugging
technique
shown
code
example
java
program
writes
debug
output
file
will
helpful
debug
protocol
assume
integers
lists
passed
ascending
2
descending
2
legitimate
java
integer
value
2
147
483
648
2
147
483
647
additionally
able
handle
lists
many
65
535
integers
need
sure
handle
protocol
appropriately
consider
example
number
bytes
use
packet
length
translate
integers
sorted
bytes
back
intbytesconverter
class
described
part
2
form
lot
use
important
note
allowed
send
messages
erlang
ports
even
though
can
communicate
erlang
port
sending
messages
erlang
process
restrictions
process
allowed
send
messages
port
given
time
erlang
port
said
connected
exactly
one
erlang
process
connected
process
allowed
send
messages
port
data
received
port
will
result
messages
send
connected
process
default
process
opens
port
one
connected
means
two
choices
set
things
make
sure
sorter
process
one
start
1
function
spawns
one
open
port
will
require
care
start
1
can
return
couldnotstart
opening
port
fails
open
port
start
1
connect
sorter
process
afterward
currently
connected
process
can
change
process
connected
port
sending
message
form
self
connect
newpid
newpid
pid
process
want
connected
port
approach
virtue
failure
will
occur
process
needs
return
error
message
requires
care
ensure
appropriate
process
connected
port
start
sending
messages
either
approaches
viable
choice
use
just
sure
consider
problem
solution
one
way
another
part
2
using
google
protocol
buffers
java
70
points
part
assignment
write
two
java
programs
one
writes
information
set
exercises
walking
treadmill
lifting
weights
performed
user
encoded
using
google
protocol
buffers
another
reads
information
back
computes
summary
statistics
exercises
programs
will
explore
kinds
problems
protocol
buffers
solves
kinds
need
handle
issues
protocol
buffers
address
writer
program
writer
program
comprised
console
mode
user
interface
graphical
user
interface
prefer
required
extra
credit
offered
allows
user
enter
information
three
kinds
exercises
fields
required
cardio
following
information
stored
occurrence
cardio
exercise
id
integer
unique
identifier
cardio
exercise
description
string
describing
kind
cardio
exercise
performed
treadmill
walking
intensity
integer
0
10
describing
intensity
exercise
10
intense
0
sitting
chair
staring
wall
duration
integer
specifying
long
seconds
user
spent
exercise
weight
training
following
information
stored
occurrence
weight
training
exercise
id
integer
unique
identifier
weight
training
exercise
description
string
describing
kind
weight
training
exercise
performed
leg
lifts
weight
amount
amount
weight
pounds
used
resistancesets
number
sets
exercise
performed
repetitions
number
repetitions
exercise
performed
set
stretching
following
information
stored
occurrence
stretching
exercise
id
integer
unique
identifier
stretching
exercise
description
string
describing
kind
stretching
exercise
performed
hurdler
stretches
repetitions
number
repetitions
stretching
exercise
performed
hold
duration
duration
seconds
stretch
held
repetition
kind
exercise
two
commands
presented
one
add
new
occurrence
exercise
one
remove
occurrence
exercise
given
unique
identifier
welcome
support
modifying
occurrence
exercise
well
though
required
keep
track
order
exercises
added
using
sequence
number
number
increases
time
add
one
date
time
added
one
way
handle
generate
ids
automatically
sequentially
use
ids
sequence
number
one
additional
command
must
included
user
interface
writing
information
exercises
output
file
whose
name
specified
user
part
will
use
protocol
buffers
encode
exercises
protocol
buffers
messages
writing
output
file
order
added
user
interface
program
required
able
read
one
files
welcome
support
like
also
one
last
command
need
support
quitting
program
hard
requirements
user
interface
must
support
commands
listed
requirements
must
easy
enough
use
us
figure
just
running
example
read
source
code
order
figure
commands
enter
beyond
creative
straightforward
like
part
design
program
will
protocol
buffers
proto
file
describes
messages
writing
output
file
reader
program
reader
program
comprised
console
mode
user
interface
graphical
user
interface
prefer
required
extra
credit
offered
allows
user
specify
input
file
one
written
writer
program
reads
contents
prints
summary
information
contained
inside
information
printed
reader
program
order
list
exercises
performed
order
written
output
file
writer
program
show
type
exercise
cardio
weight
training
stretching
id
description
summary
statistics
exercises
performed
order
total
duration
cardio
exercises
performed
total
duration
cardio
exercises
performed
whose
intensity
least
6
total
duration
cardio
exercises
performed
whose
intensity
greater
5
id
description
duration
longest
cardio
exercise
performed
event
tie
choose
ones
equally
longest
total
number
sets
performed
weight
training
exercises
total
number
repetitions
performed
weight
training
exercises
id
description
total
number
repetitions
performed
weight
training
exercise
largest
total
number
repetitions
event
tie
choose
ones
equally
largest
number
repetitions
total
hold
duration
stretching
exercises
performed
id
description
hold
duration
longest
stretching
exercise
performed
one
longest
total
hold
duration
across
repetitions
event
tie
choose
ones
equally
longest
durations
specified
form
hh
mm
ss
05
30
45
five
hours
30
minutes
45
seconds
course
obliged
point
summary
statistics
represent
good
way
determining
quality
exercise
program
serve
purposes
reader
program
required
compatible
protocol
buffers
proto
file
used
writer
program
permitted
need
write
new
proto
file
program
since
goal
read
information
written
writer
program
protocol
buffers
will
automatically
protocol
buffers
intended
mechanism
describing
structure
messages
messages
can
used
variety
purposes
sending
messages
programs
saving
data
file
programs
can
read
fall
category
getting
information
one
program
another
protocol
buffers
language
gives
syntax
describing
structure
messages
compiler
generates
code
can
automatically
translate
individual
messages
particularly
formatted
sequences
bytes
can
written
files
sent
across
sockets
etc
back
however
protocol
buffers'
mandate
ends
particular
protocol
buffers
ignores
issues
crop
program
sequence
messages
written
know
one
message
ends
another
beginshow
determine
content
message
kind
message
seems
strange
seemingly
crucial
details
handled
automatically
though
purposefully
left
design
protocol
buffers
reason
protocol
buffers
intended
form
basis
wide
variety
protocols
file
formats
opposed
just
one
focused
problem
serializing
deserializing
messages
efficient
cross
platform
version
insensitive
way
latter
issue
particular
can
expensive
solve
general
case
cheap
specific
program
relatively
message
types
additional
open
source
projects
wrap
protocol
buffers
different
ways
solve
different
kinds
problems
one
implements
remote
procedure
call
using
java
using
course
encouraged
investigate
curious
nonetheless
regardless
reasoning
led
choices
intend
use
protocol
buffers
need
find
workarounds
two
issues
listed
particular
need
store
extra
data
file
besides
just
bytes
protocol
buffers
generates
automatically
extra
data
used
program
make
decisions
protocol
buffers
solve
problem
knowing
one
message
ends
another
begins
designers
protocol
buffers
recommend
storing
length
message
message
similar
packet
technique
used
erlang
ports
part
1
first
bytes
specify
packet's
length
read
message
three
things
read
length
next
messageread
number
bytes
specified
length
byte
parse
message
byte
note
files
writing
reading
text
files
best
store
lengths
text
length
19
written
characters
'1'
'9'
instead
convert
int
values
underlying
bytes
write
bytes
files
reading
length
back
read
bytes
byte
convert
back
int
purposes
making
conversions
provided
intbytesconverter
class
two
static
methods
perform
conversions
ints
array
bytes
efficient
ways
storing
integer
values
strategy
will
suffice
prefer
use
method
fine
use
provided
converter
solve
problem
knowing
kind
message
read
time
read
one
need
write
information
indicates
kind
message
read
information
able
know
kind
message
build
leave
decide
write
information
anything
works
will
accepted
general
structure
one
message
look
like
message
type
indicatormessage
content
lengthmessage
content
message
type
indicator
whatever
written
allow
determine
type
message
message
content
length
length
message's
content
message
content
content
message
bytes
generated
protocol
buffers
automatically
note
able
just
pass
fileinputstream
parsefrom
method
message
class
done
code
example
using
protocol
buffers
lecture
instead
need
read
message
byte
use
variant
parsefrom
takes
byte
parameter
also
writing
messages
output
file
first
need
serialize
find
length
can
write
length
writing
message
bytearrayoutputstream
class
java
library
sort
cross
output
stream
can
write
write
methods
common
output
streams
arraylist
grows
dynamically
data
added
will
help
like
confront
handle
issues
writing
multiple
messages
file
determining
types
individual
messages
permitted
simply
create
single
message
type
repeated
field
exercise
separate
message
word
eclipse
sharing
code
two
programs
may
well
find
code
write
will
useful
programs
may
also
find
fine
requirement
find
code
share
support
possibility
suggest
using
one
eclipse
project
part
assignment
two
separate
classes
containing
main
methods
one
writer
program
one
reader
program
using
protocol
buffers
within
eclipse
project
first
need
download
protocol
buffers
compiler
link
like
erlang
distribution
provided
two
forms
zip
containing
windows
binary
protoc
exe
source
code
allowing
compile
version
compiler
mac
os
linux
etc
protocol
buffers
compiler
generate
code
necessary
write
read
messages
instead
generates
code
relies
set
supporting
code
superclasses
message
classes
derived
makes
package
called
com
google
protobuf
supporting
code
provided
official
web
site
quite
complete
requires
intermediate
step
generate
part
keep
things
simple
providing
jar
containing
complete
version
supporting
code
link
copy
protocol
buffers
compiler
protoc
exe
windows
eclipse
project
folder
neither
within
src
folder
bin
folder
create
folder
called
lib
within
eclipse
project
neither
within
bin
src
copy
jar
new
lib
folder
go
back
eclipse
refresh
eclipse
project
right
clicking
package
explorer
clicking
refresh
finally
right
click
jar
file
now
appear
lib
folder
within
project
select
build
path
add
build
path
will
make
protocol
buffers
support
library
available
project
write
proto
file
store
src
folder
eclipse
project
proto
files
source
code
sensible
place
put
made
changes
proto
file
execute
following
command
command
prompt
terminal
window
within
folder
containing
eclipse
project
within
bin
src
protoc
java
src
proto
file
proto
command
will
generate
new
java
files
placing
package
subfolders
specified
proto
file
automatically
whenever
recompiled
proto
file
refresh
eclipse
project
pick
new
versions
files
right
clicking
project
package
explorer
clicking
refresh
note
remove
proto
file
also
need
remove
corresponding
java
file
already
generated
heard
eclipse
plug
ins
protocol
buffers
mitigate
kinds
file
management
tasks
though
yet
try
welcome
give
one
shot
terms
getting
work
additional
optional
challenge
using
protocol
buffers
combine
java
either
python
erlang
something
else
protocol
buffers
just
technique
efficiently
serializing
deserializing
messages
java
programs
also
made
language
independent
presence
protocol
buffers
compilers
multiple
programming
languages
official
google
release
includes
compilers
generate
python
addition
java
languages
supported
varying
levels
completeness
separate
projects
variety
open
source
alternatives
listed
example
lecture
saw
erlang
implementation
protocol
buffers
can
download
github
compiling
little
tricky
happy
help
like
additional
challenge
finished
two
java
programs
write
compatible
versions
either
programs
either
python
erlang
something
else
appropriate
protocol
buffers
compiler
chosen
programming
language
will
support
part
effort
though
also
need
solve
problems
determining
message
types
message
boundaries
separately
new
program
way
compatible
java
programs
finished
able
write
output
java
program
read
program
written
another
language
additional
challenges
offered
course
extra
credit
offered
one
will
allow
delve
territory
beyond
covered
course
inclined
deliverables
part
1
submit
sorter
erl
file
along
one
java
files
make
java
program
part
2
submit
zip
archive
containing
following
deliverables
java
files
wrote
two
java
programs
writer
program
reader
program
used
packages
please
put
files
appropriate
subfolder
folder
called
assignment4
within
folder
called
inf102
used
package
inf102
assignment4
proto
file
describe
protocol
buffers
messages
used
programs
short
text
file
tells
us
fully
qualified
name
including
package
use
main
methods
java
programs
know
run
additional
challenge
write
document
explaining
protocol
buffers
compiler
used
give
us
link
instructions
set
submit
support
files
make
com
google
protobuf
package
also
necessary
submit
file
generated
protocol
buffers
compiler
will
generating
part
grading
process
follow
link
discussion
submit
assignment
via
checkmate
aware
holding
rules
specified
document
including
one
says
responsible
submitting
version
assignment
want
graded
regrade
assignment
simply
submitted
wrong
version
accident
various
requirements
adjusted
alex
thornton
spring
2012
minor
tweaks
alex
thornton
winter
2010
originally
written
alex
thornton
winter
2009
