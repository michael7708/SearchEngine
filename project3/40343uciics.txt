writing professional programs 
writing professional programs 
nearly
ics
22
lab
assignments
require
write
java
code
ics
21
concentrated
mostly
correctness
completeness
programs
now
grade
will
also
depend
qualities
good
program
many
attributes
correctness
efficiency
ease
learning
use
reliability
modifiability
clarity
correctness
paramount
anything
works
attitude
hacker
professional
professional
quality
program
must
score
highly
categories
intend
help
learn
write
professional
programs
one
aspect
professional
programs
style
speak
programming
style
use
term
style
sense
author's
manner
expression
hemingway's
style
different
joyce's
sense
good
clear
style
everyone
strive
achieving
clarity
requires
work
many
levels
overall
design
program's
classes
algorithms
data
structures
mundane
details
indentation
capitalization
spacing
throughout
course
will
concentrate
major
design
issues
document
focus
smaller
details
yet
details
cosmetic
trivialities
adhering
consistent
style
guidelines
helps
write
clearer
modifiable
reliable
generally
higher
quality
code
style
guidelines
present
good
ones
require
follow
perhaps
amendments
ta
makes
programming
course
say
every
detail
guidelines
superior
way
things
sake
consistency
require
follow
guidelines
course
will
find
many
organizations
coding
style
guidelines
programmers
must
follow
however
nobody
follow
style
guidelines
slavishly
come
upon
specific
situation
rules
make
program
clearer
rules
give
way
though
check
ta
make
sure
program
design
organization
organize
program
structure
clear
using
abstraction
various
kinds
hide
unnecessary
detail
level
main
strength
java
set
features
provides
support
object
oriented
programming
wherever
appropriate
design
program
terms
real
world
objects
represents
making
good
use
classes
associated
operations
classes
use
features
java
provides
abstraction
information
hiding
including
appropriate
inheritance
private
methods
instance
variables
methods
almost
never
longer
one
screenful
break
long
methods
sub
programs
use
symbolic
constants
wherever
applicable
zero
one
literal
constants
numbers
body
program
every
number
meaning
capture
meaning
constant
definition
mean
following
silly
practice
defining
eponymous
constants
like
static
final
int
ten
10
use
meaningful
identifier
names
choosing
identifier
names
must
choose
identifier
names
convey
function
clearly
anyone
reading
program
names
void
functions
methods
whose
return
value
status
indicator
successful
completion
imperative
words
phrases
commands
describe
actions
public
void
printformletter
name
address
public
boolean
fillrecord
public
int
sortbyvegetablename
method
names
usually
nouns
naming
value
returned
public
double
insurancepremium
long
zipcode
public
numberofflights
sizeofflightrecordcollection
names
methods
return
boolean
values
declarative
statements
read
correctly
called
public
boolean
citynameisvalid
response
nametocheck
citynameisvalid
usersinput
system
println
city
name
right
indentation
spacing
key
concept
include
enough
white
space
closely
related
items
appear
closer
together
less
closely
related
items
make
program's
organization
apparent
never
stingy
blank
lines
use
help
guide
reader's
eye
important
start
new
statement
new
data
definition
new
line
break
long
lines
clear
convenient
place
indent
continuation
indicate
separate
new
statement
documentation
documentation
required
varies
one
assignment
next
minimum
every
assignment
following
remember
comments
make
poorly
chosen
identifier
names
unclear
code
include
comment
top
program
includes
name
student
id
number
course
ta's
name
name
number
assignment
every
procedure
include
comment
describes
procedure's
purpose
kinds
parameters
expects
assumptions
values
called
procedure's
precondition
true
starts
values
returns
actions
performs
postcondition
true
executes
high
level
description
method
uses
method
obvious
reading
code
explain
intricate
obscure
sections
code
comments
rewrite
less
obscure
comments
appear
along
code
can
assume
reader
comments
knows
read
java
even
though
familiar
particular
program
thus
avoid
silly
redundant
comments
like
total
add
one
total
safety
reuse
reinvent
wheel
least
permission
use
existing
wheel
real
world
software
development
program
designers
learn
use
vast
libraries
classes
programs
rebuild
everything
ground
introductory
course
one
will
times
ask
build
something
ground
need
learn
construction
techniques
involved
tell
build
something
scratch
use
existing
code
possible
permissible
means
course
use
classmates'
roommates'
code
see
code
reuse
particularly
valuable
existing
code
qualities
code
lacks
extra
features
clearer
design
thorough
error
checking
will
use
program
grading
form
shown
read
now
use
guide
write
code
notice
large
portion
grade
depends
issues
programming
style
turning
lab
assignments
assignment
describes
turn
typically
includes
paper
copy
electronic
copy
place
parts
paper
submittal
manila
envelope
forms
one
package
make
sure
name
student
id
ta's
name
written
front
envelope
give
envelope
ta
section
electronic
submission
use
checkmate
system
checkmate
ics
uci
edu
please
refer
course
outline
importance
keeping
backups
papers
get
lost
servers
crash
expect
able
produce
replacement
copy
easily
either
misfortune
occur
late
assignments
assignments
will
typically
due
start
discussion
section
date
specified
assignment
submission
checkmate
complete
paper
submission
ready
hand
expect
everyone
turn
due
date
whatever
work
completed
significant
lateness
will
incur
penalties
can
make
exceptions
major
illness
emergency
conflicts
classes
work
will
give
partial
credit
work
partially
complete
correct
far
goes
another
reason
develop
programs
stages
coding
testing
debugging
go
rather
trying
one
big
push
early
assignments
will
award
bonus
5
assignment
turned
48
hours
due
date
hope
will
encourage
begin
work
early
assignments
bonus
like
extra
credit
labs
can
make
points
missed
lab
assignments
spill
past
100
make
points
missed
exams
48
hour
figure
firm
please
come
asking
bonus
miss
cut
even
short
circumstances
beyond
control
academic
honesty
part
professional
following
profession's
norms
accepted
behavior
know
may
copy
commercial
programs
lab
machines
use
home
likewise
academic
setting
may
turn
someone
else's
work
footnotes
general
principle
expect
independent
work
parts
course
course
always
permissible
even
desirable
talk
classmates
conceptual
course
material
requirements
assignment
though
instructor
ta
will
reliable
always
permissible
get
help
anyone
using
programming
environment
system
details
help
minor
syntax
errors
suggestions
possible
test
cases
programs
though
assignment
requires
must
write
description
test
plan
never
permissible
except
assignment
explicitly
allows
requires
working
groups
copy
another
student's
solution
whether
code
prose
math
good
rule
thumb
time
find
writing
paper
electronic
means
part
someone
else's
solution
copying
impermissibly
turning
another
person's
work
violates
honesty
policies
ics
uci
http
www
ics
uci
edu
academics
policies
icsacademichonestypolicy
php
http
www
ics
uci
edu
academics
policies
uciacademichonestypolicy
php
ics
department
takes
academic
honesty
seriously
imposes
serious
penalties
students
violate
guidelines
detected
violations
result
failing
course
letter
filed
school
losing
variety
benefits
privileges
check
academic
dishonesty
manually
automatically
unfortunate
fact
nearly
every
quarter
students
ics
classes
found
violated
policies
protect
privacy
guilty
violations
made
public
sadly
occur
matter
much
pressure
feel
deadlines
sources
matter
inconceivable
might
complete
assignment
time
never
take
shortcut
turning
someone
else's
code
compared
consequences
academic
dishonesty
one
low
assignment
score
minor
disadvantage
feel
falling
behind
difficulties
see
ta
instructor
sympathetic
might
expect
encourage
students
help
classmates
course
material
labs
within
certain
limits
helping
someone
else
hurt
grade
limits
many
bs
can
give
even
permissible
ics
22
let
someone
else
look
code
get
idea
organized
however
let
anyone
copy
code
either
paper
electronically
fact
wise
keep
code
possession
give
copy
someone
else
even
just
reference
person
might
tempted
copy
portions
code
accused
academic
dishonesty
importantly
realize
getting
answer
last
part
assignment
equally
important
process
getting
solution
including
false
starts
bugs
misconceptions
mistakes
learning
occurs
completely
apart
ethical
issues
copying
solution
deprives
whole
point
assignment
working
home
lab
work
home
comfortable
convenient
economical
safe
also
benefits
students
work
lab
freeing
machine
otherwise
using
welcome
lab
work
home
anywhere
else
legitimate
access
computer
addition
advantages
just
noted
also
potentially
serious
disadvantages
will
address
must
consider
decide
best
complete
labs
ensure
fairness
consistency
efficiency
grading
code
turn
must
work
correctly
java
environment
lab
develop
code
different
computer
operating
system
java
environment
entirely
responsibility
port
software
work
lab
due
date
java
supposed
perfectly
portable
across
platforms
especially
using
java
java
like
products
microsoft
still
may
subtle
undocumented
differences
extremely
difficult
identify
work
around
can
imagine
frustrating
program
worked
fine
home
crash
lab
especially
right
due
date
will
responsibility
avoid
frustrations
extent
can
deal
without
damage
lab
machines
classmates
arise
despite
best
efforts
reiterate
porting
problems
will
excuse
late
assignments
lab
assignments
will
data
code
need
incorporate
supply
lab
servers
will
need
copy
information
servers
onto
floppies
via
internet
use
home
labs
will
use
software
java
though
anticipate
software
will
available
web
working
home
convenient
also
isolated
close
friendships
support
network
develop
among
students
use
labs
first
professional
contacts
unfortunate
close
completely
grading
criteria
ics
22
programs
guidelines
will
assign
points
programming
portions
lab
exercises
note
exercises
points
others
activities
well
test
plans
prose
analysis
ta's
criteria
may
vary
slightly
primary
grading
responsibility
laboratory
work
correctness
valid
data
answers
right
output
spacing
correct
program
supposed
data
meets
problem's
specifications
program
handle
every
situation
supposed
handle
40
robustness
face
unusual
data
crash
given
data
maximum
allowable
bad
data
values
within
limits
specifications
program
bomb
gets
garbage
instead
print
informative
message
situations
10
quality
solution
choice
algorithm
points
deducted
particularly
graceless
awkward
cumbersome
inappropriate
way
going
problem
10
design
quality
program
divided
logical
parts
using
classes
appropriate
encapsulating
single
task
using
abstraction
techniques
applicable
statements
given
task
scattered
program
run
together
tasks
10
identifiers
identifier
names
symbolic
constants
chosen
reflect
function
meaningful
reader
require
lot
explanation
5
format
source
program
program
follow
course's
style
conventions
white
space
used
well
5
documentation
enough
comments
make
program
clear
reader
noting
good
modularity
identifiers
make
commenting
burden
lighter
unusual
portions
code
explained
comments
clutter
interfere
program
text
external
written
documentation
required
give
reader
lucid
overview
program's
organization
20
total
100
written
david
kay
1990
including
much
material
adapted
permission
appendix
programming
people
pascal
david
kay
mayfield
1985
revisions
made
reflect
think
pascal
joe
hummel
norman
jacobson
january
1992
minor
revisions
norman
jacobson
theresa
millette
december
1992
prose
polished
david
kay
january
1995
revised
object
oriented
programming
david
kay
assistance
rasheed
baqai
january
1997
revised
january
1998
september
1998
david
kay
revised
yet
david
kay
april
1999
particularly
address
honesty
professionalism
revised
january
2000
reflect
java
david
kay
revised
january
2001
january
2003
david
kay
406b
computer
science
university
california
irvine
irvine
ca
92697
3425
949
824
5072
fax
949
824
4056
email
kay
uci
edu
friday
january
10
2003
6
18
pm
