finite automata string matching 
finite automata string matching 
ics
161
design
analysis
algorithms
lecture
notes
february
22
1996
string
matching
probably
often
use
text
editor
unix
program
grep
find
text
file
place
defined
depth
first
search
program
email
message
sent
six
weeks
ago
asking
extension
programming
project
two
commonly
used
algorithms
knuth
morris
pratt
kmp
boyer
moore
bm
use
similar
ideas
take
linear
time
length
search
string
length
file
test
whether
certain
characters
equal
unequal
complicated
arithmetic
characters
boyer
moore
little
faster
practice
complicated
knuth
morris
pratt
simpler
one
discuss
book
talks
terms
finite
state
machines
fine
taken
162
finite
state
machines
finite
state
machine
fsm
also
known
deterministic
finite
automaton
dfa
way
representing
language
meaning
set
strings
interested
representing
set
strings
matching
pattern
explicitly
algorithmic
represent
language
set
strings
accepted
program
found
right
machine
can
test
whether
given
string
matches
just
running
kmp
algorithm
works
turning
pattern
given
machine
running
machine
hard
part
kmp
finding
machine
need
restrictions
mean
program
deterministic
finite
come
one
way
thinking
terms
programs
without
variables
program
can
look
incoming
character
determine
line
go
eventually
return
true
false
depending
whether
thinks
string
matches
simple
warmup
example
look
program
easier
problem
testing
whether
string
even
number
characters
main
getchar
eof
return
true
getchar
eof
return
false
note
lack
variables
simplify
things
rewrite
programs
avoid
complicated
loops
instead
just
use
goto
statements
probably
taught
gotos
bad
sort
rewriting
happens
time
fact
every
time
run
compiler
main
even
getchar
eof
return
true
else
goto
odd
odd
getchar
eof
return
false
else
goto
even
chosen
labels
goto
statements
represent
know
string
far
problem
whether
seen
even
odd
number
characters
far
variables
can
represent
knowledge
input
terms
program
think
line
program
state
representing
specific
fact
part
string
seen
far
states
even
odd
represent
know
number
characters
seen
far
since
variables
thing
machine
can
given
state
state
line
prog
go
different
states
depending
character
sees
can
useful
programming
style
instance
using
program
written
close
style
filter
html
files
web
pages
one
advantage
style
ways
program
can
tricked
unexpected
values
variables
since
variables
hard
make
program
crash
little
long
cumbersome
want
compile
separate
program
every
time
ran
grep
rather
writing
code
draw
pictures
circles
arrows
pictures
known
state
diagrams
circle
will
represent
state
arrow
label
will
represent
go
state
see
character
can
think
just
special
kind
graph
also
draw
arrow
nowhere
first
state
program
starts
arrows
nowhere
program
returns
true
string
ends
state
program
can
represented
following
diagram
class
described
complicated
example
used
preprocessor
part
compilers
tell
characters
part
comments
can
removed
input
easy
turn
diagram
program
simply
one
label
one
case
statement
per
state
given
diagram
string
can
easily
see
whether
corresponding
program
returns
true
false
simply
place
marker
penny
initial
state
move
around
one
state
time
run
characters
run
characters
see
whether
state
accept
arrow
pattern
matches
computer
obviously
represent
things
circles
arrows
instead
can
viewed
just
special
kind
graph
can
use
normal
graph
representations
store
one
particularly
useful
representation
transition
table
make
table
rows
indexed
states
columns
indexed
possible
input
characters
simulating
machine
can
done
simply
looking
new
step
table
also
need
store
separately
start
accept
states
machine
tests
whether
string
even
length
table
might
look
like
even
odd
odd
even
comment
machine
get
complicated
table
eol
none
slash
none
none
none
slash
none
none
none
star
star
none
star
since
state
diagram
just
kind
graph
can
use
graph
algorithms
find
information
finite
state
machines
instance
can
simplify
eliminating
unreachable
states
find
shortest
path
diagram
corresponds
shortest
string
accepted
machine
automata
string
matching
examples
much
string
matching
look
one
suppose
want
grep
nano
rather
just
starting
write
states
think
want
mean
step
want
store
current
state
information
need
string
seen
far
say
string
seen
far
stuvwxy
need
know
two
things
already
matched
string
looking
nano
possibly
middle
match
middle
match
need
know
much
nano
already
seen
also
depending
characters
seen
yet
may
one
match
middle
instance
just
seen
nan
different
matches
next
characters
ano
optimistic
remember
longest
partial
match
want
states
partial
matches
pattern
possible
partial
matches
nano
na
nan
complete
match
nano
words
just
prefixes
string
general
pattern
characters
need
1
states
4
five
states
start
accept
states
obvious
just
0
character
prefixes
thing
need
decide
transition
table
look
like
just
seen
nan
see
another
character
state
go
clearly
next
character
match
go
next
longer
prefix
nano
clearly
seen
complete
match
just
stay
state
suppose
see
different
character
means
string
far
looks
like
nana
longest
partial
match
just
na
state
nan
draw
arrow
labeled
state
na
note
na
prefix
nano
state
suffix
nana
partial
match
consistent
just
seen
general
transition
state
character
state
longest
string
simultanously
prefix
original
pattern
suffix
state
character
just
seen
enough
tell
us
transitions
looking
pattern
nano
transition
table
empty
empty
empty
empty
na
empty
empty
na
nan
empty
empty
empty
nan
na
nano
empty
nano
nano
nano
nano
nano
instance
entry
row
nan
column
says
largest
string
simultaneously
prefix
nano
suffix
nan
nann
simply
can
also
represent
state
diagram
simulating
string
banananona
get
sequence
states
empty
empty
empty
na
nan
na
nan
nano
nano
nano
since
end
state
nano
string
contains
nano
somewhere
paying
careful
attention
first
entered
state
nano
can
tell
exactly
occurs
also
possible
modify
machine
slightly
find
occurrences
substring
rather
just
first
occurrence
description
enough
get
string
matching
algorithm
takes
something
like
3
time
3
build
state
table
described
simulate
input
file
two
tricky
points
kmp
algorithm
first
uses
alternate
representation
state
table
takes
space
one
take
2
second
uses
complicated
loop
build
whole
thing
time
see
algorithm
next
time
ics
161
dept
information
computer
science
uc
irvine
last
update
02
may
2000
20
17
38
pdt
