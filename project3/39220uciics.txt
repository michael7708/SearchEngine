program 1 
program 1 using collection classes 
program
1
programming
using
generic
collection
classes
list
stack
queue
priority
queue
set
map
fundamental
data
structures
ics
23
introduction
programming
assignment
designed
ensure
know
use
combinations
generic
collection
classes
aka
data
types
model
compactly
write
code
solves
wide
variety
different
programming
problems
kind
abstract
thinking
goes
modeling
solutions
programming
problems
collection
classes
critical
development
computer
scientists
reason
collection
classes
important
useful
will
use
upcoming
advanced
knowledge
data
structures
improve
performance
programs
written
use
collection
classes
implementations
supply
correct
knowledge
slow
will
also
get
experience
reading
files
scanning
lines
read
five
parts
assignment
always
need
write
main
method
sometimes
will
asked
write
static
helper
methods
may
write
helper
methods
find
useful
may
change
collection
classes
supply
please
note
collections
class
notice
plural
also
much
different
collection
interface
contains
various
static
methods
process
collection
classes
import
assignment
sort
method
part
assignment
will
download
project
file
begining
java
file
related
data
files
files
included
imports
used
solution
may
import
interfaces
classes
well
find
useful
will
submit
one
java
file
solves
problem
warmup
download
project
solves
voting
problem
code
contains
similar
code
will
write
assignment
study
code
carefully
understand
works
leverage
code
write
solutions
five
problems
especially
related
reading
files
data
also
class
index
contains
link
javadoc
collections
api
discusses
public
constructors
method
important
start
writing
collection
classes
will
need
use
build
path
add
collections
jar
file
project
work
add
library
although
either
method
will
work
assignment
just
uses
already
written
implementations
suggest
ensure
know
use
build
path
get
job
done
home
machine
suggest
put
file
workspace
access
work
assignment
pairs
someone
lab
section
try
find
someone
lives
near
similar
work
schedule
talk
whether
like
work
morning
nights
weekends
work
someone
special
reason
send
email
stating
one
student
submit
assignment
student's
names
appear
comments
top
submitted
java
file
please
turn
program
finish
can
accurately
assess
progress
class
whole
assignment
print
document
carefully
read
marking
parts
contain
important
detailed
information
find
review
turn
files
note
especially
last
two
sections
extra
credit
time
management
important
sections
relevant
programming
assignments
appear
one
allocation
60
points
entire
programming
assignment
worth
will
1
worth
15
pts
2
worth
15
pts
3
worth
15
pts
4
worth
10
pts
5
worth
5
pts
note
get
extra
credit
points
submitting
assignment
early
unless
correctly
solved
submitted
least
problems
1
4
problem
1
download
reverse
project
folder
main
method
solution
contains
19
non
blank
lines
code
printgraph
reverse
methods
contains
7
15
non
blank
lines
respectively
note
multiple
data
files
program
test
draw
graph
ensure
code
correctly
prints
reverses
problem
statement
including
input
output
first
read
file
pairs
node
names
representing
edges
directed
graph
building
map
whose
key
label
source
node
whose
value
set
destination
nodes
reachable
source
node
write
informally
map
string
set
string
two
nodes
appear
line
first
source
node
destination
node
words
separated
one
semicolon
character
example
input
file
graph1
txt
contains
following
lines
appear
order
represent
graph
second
write
method
named
printgraph
prints
edges
one
source
node
per
line
sorted
alphabetically
followed
set
destination
nodes
can
immediately
reach
graph
print
graph
source
destination
edges
arrayset
2
2
0
1
arrayset
1
1
0
arrayset
2
2
0
1
arrayset
1
1
0
arrayset
1
1
0
arrayset
2
2
0
1
note
source
nodes
sorted
alphabetically
set
desintation
nodes
sorted
can
print
set
using
tostring
method
explicitly
implicitly
also
node
source
node
destination
node
appear
first
line
third
write
method
named
reverse
takes
one
graph
argument
returns
result
new
graph
contains
edges
argument
graph
reversed
first
graph
edge
source
ato
detination
second
one
edge
source
destination
call
printgraph
pint
edges
one
source
node
per
line
edges
sorted
alphabetically
source
node
sorting
destination
nodes
main
method
reads
graph
last
two
lines
code
printgraph
graphmap
graph
source
destination
edges
printgraph
reverse
graphmap
reverse
graph
source
destination
edges
second
argument
printgraph
method
string
labelling
graph
printed
sample
interaction
program
specified
will
following
interaction
user
typed
information
appears
italics
output
match
one
also
check
works
graphs
enter
name
file
graph
graph1
txt
graph
source
destination
edges
arrayset
2
2
0
1
arrayset
1
1
0
arrayset
2
2
0
1
arrayset
1
1
0
arrayset
1
1
0
arrayset
2
2
0
1
reverse
graph
source
destination
edges
arrayset
1
1
0
arrayset
1
1
0
arrayset
3
4
0
1
2
arrayset
1
1
0
arrayset
1
1
0
arrayset
2
2
0
1
reverse
graph
written
node
source
node
reversed
graph
appear
first
line
problem
2
download
reachability
project
folder
main
method
solution
contains
19
non
blank
lines
code
mostly
read
graph
reachable
method
contains
15
non
blank
lines
printgraph
method
7
non
blank
lines
comes
solution
previous
problem
note
multiple
data
files
program
test
draw
graph
ensure
code
correctly
prints
computes
nodes
reachable
source
node
files
problem
1
drew
graphs
use
problem
draw
now
problem
statement
including
input
output
first
repeat
problem
2
read
file
pairs
node
names
representing
edges
directed
graph
building
map
whose
key
label
source
node
whose
value
set
destination
nodes
reachable
source
node
write
informally
map
string
set
string
two
nodes
appear
line
first
source
node
destination
node
words
separated
one
semicolon
character
example
input
file
graph1
txt
contains
following
lines
second
call
printgraph
method
prints
edges
one
source
node
per
line
sorted
alphabetically
followed
set
destination
nodes
can
immediately
reach
graph
print
graph
source
destination
edges
arrayset
2
2
0
1
arrayset
1
1
0
arrayset
2
2
0
1
arrayset
1
1
0
arrayset
1
1
0
arrayset
2
2
0
1
note
source
nodes
sorted
alphabetically
set
desintation
nodes
sorted
can
print
set
using
tostring
method
explicitly
implicitly
also
node
source
node
destination
node
appear
first
line
third
write
method
named
reachable
takes
two
parameters
first
graph
second
one
label
node
graph
method
returns
set
label
labels
nodes
reachable
one
following
edges
arrows
number
times
basic
algorithm
reachability
simple
explain
complicated
implement
using
collection
classes
try
hand
simulate
high
level
assuming
set
queue
collections
work
correctly
independent
implemented
use
method
instead
recursion
unless
recursion
done
carefully
will
run
forever
graphs
cycles
one
input
files
graph
cycles
search
graph
reachable
nodes
build
set
reachable
nodes
queue
nodes
search
initializing
queue
node
supplied
parameter
reachable
queue
still
nodes
remove
one
put
set
reachable
nodes
destination
nodes
already
set
put
queue
queue
finally
becomes
empty
can
prove
always
happens
infinite
looping
return
set
labels
nodes
reachable
print
set
containing
node
labels
main
method
reads
graph
last
two
lines
code
just
string
start
prompt
forstring
nenter
node
start
system
println
node
reachable
start
reachable
graphmap
start
sample
interaction
program
specified
will
following
interaction
user
typed
information
appears
italics
output
match
one
also
check
works
starting
nodes
variety
starting
nodes
graphs
enter
name
file
graph
graph1
txt
graph
source
destination
edges
arrayset
2
2
0
1
arrayset
1
1
0
arrayset
2
2
0
1
arrayset
1
1
0
arrayset
1
1
0
arrayset
2
2
0
1
enter
node
start
node
reachable
arrayset
5
8
0
1
2
3
4
problem
3
download
finite
automaton
project
folder
main
method
solution
contains
35
non
blank
lines
code
program
will
simulate
machine
called
finite
automaton
fa
sometimes
also
called
deterministic
finite
automaton
dfa
fa
described
states
transitions
transition
specifies
input
state
input
leads
will
read
description
arbitrary
fa
first
will
simulate
fa
starting
specific
state
running
specific
input
problem
statement
including
input
output
first
process
file
describes
fa
create
map
whose
keys
states
whose
values
another
map
transitions
state
whose
keys
inputs
whose
values
states
line
file
contains
state
description
transitions
first
token
state
string
remaining
tokens
always
coming
pairs
inputs
states
transition
map
state
key
input
string
value
state
string
tokens
separated
one
semicolon
character
write
informally
map
string
map
string
string
example
file
parity
txt
contains
following
lines
even
0
even
1
odd
odd
0
odd
1
even
picture
parity
fa
graphically
illustrates
two
states
even
odd
transitions
using
inputs
0
1
always
lead
back
one
two
states
state
even
meaning
seen
even
number
1
inputs
far
key
main
map
value
map
two
key
value
pairs
0
even
1
odd
means
even
state
input
0
fa
stays
even
state
input
1
fa
goes
odd
state
similarly
next
line
means
odd
state
input
0
fa
stays
odd
state
input
1
fa
goes
back
even
state
second
print
sorted
version
main
map
states
fa
matter
many
states
must
printed
alphabetical
order
one
state
per
line
followed
associated
map
transitions
information
transition
maps
alphabetical
order
can
print
map
using
tostring
method
explicitly
implicitly
example
file
produce
finite
automaton
even
transitions
arraymap
2
2
0
0
even
1
1
odd
odd
transitions
arraymap
2
2
0
0
odd
1
1
even
third
process
one
line
file
contains
initial
state
followed
sequence
inputs
initial
state
will
state
fa
outer
map
inputs
specify
legal
transitions
inner
maps
example
input
file
inputparity
txt
contains
following
line
even
1
0
1
1
0
1
means
starting
initial
state
even
processes
inputs
1
0
1
1
0
1
print
initial
state
input
new
state
transitions
finally
print
final
state
parity
fa
file
prints
initial
state
even
input
1
new
state
odd
input
0
new
state
odd
input
1
new
state
even
input
1
new
state
odd
input
0
new
state
odd
input
1
new
state
even
final
state
even
sample
interaction
program
specified
will
following
interaction
user
typed
information
appears
italics
output
match
one
enter
finite
automaton
description
file
parity
txt
finite
automaton
even
transitions
arraymap
2
2
0
0
even
1
1
odd
odd
transitions
arraymap
2
2
0
0
odd
1
1
even
enter
start
state
inputs
file
inputparity
txt
initial
state
even
input
1
new
state
odd
input
0
new
state
odd
input
1
new
state
even
input
1
new
state
odd
input
0
new
state
odd
input
1
new
state
even
final
state
even
problem
4
download
non
determinisitic
finite
automaton
project
folder
main
method
solution
contains
46
non
blank
lines
code
generally
can
update
clean
solution
problem
3
get
clean
solution
problem
making
key
changes
related
differences
created
non
determinism
program
will
simulate
machine
called
non
deterministic
finite
automaton
ndfa
contrast
deterministic
finite
automaton
problem
3
ndfa
described
states
transitions
transition
specifies
input
state
states
makes
non
deterministic
input
leads
will
read
description
arbitrary
ndfa
first
will
simulate
ndfa
starting
specific
state
running
specific
input
problem
statement
including
input
output
first
process
file
describes
ndfa
create
map
whose
keys
states
whose
values
another
map
transitions
state
whose
keys
inputs
whose
values
set
states
line
file
contains
state
description
transitions
first
token
state
string
remaining
tokens
always
coming
pairs
inputs
states
transition
map
state
key
input
string
value
set
states
state
string
tokens
separated
one
semicolon
character
write
informally
map
string
map
string
set
string
compare
previous
description
deterministic
finite
automata
map
string
map
string
string
example
file
endin01
txt
contains
following
lines
start
0
start
1
start
0
near
near
1
end
end
picture
endin01
ndfa
graphically
illustrates
three
states
start
near
end
transitions
using
inputs
0
1
state
start
key
main
map
value
map
two
key
value
pairs
0
mapping
set
containing
start
near
1
mapping
set
containing
just
start
means
start
state
input
0
ndfa
can
stay
start
state
can
go
near
state
input
1
nsfa
must
stay
start
state
similarly
next
line
means
near
state
input
1
ndfa
must
go
end
state
last
line
means
end
state
transitions
second
print
sorted
version
main
map
states
ndfa
matter
many
states
must
printed
alphabetical
order
one
state
per
line
followed
associated
map
transitions
information
transition
maps
alphabetical
order
print
simplest
way
can
java
since
order
important
note
state
end
key
main
map
whose
associated
transitions
empty
map
example
file
produce
non
deterministic
finite
automaton
end
transitions
arraymap
0
1
near
transitions
arraymap
1
1
0
1
arrayset
1
1
0
end
start
transitions
arraymap
2
2
0
0
arrayset
2
2
0
start
1
near
1
1
arrayset
1
1
0
start
third
process
one
line
file
contains
initial
state
followed
sequence
inputs
initial
state
will
ndfa
outer
map
inputs
specify
legal
transitions
inner
maps
example
input
file
inputendin01
txt
contains
following
line
start
1
0
1
1
0
1
starting
initial
state
start
processes
inputs
1
0
1
1
0
1
print
initial
state
input
new
state
transitions
finally
print
final
state
endin01
ndfa
file
prints
initial
state
arrayset
1
1
0
start
input
1
new
possible
states
arrayset
1
1
0
start
input
0
new
possible
states
arrayset
2
2
0
start
1
near
input
1
new
possible
states
arrayset
2
2
0
start
1
end
input
1
new
possible
states
arrayset
1
1
0
start
input
0
new
possible
states
arrayset
2
2
0
start
1
near
input
1
new
possible
states
arrayset
2
2
0
start
1
end
final
possible
state
arrayset
2
2
0
start
1
end
note
especially
start
state
input
0
ndfa
can
either
remain
start
state
go
near
state
program
keep
tracek
states
ndfa
can
using
set
new
possible
states
next
input
1
can
either
start
state
start
state
input
1
allows
us
stay
start
state
end
state
near
state
input
1
allows
us
transition
end
state
thus
keep
track
set
states
ndfa
can
new
set
states
ndfa
can
processing
next
input
sample
interaction
program
specified
will
following
interaction
user
typed
information
appears
italics
output
match
one
enter
non
deterministic
finite
automaton
description
file
endin01
txt
non
deterministic
finite
automaton
end
transitions
arraymap
0
1
near
transitions
arraymap
1
1
0
1
arrayset
1
1
0
end
start
transitions
arraymap
2
2
0
0
arrayset
2
2
0
start
1
near
1
1
arrayset
1
1
0
start
enter
start
state
inputs
file
inputendin01
txt
initial
state
arrayset
1
1
0
start
input
1
new
possible
states
arrayset
1
1
0
start
input
0
new
possible
states
arrayset
2
2
0
start
1
near
input
1
new
possible
states
arrayset
2
2
0
start
1
end
input
1
new
possible
states
arrayset
1
1
0
start
input
0
new
possible
states
arrayset
2
2
0
start
1
near
input
1
new
possible
states
arrayset
2
2
0
start
1
end
final
possible
state
arrayset
2
2
0
start
1
end
problem
5
download
word
generator
project
folder
main
method
solution
contains
64
non
blank
lines
code
anonymous
class
implementing
comparator
interface
9
non
blank
lines
randomword
method
2
non
blank
lines
program
will
learn
word
pattern
author
based
order
statistic
generate
random
text
following
author's
word
pattern
problem
statement
including
input
output
first
prompt
user
order
statistic
1
2
3
etc
initial
testing
suggest
using
order
statistic
2
think
program
correct
try
3
4
second
read
file
tokens
building
map
storing
following
data
map
list
stringn
list
string
list
words
order
statistic
list
words
text
follow
words
2
map
contain
key
every
pair
words
appearing
next
text
value
list
words
following
key
matter
pair
occurs
duplicates
allowed
values
list
can
read
words
one
time
single
loop
see
readstring
typedbufferreader
class
call
readalltokens
use
stringtokenizer
class
using
specify
use
space
token
separators
build
map
start
prereading
words
list
assume
always
possible
might
read
next
word
put
value
associated
list
pre
read
words
drop
oldest
word
list
add
next
word
end
list
always
keeping
list
length
read
next
word
repeat
process
word
continuing
words
read
simple
example
file
input1
txt
contains
following
lines
third
print
associations
map
one
per
line
lexical
order
printing
associations
print
size
smallest
largest
list
value
map
line
contains
words
list
followed
list
words
follow
text
lexical
order
keys
appear
order
relative
first
word
list
first
words
appear
order
relative
second
word
list
first
second
words
appear
order
relative
thrid
word
list
etc
can
put
entries
list
sort
list
using
object
anonymous
class
implementing
comparator
job
compare
method
finds
first
different
words
two
lists
will
always
least
different
word
return
result
based
two
words
compare
fill
comparator
call
collections
sort
method
examine
code
voting
problem
see
something
similar
accomplished
example
file
produce
following
arraylist
2
2
0
1
arraylist
2
2
0
1
following
arraylist
2
2
0
1
arraylist
2
2
0
1
following
arraylist
2
2
0
1
arraylist
1
1
0
following
arraylist
2
2
0
1
arraylist
2
2
0
1
following
arraylist
2
2
0
1
arraylist
1
1
0
following
arraylist
2
2
0
1
arraylist
1
1
0
following
arraylist
2
2
0
1
arraylist
1
1
0
following
arraylist
2
2
0
1
arraylist
2
2
0
1
min
list
size
1
max
list
size
2
can
see
allowed
transition
text
appears
twice
followed
time
allowed
transitions
text
appears
twice
first
followed
finally
prompt
user
number
random
words
generate
number
greater
order
statistic
prompt
words
start
build
two
lists
list
string
starting
words
first
will
always
contain
current
words
used
key
map
second
will
contain
generated
words
generate
random
next
word
map
add
lists
drop
first
word
first
list
list
size
repeat
generated
required
number
words
warning
might
stop
prematurely
generate
last
words
text
words
occur
nowhere
else
case
random
word
generate
following
print
list
15
element
list
starting
words
might
print
results
arraylist
17
32
0
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
result
start
specified
user
know
can
come
next
using
know
either
must
come
next
randomly
chooses
sample
interaction
program
specified
will
following
interaction
user
typed
information
appears
italics
output
match
one
enter
order
statistic
2
enter
name
sample
text
file
input1
txt
allowed
transitions
sorted
following
arraylist
2
2
0
1
arraylist
2
2
0
1
following
arraylist
2
2
0
1
arraylist
2
2
0
1
following
arraylist
2
2
0
1
arraylist
1
1
0
following
arraylist
2
2
0
1
arraylist
2
2
0
1
following
arraylist
2
2
0
1
arraylist
1
1
0
following
arraylist
2
2
0
1
arraylist
1
1
0
following
arraylist
2
2
0
1
arraylist
1
1
0
following
arraylist
2
2
0
1
arraylist
2
2
0
1
min
list
size
1
max
list
size
2
enter
words
generate
15
enter
prefix
word
0
enter
prefix
word
1
results
arraylist
17
32
0
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
can
also
try
reading
much
larger
file
included
project
folder
huck
txt
mark
twain's
adventures
huckleberry
finn
machine
took
1
2
hour
create
map
order
statistic
3
90
000
entries
map
biggest
key
triple
associated
value
46
entries
key
arraylist
3
4
associated
value
arraylist
46
64
window
face
woods
fourth
front
jacket
hole
canoe
middle
ferryboat's
cottonwood
captain's
river
fog
range
presbyterian
tree
nest
wagon
troughs
reach
store
way
wigwam
ark
room
corner
grave
nonesuch
trouble
kitchen
old
first
hardest
nigger
patch
sugar
bowl
window
hole
brass
spoon
house
tooleries
bag
office
post
office
cabin
path
chains
re
implement
map
hasht
able
instead
array
time
go
just
seconds
almost
2
000
times
faster
can
use
program
read
generate
music
dna
sequences
data
made
symbols
extra
credit
programming
assignments
must
turned
time
can
get
partial
credit
partially
completed
assignment
must
turned
time
will
accept
late
homework
unless
official
excuse
best
contact
soon
problem
arises
due
date
fact
another
incentive
finish
time
finish
early
programming
assignments
turn
everything
least
24
hours
officialy
due
will
receive
2
points
extra
credit
turn
48
hours
earlier
will
receive
3
points
extra
credit
extra
credit
earlier
turn
ins
recommend
turning
48
hours
early
specifically
wait
receive
graded
previous
program
turning
new
one
equivalent
one
half
full
grade
improvement
60
point
programming
assignment
previous
quarters
taught
almost
75
students
completed
assignments
early
received
amount
extra
credit
two
main
advantages
planning
finishing
early
first
run
major
problem
will
extra
time
solve
actual
due
date
even
experienced
programmers
frequently
run
problems
yes
means
second
importantly
racing
finish
deadline
stress
levels
can
go
roof
become
less
interested
learning
material
whole
purpose
programming
assignments
ensure
learned
material
interested
just
getting
finished
learn
material
will
major
disadvantage
subsequent
programming
assignments
tests
cumulative
nature
material
course
therefore
plan
finish
every
assignment
tuesday
wednesday
evening
due
thursday
evening
programming
assignments
sometimes
also
include
extra
credit
section
worth
extra
points
points
designed
students
finish
early
want
continue
exploring
programming
within
context
assignment
points
acknowledge
small
way
extra
effort
assignment
extra
credit
turning
early
time
management
one
hardest
parts
college
learning
manage
time
time
management
especially
important
programming
courses
real
world
working
complicated
projects
hard
deadlines
difference
good
bad
time
management
can
profound
impact
much
learn
course
well
perform
much
effort
actually
need
expend
well
generally
best
spread
work
two
week
long
assignment
often
mutliple
parts
assignment
complete
parts
sequence
assignments
become
available
two
days
lab
assigned
lab
assigned
will
overview
assignment
can
start
working
one
aspect
well
students
look
assignment
think
best
done
one
sitting
can
great
plan
work
way
one
sitting
soon
assigned
night
due
way
wrong
amount
time
will
take
will
still
adequate
time
complete
assignment
know
everyone
lots
constraints
schedules
programming
assignments
doable
two
weeks
meeting
time
goals
will
maximize
learn
minimize
anxiety
time
takes
learning
remember
assignments
must
turned
time
can
get
partial
credit
partially
completed
assignment
must
turned
time
will
accept
late
homework
unless
official
excuse
finally
find
falling
behind
seek
help
immediately
tas
even
students
course
appropriate
