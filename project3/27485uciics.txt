program 2 
program 2 
program
2
intermediate
program
suite
introduction
computer
science
ics
21
introduction
please
print
copy
assignment
read
carefully
highlight
material
think
will
useful
working
program
submitting
programming
assignment
designed
ensure
know
write
programs
combine
standard
control
structures
java
blocks
ifs
loops
break
statements
terminate
loops
will
also
continue
gaining
experience
basic
java
features
declarations
expression
statements
use
arithmetic
relational
logical
textual
state
change
operators
including
lots
logical
boolean
expressions
finally
will
practice
writing
testing
debugging
programs
using
iterative
enhancement
divide
conquer
technique
building
testing
programs
bit
time
will
write
three
programs
assignment
time
programs
must
check
whether
inputs
valid
reprompt
user
discard
always
can
check
behavior
programs
mine
downloading
executable
zip
file
program
2
executables
unzipping
see
program
1
details
run
executables
pcs
eclipses
pcs
macs
remember
can
run
programs
examine
source
java
code
copy
input
output
form
executable
programs
programs
write
use
exactly
prompts
messages
darts
montyhall
programs
executable
versions
kernel
enhancement
information
listing
number
lines
solution
programs
programs
formated
standard
way
counting
lines
code
even
code
line
brace
closes
block
counting
blank
lines
norlines
filled
comments
darts
program
24
lines
increasing
program
30
lines
monty
hall
program
51
lines
programs
might
smaller
might
larger
program
starts
going
2
3
times
size
mine
might
want
rethink
come
get
help
please
declare
variables
natural
type
variable
always
stores
integral
values
declare
int
later
program
need
use
double
cast
please
follow
instructions
program
finish
enhancement
continuing
next
one
including
printing
whatever
messages
displays
console
copied
exactly
please
use
infinite
loop
break
statements
write
loops
finished
may
simplify
loops
improve
programming
abilities
improve
programming
style
will
part
grading
criteria
upcoming
programming
assignments
programs
please
pay
particularly
close
attention
following
style
principles
discussed
lecture
coding
style
names
choose
good
names
variables
alignment
indent
statements
clarify
meaning
control
structures
locality
keep
related
information
together
separate
unrelated
information
comments
document
code
appropriately
comments
please
examine
sample
programs
provided
examples
good
programming
style
learn
copy
style
just
artists
middle
ages
learned
copy
master's
style
developing
program
will
get
feedback
style
graded
next
program
will
graded
style
work
assignment
create
one
java
project
call
program2
create
three
new
java
classes
one
class
program
0
class
will
contain
program
will
write
solve
one
problem
name
classes
darts
increasing
montyhall
write
run
debug
class
program
program
1
finish
part
submit
java
file
one
programmer
pair
dropoff
programs
one
part
matter
pair
submits
person
submit
parts
course
program
contain
student
names
comment
one
cut
pasted
ane
filled
top
program
program
1
calculating
£k
darts
write
program
performs
following
tasks
prompt
user
number
darts
throw
accept
numbers
greater
0
reprompting
user
whenever
non
positive
value
entered
matter
many
times
simulate
throwing
many
darts
2x2
square
whose
center
origin
using
random
number
generator
constrained
square's
boundary
generate
coordinates
dart
approximate
value
£k
pi
computing
ratio
darts
land
inside
circle
inscribed
square
divided
number
darts
landed
inside
square
total
number
darts
thrown
since
darts
constrained
land
square
calculation
approximates
ratio
circle's
area
square's
simulate
throwing
darts
write
expression
returns
double
range
1
0
1
0
calls
math
random
method
returns
result
0
0
1
0
use
expression
generating
coordinates
ensures
coordinates
within
square
use
multiplication
addition
subtraction
linearly
grow
shift
range
math
random
function
desired
range
coordinate
use
boolean
expression
determine
whether
coordinates
dart
inside
outside
circle
inscribed
square
remember
geometry
design
code
test
debug
program
using
iterative
enhancement
6
mini
projects
test
project
ensure
correct
proceeding
next
enhancement
methodology
will
use
larger
programs
good
idea
practice
technique
program
small
even
can
write
entire
program
later
will
discuss
technique
greater
depth
starting
write
program
run
executable
times
familiarize
youself
input
output
write
kernel
program
prompts
user
number
darts
throw
loops
many
times
printing
literal
dart
thrown
loop
iteration
assume
user
always
enters
positive
number
ensure
number
times
dart
thrown
printed
requested
number
darts
easy
1
enter
different
small
values
test
enhance
program
prints
dart
thrown
simulates
throwing
dart
prints
random
coordinates
dart
thrown
ensure
values
change
1
1
seem
random
enhance
program
prints
coordinates
dart
prints
either
inside
circle
outside
circle
dart's
coordinates
using
calculator
hand
check
inside
outside
calculation
computing
result
correctly
darts
printing
message
correctly
enhance
program
keep
track
count
number
darts
land
inside
circle
display
value
iteration
loop
ensure
dart
lands
inside
circle
count
increments
one
important
requirement
counters
java
type
int
use
explicit
conversion
casting
need
treat
values
like
doubles
later
computation
enhance
program
approximate
£k
pi
computing
ratio
darts
land
circle
total
number
darts
thrown
multiplying
value
4
area
circle
according
formula
display
result
terminating
enhance
program
allow
user
enter
positive
values
original
prompt
number
darts
throw
reprompting
whenever
enters
non
positive
value
use
separate
loop
validation
use
fancy
version
prompt
forint
just
use
simplest
one
single
string
operand
test
code
trying
enter
0
negative
numbers
multiple
times
finally
remove
intermediate
output
statements
final
answer
appear
final
output
produce
exactly
output
executable
hand
final
enhancement
program
one
meeting
complete
specifications
intermediate
output
statements
removed
test
throwing
10
100
1
000
10
000
100
000
1
million
10
million
darts
try
billion
fast
computer
also
try
number
darts
observe
computed
value
changes
darts
thrown
randomly
time
typically
darts
thrown
better
answer
approximates
true
value
£k
pi
increasing
sequences
write
program
performs
following
tasks
uses
sentinel
loop
prompt
user
sequence
numbers
user
enters
negative
number
non
negative
valukes
processed
program
values
input
program
counts
many
numbers
entered
excluding
sentinel
counts
often
entered
values
larger
value
entered
values
sequence
increasing
computes
longest
sequence
entered
values
strictly
increasing
will
use
two
int
variables
keep
track
previous
value
entered
current
value
entered
determine
two
values
sequence
increasing
entring
new
current
value
old
current
value
must
stored
previous
variable
see
step
3
idiom
useful
many
programs
design
code
test
debug
program
using
iterative
enhancement
7
mini
projects
test
project
ensure
correct
proceeding
next
enhancement
methodology
will
use
larger
programs
good
idea
practice
technique
program
small
even
can
write
entire
program
later
will
discuss
technique
greater
depth
starting
write
program
run
executable
times
familiarize
youself
input
output
test
program
mine
entering
values
specified
can
use
short
input
sequences
test
early
enhancements
ensure
work
correctly
must
use
longer
input
sequences
test
latter
enhancements
just
use
test
inputs
construct
test
inputs
well
write
kernel
program
declares
current
variable
prompts
user
value
value
non
negative
program
loops
user
enters
negative
value
point
loop
terminates
end
program
print
loop
finished
enhance
program
counts
number
non
negative
values
user
enters
instead
printing
loop
finished
print
number
non
negative
values
user
entered
form
entered
total
4
non
negative
values
note
user
enters
negative
value
first
prompt
loop
executed
total
0
non
negative
numbers
enhance
program
declares
variable
previous
updates
appropriate
bottom
loop
program
print
previous
current
values
enter
2
3
1
4
1
program
print
enter
first
value
2
enter
next
value
3
previous
2
current
3
enter
next
value
1
previous
3
current
1
enter
next
value
4
previous
1
current
4
enter
next
value
1
entered
total
4
non
negative
values
notice
outputs
interspersed
prompts
enhance
program
declares
variable
increasecount
uses
count
many
current
values
bigger
previous
values
update
output
show
number
increases
well
enter
2
3
1
4
1
program
print
enter
first
value
2
enter
next
value
3
previous
2
current
3
increasecount
1
enter
next
value
1
previous
3
current
1
increasecount
1
enter
next
value
4
previous
1
current
4
increasecount
2
enter
next
value
1
entered
total
4
non
negative
values
enhance
program
declares
variable
increaseinarow
uses
count
length
sequence
increasing
values
whenever
previous
value
less
current
one
variable
increases
1
otherwise
value
reset
0
increasing
sequence
ended
update
output
show
number
increases
row
well
enter
slightly
longer
different
input
2
4
1
3
5
7
4
6
1
program
print
enter
first
value
2
enter
next
value
4
previous
2
current
4
increasecount
1
increaseinarow
1
enter
next
value
1
previous
4
current
1
increasecount
1
increaseinarow
0
enter
next
value
3
previous
1
current
3
increasecount
2
increaseinarow
1
enter
next
value
5
previous
3
current
5
increasecount
3
increaseinarow
2
enter
next
value
7
previous
5
current
7
increasecount
4
increaseinarow
3
enter
next
value
4
previous
7
current
4
increasecount
4
increaseinarow
0
enter
next
value
6
previous
4
current
6
increasecount
5
increaseinarow
1
enter
next
value
1
entered
total
8
non
negative
values
enhance
program
declares
variable
maxincreaseinarow
uses
count
length
longest
sequence
increasing
values
enter
input
2
4
1
3
5
7
4
6
1
program
print
enter
first
value
2
enter
next
value
4
previous
2
current
4
increasecount
1
increaseinarow
1
maxincreaseinarow
1
enter
next
value
1
previous
4
current
1
increasecount
1
increaseinarow
0
maxincreaseinarow
1
enter
next
value
3
previous
1
current
3
increasecount
2
increaseinarow
1
maxincreaseinarow
1
enter
next
value
5
previous
3
current
5
increasecount
3
increaseinarow
2
maxincreaseinarow
2
enter
next
value
7
previous
5
current
7
increasecount
4
increaseinarow
3
maxincreaseinarow
3
enter
next
value
4
previous
7
current
4
increasecount
4
increaseinarow
0
maxincreaseinarow
3
enter
next
value
6
previous
4
current
6
increasecount
5
increaseinarow
1
maxincreaseinarow
3
enter
next
value
1
entered
total
8
non
negative
values
enhance
program
print
intermediate
output
comment
intermediate
print
statements
still
program
nothing
comments
can
reactivated
later
need
arises
besides
prompting
program
prints
just
total
number
non
negative
values
entered
total
number
times
values
increased
length
longest
sequence
increasing
values
hand
final
enhancement
program
one
meeting
complete
specifications
intermediate
output
statements
commented
test
program
mine
short
long
sequences
numbers
different
patterns
increasing
decreasing
values
think
boundary
cases
example
first
two
values
entered
increasing
different
examples
verify
program
computes
right
answers
monty
halllet's
make
deal
1970s
popular
tv
game
show
make
deal
whose
host
monty
hall
typical
contestant
shown
three
doors
behind
one
door
valuable
prize
behind
two
doors
goats
worthless
prizes
contestant
first
pick
door
monty
often
show
goat
prize
behind
one
doors
matter
door
contestant
picked
always
one
door
goat
prize
behind
monty
show
next
monty
often
ask
contestant
whether
wanted
keep
door
originally
chose
switch
door
one
shown
monty
advantage
staying
door
advantage
switching
doors
options
equally
good
terms
likely
contestant
will
win
valuable
prize
watch
many
shows
keep
statistics
strategy
contestant
used
whether
won
lost
strategy
can
write
program
can
simulate
many
games
determine
best
strategy
although
computer
simulation
will
tell
strategy
best
tell
strategy
best
may
also
want
use
reasoning
powers
deduce
correct
answer
running
program
problem
notoriously
difficult
solve
correctly
marilyn
vos
savant
writes
column
ask
marilyn
parade
magazine
supposedly
highest
iq
anyone
us
discussed
problem
column
early
1990s
generated
huge
volumne
mail
many
phds
mathematics
incorrectly
disagreed
analysis
web
search
find
lots
written
monty
hall
problem
try
come
solution
problem
fact
appears
following
clip
movie
21
student
supplies
answer
justify
solution
can
also
see
various
episodes
make
deal
tube
interesting
different
people
can
effectively
argue
solution
correct
problem
subtle
many
wrong
solutions
sound
right
someone
formulated
solution
difficult
convince
wrong
yet
can
write
simple
computer
program
determine
strategy
best
even
given
evidence
people
hard
time
giving
incorrect
solution
will
write
program
prompts
user
strategy
use
switch
remaining
door
stay
door
chose
originally
number
games
play
accept
numbers
greater
0
whether
output
detailed
trace
program
simulates
playing
many
games
keeping
track
often
player
chosen
strategy
wins
program
prints
statistics
collects
number
times
player
won
lost
end
numbers
can
deduce
strategy
best
really
significant
difference
simulate
choosing
doors
random
door
chosen
good
prize
door
random
door
chosen
contestant's
door
monty
chooses
door
expose
either
good
prize
chosen
door
cut
paste
following
code
public
class
montyhall
public
static
void
main
string
args
method
returns
random
int
value
range
1
3
static
int
getrandomdoor
return
int
3
math
random
1
need
choose
random
door
call
method
getrandomdoor
store
result
call
variable
prizedoor
chosendoor
exposeddoor
use
subsequent
statements
program
math
random
returns
value
0
1
expression
converted
int
value
1
4
converting
int
either
1
2
3
result
truncates
4
means
numbers
including
4
can
generated
equal
probability
design
code
test
debug
program
using
iterative
enhancement
7
mini
projects
test
project
ensure
correct
proceeding
next
enhancement
methodology
will
use
larger
programs
good
idea
practice
technique
program
small
soon
will
discuss
technique
greater
depth
starting
write
program
run
executable
times
familiarize
youself
input
output
run
executable
using
detailed
trace
can
better
understand
program
well
write
kernel
program
prompts
user
number
games
play
loops
many
times
printing
literal
game
played
loop
iteration
phase
always
assume
user
enters
correct
input
positive
number
ensure
number
times
game
played
printed
requested
number
games
enter
different
small
values
test
enhance
program
game
played
program
randomly
chooses
door
prize
behind
door
contestant
chooses
print
doors
game
prize
behind
door
1
contestant
chooses
door
2
course
doors
may
number
printing
choices
program
prompt
user
enhancement
user
plays
monty
hall
door
number
expose
contestant
print
door
number
enhance
program
first
prompt
whether
use
switch
strategy
whether
simulated
player
switch
doors
monty
exposes
door
store
boolean
value
variable
game
played
print
whether
player
won
lost
strategy
based
strategy
value
variable
chosen
prize
doors
enhance
program
keep
track
number
times
player
won
printing
whether
player
won
lost
print
total
number
times
won
enhance
program
allow
user
enter
positive
values
original
prompt
number
games
play
user
enters
incorrect
number
reprompt
use
separate
loop
validation
try
use
fancy
version
prompt
forint
just
use
simplest
one
single
string
parameter
test
code
trying
enter
0
negative
numbers
ensure
user
continually
prompted
enter
value
enter
positive
one
enhance
program
randomly
choose
door
expose
java
can
run
simulation
high
speed
without
bothering
user
enter
value
repeatedly
loop
choosing
random
door
terminating
loop
allowing
choice
choice
door
chosen
contestant
door
containing
prize
accomplished
similarly
enhancement
display
attempt
indented
final
choice
door
expose
terminating
program
printing
information
identically
mine
mine
run
detailed
trace
enhance
program
prompt
whether
provde
detailed
trace
store
boolean
value
variable
execute
intermediate
tracing
output
statements
tracing
variable
set
true
tracing
variable
set
false
final
answers
appear
final
output
prompt
lines
line
printing
number
games
played
number
times
player
using
selected
strategy
won
number
times
player
lost
hand
final
enhancement
program
one
meeting
complete
specifications
printing
just
six
lines
output
including
three
prompts
test
playing
10
100
1
000
10
000
100
000
1
million
games
also
try
number
games
observe
computed
values
change
doors
chosen
randomly
time
typically
games
played
accurate
answer
