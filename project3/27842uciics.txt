ics 32 winter 2013 project 1 begin begin 
project 1 
ics
32
winter
2013
news
course
reference
schedule
project
guide
code
examples
alex
ics
32
winter
2013
project
1
begin
begin
due
date
time
friday
january
18
11
59pm
project
done
pairs
using
pair
programming
technique
introduction
clear
differences
operating
systems
run
personal
computers
one
things
common
notion
file
system
whose
role
manage
creation
arrangement
updating
deletion
files
storage
devices
hard
drives
usb
sticks
actually
lot
complicated
look
file
system
provides
abstraction
complexity
replacing
simple
concepts
like
files
directories
paths
like
many
programming
language
libraries
python's
standard
library
provides
pre
built
implementation
variety
file
system
operations
possible
create
files
copy
move
files
search
directories
manipulate
paths
know
abstract
concepts
file
system
centered
around
can
use
python's
standard
library
access
file
system
terms
abstract
concepts
project
will
give
chance
explore
parts
python
standard
library
may
seen
provide
practice
reading
digesting
technical
documentation
order
determine
functions
standard
library
appropriate
helping
solve
problem
introduce
features
python
might
opportunity
use
exception
handling
ask
use
recursion
traverse
recursive
data
structure
case
file
system
file
systems
whether
run
windows
mac
os
flavor
linux
doubt
experience
least
following
concepts
file
system
software
manages
information
stored
storage
device
hard
drive
information
stored
files
containers
sequence
bytes
stored
bytes
file
interpreted
differently
depending
kind
file
user
file
expects
contain
text
image
song
video
file
filename
can
used
identify
operating
systems
treat
files
differently
depending
names
especially
extension
part
filename
follows
last
dot
doc
filename
invoice
doc
necessarily
relationship
name
file
kind
data
contains
side
note
running
windows
machine
completed
assignment
0
yet
particular
step
1
installation
instructions
windows
overlooked
going
really
important
context
project
windows
default
hides
filename
extensions
user
interface
going
need
see
filenames
files
arranged
directories
also
called
folders
settle
one
terminology
call
directories
like
files
directories
names
directories
can
contain
files
directories
can
turn
contain
directories
directory
inside
another
directory
generally
called
subdirectory
rules
govern
directories
less
rules
govern
directories
inside
except
one
special
directory
called
root
forms
kind
starting
point
search
root
directory
one
directory
device
inside
another
directory
one
file
directory
device
can
name
instead
identified
precisely
path
indicates
sequence
directories
starting
root
one
descend
order
find
file
directory
concept
path
transcends
operating
systems
written
bit
differently
different
ones
instead
storing
file
directory
can
also
store
symbolic
link
points
another
file
stored
directory
allows
file
appear
one
directory
similarly
directory
can
contain
symbolic
link
another
directory
can
get
little
bit
strange
directories
link
back
parent
even
project
require
handle
symbolic
links
though
welcome
take
crack
inclined
aware
though
may
easily
possible
create
windows
can
done
requires
tweaking
security
settings
require
administrative
access
machine
means
able
ics
labs
terms
seem
unfamiliar
worth
bit
research
experimentation
sure
understand
proceed
far
project
addition
useful
context
problem
hand
good
practical
knowledge
need
want
successful
programmer
program
program
writing
project
one
can
search
files
directory
subdirectories
subdirectories
interesting
characteristics
take
kind
action
files
notion
interesting
characteristics
taking
action
will
configurable
can
work
different
ways
core
act
finding
files
will
always
user
interface
executed
program
interact
user
printing
console
reading
input
console
using
print
input
functions
following
ask
user
specify
path
directory
search
files
rooted
example
windows
user
might
type
program
files
python33
lib
case
files
underneath
chosen
directory
will
found
specified
directory
exist
print
error
message
ask
user
specify
another
directory
ask
user
search
characteristics
use
deciding
whether
files
interesting
action
taken
search
name
files
whose
names
exactly
match
particular
name
user
chooses
characteristic
ask
filename
like
search
example
user
specifies
boo
jpg
files
whose
names
exactly
boo
jpg
will
considered
interesting
search
name
ending
files
whose
names
end
particular
string
user
chooses
characteristic
ask
ending
like
search
example
user
specifies
py
files
whose
names
end
py
will
considered
interesting
search
size
files
whose
size
measured
bytes
exceeds
specified
limit
user
chooses
characteristic
ask
limit
example
user
specifies
2097151
files
whose
sizes
least
2
097
152
bytes
will
considered
interesting
ask
user
actions
taken
interesting
files
always
print
file's
path
console
line
output
taking
action
will
clear
files
affected
print
path
print
file's
path
console
otherwise
anything
print
first
line
text
open
file
assuming
text
file
read
first
line
text
file
print
text
console
copy
file
make
copy
file
store
directory
original
resides
copy
copy
appended
filename
example
interesting
file
pictures
boo
jpg
copy
pictures
boo
jpg
copy
touch
file
touch
file
means
modify
last
modified
timestamp
current
date
time
whenever
user
asked
specify
input
remove
spaces
beginning
end
whatever
typed
anything
removing
spaces
input
empty
match
available
choice
wrong
type
number
expected
user
types
alex
print
error
message
ask
user
try
program
crash
result
incorrect
input
user
running
search
taking
action
search
look
files
directory
user
asked
search
rooted
subdirectories
directory
subdirectories
deep
directory
structure
goes
outside
occurrence
symbolic
links
ignoring
purposes
project
directory
structures
hierarchical
directories
subdirectories
inside
subdirectories
structure
parents
general
order
take
action
files
important
long
every
interesting
file
action
taken
exactly
handling
failure
want
handle
failure
carefully
program
general
program
crash
just
one
activity
fails
instead
note
failure
printing
readable
message
console
continue
possible
example
search
accessing
directory
fails
search
still
continue
attempting
access
directories
taking
action
interesting
file
fails
program
continue
processing
additional
interesting
files
organization
program
program
written
single
python
module
single
py
file
can
feel
free
name
file
anything
like
running
module
loading
idle
pressing
f5
selecting
run
module
run
menu
result
program
executed
user
interface
displayed
importing
module
manually
using
import
statement
way
differentiate
scenarios
write
statement
outside
function
usually
bottom
module
looks
like
name
'
main
'
things
want
happen
module
run
expression
name
'
main
'
will
return
true
module
executed
will
false
module
imported
instead
important
design
goal
write
program
want
lookout
complex
functions
can
made
simpler
breaking
multiple
smaller
functions
taking
complexity
putting
function
well
chosen
name
clearly
named
parameters
great
way
tame
complexity
first
step
building
ability
write
significantly
larger
programs
written
far
sure
getting
practice
taking
step
project
one
criteria
use
grading
project
assess
quality
design
project
largest
factor
affecting
quality
extent
functions
broken
long
cumbersome
python
standard
library
documentation
python
org
find
comprehensive
set
documentation
python
language
standard
library
two
good
places
start
pages
python
3
3
0
documentationpython
3
3
0
standard
library
documentation
probably
need
spend
fair
amount
time
especially
early
work
project
looking
standard
library
documentation
assessing
functions
library
might
able
assist
solution
standard
library
documentation
mostly
broken
module
tough
sometimes
know
look
many
modules
sometimes
try
point
right
direction
project
want
pay
special
attention
least
modules
os
os
path
stat
though
might
also
find
useful
tools
modules
feel
free
poke
around
see
available
standard
library
can
feel
free
use
note
part
understanding
available
standard
library
careful
targeted
experimentation
sure
library
function
just
reading
documentation
can
fire
idle
experiment
one
nice
things
interpreted
programming
language
like
python
experimentation
can
done
interpreter
without
make
changes
program
sure
found
library
functions
will
help
note
versioning
reading
python's
documentation
sure
ready
right
version
near
top
page
drop
list
allows
select
version
sure
reading
documentation
version
3
3
0
particular
search
engines
lead
python
documentation
find
quite
often
lead
documentation
older
versions
python
3
3
0
relatively
new
can
usually
just
select
3
3
0
drop
list
order
bring
corresponding
page
documentation
version
python
limitations
can
use
part
find
function
can
assist
solution
can
feel
free
use
note
care
sometimes
required
ensuring
function
find
actually
good
fit
two
functions
python
standard
library
limits
use
project
os
walk
os
fwalk
perform
full
traversal
files
directory
structure
one
skills
like
build
project
general
safe
assume
can
use
anything
specifically
call
limits
value
working
incrementally
may
accustomed
solving
relatively
small
mostly
self
contained
problems
can
handle
program
giant
real
world
standards
consists
moving
parts
might
used
writing
will
likely
find
attempting
write
program
will
lead
astray
better
approach
project
one
will
increase
importance
quarter
problems
solve
get
larger
complex
look
stable
ground
often
can
find
rather
trying
write
entire
program
write
small
part
find
way
verify
part
wrote
works
expected
reached
stable
ground
ready
choose
next
small
step
take
taking
care
choose
something
able
verify
done
ideally
find
reaching
stable
ground
quite
often
every
minutes
things
going
well
will
help
feel
confident
making
progress
also
reach
believe
stable
ground
bad
idea
make
copy
python
module
proceeding
way
next
step
go
planned
maintain
option
rolling
back
previous
stable
version
trying
also
gives
something
stable
turn
find
deadline
arrives
finished
always
better
turn
partial
program
something
correctly
rather
one
run
feel
like
need
keep
every
stable
version
bad
idea
least
recent
one
one
practical
skills
need
start
thinking
already
staying
organized
couple
versions
file
find
often
sure
need
better
organizational
scheme
better
file
names
better
directory
names
whatever
helps
obvious
steps
take
variety
ways
build
program
beginning
end
go
looking
perfect
way
find
small
step
can
take
take
find
another
course
missteps
might
take
along
way
best
way
learn
write
programs
way
simply
learn
much
missteps
will
ones
work
well
example
though
think
fact
program
built
around
core
notion
find
unique
files
directory
subdirectories
subdirectories
sounds
like
pretty
good
step
start
except
actually
bigger
step
sounds
like
start
even
smaller
write
function
finds
files
directory
ignores
subdirectories
can
add
handling
one
level
subdirectories
assume
subdirectories
inside
consider
unbounded
subdirectory
depth
handle
scenario
whenever
working
something
feel
bitten
can
chew
think
ways
break
problem
smaller
ones
eventually
left
problem
can
think
complete
testing
testing
program
going
seem
cumbersome
will
require
creating
directory
structures
files
various
configurations
running
program
see
behaves
might
find
worth
time
automate
scenarios
writing
short
python
functions
perhaps
separate
module
create
directories
files
interesting
combinations
likely
find
will
require
writing
lot
code
will
pay
back
test
program
quite
common
real
world
software
development
write
code
whose
sole
use
development
tool
part
program
per
se
will
given
users
program
strictly
meant
make
easier
build
program
well
served
explore
ways
use
python
lighten
testing
burden
five
interesting
scenarios
identified
write
five
python
functions
can
set
automatically
can
get
back
time
need
test
deliverables
one
two
partners
submit
project
aware
partnerships
will
able
figure
project
submissions
belong
pairing
put
names
student
ids
partners
comment
top
one
py
file
submit
file
checkmate
follow
link
discussion
submit
project
via
checkmate
aware
holding
rules
specified
document
including
one
says
responsible
submitting
version
project
want
greaded
regrade
project
simply
submitted
wrong
version
accidentally
can
submit
deadline
yes
possible
subject
late
work
policy
course
described
section
titled
late
work
link
originally
written
alex
thornton
winter
2013
