informatics 122 winter 2013 final project 
final project 
informatics
122
winter
2013
news
course
reference
schedule
project
guide
code
examples
alex
informatics
122
winter
2013
final
project
due
date
time
thursday
march
21
4
00pm
assignment
done
large
assigned
group
eight
introduction
project
will
ask
combine
knowledge
gained
quarter
terms
implementation
level
design
understanding
design
code
written
third
parties
considering
overall
architectures
system
build
one
large
product
software
infrastructure
technology
assisted
restaurant
work
larger
normal
group
eight
students
will
responsible
part
overall
product
yet
together
will
bear
responsibility
getting
everyone
across
finish
line
along
way
experience
many
ups
downs
real
world
projects
comprised
many
software
developers
large
groups
enable
projects
reasonably
completed
smaller
ones
short
periods
time
come
issues
must
managed
gain
experience
managing
problem
project
first
imagine
approached
investors
interested
running
business
builds
manages
technology
assisted
restaurants
customers
sit
tables
equipped
tablets
present
menu
information
allow
place
orders
check
status
orders
pay
bills
view
nutrition
information
restaurant's
offerings
project
cycle
will
acting
technically
savvy
liaison
hypothetical
investors
technology
standpoint
will
implement
much
software
conduct
restaurant's
interaction
customers
servers
kitchen
possible
often
case
business
idea
initially
blooming
investors
still
somewhat
uncertain
many
details
want
likely
satisfied
variety
approaches
specific
requirements
will
need
meet
described
next
sections
requirements
investors
particular
arrangement
mind
restaurants
particular
workflow
software
will
need
support
arrangement
envision
unheard
restaurant
business
believe
can
execute
exceptional
business
marketing
strategy
around
vision
need
software
make
happen
background
envisioned
arrangement
restaurants
well
requirements
software
described
bullet
points
restaurants
sit
variety
opposed
fast
food
casual
dining
seating
area
customers
comprised
tables
table
unique
identifier
number
name
capacity
many
people
can
seated
table
will
computing
devices
might
traditional
lightweight
desktop
machines
laptops
tablets
assumed
run
traditional
desktop
operating
system
windows
mac
linux
throughout
restaurant
providing
different
people
restaurant
staff
customers
different
abilities
particular
requirement
programming
language
technology
used
either
windows
mac
linux
can
assumed
call
devices
terminals
single
word
can
use
describe
check
desk
adjoining
waiting
area
will
near
front
door
restaurant
customers
will
walk
check
desk
register
interest
sitting
table
restaurant
employee
will
stationed
check
desk
will
access
terminal
provides
information
tables
available
capacities
parties
currently
waiting
tables
already
table
terminal
provides
customers
ability
view
menu
place
order
sent
kitchen
view
status
orders
including
estimated
time
delivery
view
nutritional
information
place
request
wait
staff
visit
table
view
current
bill
pay
current
bill
unlike
typical
restaurant
presumption
food
can
ordered
piecemeal
delivered
one
dish
time
can
ordered
bulk
customers
want
structure
dining
experiences
kitchen
terminal
displays
food
drink
orders
need
prepared
kitchen
staff
prepare
food
drinks
order
finished
specify
complete
ready
delivered
table
strategically
located
points
restaurant
fewer
depending
size
terminals
used
wait
staff
deliver
food
drink
orders
tables
terminals
wait
staff
provide
indication
orders
ready
delivered
tables
current
bill
table
notification
area
indicates
tables
placed
request
wait
staff
visit
can
also
configured
show
information
subset
tables
large
restaurant
divided
zones
tables
particular
zone
will
displayed
particular
wait
staff
terminal
general
workflow
followed
customer
experience
restaurant
might
look
like
group
customers
arrive
restaurant
visit
check
desk
check
desk
staff
either
chooses
available
table
group
places
wait
list
customers
placed
wait
list
called
table
large
enough
party
becomes
available
customers
seated
table
instructed
use
terminal
view
menu
place
orders
whenever
order
placed
table
routed
kitchen
displayed
kitchen
staff
prepares
food
drinks
finished
routes
wait
staff
delivery
order
ready
delivered
table
wait
staff
picks
delivers
table
afterward
return
terminal
mark
order
delivered
stay
customer
can
place
request
wait
staff
visit
table
request
will
routed
wait
staff
terminals
handled
wait
staff
member
will
mark
request
completed
finally
customers
done
meal
use
terminal
request
bill
pay
depart
wait
staff
will
mark
table
available
customers
can
seated
getting
clarification
requirements
requirements
fairly
open
ended
will
amount
freedom
deciding
direction
go
part
following
passion
fine
general
investors
open
lot
different
possibilities
expect
three
teams
build
system
functionality
fine
however
unsure
aspect
system's
requirements
feel
free
ask
will
share
question
answer
groups
hand
ask
questions
specific
implementation
will
sharing
everyone
realities
since
project
focuses
building
prototype
functionality
fine
stub
parts
functionality
easily
implemented
without
external
devices
payment
processing
receipt
printing
ideally
implementation
include
support
running
software
multiple
machines
networking
can
work
around
limitation
run
everything
single
machine
begin
keep
things
simpler
group
work
project
will
require
work
large
group
eight
students
will
randomly
assigned
project
group
will
receiving
email
specifying
else
group
sending
send
email
entire
class
know
received
one
even
done
previous
work
pairs
small
groups
group
will
likely
much
larger
may
accustomed
working
class
project
collaborating
group
large
different
small
group
individual
work
need
think
front
strategies
accommodating
differences
short
level
professionalism
required
will
new
lot
totally
vital
future
careers
regardless
kinds
careers
necessarily
will
need
split
work
project
big
us
expect
one
complete
weeks
available
combined
force
however
group
will
able
accomplish
great
things
approach
team
aspect
project
well
happy
consult
might
organize
group's
work
can
definitely
talk
greater
detail
first
project
consultation
meeting
thursday
february
28
lecture
described
later
number
things
can
ensure
group
experience
goes
well
think
proceeding
project
biggest
key
successful
group
dynamic
will
communication
agreeing
establishing
channels
communication
early
will
critical
success
recommend
everyone
meets
together
person
ideally
online
via
skype
google
hangout
whatever
per
day
synchronize
group's
efforts
schedule
time
meet
fits
everyone's
schedule
make
sure
everyone
attends
every
time
possible
need
long
meeting
fact
meeting
taking
half
hour
spending
much
time
even
fifteen
minutes
might
enough
stay
topic
daily
meeting
focus
person
give
brief
overview
status
particularly
focused
following
questions
stand
work
target
meet
promises
made
regarding
schedule
finding
things
difficult
blocked
waiting
something
someone
else
can
done
get
unblocked
can
make
progress
realistically
schedule
slipping
need
help
order
meet
commitments
necessary
talk
every
detail
discipline
take
issues
affect
couple
people
offline
meeting
daily
meeting
good
way
air
issues
broad
impact
overall
progress
project
room
cowboy
mentality
openness
spirit
collaboration
including
willingness
admit
underestimated
something
falling
behind
well
willingness
help
others
boat
essential
set
kind
online
discussion
board
good
example
google
groups
anything
nature
will
long
accommodates
enough
users
convenient
use
mobile
devices
can
made
private
everyone
check
discussion
board
multiple
times
per
day
participate
something
useful
contribute
course
discussion
group
private
project
teams
monitor
postings
grading
projects
competitive
expect
project
team
work
available
instant
messaging
can
keep
phone
can
make
sure
everyone
team
knows
get
touch
someone
can
get
question
answered
quickly
can
move
forward
rather
waiting
hours
email
voicemail
returned
will
big
impact
overall
schedule
best
everyone
uses
instant
messaging
software
even
different
one
normally
use
can
enable
useful
features
impromptu
group
chat
brief
chat
early
members
group
determine
people's
skills
lie
member's
background
member
excel
member
prefer
work
honest
people
describing
goal
find
best
deploy
talent
team
source
control
completely
vital
project
size
many
different
committers
trying
organize
changesets
via
email
online
dropbox
like
invitation
disaster
set
single
git
repository
ideally
hosted
internet
private
one
outside
group
can
download
code
work
still
progress
later
proceeding
implementation
need
decide
least
high
level
components
getting
far
one
need
agree
interfaces
component
can
built
without
ones
present
yet
without
many
nasty
surprises
comes
time
integrate
stubbing
mocking
necessary
components
will
allow
test
component
dependent
components
finished
unit
testing
can
help
one
technique
many
consider
dependency
injection
can
assist
members
group
working
components
directly
interface
one
another
well
served
coordinate
efforts
write
code
vacuum
best
able
integrate
components
early
often
opposed
end
issues
can
flushed
resolved
committed
particular
approach
rating
other's
performance
project
5
keep
notes
assessment
participation
level
member
group
will
assessing
formal
way
conclusion
project
part
score
determined
others'
perceptions
contribution
effort
partly
keep
everyone
honest
everyone
pulling
weight
partly
acclimate
idea
also
need
honestly
evaluate
others'
work
real
world
contexts
even
presence
social
political
implications
hosting
git
repository
online
one
first
goals
group
moves
forward
implementation
create
git
repository
shared
amongst
members
group
members
group
among
things
will
required
submit
full
git
repository
just
previous
assignments
difference
expect
time
submit
single
repository
contains
chain
events
including
commits
branches
merges
etc
contributed
everyone
individual
commits
done
individual
users
show
repository's
history
able
see
glance
repository
will
help
manage
code
changes
happen
real
time
example
can
know
ask
something
work
way
thought
additionally
able
see
history
way
verify
member
group
pulling
weight
best
way
accomplish
repository
available
project
group
internet
everyone
group
can
access
times
variety
hosting
services
available
can
varying
abilities
costs
need
choose
one
services
meeting
least
following
requirements
ability
identify
individual
users
commit
set
service
single
username
able
tell
will
make
debugging
collaborating
nightmare
will
leave
us
unable
determine
comes
time
grade
project
ability
host
project
private
git
repository
available
everyone
internet
work
nothing
wrong
general
keeping
source
open
fact
many
benefits
project
required
keep
code
private
investors
interest
keeping
system
closed
private
keeping
code
publicly
available
repository
important
step
toward
ensuring
ideally
pay
service
may
choose
pay
nominal
fee
tradeoff
convenience
might
dollars
per
person
though
ways
free
prefer
handful
options
listed
particular
order
including
interpretation
basics
offers
writing
need
choose
one
right
project
group
certainly
missed
important
detail
two
tried
services
specific
advice
one
better
github
perhaps
best
known
git
hosting
solution
generally
provide
private
repositories
free
offer
educational
accounts
allow
need
without
cost
click
student
link
educational
accounts
page
information
atlassian
bitbucket
provides
unlimited
private
git
repositories
five
user
limit
offer
free
academic
subscriptions
use
edu
email
address
sign
will
allow
overcome
limit
codeplane
provides
unlimited
users
2gb
worth
private
git
repositories
cost
9
month
30
day
free
trial
get
project
assembla
provides
1gb
free
private
git
hosting
allowing
unlimited
private
collaborators
offering
included
integrated
issue
tracking
nice
relatively
short
duration
project
issue
tracking
solution
integrates
deeply
source
control
allowing
associate
git
commits
issues
issue
tracker
especially
important
though
will
want
way
track
issues
assign
team
members
come
realities
using
online
tools
new
entirely
possible
early
find
chosen
repository
host
issue
blocks
moving
forward
perhaps
reliable
limit
many
people
allowed
commit
project
provide
free
access
limited
time
one
upsides
using
standard
tool
like
git
though
possible
migrate
repository
one
host
another
fairly
quickly
issue
like
arises
proves
insurmountable
project
manager
project
schedule
group
size
important
least
one
person
can
maintain
holistic
view
happening
project
day
day
scheduled
complete
features
times
dependencies
lie
work
done
different
people
plan
schedule
allows
everyone
making
progress
much
possible
ensuring
important
details
missed
reworking
upcoming
schedule
parts
implementation
proceeding
planned
suggest
group
elect
project
manager
overall
duty
tracking
kinds
issues
can
choose
give
person
lighter
load
terms
implementation
person
can
handle
specific
requirements
regard
maintain
schedule
required
turn
though
usual
best
standing
shoulders
giants
consider
using
well
known
tools
gantt
charts
possible
schedule
chart
available
everyone
glance
loads
gantt
chart
web
apps
available
least
available
free
identifies
tasks
responsible
help
everyone
track
progress
see
upcoming
dependencies
taken
currently
taking
informatics
course
project
management
excellent
chance
put
techniques
discussed
course
deeper
practice
taken
course
fine
presumably
least
one
member
team
done
another
factor
considering
divide
labor
amongst
members
team
milestones
presentations
along
way
milestones
will
need
demonstrate
along
sequence
meetings
presentations
correspond
remaining
lectures
course
good
way
think
process
think
technically
savvy
investor
liaison
interest
success
will
want
feel
confident
making
progress
will
prepared
deliver
complete
product
due
date
also
available
advisory
role
guide
progress
will
assessing
group
instances
will
also
trying
ensure
remain
firmly
track
uncommon
real
world
projects
stakeholders
upper
management
investors
potential
customers
want
remain
abreast
developments
least
periodically
thursday
february
28
lecture
team
will
meet
separately
20
25
minutes
discuss
early
design
architectural
ideas
understanding
requirements
settling
plan
dividing
work
generally
making
sure
right
track
questions
project
approach
manage
best
discussed
date
point
already
git
repository
hosted
methods
communicaiton
chosen
opened
questions
ask
choices
progress
will
mostly
driven
needs
thursday
march
7
lecture
team
will
deliver
15
minute
presentation
describing
high
level
design
architecture
included
presentation
whatever
visuals
diagrams
user
interface
mockups
etc
think
will
help
make
design
clearer
audience
chosen
use
third
party
components
justify
included
justify
implementing
things
better
choice
tuesday
march
12
lecture
team
will
meet
separately
20
25
minutes
review
progress
discuss
impediments
clarify
requirements
generally
keep
track
preparation
next
lecture
team
will
give
another
presentation
thurdsay
march
14
lecture
team
will
deliver
15
20
minute
presentation
describes
current
progress
including
demo
features
currently
complete
implication
schedule
allow
least
features
complete
polished
enough
demonstrate
date
need
plan
early
scheduled
final
exam
time
thursday
march
21
team
will
deliver
25
minute
final
presentation
detailing
overall
design
including
demo
completed
product
doubt
stressful
circumstance
also
celebration
far
come
job
well
done
project
will
rewarded
chance
moment
sun
final
deliverable
complete
product
though
expect
may
possible
complete
entire
project
specified
goal
find
reasonable
subset
functionality
complete
demonstrate
incomplete
solution
nonetheless
fully
working
demonstrable
portion
requirements
will
rated
much
favorably
non
working
attempt
completing
everything
best
finding
way
work
incrementally
using
third
party
components
general
willing
use
third
party
components
solve
parts
problem
especially
difficult
solve
obviously
reasonably
complete
product
already
solves
whole
problem
permitted
use
whole
part
find
third
party
components
appear
good
fit
architecture
please
contact
let
know
along
whatever
information
think
need
order
decide
whether
allowed
use
minimum
need
know
name
can
find
documentation
can
find
source
code
licensing
licensing
plays
role
selection
process
goal
simulate
design
implementation
product
used
sold
commercially
though
granted
obvious
legal
issues
surrounding
commercialization
particular
product
possible
use
just
code
find
internet
will
holding
following
restrictions
surrounding
selection
third
party
components
use
commercial
component
need
bought
order
used
commercially
even
component
trial
version
free
license
academic
use
fine
academic
projects
like
expose
commercial
side
play
commercial
rules
actually
go
business
using
software
product
without
purchasing
limits
work
use
component
require
entire
project
made
open
source
order
used
legally
hypothetical
clients
interest
keeping
source
code
private
additional
licensing
restrictions
include
legal
boilerplate
readme
file
box
must
followed
happy
help
interpret
licenses
find
word
scheduling
note
will
best
answer
questions
third
party
components
quickly
guarantee
response
say
minutes
even
hours
necessarily
will
sometimes
need
research
responding
questions
real
project
outside
party
involved
decision
making
need
build
limitation
scheduling
best
approach
select
third
party
components
early
process
get
approved
sooner
rather
later
final
deliverables
will
responsible
submitting
following
deliverables
advance
scheduled
final
exam
time
thursday
march
21
4
00pm
complete
version
source
code
tied
source
control
repository
built
everything
java
one
eclipse
projects
whole
eclipse
workspace
fine
something
else
include
least
code
wrote
whatever
documentation
think
need
order
compile
install
product
dependent
third
party
components
let
know
can
get
include
source
code
submission
special
things
need
order
make
run
let
know
depending
complexity
compilation
installation
paragraph
multiple
pages
whatever
takes
required
five
page
design
document
detailing
architecture
high
level
design
project
include
diagrams
think
will
make
design
clearer
though
count
five
page
requirement
fine
copied
one
presentations
describe
design
patterns
used
third
party
components
used
include
explanation
chose
others
considered
choose
chose
build
everything
justify
third
party
components
good
fit
consider
leave
clone
complete
git
repository
project
including
commits
point
started
project
essentially
empty
repository
individuals
identified
commits
possible
see
committed
committed
committed
include
tag
final
identifies
commit
completed
version
slides
visuals
three
presentations
made
submit
whatever
format
wrote
requirements
like
able
use
whatever
presentation
technology
prefer
appreciate
copies
usual
deliverables
will
submitted
checkmate
one
member
team
submit
decide
amongst
will
assessing
work
partners
completed
submitted
project
please
download
fill
following
form
allows
comment
done
partners
along
information
like
include
experience
working
project
instructions
specified
form
please
email
form
back
completed
final
project
partner
evaluation
form
substantial
tweaks
including
new
problem
solved
performed
alex
thornton
winter
2013originally
written
alex
thornton
winter
2012
