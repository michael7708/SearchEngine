exponential algorithms 
exponential time graph algorithms 
graph
algorithms
lecture
notes
exponential
algorithms
throughout
algorithms
classes
learn
polynomial
time
bounds
good
exponential
bad
attitude
led
systematic
avoidance
studying
exponential
time
algorithms
theoretical
cs
area
may
many
low
hanging
fruit
also
evidenced
big
gap
known
worst
case
bounds
experimentally
measured
behavior
reasonable
study
exponential
algorithms
impractical
useful
counting
angels
pinheads
exponentials
impractical
others
better
ones
lead
solutions
moderate
sized
real
problems
improvements
mean
big
differences
solvable
problem
sizes
typically
multiplying
problem
size
factor
faster
technology
help
much
typically
adding
small
constant
problem
size
polynomial
time
algorithmics
criticized
basis
everything's
fast
care
exactly
fast
may
always
true
server
must
handle
many
requests
speed
matters
exponential
problems
likely
lead
visible
runtimes
improvements
can
perceived
even
make
difference
solving
solving
problem
alternative
approach
approximation
algorithms
standard
theoretical
cs
always
suitable
approximations
can
bad
graph
coloring
problems
cost
computing
true
optimal
answer
may
made
value
answer
may
problem
approximation
make
sense
one
can
sometimes
make
exponential
part
time
bound
depend
parameter
problem
size
much
smaller
fixed
parameter
tractability
growth
rates
typical
freshman
exercise
go
typical
reasonable
problem
size
can
solve
given
exponential
time
bound
modern
computers
perform
roughly
230
operations
second
algorithm
takes
time
big
can
solve
problem
given
time
operations
230236242248254
time
1
sec1
minute1
hour3
days
6
months
max
given
time
1
05n4265115966817671
1n2182623053493921
2n1141361591822051
3n79951111271421
4n627486991111
5n51617282922n30364248543n1923263034n
1214151718nn9101113142n256677
typical
naive
algorithms
take
times
range
2n
can
solve
smaller
problems
typical
fast
worst
case
bounds
range
1
2n
1
5n
typical
empirically
measured
time
bounds
range
1
05n
1
1n
instance
can
solve
certain
kinds
constraint
satisfaction
problems
exactly
500
variables
even
hardest
examples
examples
coming
applications
often
hardest
exponential
algorithms
can
practical
backtracking
search
branch
bound
simple
example
3
coloring
start
recursive
generate
test
3
coloring
algorithm
color
test
valid
coloring
return
success
else
return
failure
possible
color
try
giving
color
color
1
uncolor
return
failure
levels
recursion
recursion
branches
3
ways
level
time
3n
one
obvious
improvement
interleave
validity
testing
recursion
rather
waiting
graph
colored
discovering
early
mistake
color
return
success
color
already
used
neighbor
try
giving
color
color
uncolor
return
failure
unfortunately
will
make
practical
improvement
worst
case
still
3n
problem
need
choose
ordering
vertices
way
allows
early
termination
happen
often
one
possibility
spanning
tree
preorder
depth
first
search
numbering
vertex
colored
parent
except
tree
root
parent
need
try
one
three
colors
can
reduce
number
branches
2n
1
changing
solution
space
instead
looking
3
coloring
look
subset
red
vertices
3
coloring
can
test
whether
remaining
vertices
can
2
colored
whether
form
bipartite
graph
linear
time
immediately
gives
us
2n
algorithm
many
different
subsets
vertices
without
much
effort
took
thought
can
even
better
choose
coloring
many
red
vertices
possible
red
vertices
will
form
maximal
independent
set
set
vertices
edge
connecting
two
vertices
set
every
remaining
vertex
graph
shares
edge
vertex
set
can
solve
3
coloring
listing
maximal
independent
sets
testing
whether
complementary
set
bipartite
algorithm
solves
slightly
general
problem
given
graph
sets
list
maximal
independent
sets
containing
everything
nothing
listmis
output
return
choose
vertex
adjacent
anything
listmis
final
neighbor
vertex
listmis
analyze
obviously
time
2n
one
can
come
examples
like
3
coloring
careless
vertex
ordering
leads
least
much
time
like
better
idea
iteration
reduces
size
one
vertex
want
reduce
set
undecided
vertices
quickly
add
can
quickly
remove
neighbors
neighbors
better
define
degree
number
neighbors
add
size
reduced
1
degree
add
get
big
reduction
subproblem
size
must
choose
least
one
neighbor
reduce
way
want
v's
neighbors
high
degree
listmis
output
return
vertex
neighbors
return
without
output
choose
vertex
neighbors
degree
neighbor
degree
let
minimum
degree
vertex
listmis
nbrs
let
neighbor
listmis
nbrs
analysis
suppose
degree
get
1
recursive
calls
problem
least
1
fewer
vertices
degree
neighbors
equal
addition
redundant
also
later
neighborhoods
oversimplified
analysis
suppose
calls
1
levels
recursion
time
1
1
1
1
1
worst
case
3
time
31
3
now
analysis
carefully
analyse
counting
number
leaves
recursion
tree
total
time
polynomial
prove
induction
3n
3
call
degree
get
1
1
1
3
1
3
induction
hyp
1
3
1
3
3
3
3
3
corollary
graph
3n
3
maximal
independent
sets
example
showing
analysis
tight
disjoint
union
3
triangles
