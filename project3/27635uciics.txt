ics 142 winter 2004 assignment 2 
assignment 2 
ics
142
winter
2004
news
course
reference
schedule
lab
manual
ics
142
newsgroup
alex
ics
142
winter
2004
assignment
2
due
date
time
friday
february
6
11
59pm
introduction
previous
assignment
asked
implement
scanner
hypothetical
imperative
style
programming
language
called
monkie2004
making
simplifications
language
keep
assignment
large
now
like
build
parser
monkie2004
since
language
changed
since
imagine
everyone
completed
scanner
entirely
correctly
will
provide
compiled
version
scanner
updated
reflect
changes
made
language
since
first
assignment
also
includes
error
handling
situations
like
identifiers
pairs
adjacent
underscores
integer
literals
large
remember
primary
job
parser
twofold
verifying
input
program
syntactically
correct
case
correct
program
beginning
discern
meaning
input
program
discovering
parse
tree
noted
parser
need
actually
build
store
parse
tree
memory
just
needs
discover
existence
one
use
discovery
continue
analyzing
input
program
future
assignments
connect
parsers
modules
perform
analysis
input
program
type
checking
code
generation
optimization
assignment
requiring
build
hand
coded
recursive
descent
parser
java
following
pattern
discussed
lecture
also
require
theoretical
work
necessary
order
build
parser
correctly
recursive
descent
parser
recursive
descent
parser
parser
constructed
set
mutually
recursive
functions
corresponds
one
nonterminal
symbol
grammar
example
consider
following
simple
grammar
¡÷
ba
¡÷
bb
¡÷
heart
recursive
descent
parser
language
three
functions
one
nonterminal
using
next
token
input
functions
decide
rule
expand
consume
tokens
make
calls
functions
needed
grammar
functions
implemented
according
following
pattern
parse
next
token
'a'
aa
consumetoken
'a'
parse
else
next
token
'b'
bb
consumetoken
'b'
parse
else
error
parse
next
token
'b'
bc
consumetoken
'b'
consumetoken
'c'
else
next
token
'c'
cb
consumetoken
'c'
parse
else
error
parse
next
token
'c'
cd
consumetoken
'c'
consumetoken
'd'
else
next
token
'd'
da
consumetoken
'd'
parse
else
error
presumption
consumetoken
operation
two
things
check
whether
next
token
input
desired
token
signal
error
move
next
token
input
calling
parse
run
completion
without
signaling
error
indicates
existence
valid
parse
tree
input
program
including
additional
code
within
framework
parser
can
upgraded
build
parse
tree
abstracted
version
parse
tree
called
abstract
syntax
tree
variety
forms
output
typical
compiler
will
build
one
intermediate
representations
program
parsing
pass
subsequent
stages
compiler
notice
framework
use
backtracking
every
time
needs
expand
nonterminal
chooses
one
right
hand
sides
nonterminal's
rules
penalty
choosing
rule
correspond
input
error
presumably
stops
parser
proceeding
grammars
can
parsed
using
technique
called
ll
1
grammars
predictive
grammars
term
ll
1
arises
fact
grammars
can
parsed
left
right
scan
input
building
leftmost
derivation
using
1
token
lookahead
naturally
grammars
can
parsed
way
one
example
¡÷
aa
¡÷
grammar
ll
1
thus
parsed
using
recursive
descent
parser
since
left
recursion
specifically
rule
¡÷
can
cause
recursive
descent
parser
go
infinite
recursion
corresponding
parse
routine
might
call
parse
without
consuming
input
call
parse
without
consuming
input
left
recursion
comes
two
flavors
immediate
left
recursion
shown
indirect
left
recursion
techniques
eliminating
forms
left
recursion
discussed
class
discussed
textbook
another
problem
prevents
grammar
ll
1
demonstrated
grammar
¡÷
ba
¡÷
gb
¡÷
right
hand
sides
two
rules
begin
meaning
will
impossible
choose
one
rules
looking
next
token
input
solution
problem
left
factoring
discussed
lecture
discussed
detail
textbook
left
recursion
elimination
left
factoring
necessarily
enough
make
grammar
ll
1
property
languages
expressed
ll
1
grammars
fortunately
programming
language
constructs
can
expressed
using
ll
1
grammars
making
useful
parsers
programming
languages
updated
monkie2004
language
assignment
monkie2004
simple
imperative
style
language
monkie2004
program
sequence
global
variable
declarations
procedures
functions
distinction
procedures
functions
distinction
void
method
java
one
returns
value
procedure
function
consists
signature
name
parameter
list
case
function
return
type
block
statement
one
statement
surrounded
matched
pair
brackets
'
'
'
'
kinds
statements
monkie2004
local
variable
declarations
assignments
procedure
calls
statements
loops
block
statements
keywords
present
scanner
longer
considered
part
language
call
implies
xor
two
new
keywords
true
false
added
operators
removed
integer
negation
operator
analogous
java's
unary
minus
added
integer
literals
may
longer
contain
negative
signs
instead
integer
negation
operator
used
specify
negation
integer
3
represented
monkie2004
3
noted
monkie2004
case
sensitive
keywords
must
appear
lowercase
identifiers
result
result
considered
different
follows
unambiguous
ll
1
grammar
monkie2004
nonterminal
symbols
indicated
capitalized
italicized
words
program
blockstatement
terminal
symbols
indicated
boldface
words
symbols
start
symbol
grammar
program
program
¡÷
definitionlistdefinitionlist
¡÷
£`
definition
definitionlistdefinition
¡÷
variabledeclaration
procedure
functionvariabledeclaration
¡÷
var
typedeclaration
typedeclaration
¡÷
identifier
identifierprocedure
¡÷
procedure
identifier
parameterlist
blockstatementfunction
¡÷
function
identifier
parameterlist
identifier
blockstatementparameterlist
¡÷
£`
nonemptyparameterlistnonemptyparameterlist
¡÷
parameter
parameter
nonemptyparameterlistparameter
¡÷
typedeclaration
ref
typedeclarationblockstatement
¡÷
statementlist
statementlist
¡÷
£`
statement
statementliststatement
¡÷
variabledeclaration
call
assignment
ifstatement
whileloop
blockstatementcall
¡÷
identifier
expressionlist
assignment
¡÷
identifier
expression
ifstatement
¡÷
expression
blockstatement
expression
blockstatement
else
blockstatementwhileloop
¡÷
expression
blockstatementexpressionlist
¡÷
£`
nonemptyexpressionlistnonemptyexpressionlist
¡÷
expression
expression
nonemptyexpressionlistexpression
¡÷
expr2
expr2
expr2
expr2
expr2
expr2
expr2
expr2
expr2expr2
¡÷
expr2
expr3
expr2
expr3
expr2
expr3
expr3expr3
¡÷
expr3
expr4
expr3
expr4
expr4expr4
¡÷
expr4
expression
identifier
identifier
expressionlist
integer
literal
string
literal
true
false
part
1
correcting
provided
monkie2004
grammar
25
points
first
step
building
recursive
descent
parser
monkie2004
rewrite
grammar
ll
1
provided
grammar
multiple
instances
two
kinds
problems
immediate
left
recursion
need
left
factoring
using
techniques
discussed
lecture
also
textbook
rewrite
grammar
ll
1
grammar
recognizes
language
may
write
grammar
using
microsoft
word
submit
doc
file
may
write
tool
wish
convert
pdf
format
instead
part
2
computing
first
follow
first
sets
grammar
25
points
next
step
building
recursive
descent
parser
compute
first
follow
first
sets
rewritten
monkie2004
grammar
may
use
algorithm
given
textbook
though
suggest
using
less
structured
approach
since
can
determined
effectively
eyeballing
grammar
remember
first
follow
first
sets
defined
follows
first
sets
defined
nonterminal
terminal
symbols
grammar
including
£`
first
£`
£`
terminal
symbols
first
nonterminal
symbols
first
set
possible
first
terminal
symbols
legal
expansion
may
expand
£`
first
also
contains
£`
follow
sets
defined
nonterminal
symbols
grammar
follow
set
nonterminal
set
terminal
symbols
may
appear
legal
expansion
sentence
language
first
sets
defined
nonterminal
terminal
symbols
grammar
except
£`
£`
first
£\
first
£\
first
£\
£`
¡å
follow
£\
otherwise
first
£\
first
£\
example
consider
one
grammars
given
earlier
write
¡÷
aa
¡÷
first
£`
£`
first
first
first
first
since
legal
expansion
must
begin
first
since
legal
expansion
must
begin
either
result
rule
¡÷
result
repeated
applications
rule
¡÷
followed
application
¡÷
derivation
since
start
symbol
grammar
occur
right
hand
side
rule
legal
expansion
entire
program
thus
follow
eof
may
occur
derivation
one
two
ways
result
beginning
derivation
like
result
expanding
using
rule
¡÷
former
case
expansion
must
followed
eof
latter
must
followed
thus
follow
eof
since
£`
appear
first
sets
first
sets
example
first
sets
rewritten
grammar
may
write
first
follow
first
sets
using
microsoft
word
using
tool
long
convert
pdf
format
submitting
part
3
building
recursive
descent
parser
50
points
now
rewritten
monkie2004
grammar
ll
1
computed
first
follow
first
sets
information
need
implement
recursive
descent
parser
using
pattern
described
textbook
discussed
lecture
parser
print
output
indication
procedures
functions
statements
recognized
example
given
following
input
program
var
globalinteger
integer
procedure
program
var
integer
0
parser
produce
output
following
form
variable
declaration
procedure
variable
declaration
assignment
loop
assignment
statement
procedure
call
parser
required
build
parse
tree
intermediate
representation
program
output
generated
fly
statements
recognized
output
use
indentation
convey
membership
statements
block
statements
shown
example
output
previous
assignment
required
provide
driver
program
class
called
driver
file
called
driver
java
can
compile
run
program
following
sequence
commands
javac
java
java
driver
inputfile
inputfile
name
monkie2004
program
provided
driver
program
starting
point
may
modify
wish
though
must
still
behave
way
allows
us
run
program
using
commands
specified
unlike
previous
assignment
will
attempt
run
program
using
monkie2004
programs
errors
case
erroneous
input
program
parser
may
print
error
message
quit
soon
first
error
discovered
necessary
provide
error
message
indicates
nature
problem
though
may
like
required
however
print
line
column
token
caused
problem
suggest
throwing
parsererror
class
provided
catching
driver
class
system
println
getmessage
get
started
providing
starting
point
consisting
compiled
versions
scanner
token
scannererror
classes
along
skeleton
parser
parser
java
including
helper
methods
consumetoken
will
find
useful
parsererror
class
will
likely
find
useful
reporting
errors
complete
source
code
driver
class
link
starting
point
parser
zip
little
documentation
compiled
classes
provided
will
necessary
goes
scanner
class
much
like
one
generated
jflex
script
assignment
1
two
constructors
one
takes
inputstream
another
takes
reader
meaning
can
create
scanner
two
ways
last
assigment
scanner
new
scanner
system
scanner
new
scanner
new
filereader
filename
scanning
method
scanner
class
following
signature
public
token
getnexttoken
throws
java
io
ioexception
addition
possibly
throwing
ioexception
getnexttoken
throws
scannererror
unchecked
exception
whenever
encounters
lexical
error
identifier
consecutive
pair
underscores
string
literal
end
line
scannererror
class
unchecked
exception
thrown
getnexttoken
suggest
catching
exception
following
since
carries
error
message
system
println
getmessage
assuming
scannererror
way
skeleton
given
already
contains
code
reads
next
token
scanner
catches
reports
scannererrors
likely
write
code
deal
token
class
similar
one
built
previous
assignment
consists
32
public
static
integer
constants
one
token
type
identifier
integer
literal
string
literal
else
false
function
procedure
ref
true
var
left
paren
right
paren
left
bracket
right
bracket
addition
op
subtraction
op
multiplication
op
division
op
integer
negation
op
less
op
greater
op
equal
op
equal
op
assignment
op
concatenation
op
semicolon
colon
comma
following
methods
can
called
token
object
public
int
gettokentype
returns
token
type
one
32
constant
values
public
int
getline
returns
line
number
first
character
token
occurred
input
program
public
int
getcolumn
returns
column
number
first
character
token
occurred
input
program
public
string
getstringattribute
returns
string
attribute
associated
token
string
attributes
associated
identifier
string
literal
tokens
containing
name
identifier
value
string
literal
respectively
tokens
string
attribute
public
int
getintegerattribute
returns
integer
attribute
associated
token
integer
attributes
associated
integer
literal
tokens
containing
value
integer
literal
tokens
integer
attribute
0
one
additional
static
method
token
might
interest
though
probably
find
use
public
static
string
gettokentypestring
int
tokentype
given
one
32
constant
values
token
types
returns
string
describes
token
example
token
gettokentypestring
token
else
returns
else
deliverables
must
submit
two
microsoft
word
pdf
documents
one
containing
grammar
another
containing
first
follow
first
sets
additionally
submit
java
files
comprise
program
including
provided
submit
class
files
provided
submit
compiled
versions
code
files
generated
development
environment
follow
link
discussion
submit
assignment
remember
accept
paper
submissions
assignments
accept
via
email
circumstances
limitations
case
obvious
rest
write
expect
hand
code
parser
use
automated
tools
build
parser
strictly
forbidden
will
result
automatic
score
0
assignment
originally
written
alex
thornton
winter
2004
