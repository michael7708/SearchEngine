program 4 
program 4 implementing collections hash table etc 
program
4
hash
tables
implementing
maps
skip
lists
implementing
sets
adapters
maps
sets
fundamental
data
structures
ics
23
introduction
programming
assignment
designed
ensure
know
write
code
processes
hash
tables
skip
lists
hash
tables
data
structure
faster
complexity
class
bsts
operations
1
will
reimplement
map
via
hash
table
skip
lists
data
structure
complexity
class
bsts
come
guarantee
pathological
skip
lists
constant
skip
list
operations
typically
faster
constant
bsts
will
implement
set
via
skip
list
finally
will
implement
adapter
something
like
decorator
allows
us
adapt
implementation
map
set
using
values
keys
map
represent
values
set
code
will
trivial
delegates
set
operation
similar
map
operations
checking
whether
value
set
will
delegated
checking
value
key
map
writing
classes
will
run
junit
tests
verify
bit
strong
word
correct
may
also
find
useful
test
classes
driverformap
driverforcollection
can
run
collections
jar
build
path
library
project
driver
can
individually
test
methods
classes
interactively
see
results
returned
values
state
changes
mostly
using
tostring
download
unzip
following
eclipse
project
start
use
start
working
program
part
assignmnment
will
update
turn
single
java
file
project
see
checkmate
submission
assignment
details
one
student
submit
assignment
student's
names
appear
comments
top
submitted
program
please
turn
program
finish
can
accurately
assess
progress
class
whole
assignment
print
document
carefully
read
marking
parts
contain
important
detailed
information
find
review
work
assignment
turn
files
problem
1
map
via
hash
table
problem
will
write
efficient
version
map
implementing
hash
table
hash
table
operations
1
improves
complexity
class
operations
bst
will
use
trailer
list
bin
store
overflows
collisions
use
trailer
list
simple
algorithm
removing
node
given
reference
determine
comes
node
list
can
test
program
testmap
junit
test
will
ultimately
grade
updated
version
wordgenerator
program
included
download
program
1
part
6
file
huck
txt
also
included
download
driverformap
program
can
individually
test
methods
classes
interactively
see
results
returned
values
state
changes
mostly
using
tostring
will
supply
tostring
method
returns
string
prints
showing
structure
hash
table
reports
error
message
appear
bin
stores
trailer
list
hashmap
class
must
implement
map
interface
using
standard
map
semantics
look
arraymap
class
contains
code
implements
map
interface
code
like
will
belong
hash
table
implementation
underlying
data
structure
hash
table
whose
node
class
complete
within
implementation
also
includes
helper
methods
like
hashcompression
locate
doublelength
either
completley
written
just
header
specified
course
can
also
look
bstmap
class
write
programming
assignment
3
issues
think
writing
class
constructors
specify
maximum
load
factor
adding
value
hash
table
increases
load
factor
beyond
maximum
check
value
added
double
length
hash
table
rehashing
values
new
hash
table
compression
function
based
new
length
ensure
chaining
bins
default
constructor
used
mapdriver
junit
test
specifies
load
factor
2
create
hash
table
ln
cast
ln
store
references
new
ln
objects
hash
table
doublelength
method
first
put
new
trailer
nodes
bins
unlike
solution
quiz
5
add
node
original
table
double
length
table
construct
new
ln
objects
double
length
hash
table
reuse
old
ln
objects
original
hash
table
use
trailer
lists
bin
hash
table
makes
simple
operations
bit
harder
makes
complicated
operations
removal
much
simpler
remember
whenever
allocate
hash
table
new
ln
must
store
reference
trailer
node
bucket
bin
ever
store
null
trailer
store
null
entry
next
instance
variable
ln
object
note
written
tostring
method
can
used
nicely
print
hash
table
shows
bins
linked
list
associations
mappings
teach
bin
use
command
driver
program
help
debug
methods
adding
deleting
hash
table
also
note
tostring
method
includes
error
bin
null
contain
trailer
node
bucket
linked
list
end
trailer
node
whose
entry
next
instance
variables
store
null
instrumented
version
tostring
can
supply
valuable
debugging
information
iterator
method
need
use
extra
arrays
hash
tables
can
iterate
hash
table
directly
using
two
variables
one
stores
bucket
iterator
case
advance
buckets
one
stores
ln's
key
value
will
return
next
will
traverse
values
chain
trailer
node
hashmap
uses
trailer
nodes
remove
iterator
fairly
straightforward
ensure
know
special
way
use
trailer
nodes
simplifiy
removal
value
main
remove
remove
iterator
also
run
updated
wordgenerator
program
large
text
file
huck
txt
update
allows
comment
code
select
either
arraymap
bstmap
appropriate
comparator
hashmap
also
tracks
prints
amount
time
needed
build
map
machine
took
18
minutes
using
arraymap
1
second
using
bstmap
speed
factor
1
000
used
order
statistic
3
using
hashmap
time
reduce
5
seconds
ultimately
producing
map
contains
90
705
keys
key
mapping
list
1
46
words
problem
2
adapter
maps
set
class
setfrommap
adapter
similar
decorator
constructors
take
class
implementing
map
whose
keys
generic
type
methods
adapt
map
used
like
set
inside
setfrommap
map
instance
variable
refers
map
operations
delegated
type
map
object
uses
key
type
object
value
type
using
values
later
use
setfrommap
natural
declared
value
type
map
object
adapter
will
work
types
values
every
method
call
contains
one
statement
delegates
set
operations
similar
map
operation
keys
example
add
method
public
boolean
add
return
map
put
new
object
null
says
add
set
put
map
key
associated
value
new
object
object
just
necessary
placeholder
value
key
map
keys
map
new
objects
whose
values
almost
never
used
see
just
map
every
key
null
put
method
returns
null
means
already
map
added
set
returns
non
null
value
object
previous
put
key
value
already
set
therefore
added
set
course
add
must
return
whether
added
set
mapped
key
null
distinguish
whether
key
already
map
meaning
value
already
set
likewise
set
methods
implemented
delgating
similar
map
methods
body
method
one
statement
can
test
code
via
testsetadapter
junit
test
like
standard
set
junit
test
prompts
map
adapts
using
setfrommap
select
map
implementation
want
adapt
either
arraymap
collections
jar
library
bstmap
solution
programming
assignment
3
hashmap
writing
assignment
problem
3
set
via
skip
list
problem
will
write
skip
list
implementation
set
can
test
program
testset
junit
test
will
ultimately
grade
driverforcollection
program
set
interface
inherits
methods
collection
interface
unlike
list
interface
adds
others
can
individually
test
methods
classes
interactively
see
results
returned
values
state
changes
mostly
using
tostring
especially
important
problem
will
supply
tostring
method
returns
string
prints
showing
structure
skip
list
reports
error
indicate
skip
list
extra
nodes
level
skiplistset
class
must
implement
set
interface
using
standard
set
semantics
look
arrayset
class
contains
code
implements
set
interface
code
like
will
belong
skip
list
implementation
underlying
data
structure
skip
list
whose
node
class
complete
within
implementation
interesting
exciseleftright
method
also
includes
helper
methods
written
addnewtop
build2x2
linkleftright
linkupdown
helper
methods
will
write
skipsearch
skipinsert
skipdelete
will
use
skip
list
nodes
store
value
value
set
four
references
skip
list
node
left
right
one
skip
list
nodes
will
store
value
null
inf
inf
nodes
act
header
trailer
nodes
skip
list
ensure
store
correct
references
instance
variables
issues
think
writing
class
hasnext
next
methods
iterator
traverse
s0
level
skip
list
remove
method
iterator
can
call
skipdelete
similarly
standard
remove
method
calls
see
goodrich
tamassia
book
comments
code
information
