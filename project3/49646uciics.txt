introducing graphs 

introducing
graphs
introduction
computer
science
iii
ics
23
introduction
lecture
will
continue
study
self
referential
data
structures
examining
graphs
like
linked
lists
trees
graphs
contain
nodes
nodes
objects
instantiated
class
contains
instance
variables
refer
nodes
class
sense
graphs
easy
specify
unlike
linked
lists
trees
restrictions
node
can
refer
node
fact
can
define
linear
linked
list
restricted
graph
nodes
degree
degree
1
except
first
degree
0
last
degree
0
trees
can
similarly
defined
terms
restricted
graph
acyclic
graph
every
modes
degree
1
except
first
degree
0
cycles
dgree
technical
terms
defined
picture
dag
directed
acyclic
graph
halfway
tree
cycles
graph
node
degree
two
common
subexpression
can
use
graphs
model
many
real
world
relationships
can
use
standard
graph
algorithms
process
graph
producing
answers
problems
modeled
via
graphs
entire
books
written
graph
algorithms
will
examine
interesting
graph
algorithms
concentrating
algorithms
methods
implement
lecture
next
one
terminology
mathematical
theory
graphs
first
developed
famous
mathematician
leonard
euler
1735
motivated
desire
solve
following
problem
taken
web
page
beginning
topology
also
contains
euler's
solution
problem
euler
proved
tour
now
called
euler
path
possible
similar
problem
known
traveling
salesman
problem
traveler
must
end
place
started
also
involves
another
criteria
minmizing
distance
traveled
using
terminology
will
learn
relevant
theorems
theorem
undirected
graph
two
nodes
odd
degree
euler
path
theorem
undirected
graph
two
nodes
fewer
odd
degree
least
one
euler
path
interesting
local
properties
degrees
nodes
determines
whether
global
property
euler
paths
possible
graphs
consist
collection
nodes
aka
vertices
label
known
edges
aka
arcs
occur
pair
nodes
edge
can
associated
value
used
encode
variety
information
often
number
length
edge
cost
edge
etc
directed
graph
aka
digraph
kind
will
study
edges
distinguishable
origin
destination
node
edge
written
arrow
origin
destination
graph
might
contain
just
one
edge
two
nodes
might
contain
two
one
first
second
one
back
second
first
edge
associated
value
directed
graph
weakly
symmetric
edge
node1
node2
also
edge
node2
node1
likewise
directed
graph
strongly
symmetric
edge
node1
node2
also
edge
node2
node1
associated
values
edges
equal
undirected
graph
can
one
edge
pair
nodes
node
serves
origin
destination
subgraph
graph
contains
subset
nodes
edges
natural
subgraph
graph
containing
certain
subset
nodes
includes
edges
graph
node
subset
origin
destination
node
used
graphs
informally
collection
class
problems
represented
graph
map
whose
key
name
node
whose
value
set
nodes
reaches
representation
directed
graph
omitted
value
edge
ability
find
nodes
leading
node
easily
deficiencies
removed
actual
graph
classes
implement
graph
nodes
can
0
n2
edges
case
every
node
edge
leading
every
node
including
call
graph
sparse
edges
likewise
call
graph
dense
n2
edges
degree
node
count
number
edges
node
destination
likewise
degree
node
count
number
edges
node
origin
degree
node
sum
degree
degree
node
considered
source
graph
degree
0
nodes
source
destination
likewise
node
considered
sink
graph
degree
0
nodes
sink
source
path
sequence
nodes
a1
a2
edge
ai
ai
1
graph
cyclic
path
contains
node
twice
path
called
cycle
likewise
graphy
contains
cycles
graph
acyclic
aka
noncyclic
graph
connected
path
two
nodes
graph
connected
can
decomposed
connected
components
largest
subgraph
connected
note
two
components
include
node
can
merged
larger
component
acyclic
graph
node
appears
connected
component
spanning
tree
acyclic
subset
graph
represents
ary
tree
can
choose
node
root
typically
many
spanning
trees
graph
minimum
spanning
tree
one
minimizes
sum
values
associated
edges
contained
spanning
tree
transitive
closure
graph
graph
fewer
nodes
path
node1
node2
original
graph
edge
node1
node2
transitive
closure
value
often
related
values
path
one
useful
way
assign
value
edge
minimum
sum
edge
values
path
nodes
directed
graph
nodes
represent
airports
edges
represent
flights
one
airport
another
edge
values
represent
mileage
flight
represent
cost
airplane
ticket
flight
time
flight
etc
graph
strongly
symmetic
rather
showing
edges
connecting
pair
nodes
show
one
double
arrowed
edge
graph
taken
excellent
book
goodrich
tamassia
data
structures
algorithms
java
john
wiley
sons
1998
state
facts
tree
using
terminology
defined
node
named
sfo
edge
node
named
sfo
origin
node
named
bos
destination
vice
versa
value
2704
graph
stongly
symmetric
graph
cyclic
fact
cycle
connected
path
every
node
every
node
natural
subgraph
ord
pvd
jfk
also
connected
natural
subgraph
sfo
mia
pvd
fact
subgraph
contains
edges
another
useful
set
values
edge
might
cost
taking
flight
distance
city
origin
destination
similar
much
extensive
graph
used
underlying
data
structure
mapquest
web
site
plans
travel
routes
including
computing
amount
travel
time
note
real
graphs
might
model
one
way
streets
may
edge
street
one
can
travel
corner1
corner2
vice
versa
also
roads
may
partitioned
lanes
going
one
way
although
edges
going
way
values
might
different
future
programs
mapquest
might
take
account
time
traveling
places
traffic
patterns
vary
tremendously
norm
rush
hours
fact
billions
sensors
placed
roads
throughout
us
report
traffic
slowdowns
mapquest
contact
car
via
something
like
onstar
system
automatically
reroute
avoid
delays
graphs
can
also
easily
model
servers
nodes
transmission
lines
edges
transmission
speeds
capacities
bandwidth
indicated
values
internet
can
ask
questions
like
minimum
time
take
transmit
large
number
web
pages
one
server
another
using
paths
available
exceeding
bandwidth
transmission
line
problem
bit
beyond
scope
course
originally
solved
ford
fulkerson
algorithm
improved
edmonds
karp
algorithm
whose
complexity
class
nm2
number
nodes
number
edges
respectively
graph
graph
interface
graphs
rich
data
structures
will
use
following
interface
define
methods
can
use
query
update
graph
note
just
map
interface
defines
nested
entry
interface
graph
interface
defines
nested
edge
edgevalueiointerface
methods
edge
parameter
many
methods
return
iterable
objectss
value
string
edge
public
interface
graph
mutators
public
graph
addnode
string
nodename
public
graph
addedge
string
origin
string
destination
edgevalue
public
graph
addedge
edge
lte
edge
edgevalue
public
graph
removenode
string
nodename
public
graph
removeedge
string
origin
string
destination
public
graph
removeedge
edge
lte
edge
public
void
clear
accessors
public
int
getnodecount
public
int
getedgecount
public
boolean
hasnode
string
nodename
public
boolean
hasedge
string
origin
string
destination
public
boolean
hasedge
edge
lte
edge
public
getedgevalue
string
origin
string
destination
public
getedgevalue
edge
lte
edge
public
int
indegree
string
nodename
public
int
outdegree
string
nodename
public
int
degree
string
nodename
returned
iterators
implement
remove
public
iterable
ltstring
getallnodes
public
iterable
ltedge
lte
getalledges
public
iterable
ltstring
getoutnodes
string
nodename
public
iterable
ltstring
getinnodes
string
nodename
public
iterable
ltedge
getoutedges
string
nodename
public
iterable
ltedge
getinedges
string
nodename
public
edgevalueio
lte
getedgevalueio
public
graph
load
typedbufferreader
input
char
tokenseparator
public
void
write
typedbufferwriter
output
char
tokenseparator
nested
interfaces
public
interface
edgevalueio
lte
public
readedgevalue
string
public
string
writeedgevalue
public
interface
edge
lte
public
string
getorigin
public
string
getdestination
public
getvalue
will
use
objects
constructed
classes
implementing
edgevalueio
interface
constructing
graph
written
simple
useful
two
methods
specified
useful
load
write
methods
graphs
reading
writing
files
help
convert
edge
values
strings
vice
versa
given
interfaces
can
use
implement
many
general
algorithms
process
graphs
one
simple
one
shown
simple
algorithms
section
will
discuss
topological
sorting
example
simple
graph
algorithm
imagine
model
process
encoding
nodes
tasks
edges
specifying
tasks
must
come
others
directed
edge
node
1
node
2
task
node
1
must
completed
task
node
1
will
associate
value
edge
example
can
simply
model
cake
making
task
follows
tasks
like
building
skyscraper
can
modeled
similarly
much
complexity
tens
thousand
hundreds
thousands
subtasks
ordering
relationships
problem
sort
tasks
linear
sequence
perform
tasks
order
ordering
relationships
observed
standard
sorting
algorithms
work
assume
law
trichotomy
given
two
values
first
less
equal
greater
third
example
nodes
labeled
cdi
cwi
compared
either
task
can
completed
cases
must
use
topological
sorting
solve
problem
note
method
works
acyclical
graphs
graph
cycle
require
node
listed
first
node
another
one
precedes
cycle
algorithm
topological
sorting
repeatedly
find
node
source
print
remove
related
edges
graph
applied
graph
can
produce
two
different
orderings
legal
acording
ordering
constraints
modeled
graph
ai
cdi
cwi
ci
well
ai
cwi
cdi
ci
can
implement
algorithm
follows
graph
object
new
hashgraph
object
new
noedgevalue
list
string
sorted
new
arraylist
string
load
new
typedbufferreader
enter
file
graph
sort
'
'
getnodecount
0
iterator
string
nodes
getallnodes
iterator
nodes
hasnext
string
nodename
nodes
next
indegree
nodename
0
node
source
sorted
add
nodename
add
next
list
removenode
nodename
remove
graph
break
restart
iterator
nodes
hasnext
iterator
finish
throw
new
illegalstateexception
source
must
cyclic
system
println
order
sorted
outer
loop
loop
long
nodes
graph
process
inner
loop
iterate
nodes
find
one
degree
0
add
sorted
list
remove
using
iterator
set
nodes
graph
including
edges
enabling
yet
nodes
reduce
degree
0
must
break
removing
node
will
cause
iterator
throw
concurrentmodificationexception
finally
iterating
nodes
none
degree
0
means
graph
must
cyclic
recognize
case
throw
exception
complexity
class
algorithm
n2
since
outer
loop
executed
times
remove
node
graph
inner
loop
executed
times
removing
one
node
full
iteration
similar
problem
programming
languages
involves
compiling
system
comprising
many
files
constraints
files
must
compiled
first
problem
java
often
programmers
create
make
files
contain
ordering
information
specifying
one
file
must
compiled
another
can
create
graph
based
model
topologically
sort
determine
legal
order
compile
files
multiple
bakers
multiple
computers
can
modify
topological
sorting
algorithm
graph
many
tasks
simultaneously
worked
allowed
ordering
constraints
problem
set
ensure
understand
material
lecture
please
solve
announced
problems
read
lecture
get
stumped
problem
go
back
read
relevant
part
lecture
still
questions
please
get
help
instructor
ca
student
none
yet
