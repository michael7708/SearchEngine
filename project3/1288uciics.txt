walt scacchi's publications page 
abstracts links research papers 
walt
scacchi's
publications
page
home
page
atrium
laboratory
selected
research
papers
postscript
html
pdf
format
interactive
presentations
html
format
need
postscript
viewer
printing
utility
get
postscript
viewer
print
utility
ms
windows
os
2
systems
called
gsview
understanding
social
technological
policy
implications
open
source
software
development
interest
open
source
software
development
emerged
many
different
research
communities
much
interest
focused
attention
primarily
onto
products
open
software
development
source
code
secondarily
onto
processes
productive
units
facilitatre
development
position
paper
identifies
believe
areas
topics
basic
questions
requiring
research
arena
open
source
software
development
position
paper
presented
nsf
workshop
advancing
research
agenda
open
source
28
january
2002
revised
august
2002
understanding
requirements
developing
open
source
software
systems
study
presents
initial
set
findings
empirical
study
social
processes
technical
system
configurations
organizational
contexts
interrelationships
give
rise
open
software
focus
directed
understanding
requirements
open
software
development
efforts
development
requirements
differs
traditional
software
engineering
requirements
engineering
four
open
software
development
communities
described
examined
compared
help
discover
differences
may
eight
kinds
software
informalisms
found
play
critical
role
elicitation
analysis
specification
validation
management
requirements
developing
open
software
systems
subsequently
understanding
roles
software
informalisms
take
new
formulation
requirements
development
process
open
source
software
focus
study
iee
proceedings
software
149
1
24
39
february
2002
hypertext
software
engineering
chapter
provides
survey
tools
techniques
concepts
hypertext
capabilities
can
employed
support
large
team
oriented
software
development
projects
appears
marciniak
ed
encyclopedia
software
engineering
2nd
edition
wiley
612
621
2002
process
models
software
engineering
chapter
provides
survey
tools
techniques
concepts
alternative
softwre
process
models
modeling
capabilities
can
employed
support
large
team
oriented
software
development
projects
revised
version
appears
marciniak
ed
encyclopedia
software
engineering
2nd
edition
993
1005
wiley
2002
software
development
practices
open
software
development
communities
study
presents
initial
set
findings
empirical
study
social
processes
technical
system
configurations
organizational
contexts
interrelationships
give
rise
open
software
open
software
narrowly
open
source
software
represents
approach
communities
like
minded
participants
develop
software
system
representations
intended
shared
freely
rather
offered
closed
commercial
products
growing
popular
literature
attesting
open
software
systematic
empirical
studies
informs
communities
produce
software
similarly
little
known
people
communities
coordinate
software
development
across
different
settings
software
processes
work
practices
organizational
contexts
necessary
success
extent
academic
research
communities
commercial
enterprises
seek
supposed
efficacy
open
software
will
need
grounded
models
processes
practices
open
software
development
allow
effective
investment
resources
study
investigates
four
communities
engaged
open
software
development
case
study
methods
used
compare
practices
across
communities
position
paper
presented
1st
workshop
open
source
software
engineering
toronto
ontario
may
2001
modeling
simulating
software
acquisition
process
architectures
james
choi
paper
describe
efforts
support
modeling
simulation
processes
associated
software
system
acquisition
activities
software
acquisition
generally
multi
organization
endeavor
concerned
funding
management
engineering
system
integration
deployment
long
term
support
large
software
systems
first
describe
language
modeling
software
acquisition
processes
architectural
level
describe
approach
supporting
simulation
software
acquisition
processes
within
process
architecture
along
way
introduce
employ
high
level
architecture
hla
run
time
infrastructure
rti
support
distribution
concurrent
execution
interoperation
multiple
software
process
simulations
address
complexity
software
acquisition
process
architectures
addition
also
introduce
design
prototyping
web
based
environment
supports
modeling
simulation
acquisition
process
architectures
appears
journal
systems
software
59
3
343
354
15
december
2001
specifying
process
oriented
hypertext
organizational
computing
john
noll
organizations
deploy
intranets
provide
access
documents
use
web
computing
comprises
just
documents
people
tools
processes
critical
organizational
function
particular
people
may
need
guidance
perform
tasks
well
access
information
necessary
carry
tasks
paper
present
language
describing
process
oriented
hypertexts
process
oriented
hypertext
links
information
tools
activities
seamless
organizational
web
using
hypertext
process
performer
can
enact
process
browsing
receive
guidance
perform
process
activities
relevant
information
tools
use
pml
process
modeling
language
provides
way
process
engineers
specify
process
models
terms
activities
sequence
performed
specifcation
can
elaborated
descriptions
resources
tools
required
provided
activities
skills
necessary
carry
activity
resulting
models
translated
one
process
oriented
hypertexts
represent
instances
process
currently
performed
pml
includes
features
allow
modeler
specify
process
activities
dynamically
linked
information
resource
nodes
time
process
performed
enables
processes
described
abstract
models
can
instantiated
process
oriented
hypertexts
different
organizational
settings
used
pml
model
processes
case
study
grants
management
process
us
office
naval
research
describe
experiences
applying
pml
study
conclude
lessons
learned
directions
future
study
appears
journal
network
computing
applications
24
1
39
61
2001
redesigning
contracted
service
procurement
internet
based
electronic
commerce
case
study
paper
describes
case
study
focused
redesigning
procurement
processes
research
grants
office
naval
research
processes
focus
procurement
research
services
can
redesigned
supported
using
web
based
capabilities
examining
processes
gain
insight
issues
challenges
addressed
redesigning
service
procurement
internet
based
electronic
commerce
capabilities
collaboration
participants
effort
found
contribute
substantial
reduction
process
cycle
time
operational
costs
associated
funding
thousands
research
grant
procurement
actions
accordingly
investigation
will
focus
topics
underlie
results
includes
defining
approach
redesign
procurement
processes
internet
based
ec
case
study
applying
approach
technology
onr
discussion
lessons
learned
along
way
challenges
issues
possible
solutions
identified
foreshadow
development
new
generation
internet
based
procurement
processes
supporting
web
based
environments
revised
version
appears
information
technology
management
2
3
313
334
2001
environment
research
software
systems
acquisition
valente
noll
choi
paper
present
initial
results
basic
research
exploratory
studies
area
software
systems
acquisition
research
sought
design
web
based
computer
supported
work
environment
facilitates
research
development
area
software
systems
acquisition
environment
supports
capture
representation
operationalization
various
forms
knowledge
associated
new
vision
virtual
system
acquisition
called
vista
schemes
organizing
managing
knowledge
rooted
software
feasibility
heuristics
informal
formal
models
software
acquisition
systems
engineering
processes
called
knowledge
webs
accordingly
environment
provides
mechanisms
capturing
representing
interlinking
operationalizing
access
knowledge
webs
called
knowledge
web
management
system
kwms
thus
environment
focus
research
effort
designed
provide
kwms
capability
provides
access
incrementally
evolving
knowledge
web
software
acquisition
research
practice
line
vista
vision
environment
software
acquisition
web
management
called
sawman
submitted
publication
june
2001
experience
software
architectures
configured
software
descriptions
choi
position
paper
highlight
things
learned
past
15
years
experience
software
architectures
much
learned
results
experience
specification
design
implementation
evolution
software
engineering
environments
process
driven
software
environments
along
way
developed
used
variety
alternative
architectural
notations
support
efforts
also
employed
architectural
design
concepts
notations
specify
code
evolve
variety
configured
software
descriptions
including
software
life
cycle
documents
software
hypertexts
software
processes
others
regard
found
useful
explore
alternative
schemes
combining
software
architecture
concepts
techniques
notations
tools
software
configuration
management
accordingly
will
highlight
experiences
areas
topics
position
paper
presented
workshop
evaluating
software
architectural
solutions
2000
irvine
ca
may
2000
understanding
software
process
redesign
using
modeling
analysis
simulation
paper
introduces
problem
understanding
software
process
redesign
spr
software
process
modeling
analysis
simulation
may
used
support
provides
overview
research
results
business
process
redesign
help
draw
attention
importance
treating
process
redesign
process
organizational
process
transformation
turn
requires
examining
practicing
spr
approach
combines
organizational
change
management
together
process
management
technologies
discussion
follows
identifies
number
topic
areas
require
study
order
make
spr
subject
software
process
research
practice
presented
prosim'99
silver
falls
june
1999
revised
version
appears
software
process
improvement
practice
5
2
3
183
195
2000
developing
knowledge
web
business
process
redesign
andre
valente
describe
effort
developing
demonstrating
prototype
knowledge
based
web
environment
modeling
diagnosing
redesigning
complex
business
processes
goal
investigate
modern
knowledge
representation
system
loom
mb95
can
favorably
leverage
development
evolution
knowledge
web
links
narrative
informal
formal
descriptions
cases
business
process
redesign
found
web
demonstrate
concepts
techniques
tools
facilitate
development
knowledge
web
management
system
kwms
application
domain
interest
enterprises
throughout
world
presented
1999
knowledge
acquisition
workshop
banff
canada
october
1999
supporting
software
development
virtual
enterprises
john
noll
paper
presents
recent
developments
distributed
semantic
hypertext
framework
called
dht
supports
software
development
projects
within
virtual
enterprises
show
hypertext
functionality
embodied
dht
solves
practical
problems
project
coordination
including
collaborative
sharing
data
virtual
enterprise
distributed
teams
integrating
existing
tools
environments
enacting
software
processes
coordinate
development
activities
teams
across
wide
area
networks
particular
describe
software
process
enactment
can
achieved
within
virtual
enterprise
without
centralized
mechanisms
process
description
represented
user
navigable
hypertext
graph
whose
nodes
associate
process
steps
staff
roles
associated
tools
designated
software
products
overall
capabilities
provide
support
coordinating
software
development
projects
across
virtual
enterprise
teams
connected
via
internet
appears
journal
digital
information
1
4
february
1999
original
version
paper
presented
second
international
workshop
incorporating
hypertext
functionality
software
systems
washington
dc
march
1996
virtual
system
acquisition
approach
transitions
barry
boehm
paper
describe
radically
new
approach
acquisition
software
intensive
systems
start
reviewing
problems
opportunities
improving
acquisition
systems
put
forward
statement
objective
need
make
software
system
acquisition
agile
adaptive
evolutionary
modeling
simulation
development
system
acquired
describe
new
vision
re
tooling
re
engineering
software
system
acquisition
form
call
vista
denoting
approach
virtual
acquisition
systems
outline
vista
approach
software
acquisition
followed
discussion
technical
organizational
transitions
must
investigated
managed
ensure
eventual
success
radical
change
software
system
acquisition
appears
acquisition
review
quarterly
5
2
185
216
spring
1998
experience
software
process
simulation
modeling
paper
describes
approach
taken
experiences
encountered
developing
applying
simulation
modeling
technologies
software
processes
processes
software
development
use
investigated
focus
paper
aimed
addressing
three
aspects
software
process
simulation
modeling
first
describe
approach
examples
software
simulation
modeling
investigated
articulator
environment
developed
usc
second
describe
focusing
process
modeling
analysis
simulation
led
expand
scope
work
software
processes
toward
comprehensive
software
process
life
cycle
engineering
third
describe
lessons
learned
applying
modeling
simulation
concepts
techniques
tools
software
processes
variety
organizational
settings
conclusions
stress
complementary
value
arising
use
qualitative
quantitative
technologies
software
process
simulation
modeling
journal
systems
software
46
2
3
183
192
1999
original
version
paper
presented
prosim'98
silver
falls
22
24
june
1998
computational
business
process
components
electronic
commerce
position
paper
focus
addressing
computational
business
processes
software
components
electronic
commerce
components
can
configured
organizational
process
architecture
serves
reusable
framework
developing
ec
information
infrastructure
process
driven
intranets
serve
distributed
development
run
time
support
environment
framework
since
pdis
can
span
organizational
boundaries
since
pdis
different
organizations
may
interconnected
process
driven
extranets
can
created
deployed
pdis
pdes
enable
design
integration
enactment
virtual
enterprises
community
virtual
enterprises
emerges
begins
support
business
transactions
among
enterprises
virtual
markets
can
appear
can
different
kinds
computational
economies
exception
last
item
experience
developing
applying
capabilities
different
organizational
settings
experience
leads
believe
cbps
viable
components
ec
furthermore
components
address
orthogonal
set
issues
compared
addressed
potential
ec
technologies
corba
dcom
edi
x12
transaction
standards
java
activex
uml
others
subsequently
potential
value
cbps
can
assessed
independent
choices
made
using
evolving
ec
technologies
thus
cbps
merit
consideration
foundational
software
technology
ec
presented
1998
intern
workshop
component
based
electronic
commerce
berkeley
ca
july
1998
comparative
case
analysis
understanding
software
processes
paper
provides
exploration
analysis
use
comparative
case
studies
approach
understanding
software
processes
complex
organizational
settings
case
studies
well
suited
capture
describe
software
processes
occur
real
world
settings
kinds
problems
emerge
addressed
software
engineering
tools
techniques
concepts
employed
overall
purpose
comparative
case
analysis
discover
highlight
second
higher
order
phenomena
patterns
transcend
analysis
individual
case
comparative
case
analysis
provides
strategy
enables
development
generalizable
results
testable
theories
individual
disjoint
case
studies
alone
can
provide
study
incorporates
examination
review
four
empirical
studies
processes
involved
developing
using
evolving
software
systems
employ
comparative
case
analyses
finally
meta
analysis
four
studies
highlights
strengths
weaknesses
comparative
case
analyses
used
empirically
examine
understand
software
processes
draft
review
1998
modeling
integrating
enacting
complex
organizational
processes
html
presentation
version
can
found
describe
approach
mechanisms
support
engineering
organizational
processes
throughout
life
cycle
describe
current
understanding
activities
included
process
life
cycle
go
describe
approach
computational
mechanisms
experiences
supporting
many
life
cycle
activities
well
compare
related
efforts
along
way
present
examples
drawn
current
study
aimed
modeling
analyzing
integrating
order
fulfillment
process
product
development
organization
appears
carley
gasser
prietula
eds
simulating
organizations
computational
models
institutions
groups
153
168
mit
press
1998
process
life
cycle
engineering
knowledge
based
approach
environment
mi
describe
approach
mechanisms
support
engineering
organizational
processes
throughout
life
cycle
describe
current
understanding
activities
included
process
life
cycle
go
describe
approach
computational
mechanisms
experiences
supporting
many
life
cycle
activities
well
compare
related
efforts
along
way
present
examples
drawn
recent
study
uses
approach
mechanisms
knowledge
based
process
engineering
environment
support
re
engineering
corporate
financial
operations
mid
size
consumer
products
organization
nb
contains
12
image
files
appears
intelligent
systems
accounting
finance
management
6
1
83
107
1997
addition
interactive
presentation
subject
can
found
process
driven
intranets
life
cycle
support
process
reengineering
john
noll
paper
describe
approach
experience
case
study
focused
redesigning
processes
research
grant
funds
management
office
naval
research
found
contribute
substantial
reduction
process
cycle
time
operational
costs
associated
funding
thousands
research
grant
procurement
actions
accordingly
focus
discussion
topics
underlie
results
includes
defining
approach
process
design
technology
process
driven
intranets
electronic
commerce
case
study
applying
approach
technology
onr
discussion
lessons
learned
along
way
identify
challenges
issues
possible
solutions
foreshadow
development
new
generation
intranet
based
networked
information
systems
appears
ieee
internet
computing
1
5
42
49
1997
supporting
distributed
configuration
management
virtual
enterprises
john
noll
paper
presents
semantic
hypertext
based
framework
called
dht
supports
distributed
software
configuration
management
provides
transparent
access
heterogeneous
autonomous
software
repositories
enables
implementation
strategy
low
cost
effort
show
dht
solves
practical
problems
sharing
updating
heterogenous
multi
version
software
virtual
enterprise
distributed
teams
integrating
existing
cm
tools
environments
executing
cm
processes
coordinate
development
activities
across
wide
area
networks
process
model
represented
user
navigable
hypertext
graph
whose
nodes
associate
process
steps
user
roles
associated
tools
designated
software
product
versions
configurations
furthermore
show
can
require
support
alternative
policy
models
commitment
software
updates
local
cm
repositories
overall
capabilities
provide
support
product
centered
enactment
cm
policies
processes
across
virtual
enterprise
teams
connected
via
internet
appears
conradi
ed
software
configuration
management
lecture
notes
computer
science
vol
1235
springer
verlag
new
york
142
160
1997
re
engineering
research
grants
management
acquisition
reform
knowledge
brokering
onr
john
noll
cedric
knight
capt
miller
paper
briefly
describe
approach
experience
research
effort
focused
re
engineering
activity
research
grants
management
office
naval
research
found
contribute
substantial
reduction
process
cycle
time
operational
costs
associated
funding
thousands
research
grant
procurement
actions
accordingly
focus
discussion
topics
underlie
results
also
observe
knowledge
brokering
area
new
initiative
lead
effective
efficient
research
funding
research
program
management
well
serve
mutual
self
interests
federal
research
funding
agency
researcher
communities
presented
nsf
workshop
research
development
opportunities
federal
information
services
arlington
va
http
www
isi
edu
nsf
may
1997
simulation
modeling
software
acquisition
samsa
barry
boehm
extended
final
report
describe
results
series
workshops
contributions
blue
ribbon
panel
government
industry
academic
experts
addressing
alternative
approaches
acquisition
large
software
systems
results
focus
attention
redesigning
process
software
acquisition
around
use
knowledge
based
feasibility
analysis
modeling
system
assist
assessing
costs
risks
technical
feasibility
new
software
system
acquired
research
software
architectures
help
better
characterize
whether
proposed
system
requirements
can
satisfied
given
system
architecture
overall
integration
simulation
modeling
technologies
support
new
approach
virtual
information
systems
acquisition
vista
reports
workshops
can
accessed
links
within
report
final
report
march
1996
knowledge
based
environment
modeling
simulating
software
engineering
processes
mi
paper
describe
design
representation
schemes
used
constructing
prototype
computational
environment
modeling
simulating
multi
agent
software
engineering
processes
refer
environment
articulator
provide
overview
articulator's
architecture
identifies
five
principal
components
three
components
knowledge
meta
model
software
process
behavior
simulator
knowledge
base
querying
mechanism
detailed
examples
included
conclusion
reiterates
novel
approach
applying
knowledge
engineering
techniques
problems
understanding
statics
dynamics
complex
software
engineering
processes
appears
ieee
trans
data
knowledge
engineering
2
3
283
294
september
1990
reprinted
nikkei
artificial
intelligence
20
1
176
191
january
1991
japanese
reprinted
process
centered
software
engineering
environments
garg
jazayeri
eds
ieee
computer
society
119
130
1996
meta
model
formulating
knowledge
based
models
software
development
mi
paper
introduce
knowledge
based
meta
model
serves
unified
resource
model
integrating
characteristics
major
types
objects
appearing
software
development
models
sdms
urm
consists
taxonomy
resource
classes
web
relations
link
different
types
resources
found
different
kinds
models
software
development
urm
includes
specialized
models
software
systems
documents
agents
tools
development
processes
urm
served
basis
integrating
interoperating
number
process
centered
case
environments
major
benefit
urm
twofold
first
forms
higher
level
abstraction
supporting
sdm
formulation
subsumes
many
typical
models
software
development
objects
hence
enables
higher
level
reusability
existing
support
mechanisms
models
second
provides
basis
support
complex
reasoning
mechanisms
address
issues
across
different
types
software
objects
explore
features
describe
urm
formally
detailed
example
followed
characterization
process
sdm
composition
characterization
life
cycle
activities
involved
overall
model
formulation
process
appears
decision
support
systems
17
4
313
330
1996
smart
approach
software
process
engineering
garg
mi
thunquest
paper
describe
methodology
software
process
engineering
environment
smart
supports
smart
supports
process
life
cycle
includes
modeling
analysis
execution
software
processes
smart's
process
monitoring
capabilities
can
used
provide
feedback
process
execution
process
model
smart
represents
integration
three
separately
developed
process
mechanisms
uses
two
modeling
formalisms
object
oriented
data
representation
imperative
style
programming
language
bridge
gap
process
modeling
analysis
execution
smart
demonstrates
meta
environment
concept
using
process
modeling
formalism
input
specification
generator
produces
process
centered
software
engineering
environments
psees
furthermore
smart
supports
team
oriented
approach
process
modeling
analysis
execution
appears
proc
16th
intern
conf
software
engineering
ieee
computer
society
sorrento
italy
pp
341
350
may
1994
reprinted
process
centered
software
engineering
environments
garg
jazayeri
eds
ieee
computer
society
pp
131
140
1996
understanding
requirements
information
system
documentation
empirical
investigation
jazzar
software
information
systems
documents
common
product
large
development
efforts
documents
produced
consumed
variety
documentation
processes
processes
involve
developers
users
working
within
complex
organizational
settings
well
focal
system
development
organizational
settings
facilitate
constrain
documentation
development
efforts
complicated
ways
accordingly
present
analyze
compare
cases
field
studies
three
different
development
efforts
large
industrial
corporation
based
studies
identify
new
set
variables
hypotheses
believe
represent
plausible
set
requirements
documentation
products
processes
different
organizational
settings
regard
utilize
concept
viewing
documentation
requirements
hypotheses
tested
refined
refuted
appears
proc
1995
acm
conf
organizational
computing
systems
san
jose
ca
268
279
august
1995
understanding
software
productivity
affects
software
productivity
improve
report
examines
current
state
art
software
productivity
measurement
turn
describes
framework
understanding
software
productivity
fundamentals
measurement
surveys
empirical
studies
software
productivity
identifies
challenges
involved
measuring
software
productivity
radical
alternative
current
approaches
suggested
construct
evaluate
deploy
evolve
knowledge
based
software
productivity
modeling
simulation
system
using
tools
techniques
domain
software
process
engineering
appears
intern
software
engineering
knowledge
engineering
1
3
293
321
1991
revised
reprinted
advances
software
engineering
knowledge
engineering
hurley
ed
volume
4
37
70
1995
meta
environments
software
production
karrer
researchers
create
software
production
environments
face
considerable
problems
software
production
environments
large
systems
costly
develop
furthermore
software
production
environments
support
particular
software
engineering
methods
may
applicable
large
number
software
production
projects
conditions
formed
trend
towards
research
ways
will
lessen
cost
developing
software
production
environments
particular
trend
towards
construction
meta
environments
specific
software
production
environments
can
created
paper
attempt
categorize
60
meta
environment
efforts
categories
review
research
efforts
illustrate
different
approaches
within
category
conclude
presenting
emerging
common
thread
requirements
links
field
together
appears
intern
soft
engr
know
engr
3
2
139
162
may
1993
revised
reprinted
advances
software
engineering
knowledge
engineering
hurley
ed
volume
4
37
70
1995
emergence
electronic
commerce
internet
also
available
html
interactive
presentation
version
interesting
www
links
try
article
three
questions
addressed
first
internet
implications
modern
businesses
strategic
planners
second
current
opportunities
using
internet
different
business
activities
third
research
persued
usc
school
business
administration
can
help
better
answer
preceding
two
questions
appears
usc
business
5
32
36
fall
1994
hypertext
system
integrating
heterogeneous
autonomous
software
repositories
noll
hypertext
simple
concept
organizing
information
graph
structure
linked
container
objects
paper
examines
issues
involved
applying
hypertext
concepts
integration
heterogeneous
autonomous
software
repositories
presents
solution
called
distributed
hypertext
system
dht
based
hypertext
data
model
client
server
architecture
dht
features
powerful
modeling
capabilities
integration
heterogeneous
pre
existing
repositories
update
concurrency
control
full
local
autonomy
appears
proc
4th
irvine
software
symposium
university
california
irvine
ca
49
60
april
1994
process
integration
case
environments
mi
integrated
case
environments
casees
focused
tool
object
integration
paper
present
new
type
integration
called
process
integration
strategy
creating
process
centered
casees
argue
major
benefits
process
integration
software
development
include
explicit
process
guidance
improved
project
management
also
present
key
components
implement
process
integration
form
backbone
process
centered
casee
components
include
software
process
models
process
enactment
mechanism
developer's
interface
process
manager's
interface
furthermore
strategy
implements
process
integration
merging
key
components
existing
casees
creates
process
centered
casees
reasonable
effort
exemplify
strategy
migrated
operational
casee
softman
environment
process
centered
casee
appears
ieee
software
9
2
45
53
1992
reprinted
chikoski
ed
computer
aided
software
engineering
2nd
edition
ieee
computer
society
press
1993
articulation
integrated
approach
diagnosis
replanning
rescheduling
software
process
failures
mi
paper
presents
integrated
approach
articulate
software
engineering
process
plans
fail
approach
called
articulation
repairs
plan
diagnosed
failure
occurs
reschedules
changes
ensure
plan's
continuation
implementing
articulation
combine
knowledge
based
diagnosis
replanning
rescheduling
powerful
mechanism
supporting
process
based
software
development
use
articulation
plan
execution
supports
recovery
repair
unanticipated
failures
well
revising
improving
process
plans
become
effective
paper
also
describe
prototype
knowledge
based
system
developed
implements
approach
articulation
appears
proc
8th
knowledge
based
software
engineering
conference
chicago
il
ieee
computer
society
77
85
september
1993
knowledge
based
software
process
library
process
driven
software
development
mi
li
process
driven
software
development
represents
technique
software
production
conceptual
knowledge
representation
called
software
process
used
represent
guide
development
activities
management
reuse
software
processes
therefore
becomes
requirement
process
driven
software
development
paper
present
knowledge
based
process
library
splib
supports
organization
access
reuse
software
processes
splib
consists
knowledge
base
software
process
representations
also
provides
set
process
operations
support
browsing
searching
composition
abstraction
operations
reason
content
software
processes
well
maintain
proper
interdependency
relationships
among
software
processes
demonstrate
use
splib
process
driven
software
development
provide
usage
scenario
splib
facilitates
access
reuse
software
processes
real
applications
appears
proc
7th
knowledge
based
software
engineering
conf
washington
dc
ieee
computer
society
122
131
september
1992
integrating
diverse
information
repositories
distributed
hypertext
approach
noll
today's
networked
information
systems
software
engineering
environment
characterized
multitude
autonomous
heterogeneous
information
repositories
variety
incompatible
user
interfaces
diverse
unconventional
data
types
including
text
graphics
possibly
video
sound
rapid
change
structure
content
multiple
ways
viewing
relationships
among
information
items
existing
information
storage
mechanisms
fail
combine
diverse
data
types
models
complex
objects
storage
structures
personal
views
organizations
shared
objects
access
distributed
heterogeneous
repositories
ease
evolution
paper
examines
issues
describes
distributed
hypertext
dht
architecture
provides
transparent
access
autonomous
heterogeneous
software
object
repositories
resulting
powerful
organizational
tool
simple
yet
effective
integration
mechanism
appears
computer
24
12
38
45
december
1991
modeling
articulation
work
software
engineering
processes
mi
current
software
process
modeling
techniques
generally
support
articulation
work
articulation
work
includes
diagnosis
recovery
resumption
development
activities
unexpectedly
fail
integral
part
software
process
enactment
since
software
processes
can
sometimes
fail
breakdown
paper
presents
knowledge
based
model
articulation
work
software
engineering
processes
uses
empirically
grounded
heuristics
address
three
problems
articulation
work
diagnosing
failed
development
activities
determining
appropriate
recovery
resuming
software
process
enactment
first
investigate
role
importance
articulation
work
respect
planned
software
development
activities
outline
knowledge
based
model
articulation
work
model
implemented
knowledge
based
software
process
modeling
environment
called
articulator
combining
available
software
process
modeling
techniques
model
articulation
leads
better
foundation
process
improvement
evolution
appears
proc
1st
intern
conf
soft
processes
ieee
computer
society
redondo
beach
ca
pp
188
201
october
1991
software
infrastructure
distributed
software
factory
paper
presents
innovative
approach
construction
application
deployment
software
factories
based
experience
creating
evolving
system
factory
project
usc
authors
present
new
experimental
project
called
distributed
system
factory
dsf
project
dsf
project
intended
provide
software
infrastructure
suitable
engineering
large
scale
software
systems
dispersed
teams
working
wide
area
networks
software
infrastructure
central
focus
author
describes
information
structures
can
used
model
create
infrastructure
well
target
software
applications
also
describes
electronic
market
place
logically
centralised
software
services
populate
execute
within
infrastructure
brief
view
dsf
project
can
grow
accommodate
academic
industrial
research
groups
also
given
appears
software
engineering
journal
6
5
355
369
september
1991
hypertext
system
manage
software
life
cycle
documents
garg
documents
integration
facility
environment
based
objects
relationships
objects
constructed
development
use
maintenance
large
scale
systems
life
cycle
documents
presented
dif
helps
integrate
manage
documents
produced
used
throughout
life
cycle
requirements
specifications
functional
specifications
architectural
designs
structural
specifications
detailed
designs
source
code
testing
information
user
maintenance
manuals
dif
supports
information
management
large
systems
much
natural
language
text
documentation
method
used
dif
dif's
structure
described
dif
used
discussed
dif
environment
examined
issues
encountered
design
dif
considered
appears
ieee
software
7
3
90
89
may
1990
ishys
designing
intelligent
software
hypertext
system
garg
paper
describes
design
ishys
intelligent
software
hypertext
system
discuss
novel
applications
system
can
support
designing
ishys
sought
support
software
life
cycle
'web
computing'
framework
necessarily
requires
consideration
sociotechnical
factors
influencing
influenced
software
life
cycle
ishys
supports
functionalities
include
influencing
work
interactions
basis
social
interactions
determining
tools
options
basis
project
status
information
implementation
required
enhancements
dif
documents
integration
facility
authors'
current
software
hypertext
system
completed
using
prolog
windows
appears
ieee
intelligent
systems
4
3
52
63
fall
1989
power
domain
specific
hypertext
environments
potential
power
hypertext
technology
article
examines
question
outlines
answer
focussing
attention
domaim
specific
view
hypertext
environments
first
define
domain
specific
hypertext
environments
dshe
represent
next
examine
dshe
domains
encyclopedic
classical
studies
creative
writing
interactive
fiction
journal
book
publishing
insurance
policy
management
computer
aided
software
engineering
describe
detail
structure
information
evolve
within
dshe
software
engineering
terms
document
products
processing
tasks
mechanisms
workplace
attributes
turn
examination
provides
basis
identifying
seven
dimensions
along
power
dshe
can
defined
experienced
accumulated
also
address
organizational
costs
may
borne
realize
power
conclude
observations
source
dshe
power
well
identifying
topics
investigation
appears
journal
american
society
information
science
40
3
183
191
may
1989
work
structures
shifts
empirical
analysis
software
specification
teamwork
bendifallah
study
support
teamwork
upstream
software
development
activities
specification
design
approached
variety
perspectives
address
aspects
division
labor
typically
focus
authority
communication
structures
paper
examine
teams
engineers
develop
software
specifications
perspective
emphasizing
division
labor
terms
work
structures
present
new
typology
work
structures
report
empirical
investigation
work
structures
examine
teamwork
process
followed
five
comparable
teams
specification
developers
teams
worked
ten
day
period
state
art
specification
resources
deliver
functional
specification
documents
meeting
prescribed
quality
standards
data
analysis
show
recurrence
various
kinds
shifts
teams'
work
structures
discuss
resulting
patterns
work
structures
shifts
implications
particular
separative
work
structures
associated
improved
specification
teamwork
efficiency
whereas
integrative
work
structures
associated
improved
specification
product
quality
appears
proc
11th
intern
conf
software
engineering
pittsburgh
pa
acm
ieee
computer
society
260
270
may
1989
understanding
software
maintenance
work
bendifallah
software
maintenance
can
successfully
accomplished
computing
arrangements
people
maintenance
compatible
established
patterns
work
setting
foster
achieve
compatibility
requires
understanding
reasons
circumstances
participants
carry
maintenance
activities
particular
requires
understanding
software
users
maintainers
act
toward
changing
circumstances
unexpected
events
work
situation
give
rise
software
system
alterations
contribute
understanding
describe
comparative
analysis
work
involved
maintaining
evolving
text
processing
systems
two
academic
computer
science
organizations
analysis
shows
software
systems
maintained
depends
occupational
workplace
contingencies
vice
versa
ieee
trans
software
engineering
se
13
3
311
323
1987
maintaining
configurations
evolving
software
systems
narayanaswamy
software
configuration
management
scm
emerging
discipline
important
aspect
realizing
scm
task
maintaining
configurations
evolving
software
systems
paper
provide
approach
resolving
conceptual
technical
problems
maintaining
configurations
evolving
software
systems
approach
provides
formal
basis
existing
notions
system
architecture
formal
properties
view
configurations
provide
underpinnings
rigorous
notion
system
integrity
mechanisms
control
evolution
configurations
approach
embodied
language
numil
describe
software
system
configurations
prototype
environment
maintain
software
system
configurations
believe
approach
prototype
environment
offer
firm
base
maintain
software
system
configurations
therefore
implement
scm
ieee
trans
software
engineering
se
13
3
324
334
1987
contact
information
walt
scacchi
previously
director
usc
atrium
lab
institute
software
research
information
computer
science
dept
university
california
irvine
ca
92697
3455
usa
phone
1
949
824
4130fax
1
949
824
1715
email
wscacchi
ics
uci
edu
