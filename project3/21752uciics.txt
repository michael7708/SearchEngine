266 solutions 
homework sample final solutions 
ics
266
homework
sample
exam
solutions
spring
2003
2
2
apply
algorithm
findintersections
chapter
text
terminate
algorithm
soon
finds
first
intersection
2
5
third
equality
true
8
2
collection
lines
pass
top
bottom
infinite
cells
three
line
arrangement
dual
8
2
points
line
outside
line
segment
8
14
construct
dual
line
arrangement
using
algorithm
constructarrangement
look
vertex
largest
number
incident
lines
3
6
lemma
tree
vertex
degree
three
edgewhich
splits
tree
two
parts
least
1
3
vertices
tree
proof
idea
edge
splits
tree
unevenly
one
side
contains
2
3
vertices
one
two
neighboring
edges
side
gives
better
split
split
can
improved
must
least
1
3
2
3
solve
problem
triangulate
polygon
apply
lemma
dual
tree
split
polygon
diagonal
dual
tree
splitting
edge
4
7
square
can
removed
rotation
can
translation
see
rest
answer
4
7
draw
line
perpendicular
edge
object
counterclockwise
endpoint
edge
form
halfplane
bounded
line
side
line
edge
center
rotation
must
inside
halfplane
center
exists
halfplanes
nonempty
intersection
translation
corresponds
pivot
point
infinity
intersection
bounded
drawing
object
can
removed
translation
4
12
construction
item
equally
likely
last
item
permutation
probability
generating
particular
permutation
1
times
probability
generating
permutation
1
items
induction
1
1
probability
generating
overall
permutation
1
required
4
12
3
change
line
two
calls
random
3
probability
particular
sequence
events
1
9
probability
particular
output
multiple
1
9
desired
output
probability
permutation
1
6
multiple
1
9
15
1
choose
start
goal
near
midpoints
opposite
edges
regular
gon
5
11
sweep
vertical
line
left
right
across
line
segments
using
sorted
list
segment
endpoints
keep
track
sweep
events
also
keep
binary
search
tree
intersections
sweep
line
horizontal
segments
sorted
coordinates
intersection
store
node
search
tree
count
number
descendants
node
sweep
line
crosses
left
right
endpoint
horizontal
segment
update
augmented
binary
search
tree
appropriately
sweep
line
crosses
vertical
segment
use
search
tree
count
number
horizontal
segments
crosses
6
7
binary
search
find
edge
crossed
ray
direction
given
use
linear
programming
find
preprocessing
step
7
7
whenever
new
point
crossed
sweep
line
creates
two
new
breakpoints
moving
opposite
directions
along
voronoi
edge
unless
edge
parallel
sweep
line
one
breakpoints
will
move
downwards
10
9
store
range
tree
left
endpoints
intervals
node
range
tree
store
intervals
canonical
subset
node
sorted
order
right
endpoints
answer
query
use
range
tree
find
log
canonical
subsets
covering
intervals
left
endpoints
greater
scan
canonical
subset's
sorted
list
reaching
right
endpoint
greater
x'
12
10
hint
says
start
partition
using
vertical
lines
2i
integer
line
cuts
least
one
disk
disk
cut
total
complexity
vertical
strips
step
2n
next
within
strip
cut
horizontally
lines
2i
whenever
line
crosses
part
disk
within
strip
doubles
total
complexity
two
stages
remaining
cell
partition
can
contain
constant
number
disk
parts
repeatedly
find
two
parts
cell
separate
line
complexity
will
remain
linear
9
8
let
circle
circumscribing
triangle
pipjpk
form
circle
ci
starting
continuously
shrinking
keeping
shrunken
circle
tangent
pi
crosses
resulting
ci
empty
pi
boundary
qpi
delaunay
edge
symmetric
argument
qpj
qpk
9
17
form
isosceles
triangle
base
smaller
height
add
fourth
point
outside
triangle
close
midpoint
base
delaunay
triangulation
will
use
diagonal
fourth
point
apex
minimum
weight
triangulation
will
instead
use
isosceles
triangle's
base
11
2
new
point
uses
linear
time
due
upper
bound
theorem
total
time
2
one
bad
example
consists
2
points
near
circle
2
points
along
near
line
perpendicular
circle
center
points
added
circle
first
increasing
order
distance
circle
point
along
line
will
visible
region
boundary
complexity
theta
total
complexity
will
theta
n2
f1
two
crossing
double
wedges
contain
apex
wedge
f2
use
lifting
transformation
taking
two
dimensional
point
three
dimensional
point
x2
y2
circle
two
dimensions
separating
red
points
blue
points
corresponds
linear
function
ax
cz
negative
red
points
positive
blue
points
constraint
ax
cz
positive
negative
linear
coefficients
can
solved
linear
programming
feasibility
problem
f3
form
arrangement
lines
preprocess
point
location
locate
input
point
within
arrangement
f3
partition
lines
arbitrarily
sqrt
groups
sqrt
lines
apply
part
separately
group
f4
problem
somewhere
sentence
handle
query
use
segment
tree
find
log
canonical
sets
apply
query
third
level
data
structure
set
query
information
tell
us
range
slopes
look
obvious
way
picking
log
canonical
sets
query
