mobile code 
speeding mobile code execution embedded processors 
speeding
mobile
code
execution
resource
constrained
embedded
processors
embedded
platforms
increasingly
connected
web
executing
mobile
code
platforms
resource
constrained
environment
interpreted
execution
mobile
codes
norm
highly
optimized
dynamic
compilation
systems
suitable
choice
primarily
due
high
memory
requirements
time
performance
executed
code
critical
importance
often
limiting
factor
capabilities
system
user
perception
goals
research
project
significantly
improve
interpreter
performance
mobile
code
embedded
platforms
without
increasing
resource
requirements
design
resource
constrained
basic
block
dynamic
compilation
system
used
interpreter
adaptive
optimization
low
cost
framework
proposed
achieve
goals
based
superoperators
code
annotations
former
groups
instructions
can
executed
unit
optimized
together
latter
mechanism
passing
information
compiler
producing
mobile
code
interpreter
running
client
system
proposed
approach
shifts
much
work
identifying
compiling
optimizing
superoperators
possible
compiler
thus
simplifies
speeds
interpreted
execution
possible
annotations
can
carry
additional
information
otherwise
unavailable
mobile
code
compiler
interpreter
annotations
can
also
reduce
delays
allow
small
applets
optimized
little
overhead
used
adaptive
dynamic
optimization
currently
optimization
requires
dynamic
profiling
incurs
associated
overhead
superoperators
provide
two
main
advantages
optimizing
interpreter
performance
reduce
dispatch
overhead
individual
bytecodes
comprising
superoperator
allow
stack
based
communication
converted
efficient
form
using
registers
registers
can
utilized
without
dynamic
compilation
superoperators
created
statically
alternatively
can
introduced
simplified
dynamic
compilation
module
invoked
specified
annotation
resulting
combination
main
benefits
jit
compilation
superoperators
so's
profile
guided
optimization
delivers
lightweight
java
bytecode
compilation
system
resource
constrained
environments
achieves
runtime
performance
similar
state
art
jit
adaptive
optimization
systems
minimal
impact
runtime
memory
consumption
experimental
evaluation
developed
three
virtual
machines
vms
one
deploys
proposed
techniques
vm
first
compared
runtime
performance
baseline
interpreted
vm
vm
employs
state
art
jit
ao
system
attains
speedups
ranging
factor
1
52
factor
3
07
baseline
vm
compared
state
art
jit
ao
vm
system
achieves
performance
within
factor
two
jit
ao
actually
better
three
benchmarks
worse
less
factor
2
three
others
extended
vm
outperforms
jit
ao
system
factor
16
average
runtime
memory
consumption
