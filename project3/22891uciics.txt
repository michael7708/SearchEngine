fielding dissertation chapter 3 network based architectural styles 
chapter 3 network based architectural styles 
top
prev
next
chapter
3
network
based
architectural
styles
chapter
presents
survey
common
architectural
styles
network
based
application
software
within
classification
framework
evaluates
style
according
architectural
properties
induce
applied
architecture
prototypical
network
based
hypermedia
system
3
1
classification
methodology
purpose
building
software
create
specific
topology
interactions
use
particular
component
type
create
system
meets
exceeds
application
needs
architectural
styles
chosen
system's
design
must
conform
needs
way
around
therefore
order
provide
useful
design
guidance
classification
architectural
styles
based
architectural
properties
induced
styles
3
1
1
selection
architectural
styles
classification
set
architectural
styles
included
classification
means
comprehensive
possible
network
based
application
styles
indeed
new
style
can
formed
merely
adding
architectural
constraint
one
styles
surveyed
goal
describe
representative
sample
styles
particularly
already
identified
within
software
architecture
literature
provide
framework
styles
can
added
classification
developed
intentionally
excluded
styles
enhance
communication
interaction
properties
combined
one
surveyed
styles
form
network
based
application
example
blackboard
architectural
style
95
consists
central
repository
set
components
knowledge
sources
operate
opportunistically
upon
repository
blackboard
architecture
can
extended
network
based
system
distributing
components
properties
extension
entirely
based
interaction
style
chosen
support
distribution
notifications
via
event
based
integration
polling
la
client
server
replication
repository
thus
added
value
including
classification
even
though
hybrid
style
network
capable
3
1
2
style
induced
architectural
properties
classification
uses
relative
changes
architectural
properties
induced
style
means
illustrating
effect
architectural
style
applied
system
distributed
hypermedia
note
evaluation
style
given
property
depends
type
system
interaction
studied
described
section
2
2
architectural
properties
relative
sense
adding
architectural
constraint
may
improve
reduce
given
property
simultaneously
improve
one
aspect
property
reduce
aspect
property
likewise
improving
one
property
may
lead
reduction
another
although
discussion
architectural
styles
will
include
applicable
wide
range
network
based
systems
evaluation
style
will
based
impact
upon
architecture
single
type
software
network
based
hypermedia
systems
focusing
particular
type
software
allows
us
identify
advantages
one
style
another
way
designer
system
evaluate
advantages
since
intend
declare
single
style
universally
desirable
types
software
restricting
focus
evaluation
simply
reduces
dimensions
need
evaluate
evaluating
styles
types
application
software
open
area
future
research
3
1
3
visualization
use
table
style
versus
architectural
properties
primary
visualization
classification
table
values
indicate
relative
influence
style
given
row
column's
property
minus
symbols
accumulate
negative
influences
plus
symbols
positive
plus
minus
กำ
indicating
depends
aspect
problem
domain
although
gross
simplification
details
presented
section
indicate
degree
style
addressed
ignored
architectural
property
alternative
visualization
property
based
derivation
graph
classifying
architectural
styles
styles
classified
according
derived
styles
arcs
styles
illustrated
architectural
properties
gained
lost
starting
point
graph
null
style
constraints
possible
derive
graph
directly
descriptions
3
2
data
flow
styles
table
3
1
evaluation
data
flow
styles
network
based
hypermediastylederivationpf
กำ
upfpf
กำ
3
2
1
pipe
filter
pf
pipe
filter
style
component
filter
reads
streams
data
inputs
produces
streams
data
outputs
usually
applying
transformation
input
streams
processing
incrementally
output
begins
input
completely
consumed
53
style
also
referred
one
way
data
flow
network
6
constraint
filter
must
completely
independent
filters
zero
coupling
must
share
state
control
thread
identity
filters
upstream
downstream
interfaces
53
abowd
et
al
1
provide
extensive
formal
description
pipe
filter
style
using
language
khoros
software
development
environment
image
processing
112
provides
good
example
using
pipe
filter
style
build
range
applications
garlan
shaw
53
describe
advantageous
properties
pipe
filter
style
follows
first
pf
allows
designer
understand
overall
input
output
system
simple
composition
behaviors
individual
filters
simplicity
second
pf
supports
reuse
two
filters
can
hooked
together
provided
agree
data
transmitted
reusability
third
pf
systems
can
easily
maintained
enhanced
new
filters
can
added
existing
systems
extensibility
old
filters
can
replaced
improved
ones
evolvability
fourth
permit
certain
kinds
specialized
analysis
verifiability
throughput
deadlock
analysis
finally
naturally
support
concurrent
execution
user
perceived
performance
disadvantages
pf
style
include
propagation
delay
added
long
pipelines
batch
sequential
processing
occurs
filter
incrementally
process
inputs
interactivity
allowed
filter
interact
environment
know
particular
output
stream
shares
controller
particular
input
stream
properties
decrease
user
perceived
performance
problem
addressed
fit
pattern
data
flow
stream
one
aspect
pf
styles
rarely
mentioned
implied
invisible
hand
arranges
configuration
filters
order
establish
overall
application
network
filters
typically
arranged
just
prior
activation
allowing
application
specify
configuration
filter
components
based
task
hand
nature
data
streams
configurability
controller
function
considered
separate
operational
phase
system
hence
separate
architecture
even
though
one
exist
without
3
2
2
uniform
pipe
filter
upf
uniform
pipe
filter
style
adds
constraint
filters
must
interface
primary
example
style
found
unix
operating
system
filter
processes
interface
consisting
one
input
data
stream
characters
stdin
two
output
data
streams
characters
stdout
stderr
restricting
interface
allows
independently
developed
filters
arranged
will
form
new
applications
also
simplifies
task
understanding
given
filter
works
disadvantage
uniform
interface
may
reduce
network
performance
data
needs
converted
natural
format
3
3
replication
styles
table
3
2
evaluation
replication
styles
network
based
hypermediastylederivationrr
rr
3
3
1
replicated
repository
rr
systems
based
replicated
repository
style
6
improve
accessibility
data
scalability
services
one
process
provide
service
decentralized
servers
interact
provide
clients
illusion
just
one
centralized
service
distributed
filesystems
xms
49
remote
versioning
systems
like
cvs
www
cyclic
com
primary
examples
improved
user
perceived
performance
primary
advantage
reducing
latency
normal
requests
enabling
disconnected
operation
face
primary
server
failure
intentional
roaming
network
simplicity
remains
neutral
since
complexity
replication
offset
savings
allowing
network
unaware
components
operate
transparently
locally
replicated
data
maintaining
consistency
primary
concern
3
3
2
cache
variant
replicated
repository
found
cache
style
replication
result
individual
request
may
reused
later
requests
form
replication
often
found
cases
potential
data
set
far
exceeds
capacity
one
client
www
20
complete
access
repository
unnecessary
lazy
replication
occurs
data
replicated
upon
yet
cached
response
request
relying
locality
reference
commonality
interest
propagate
useful
items
cache
later
reuse
active
replication
can
performed
pre
fetching
cacheable
entries
based
anticipated
requests
caching
provides
slightly
less
improvement
replicated
repository
style
terms
user
perceived
performance
since
requests
will
miss
cache
recently
accessed
data
will
available
disconnected
operation
hand
caching
much
easier
implement
require
much
processing
storage
efficient
data
transmitted
requested
cache
style
becomes
network
based
combined
client
stateless
server
style
3
4
hierarchical
styles
table
3
3
evaluation
hierarchical
styles
network
based
hypermediastylederivationcs
ls
lcscs
ls
csscs
sscss
lc
sslcs
ss
กำ
rscs
rdacs
3
4
1
client
server
cs
client
server
style
frequently
encountered
architectural
styles
network
based
applications
server
component
offering
set
services
listens
requests
upon
services
client
component
desiring
service
performed
sends
request
server
via
connector
server
either
rejects
performs
request
sends
response
back
client
variety
client
server
systems
surveyed
sinha
123
umar
131
andrews
6
describes
client
server
components
follows
client
triggering
process
server
reactive
process
clients
make
requests
trigger
reactions
servers
thus
client
initiates
activity
times
choosing
often
delays
request
serviced
hand
server
waits
requests
made
reacts
server
usually
non
terminating
process
often
provides
service
one
client
separation
concerns
principle
behind
client
server
constraints
proper
separation
functionality
simplify
server
component
order
improve
scalability
simplification
usually
takes
form
moving
user
interface
functionality
client
component
separation
also
allows
two
types
components
evolve
independently
provided
interface
change
basic
form
client
server
constrain
application
state
partitioned
client
server
components
often
referred
mechanisms
used
connector
implementation
remote
procedure
call
23
message
oriented
middleware
131
3
4
2
layered
system
ls
layered
client
server
lcs
layered
system
organized
hierarchically
layer
providing
services
layer
using
services
layer
53
although
layered
system
considered
pure
style
use
within
network
based
systems
limited
combination
client
server
style
provide
layered
client
server
layered
systems
reduce
coupling
across
multiple
layers
hiding
inner
layers
except
adjacent
outer
layer
thus
improving
evolvability
reusability
examples
include
processing
layered
communication
protocols
tcp
ip
osi
protocol
stacks
138
hardware
interface
libraries
primary
disadvantage
layered
systems
add
overhead
latency
processing
data
reducing
user
perceived
performance
32
layered
client
server
adds
proxy
gateway
components
client
server
style
proxy
116
acts
shared
server
one
client
components
taking
requests
forwarding
possible
translation
server
components
gateway
component
appears
normal
server
clients
proxies
request
services
fact
forwarding
requests
possible
translation
inner
layer
servers
additional
mediator
components
can
added
multiple
layers
add
features
like
load
balancing
security
checking
system
architectures
based
layered
client
server
referred
two
tiered
three
tiered
multi
tiered
architectures
information
systems
literature
131
lcs
also
solution
managing
identity
large
scale
distributed
system
complete
knowledge
servers
prohibitively
expensive
instead
servers
organized
layers
rarely
used
services
handled
intermediaries
rather
directly
client
6
3
4
3
client
stateless
server
css
client
stateless
server
style
derives
client
server
additional
constraint
session
state
allowed
server
component
request
client
server
must
contain
information
necessary
understand
request
take
advantage
stored
context
server
session
state
kept
entirely
client
constraints
improve
properties
visibility
reliability
scalability
visibility
improved
monitoring
system
look
beyond
single
request
datum
order
determine
full
nature
request
reliability
improved
eases
task
recovering
partial
failures
133
scalability
improved
store
state
requests
allows
server
component
quickly
free
resources
simplifies
implementation
disadvantage
client
stateless
server
may
decrease
network
performance
increasing
repetitive
data
per
interaction
overhead
sent
series
requests
since
data
left
server
shared
context
3
4
4
client
cache
stateless
server
ss
client
cache
stateless
server
style
derives
client
stateless
server
cache
styles
via
addition
cache
components
cache
acts
mediator
client
server
responses
prior
requests
can
considered
cacheable
reused
response
later
requests
equivalent
likely
result
response
identical
cache
request
forwarded
server
example
system
makes
effective
use
style
sun
microsystems'
nfs
115
advantage
adding
cache
components
potential
partially
completely
eliminate
interactions
improving
efficiency
user
perceived
performance
3
4
5
layered
client
cache
stateless
server
lc
ss
layered
client
cache
stateless
server
style
derives
layered
client
server
client
cache
stateless
server
addition
proxy
gateway
components
example
system
uses
lc
ss
style
internet
domain
name
system
dns
advantages
disadvantages
lc
ss
simply
combination
lcs
ss
however
note
count
contributions
cs
style
twice
since
benefits
additive
come
ancestral
derivation
3
4
6
remote
session
rs
remote
session
style
variant
client
server
attempts
minimize
complexity
maximize
reuse
client
components
rather
server
component
client
initiates
session
server
invokes
series
services
server
finally
exiting
session
application
state
kept
entirely
server
style
typically
used
desired
access
remote
service
using
generic
client
telnet
106
via
interface
mimics
generic
client
ftp
107
advantages
remote
session
style
easier
centrally
maintain
interface
server
reducing
concerns
inconsistencies
deployed
clients
functionality
extended
improves
efficiency
interactions
make
use
extended
session
context
server
disadvantages
reduces
scalability
server
due
stored
application
state
reduces
visibility
interactions
since
monitor
know
complete
state
server
3
4
7
remote
data
access
rda
remote
data
access
style
131
variant
client
server
spreads
application
state
across
client
server
client
sends
database
query
standard
format
sql
remote
server
server
allocates
workspace
performs
query
may
result
large
data
set
client
can
make
operations
upon
result
set
table
joins
retrieve
result
one
piece
time
client
must
know
data
structure
service
build
structure
dependent
queries
advantages
remote
data
access
large
data
set
can
iteratively
reduced
server
side
without
transmitting
across
network
improving
efficiency
visibility
improved
using
standard
query
language
disadvantages
client
needs
understand
database
manipulation
concepts
server
implementation
lacking
simplicity
storing
application
context
server
decreases
scalability
reliability
also
suffers
since
partial
failure
can
leave
workspace
unknown
state
transaction
mechanisms
two
phase
commit
can
used
fix
reliability
problem
though
cost
added
complexity
interaction
overhead
3
5
mobile
code
styles
mobile
code
styles
use
mobility
order
dynamically
change
distance
processing
source
data
destination
results
styles
comprehensively
examined
fuggetta
et
al
50
site
abstraction
introduced
architectural
level
part
active
configuration
order
take
account
location
different
components
introducing
concept
location
makes
possible
model
cost
interaction
components
design
level
particular
interaction
components
share
location
considered
negligible
cost
compared
interaction
involving
communication
network
changing
location
component
may
improve
proximity
quality
interaction
reducing
interaction
costs
thereby
improving
efficiency
user
perceived
performance
mobile
code
styles
data
element
dynamically
transformed
component
fuggetta
et
al
50
use
analysis
compares
code's
size
data
element
savings
normal
data
transfer
order
determine
whether
mobility
desirable
given
action
impossible
model
architectural
standpoint
definition
software
architecture
excludes
data
elements
table
3
4
evaluation
mobile
code
styles
network
based
hypermediastylederivationvm
กำ
revcs
vm
กำ
codcs
vm
กำ
lcodc
sslc
ss
cod
4
กำ
กำ
marev
cod
กำ
3
5
1
virtual
machine
vm
underlying
mobile
code
styles
notion
virtual
machine
interpreter
style
53
code
must
executed
fashion
preferably
within
controlled
environment
satisfy
security
reliability
concerns
exactly
virtual
machine
style
provides
network
based
style
commonly
used
combined
component
client
server
style
rev
cod
styles
virtual
machines
commonly
used
engine
scripting
languages
including
general
purpose
languages
like
perl
134
task
specific
languages
like
postscript
2
primary
benefits
separation
instruction
implementation
particular
platform
portability
ease
extensibility
visibility
reduced
hard
know
executable
will
simply
looking
code
simplicity
reduced
due
need
manage
evaluation
environment
may
compensated
cases
result
simplifying
static
functionality
3
5
2
remote
evaluation
rev
remote
evaluation
style
50
derived
client
server
virtual
machine
styles
client
component
know
necessary
perform
service
lacks
resources
cpu
cycles
data
source
etc
required
happen
located
remote
site
consequently
client
sends
know
server
component
remote
site
turn
executes
code
using
resources
available
results
execution
sent
back
client
remote
evaluation
style
assumes
provided
code
will
executed
sheltered
environment
impact
clients
server
aside
resources
used
advantages
remote
evaluation
include
ability
customize
server
component's
services
provides
improved
extensibility
customizability
better
efficiency
code
can
adapt
actions
environment
inside
server
opposed
client
making
series
interactions
simplicity
reduced
due
need
manage
evaluation
environment
may
compensated
cases
result
simplifying
static
server
functionality
scalability
reduced
can
improved
server's
management
execution
environment
killing
long
running
resource
intensive
code
resources
tight
management
function
leads
difficulties
regarding
partial
failure
reliability
significant
limitation
however
lack
visibility
due
client
sending
code
instead
standardized
queries
lack
visibility
leads
obvious
deployment
problems
server
trust
clients
3
5
3
code
demand
cod
code
demand
style
50
client
component
access
set
resources
know
process
sends
request
remote
server
code
representing
know
receives
code
executes
locally
advantages
code
demand
include
ability
add
features
deployed
client
provides
improved
extensibility
configurability
better
user
perceived
performance
efficiency
code
can
adapt
actions
client's
environment
interact
user
locally
rather
remote
interactions
simplicity
reduced
due
need
manage
evaluation
environment
may
compensated
cases
result
simplifying
client's
static
functionality
scalability
server
improved
since
can
load
work
client
otherwise
consumed
resources
like
remote
evaluation
significant
limitation
lack
visibility
due
server
sending
code
instead
simple
data
lack
visibility
leads
obvious
deployment
problems
client
trust
servers
3
5
4
layered
code
demand
client
cache
stateless
server
lcodc
ss
example
architectures
complementary
consider
addition
code
demand
layered
client
cache
stateless
server
style
discussed
since
code
can
treated
just
another
data
element
interfere
advantages
lc
ss
style
example
hotjava
web
browser
java
sun
com
allows
applets
protocol
extensions
downloaded
typed
media
advantages
disadvantages
lcodc
ss
just
combination
cod
lc
ss
go
discuss
combination
cod
cs
styles
survey
intended
exhaustive
exhausting
3
5
5
mobile
agent
ma
mobile
agent
style
50
entire
computational
component
moved
remote
site
along
state
code
needs
possibly
data
required
perform
task
can
considered
derivation
remote
evaluation
code
demand
styles
since
mobility
works
ways
primary
advantage
mobile
agent
style
beyond
already
described
rev
cod
greater
dynamism
selection
move
code
application
can
midst
processing
information
one
location
decides
move
another
location
presumably
order
reduce
distance
next
set
data
wishes
process
addition
reliability
problem
partial
failure
reduced
application
state
one
location
time
50
3
6
peer
peer
styles
table
3
5
evaluation
peer
peer
styles
network
based
hypermediastylederivationebi
กำ
c2ebi
lcs
กำ
กำdocs
cs
bdodo
lcs
3
6
1
event
based
integration
ebi
event
based
integration
style
also
known
implicit
invocation
event
system
style
reduces
coupling
components
removing
need
identity
connector
interface
instead
invoking
another
component
directly
component
can
announce
broadcast
one
events
components
system
can
register
interest
type
event
event
announced
system
invokes
registered
components
53
examples
include
model
view
controller
paradigm
smalltalk
80
72
integration
mechanisms
many
software
engineering
environments
including
field
113
softbench
29
polylith
110
event
based
integration
style
provides
strong
support
extensibility
ease
adding
new
components
listen
events
reuse
encouraging
general
event
interface
integration
mechanism
evolution
allowing
components
replaced
without
affecting
interfaces
components
53
like
pipe
filter
systems
higher
level
configuring
architecture
needed
invisible
hand
places
components
event
interface
ebi
systems
also
include
explicit
invocation
complementary
form
interaction
53
applications
dominated
data
monitoring
rather
data
retrieval
ebi
can
improve
efficiency
removing
need
polling
interactions
basic
form
ebi
system
consists
one
event
bus
components
listen
events
interest
course
immediately
leads
scalability
issues
regard
number
notifications
event
storms
components
broadcast
result
events
caused
notification
single
point
failure
notification
delivery
system
can
ameliorated
though
use
layered
systems
filtering
events
cost
simplicity
disadvantages
ebi
systems
can
hard
anticipate
will
happen
response
action
poor
understandability
event
notifications
suitable
exchanging
large
grain
data
53
also
support
recovery
partial
failure
3
6
2
c2
c2
architectural
style
128
directed
supporting
large
grain
reuse
flexible
composition
system
components
enforcing
substrate
independence
combining
event
based
integration
layered
client
server
asynchronous
notification
messages
going
asynchronous
request
messages
going
sole
means
intercomponent
communication
enforces
loose
coupling
dependency
higher
layers
service
requests
may
ignored
zero
coupling
lower
levels
knowledge
notification
usage
improving
control
system
without
losing
advantages
ebi
notifications
announcements
state
change
within
component
c2
constrain
included
notification
flag
delta
state
change
complete
state
representation
possibilities
connector's
primary
responsibility
routing
broadcasting
messages
secondary
responsibility
message
filtering
introduction
layered
filtering
messages
solves
ebi
problems
scalability
improving
evolvability
reusability
well
heavyweight
connectors
include
monitoring
capabilities
can
used
improve
visibility
reduce
reliability
problems
partial
failure
3
6
3
distributed
objects
distributed
objects
style
organizes
system
set
components
interacting
peers
object
entity
encapsulates
private
state
information
data
set
associated
operations
procedures
manipulate
data
possibly
thread
control
collectively
can
considered
single
unit
31
general
object's
state
completely
hidden
protected
objects
way
can
examined
modified
making
request
invocation
one
object's
publicly
accessible
operations
creates
well
defined
interface
object
enabling
specification
object's
operations
made
public
time
keeping
implementation
operations
representation
state
information
private
thus
improving
evolvability
operation
may
invoke
operations
possibly
objects
operations
may
turn
make
invocations
others
chain
related
invocations
referred
action
31
state
distributed
among
objects
can
advantageous
terms
keeping
state
likely
date
disadvantage
difficult
obtain
overall
view
system
activity
poor
visibility
order
one
object
interact
another
must
know
identity
object
identity
object
changes
necessary
modify
objects
explicitly
invoke
53
must
controller
object
responsible
maintaining
system
state
order
complete
application
requirements
central
issues
distributed
object
systems
include
object
management
object
interaction
management
resource
management
31
object
systems
designed
isolate
data
processed
consequence
data
streaming
supported
general
however
provide
better
support
object
mobility
combined
mobile
agent
style
3
6
4
brokered
distributed
objects
order
reduce
impact
identity
modern
distributed
object
systems
typically
use
one
intermediary
styles
facilitate
communication
includes
event
based
integration
brokered
client
server
28
brokered
distributed
object
style
introduces
name
resolver
components
whose
purpose
answer
client
object
requests
general
service
names
specific
name
object
will
satisfy
request
although
improving
reusability
evolvability
extra
level
indirection
requires
additional
network
interactions
reducing
efficiency
user
perceived
performance
brokered
distributed
object
systems
currently
dominated
industrial
standards
development
corba
within
omg
97
international
standards
development
open
distributed
processing
odp
within
iso
iec
66
spite
interest
associated
distributed
objects
fare
poorly
compared
network
based
architectural
styles
best
used
applications
involve
remote
invocation
encapsulated
services
hardware
devices
efficiency
frequency
network
interactions
less
concern
3
7
limitations
architectural
style
promotes
certain
type
interaction
among
components
components
distributed
across
wide
area
network
use
misuse
network
drives
application
usability
characterizing
styles
influence
architectural
properties
particularly
network
based
application
performance
distributed
hypermedia
system
gain
ability
better
choose
software
design
appropriate
application
however
couple
limitations
chosen
classification
first
limitation
evaluation
specific
needs
distributed
hypermedia
example
many
good
qualities
pipe
filter
style
disappear
communication
fine
grained
control
messages
applicable
communication
requires
user
interactivity
likewise
layered
caching
adds
latency
without
benefit
none
responses
client
requests
cacheable
type
distinction
appear
classification
addressed
informally
discussion
style
believe
limitation
can
overcome
creating
separate
classification
tables
type
communication
problem
example
problem
areas
include
among
others
large
grain
data
retrieval
remote
information
monitoring
search
remote
control
systems
distributed
processing
second
limitation
grouping
architectural
properties
cases
better
identify
specific
aspects
example
understandability
verifiability
induced
architectural
style
rather
lumping
together
rubric
simplicity
particularly
case
styles
might
improve
verifiability
expense
understandability
however
abstract
notion
property
also
value
single
metric
since
want
make
classification
specific
two
styles
impact
category
one
solution
classification
presented
specific
properties
summary
property
regardless
initial
survey
classification
necessary
prerequisite
classifications
might
address
limitations
3
8
related
work
3
8
1
classification
architectural
styles
patterns
area
research
directly
related
chapter
identification
classification
architectural
styles
architecture
level
patterns
shaw
117
describes
architectural
styles
later
expanded
garlan
shaw
53
preliminary
classification
styles
presented
shaw
clements
122
repeated
bass
et
al
9
two
dimensional
tabular
classification
strategy
used
control
data
issues
primary
axes
organized
following
categories
features
kinds
components
connectors
used
style
control
shared
allocated
transferred
among
components
data
communicated
system
data
control
interact
type
reasoning
compatible
style
primary
purpose
taxonomy
identify
style
characteristics
rather
assist
comparison
concludes
small
set
rules
thumb
form
design
guidance
unlike
chapter
shaw
clements
122
classification
assist
evaluating
designs
way
useful
application
designer
problem
purpose
building
software
build
specific
shape
topology
component
type
organizing
classification
fashion
help
designer
find
style
corresponds
needs
also
mixes
essential
differences
among
styles
issues
incidental
significance
obscures
derivation
relationships
among
styles
furthermore
focus
particular
type
architecture
network
based
applications
finally
describe
styles
can
combined
effect
combination
buschmann
meunier
27
describe
classification
scheme
organizes
patterns
according
granularity
abstraction
functionality
structural
principles
granularity
abstraction
separates
patterns
three
categories
architectural
frameworks
templates
architectures
design
patterns
idioms
classification
addresses
issues
dissertation
separation
concerns
structural
principles
lead
architectural
properties
covers
two
architectural
styles
described
classification
considerably
expanded
buschmann
et
al
28
extensive
discussion
architectural
patterns
relation
software
architecture
zimmer
137
organizes
design
patterns
using
graph
based
relationships
making
easier
understand
overall
structure
patterns
gamma
et
al
51
catalog
however
patterns
classified
architectural
patterns
classification
based
exclusively
derivation
uses
relationships
rather
architectural
properties
3
8
2
distributed
systems
programming
paradigms
andrews
6
surveys
processes
distributed
program
interact
via
message
passing
defines
concurrent
programs
distributed
programs
kinds
processes
distributed
program
filters
clients
servers
peers
interaction
paradigms
communication
channels
interaction
paradigms
represent
communication
aspects
software
architectural
styles
describes
paradigms
one
way
data
flow
networks
filters
pipe
filter
client
server
heartbeat
probe
echo
broadcast
token
passing
replicated
servers
replicated
workers
bag
tasks
however
presentation
perspective
multiple
processes
cooperating
single
task
rather
general
network
based
architectural
styles
sullivan
notkin
126
provide
survey
implicit
invocation
research
describe
application
improving
evolution
quality
software
tool
suites
barrett
et
al
8
present
survey
event
based
integration
mechanisms
building
framework
comparison
seeing
systems
fit
within
framework
rosenblum
wolf
114
investigate
design
framework
internet
scale
event
notification
concerned
scope
requirements
ebi
style
rather
providing
solutions
network
based
systems
fuggetta
et
al
50
provide
thorough
examination
classification
mobile
code
paradigms
chapter
builds
upon
work
extent
compare
mobile
code
styles
network
capable
styles
place
within
single
framework
set
architectural
definitions
3
8
3
middleware
bernstein
22
defines
middleware
distributed
system
service
includes
standard
programming
interfaces
protocols
services
called
middleware
act
layer
os
networking
software
industry
specific
applications
umar
131
presents
extensive
treatment
subject
architecture
research
regarding
middleware
focuses
problems
effects
integrating
components
shelf
middleware
di
nitto
rosenblum
38
describe
usage
middleware
predefined
components
can
influence
architecture
system
developed
conversely
specific
architectural
choices
can
constrain
selection
middleware
dashofy
et
al
35
discuss
use
middleware
c2
style
garlan
et
al
56
point
architectural
assumptions
within
shelf
components
examining
authors'
problems
reusing
subsystems
creating
aesop
tool
architectural
design
54
classify
problems
four
main
categories
assumptions
can
contribute
architectural
mismatch
nature
components
nature
connectors
global
architectural
structure
construction
process
3
9
summary
chapter
presented
survey
common
architectural
styles
network
based
application
software
within
classification
framework
evaluates
style
according
architectural
properties
induce
applied
architecture
prototypical
network
based
hypermedia
system
overall
classification
summarized
table
3
6
next
chapter
uses
insight
garnered
survey
classification
hypothesize
methods
developing
evaluating
architectural
style
guide
design
improvements
modern
world
wide
web
architecture
table
3
6
evaluation
summarystylederivationpf
กำ
upfpf
กำ
rr
rr
cs
ls
lcscs
ls
csscs
sscss
lc
sslcs
ss
กำ
rscs
rdacs
vm
กำ
revcs
vm
กำ
codcs
vm
กำ
lcodc
sslc
ss
cod
4
กำ
กำ
marev
cod
กำ
ebi
กำ
c2ebi
lcs
กำ
กำdocs
cs
bdodo
lcs
top
prev
next
roy
thomas
fielding
2000
rights
reserved
reference
work
