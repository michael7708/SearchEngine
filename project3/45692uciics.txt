ics 32 winter 2013 code example protocols part 1 
protocols part 1 implementing custom network protocol writing programs multiple module 
ics
32
winter
2013
news
course
reference
schedule
project
guide
code
examples
alex
ics
32
winter
2013
code
example
protocols
part
1
background
protocols
write
program
will
store
data
file
read
back
later
decide
file
format
specifies
detail
data
will
look
like
stored
file
many
existing
file
formats
like
jpeg
format
image
files
can
define
pre
existing
format
appropriate
particular
use
write
programs
communicate
across
sockets
similar
problem
programs
either
side
connection
will
sending
data
must
agreement
data
will
look
like
one
program
will
send
data
format
program
will
understand
programs
communicate
across
sockets
will
always
need
agree
protocol
file
formats
well
known
protocols
already
defined
specific
purposes
like
http
protocol
describes
data
transferred
web
smtp
protocol
predominantly
used
send
email
can
also
define
protocol
need
something
specific
particular
use
ics
32
text
file
sharing
protocol
lecture
began
exploring
implementation
protocol
sending
text
file
one
program
another
via
socket
called
protocol
i32tfsp
ics
32
text
file
sharing
protocol
similar
problem
project
2
needed
agree
protocol
looked
like
side
client
server
say
say
defined
follows
clientserverwait
connectioninitiate
connectioni32tfsp
helloi32tfsp
hifile
filenamedescription
description
fileyeslines
number
lines
filecontents
fileendgot
itcloseclose
alternatively
receiving
file
name
description
client
server
can
opt
send
back
case
parties
close
connections
idea
user
might
one
decide
whether
file
worth
accepting
given
name
description
modules
import
sure
read
sections
textbook
chapter
7
1
7
2
7
4
discuss
modules
import
statement
namespaces
critical
knowledge
necessary
writing
programs
one
module
programs
get
larger
best
separating
modules
contain
related
subsets
functionality
example
program
shares
text
files
using
i32tfsp
protocol
better
isolating
protocol
module
building
user
interface
whatever
outer
shell
need
separate
module
number
benefits
keeping
large
complex
program
organized
allowing
us
put
one
outer
shell
around
protocol
code
expect
begin
implement
projects
going
forward
python
programs
can
think
modules
collections
functions
classes
constants
might
call
public
ones
expect
modules
need
order
solve
problems
others
might
call
private
ones
used
utilities
within
module
allow
break
might
otherwise
large
complex
functions
smaller
pieces
core
functionality
module
intending
provide
modules
things
expect
change
added
disappear
tweak
implementation
python
programmers
traditionally
separate
public
private
prefixing
names
private
functions
classes
constants
single
underscore
'
'
character
since
private
functions
nature
ones
likely
changed
added
removed
time
underscore
sort
warning
users
module
exercise
caution
quite
probably
stay
away
functions
likely
change
ways
will
break
callers
adopt
underscore
convention
private
members
modules
now
taking
opportunity
think
design
implemented
protocol
one
long
function
opted
approach
advocated
lot
quarter
breaking
progressively
smaller
functions
meaningful
names
well
named
parameters
code
example
view
good
example
want
fair
amount
complexity
worth
isolating
can
think
one
thing
time
instead
everything
code
lecture
built
part
protocol
implementation
will
continue
implementation
next
lecture
alter
design
will
presented
separate
code
example
afterward
i32tfsp
py
implementation
i32tfsp
protocoltext
file
server
py
short
program
implements
console
mode
text
file
servertext
file
client
py
short
program
implements
console
mode
text
file
client
download
files
place
directory
important
directory
python
will
able
find
one
imports
fancier
things
can
generally
keep
programs
single
directory
get
much
much
larger
running
server
client
using
idle
start
two
instances
idle
server
client
separate
programs
needs
interpreter
run
load
execute
text
file
server
py
one
instance
load
execute
text
file
client
py
