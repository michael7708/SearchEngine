cs 221 information retrieval winter 2009 2010 department informatics uci 
assignment schedule 
computer
science
221
information
retrieval
winter
2009
2010
department
informatics
donald
bren
school
information
computer
sciences
home
administrative
policies
course
structure
materials
assignment
schedule
week
1
web
search
basics
tuesday
lecture
1
1
5
learning
objective
understand
scope
objectives
course
due
today
1
wikipedia
entry
vannevar
bush
2
may
think
atlantic
monthly
july
1945
reprinted
acm
chi
interactions
march
1996
3
textbook
chapter
19
web
search
basics
4
simple
proven
approaches
text
retrieval
robertson
jones
commentary
paper
provides
brief
well
informed
technically
accurate
overview
state
art
text
retrieval
least
1997
introduces
ideas
terms
matching
term
weighting
strategies
relevance
weighting
little
data
structures
evidence
effectiveness
view
exemplary
job
introducing
terminology
ir
main
issues
text
retrieval
numerate
technically
well
informed
audience
also
well
chosen
list
references
notes
artifacts
class
go
names
go
syllabus
web
search
basics
non
quicktime
version
thursday
lecture
2
1
7
learning
objective
understand
social
economic
history
search
notes
artifacts
class
web
search
basics
non
quicktime
version
intermission
week
2
web
search
basics
web
crawling
indices
sunday
1
10
due
today
assignment
01
tuesday
lecture
3
1
12
learning
objective
understand
search
engines
meet
needs
users
understand
impact
spam
search
engines
due
today
1
textbook
chapter
20
web
crawling
indices
2
stuff
ve
seen
system
personal
information
retrieval
re
use
dumais
cutell
cadiz
jancke
sarin
robbins
sigir
2003
commentary
paper
addresses
increasingly
important
problem
search
manage
personal
collections
electronic
information
addresses
important
user
centered
problem
paper
presents
practical
user
interface
make
system
useful
paper
includes
large
scale
user
oriented
testing
demonstrates
efficacy
system
evaluation
uses
quantitative
qualitative
data
make
case
think
paper
destined
classic
may
eventually
define
people
manage
files
decade
moreover
well
written
can
serve
good
model
developers
system
design
evaluation
students
learning
ir
systems
evaluation
te
notes
artifacts
class
user
needs
spam
non
quicktime
version
lecture
03
audio
intermission
thursday
lecture
4
1
14
learning
objective
understand
involved
webcrawling
understand
architecture
webcrawling
mercatur
due
today
1
please
read
article
google
'may
pull
china
gmail
cyber
attack'
notes
artifacts
class
spam
non
quicktime
versionweb
search
basics
non
quicktime
versionintermission
discussion
article
week
3
index
construction
monday
1
18
due
today
quiz
01
readings
week
1
week
2
tuesday
lecture
5
1
19
learning
objective
understand
involved
webcrawling
understand
architecture
frontier
management
mercator
notes
artifacts
class
web
crawling
dns
url
frontier
queue
non
quicktime
version
lecture
05
audio
intermissiongoogle
real
time
search
thursday
lecture
6
1
21
learning
objective
understand
index
created
understand
term
document
matrix
understand
algorithms
creating
index
notes
artifacts
class
connectivity
server
index
construction
non
quicktime
version
non
quicktime
version
lecture
06
audio
intermission
week
4
querying
scoring
sunday
1
24
due
today
assignment
02
tuesday
lecture
7
1
26
learning
objective
understand
mapreduce
due
today
1
textbook
chapter
4
index
construction
2
webgraph
framework
compression
techniques
boldi
vigna
www
2004
abstract
studying
web
graphs
often
difficult
due
large
size
recently
several
proposals
published
various
techniques
allow
store
web
graph
memory
limited
space
exploiting
inner
redundancies
web
webgraph
framework
suite
codes
algorithms
tools
aims
making
easy
manipulate
large
web
graphs
papers
presents
compression
techniques
used
webgraph
centred
around
referentiation
intervalisation
turn
dual
webgraph
can
compress
webbase
graph
118
mnodes
1
glinks
little
3
08
bits
per
link
transposed
version
littleas
2
89
bits
per
link
3
web
graph
kumar
raghavan
rajagopalan
sivakumar
tomkins
upfal
pods
2000
abstract
pages
hyperlinks
world
wide
web
may
viewed
nodes
edges
directed
graph
graph
billion
nodes
today
several
billion
links
appears
grow
exponentially
time
many
reasons
mathematical
sociological
commercial
studying
evolution
graph
first
review
set
algorithms
operate
web
graph
addressing
problems
web
search
automatic
community
discovery
classification
recall
number
measurements
properties
web
graph
noting
traditional
random
graph
models
explain
observations
propose
new
family
random
graph
models
notes
artifacts
class
mapreduce
non
quicktime
version
lecture
08
audio
thursday
lecture
8
1
28
learning
objective
look
querying
supported
posting
lists
notes
artifacts
class
querying
non
quicktime
version
non
quicktime
version
week
5
scoring
term
weighting
vector
space
model
sunday
1
31
due
today
assignment
03
hadoop
light
tuesday
lecture
9
2
2
learning
objective
understand
techniques
producing
ranked
scores
queries
due
today
1
textbook
chapter
1
boolean
retrieval
2
textbook
chapter
6
scoring
term
weighting
vector
space
model
3
anatomy
large
scale
hypertextual
web
search
engine
brin
page
www1998
commentary
paper
work
reports
impact
everyday
life
ir
area
major
contribution
paper
recognition
relevant
search
results
greatly
valued
searchers
others
reflecting
evaluation
procedures
brin
page
able
see
true
value
web
specific
methods
like
anchor
text
paper
presents
highly
efficient
scalable
implementation
ranking
method
now
delivers
high
quality
results
billion
people
billions
pages
6
000
queries
per
second
also
hints
technology
google
users
now
take
granted
spam
rejection
high
speed
query
based
summaries
source
clustering
context
location
sensitive
search
ir
bibliometrics
researchers
done
relevance
proximity
link
analysis
efficiency
scalability
summarization
evaluation
1998
paper
showed
make
work
web
non
ir
engineer
attempting
build
web
based
retrieval
system
scratch
must
first
port
call
notes
artifacts
class
vector
space
scoring
pdf
non
quicktime
version
thursday
lecture
10
2
4
learning
objective
understand
posting
list
lends
efficient
computation
notes
artifacts
class
vector
space
scoring
efficient
computation
pdf
non
quicktime
version
week
6
matrix
decompositions
latent
semantic
indexing
tuesday
lecture
11
2
9
learning
objective
understand
transformation
term
space
semantic
space
notes
artifacts
class
pdf
non
quicktime
version
pdf
non
quicktime
version
pdf
non
quicktime
versionintermission
thursday
lecture
12
2
11
learning
objective
understand
run
query
simple
lsa
system
understand
background
pagerank
notes
artifacts
class
querying
lsi
pagerank
pdf
non
quicktime
version
pdf
non
quicktime
version
pdf
non
quicktime
version
week
7
link
analysis
tuesday
lecture
13
2
16
learning
objective
understand
pagerank
calculated
due
today
1
textbook
chapter
18
matrix
decompositions
latent
semantic
analysis
2
textbook
chapter
21
link
analysis
3
unsupervised
named
entity
extraction
web
experimental
study
etzioni
et
al
paper
represents
new
generation
ir
work
attempts
build
bag
words
information
retrieval
also
attempts
make
sense
information
well
notes
artifacts
class
pagerank
pdf
non
quicktime
version
class
admin
notes
thursday
lecture
14
2
18
learning
objective
understand
evaluation
needed
can
done
notes
artifacts
class
evaluation
ir
pdf
non
quicktime
versionintermissiontineye
week
8
evaluation
information
retrieval
monday
2
22
originally
due
today
now
due
anytime
assignment
05
assignment
04
hadoop
heavy
tuesday
lecture
15
2
23
learning
objective
understand
conduct
ranked
unranked
evaluation
ir
engines
notes
artifacts
class
evaluation
ir
pdf
non
quicktime
version
thursday
lecture
16
2
25
learning
objective
understand
aardvark
social
search
works
differs
web
search
notes
artifacts
class
aardvark
social
search
pdf
non
quicktime
version
week
9
social
search
advances
pagerank
pubsubhubbub
tokyocabinet
twitter
hosebird
sunday
2
28
due
today
assignment
05
querying
monday
3
1
due
today
1
anatomy
large
scale
social
search
engine
horowitz
kamvar
goal
paper
follow
example
providing
thorough
presentation
approach
architecture
algorithms
interfaces
issues
involved
aardvark's
new
social
search
paradigm
2
link
analysis
private
weighted
graphs
sakuma
kobayashi
solutions
designed
privacy
preserving
expansions
well
known
link
analysis
methods
pagerank
hits
outcomes
protocols
completely
equivalent
pagerank
hits
furthermore
protocols
theoretically
guarantee
private
link
informa
tion
possessed
node
revealed
nodes
3
impact
crawl
policy
web
search
effectiveness
sakuma
kobayashi
crawl
selection
policy
direct
influence
web
search
effectiveness
useful
page
selected
crawling
will
also
absent
search
results
yet
little
work
measuring
effect
tuesday
lecture
17
3
2
learning
objective
state
art
using
calculating
pagerank
notes
artifacts
class
pagerank
guided
crawl
techniques
pdf
non
quicktime
version
thursday
lecture
18
3
4
learning
objective
able
differentiate
technical
features
pubsubhubub
twitter
notes
artifacts
class
comparing
pubsubhubbub
twitter
pdf
non
quicktime
version
week
10
alternative
vector
spaces
social
search
sunday
3
7
due
today
1
using
mapreduce
compute
pagerank
michael
nielsen
2
link
analysis
private
weighted
graphs
sakuma
kobayashi
solutions
designed
privacy
preserving
expansions
well
known
link
analysis
methods
pagerank
hits
outcomes
protocols
completely
equivalent
pagerank
hits
furthermore
protocols
theoretically
guarantee
private
link
informa
tion
possessed
node
revealed
nodes
3
good
abandonment
mobile
pc
internet
search
li
huffman
tokuda
4
less
paradox
choice
search
engine
use
oulasvirta
hukkinen
schwartz
5
sourcerer
mining
searching
internet
scale
software
repositories
linstead
et
al
tuesday
lecture
19
3
9
learning
objective
cool
things
going
page
rank
notes
artifacts
class
implementing
pagerank
mapreduce
pdf
non
quicktime
versionlink
analysis
private
weighted
graphs
pdf
non
quicktime
version
thursday
lecture
20
3
11
learning
objective
user
factors
search
engines
code
search
notes
artifacts
class
good
abadondonment
mobile
pc
search
pdf
non
quicktime
versionwhen
less
paradox
choice
search
engine
use
pdf
non
quicktime
versionsourcerer
mining
searching
internet
scale
software
repositories
pdf
non
quicktime
version
xo
xo
finals
week
due
week
assignment
06
alternative
search
engine
quiz
questions
1
write
10
multiple
choice
questions
anything
covered
quiz
2
2
indicate
question
comes
3
provide
4
possible
answers
4
indicate
correct
answer
5
can
come
combination
papers
text
book
lectures
requirement
coverage
6
submit
pdf
file
questions
https
eee
uci
edu
toolbox
dropbox
index
php
op
openfolder
folder
191967
final
projects
six
degree
separation
finder
corey
schaninger
lakshmi
thyagarajan
project
report
demo
site
group
put
together
web
interface
backend
system
search
path
two
actors
imdb
1
5
million
actors
connected
1
6
million
movies
key
challenge
project
make
queries
fast
user
given
amount
paths
current
system
calculate
shortest
path
rather
fastest
path
future
work
includes
live
updating
search
tries
find
shortest
path
allowing
user
disallow
certain
connections
including
kinds
connections
besides
just
movie
together
example
nicolas
cage
amos
andrew
1993
jeff
blumenkrantz
anastasia
1997
meg
ryan
queries
can
take
1
183
seconds
depending
actor
pair
bilingual
search
engine
even
cheng
karthik
raman
project
report
gui
deployed
web
say
happen
know
multiple
languages
search
engine
give
results
just
one
instead
maybe
give
best
results
language
happen
know
premise
project
tell
computer
languages
know
will
translate
query
languages
find
best
results
different
language
specific
indices
ranked
together
key
challenges
project
managing
translations
developing
rankings
different
corpora
compared
twitter
trending
guangqiang
li
ye
wang
project
report
gui
deployed
web
real
time
search
hot
thrill
moment
find
trending
twitter
sphere
wait
want
know
everyone's
trending
terms
project
figuring
hot
among
just
friends
group
applied
pagerank
twitter
create
twitterrank
key
challenge
project
determining
create
graph
tweets
using
graph
identify
trending
terms
photolyrics
nadine
amsel
nathanael
lenart
project
report
gui
deployed
web
music
visualizers
fully
awesome
well
now
can
photolyrics
just
upload
mp3
photolyrics
server
will
sliced
diced
give
back
slidehow
pictures
based
lyrics
song
key
challenge
project
similar
tweetrank
project
determine
important
word
lyrics
song
well
project
based
tf
idf
score
wikipedia
result
user
uploads
eye
tiger
system
gets
info
id3
tags
file
gets
lyrics
song
web
determines
words
interesting
shows
slideshow
based
interesting
images
future
enhancements
include
making
plug
itunes
code
snippet
search
phitchayaphong
tantikul
hye
jung
choi
project
report
gui
located
although
lot
code
sharing
going
web
right
now
many
people
actually
search
code
search
engines
things
cut
paste
bet
authors
project
focussed
developers
searching
code
need
quick
refresher
program
particular
data
structure
need
remember
connect
socket
project
search
engine
code
tutorials
key
challenge
project
finding
pages
code
text
crawling
parsing
indexing
presenting
users
clever
way
showed
code
snippet
talking
use
information
retrieval
engine
use
time
calculating
pagerank
wikipedia
hadoop
xiaozhi
yu
project
report
gui
deployed
web
project
implemented
really
well
engineered
implementation
pagerank
hadoop
things
learned
project
iterate
multiple
mapreduce
jobs
one
uploaded
jar
just
appreciated
beauty
way
output
file
one
iteration
fed
directly
next
iteration
without
processing
course
since
mapreduce
naturally
scales
really
large
datasets
find
dense
clusters
web
graph
minh
doan
ching
wei
huang
siripen
pongpaichet
project
report
gui
deployed
web
project
another
great
use
mapreduce
instead
finding
pagerank
pages
wikipedia
however
authors
using
pagerank
find
dense
clusters
sets
pages
dense
interconnections
among
algorithm
applied
graph
data
structure
web
graph
will
identify
lots
self
referencing
pages
helpful
identifying
clusters
link
farms
spammers
linking
unusual
occurences
graph
case
wikipedia
found
collections
pages
thing
set
pages
mountains
france
set
pages
describing
federalist
papers
applying
gamma
coding
posting
list
storage
ali
bagherzandi
kerim
yassin
oktay
project
report
gui
located
video
demo
project
took
challenge
increasing
speed
wikipedia
search
engine
also
increasing
set
words
considered
cosine
ranking
key
challenge
reduce
size
posting
list
something
quickly
read
disk
main
performance
bottleneck
answer
gamma
coding
technique
stores
small
numbers
fewer
bits
larger
numbers
normally
integers
assumed
upper
bound
int
max
gamma
coding
makes
assumption
efficiently
represents
numbers
upper
bound
using
gamma
coding
posting
list
size
reduced
queries
much
much
faster
