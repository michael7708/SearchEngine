lab assignment guidelines grading 
lab assignments guidelines grading due dates 
lab
assignments
guidelines
grading
due
dates
preparation
ready
lab
assignment
sure
read
thoroughly
commence
work
review
material
lab
assumes
know
lab
will
need
lab
assignment
will
also
need
way
back
work
additional
items
needed
particular
lab
will
list
lab
assignment
working
turning
labs
time
complete
assignments
others
due
dates
appear
take
length
time
allotted
assignment
indication
long
will
take
work
don
waste
first
week
two
week
assignment
work
assignments
strongy
encourage
seek
assistance
advice
programming
partner
students
instructor
sources
consistent
following
course
honesty
rules
discussed
course
reference
turn
assignments
via
checkmate
web
application
use
checkmate
simply
go
checkmate
ics
uci
edu
log
using
ucinetid
follow
instructions
get
message
security
certificates
just
click
continue
must
ucinetid
use
checkmate
yet
activated
ucinetid
right
away
instructions
ucinetid
activation
page
checkmate
proved
reliable
think
working
correctly
read
instructions
carefully
try
action
still
problems
send
email
instructor
describing
problem
precisely
possible
can
fix
problems
know
backups
require
keep
backup
computer
copy
assignment
just
case
something
happens
copy
turn
example
checkmate
database
gets
hopelessly
corrupted
yet
happen
may
need
provide
us
another
copy
work
work
can
grade
will
receive
grade
lab
room
availability
may
work
instructional
ics
lab
ics
183
189
192
364
time
open
reserved
particular
class
function
see
lecture
lab
section
course
reference
details
allowed
programming
environments
use
java
language
practice
course
implemented
sun
java
standard
edition
sdk
7
0
also
called
version
1
7
also
provide
take
course
standard
eclipse
classic
programming
environment
labs
provide
existing
code
will
partially
complete
source
files
java
7
class
files
part
eclipse
project
note
provided
files
compatible
versions
java
earlier
java
7
may
complete
lab
work
anywhere
using
java
environment
legitimate
access
particular
can
work
home
don
use
sun
version
java
however
fair
sure
can
check
running
program
obtain
full
credit
assignment
work
must
compile
run
correctly
sun
java
standard
edition
sdk
version
7
eclipse
environment
ics
lab
network
particular
irrelevant
whether
program
runs
perfectly
system
run
ics
lab
network
eclipse
using
java
7
will
receive
full
may
receive
credit
grading
due
dates
every
lab
assignment
manual
describes
assignment
needs
turned
labs
percentage
count
towards
total
lab
grade
due
dates
smiley
faces20
october
18
2012animated
smileys20
october
28
2012animated
smileys
graphics
applet15
november
15
2012smileys
races20
november
27
2012a
donation
music
archive25
december
10
2012
labs
due
11
pm
sharp
dates
given
lab
turned
later
due
incurs
late
penalty
discussed
assignments
optional
work
included
may
earn
one
additional
assignment
point
optional
work
depending
upon
much
extra
work
well
amazing
job
lab
see
point
added
total
total
possible
number
points
thus
undertaking
work
will
hurt
lab
portion
course
grade
lab
assignment
points
spill
exam
points
even
optional
points
put
100
lab
points
100
lab
points
will
counted
computing
course
grade
get
points
optional
work
unless
required
work
complete
correct
will
grade
programs
using
following
five
point
scale
note
get
four
points
consider
full
credit
lab
get
four
points
every
assignment
will
100
possible
lab
points
note
grade
depends
issues
programming
design
style
well
correctness
program
function
completeness
program
contain
exactly
features
required
0
points
turn
work
1
point
work
meager
poorly
done
considered
acceptable
academic
professional
circles
2
points
work
reasonable
quality
completeness
program
runs
implements
least
main
requirements
assignmentand
shows
least
basic
understanding
material
presentation
may
lacking
written
work
shows
poor
composition
spreadsheet
hard
read
database
poorly
organized
program
hard
follow
design
cumbersome
3
points
work
high
quality
complete
well
presented
perhaps
minor
errors
design
style
problems
grade
good
solid
extraordinary
work
4
points
work
high
quality
demonstrates
full
complete
understanding
material
lab
covers
polished
presentation
programming
component
assignment
complete
contains
exactly
features
specified
correct
functions
errors
normally
highest
grade
awarded
5
points
work
highest
professional
academic
quality
earn
highest
praise
professional
professor
expect
grade
rarely
awarded
difficult
determine
whether
work
best
represented
score
1
points
ranging
0
4
may
award
grade
0
5
half
points
may
awarded
expect
unusual
event
programs
will
graded
mostly
correctness
completeness
will
also
depend
qualities
efficiency
ease
use
reliability
modifiability
clarity
quickly
easily
code
can
understood
reasonableness
design
well
programs
follow
class
style
standards
professional
quality
program
must
score
highly
categories
part
class
help
learn
write
professional
programs
particular
can
lose
points
poor
design
bad
programming
style
even
program
correctly
completely
implements
functional
requreiments
assignment
specific
grading
criteria
add
extend
criteria
given
assignment
will
describe
reviewing
graded
assignments
want
review
graded
assignment
can
office
hours
partial
late
assignments
lab
time
assignment
must
submitted
checkmate
due
date
time
assignment
submitted
time
will
incur
penalty
one
point
day
part
day
late
example
earn
three
points
assignment
two
days
late
score
will
one
point
four
grade
latest
version
assignment
submitted
instance
turn
assignment
may
5
may
6
will
grade
assignment
submitted
may
6
particular
submit
assignment
parts
instance
suppose
submit
part
assignment
may
2
rest
may
3
will
grade
may
3
submission
treat
entire
assignment
will
penalize
late
assignment
late
significant
circumstances
beyond
control
incapacitating
illness
injury
major
emergency
conflicts
due
dates
classes
job
sufficient
cause
waive
penalty
unable
turn
assignment
due
best
notify
instructor
ahead
time
make
arrangements
alternative
due
date
provide
advance
notice
turn
assignment
soon
due
date
possible
think
penalty
waived
email
instructor
ask
penalty
waiver
include
explanation
unavoidable
circumstance
prevented
turning
assignment
time
lab
assignments
academic
honesty
take
cheating
academic
dishonesty
seriously
work
class
including
lab
assignments
subject
uci
ics
academic
honesty
policies
well
policies
course
see
course
reference
links
ics
uci
policies
general
policies
course
also
course
academic
honesty
policies
specific
lab
assignments
written
code
class
employer
similar
write
complete
lab
exercises
quite
right
adapt
previous
class
work
use
class
wish
also
may
reuse
work
employer
provided
employer
permission
permission
right
adapt
someone
else
work
without
explicit
permission
often
violation
academic
honesty
policies
potentially
violation
copyright
laws
can
adapt
code
course
staff
gives
provided
note
program
received
information
giving
others
credit
work
makes
appear
work
violation
academic
honesty
policies
may
use
code
others
give
code
received
class
tutorial
session
unless
explicit
permission
may
adapt
code
text
source
given
explicit
permission
statement
effect
lab
assignment
announcement
lecture
lab
agreement
reach
instructor
event
must
document
work
based
upon
another
work
gave
permission
use
anything
less
major
violation
academic
integrity
assignment
one
completing
assignment
result
joint
work
another
person
particular
person
work
assignment
another
person
turn
part
individual
work
turning
work
another
student
completed
assignment
took
work
presenting
work
particularly
serious
infraction
academic
honesty
policies
assignment
done
pair
programming
assignment
joint
work
programming
partner
programming
partner
turing
work
person
source
subject
policies
described
compare
work
hand
electronically
assignments
submitted
students
classes
sometimes
sources
code
book
internet
find
similarities
appear
indicate
assignment
contains
work
except
allowed
will
investigate
see
academic
honesty
polices
violated
receive
zero
assignment
lower
couse
grade
otherwise
received
including
egregious
repeated
cases
academic
dishonesty
expulsion
ics
major
even
uci
revision
history
text
point
prepared
norman
jacobson
september
1996
similar
ics
23
materials
revised
spring
1997
offering
ics
23
march
1997
revised
spring
1998
offering
ics
23
march
1998
revised
fall
1998
offering
ics
23
september
1998
revised
winter
1999
offering
ics
23
december
1998
minor
revisions
fall
2001
offering
ics
23
september
2001
minor
revisions
winter
2002
offering
ics
23
december
2001
revised
spring
2002
offering
ics
23
march
2002
revised
explicit
academic
dishonesty
state
penalty
mislabeling
folders
describe
lars
fully
norman
jacobson
march
2002
minor
revisions
winter
2003
offering
ics
23
december
2002
minor
revisions
winter
2004
offering
ics
23
clarify
text
reflect
use
checkmate
january
2004
minor
revisions
fall
2005
offering
ics
23
june
2005
spring
2006
offering
ics23
march
2006
fall
2006
offering
august
2006
revision
reflect
late
policy
last
lab
labs
minor
revisions
clarity
december
2006
minor
revisions
clarity
norman
jacobson
december
2008
march
2009
minor
updates
reflect
use
help
center
update
due
dates
spring
2010
norman
jacobson
march
2010
made
minor
copy
edits
updated
due
dates
spring
2011
norman
jacobson
march
2011
made
minor
copy
edits
updated
due
dates
spring
2012
norman
jacobson
march
2012
updatred
reflect
ics45j
particular
pair
programming
assignments
norman
jacobson
august
2012
writing
professional
programs
using
good
coding
style
important
many
reasons
professional
programmers
need
able
read
understand
code
months
even
years
originally
writing
also
read
understand
code
written
others
often
absence
original
programmer
nothing
frustrating
programmer
inheriting
responsibility
someone
else's
code
find
code
designed
poorly
written
cryptically
documented
shabbily
professional
circles
critical
programmers
write
code
clear
style
adequate
documentation
course
consistent
style
makes
assignments
easier
understand
thus
us
grade
accurately
java
code
write
course
follow
style
documentation
conventions
discussed
areas
style
addressed
use
style
code
given
particular
assignment
provided
code
assignment
code
address
style
issue
follow
style
used
course
textbook
style
guide
found
appendix
address
issue
ask
instructor
style
employ
change
names
give
functioning
code
provide
particular
leave
names
classes
interfaces
methods
public
items
alone
modifying
names
actions
provided
code
easily
break
system
components
system
working
rely
upon
names
actions
comments
crucial
include
comments
top
java
file
write
modify
include
name
student
id
number
ucinetid
need
include
comments
files
give
change
every
class
method
field
comment
briefly
explains
purpose
method
include
high
level
description
algorithm
uses
algorithm
isn
obvious
reading
code
also
document
purpose
method
parameters
assumptions
describe
method
returns
void
within
body
methods
comment
code
whose
purpose
obvious
necessary
include
comment
every
line
appropriate
instead
one
comment
explains
purpose
group
several
related
lines
code
constants
except
obvious
uses
0
1
defined
named
meaningfully
example
writing
array
hard
coded
maximum
size
256
elements
define
static
final
field
maximum
elements
use
field
code
rather
literal
integer
256
naming
conventions
classes
members
constants
class
names
capitalized
class
names
multiple
words
subsequent
word
capitalized
underscore
separating
words
tunes
irishfolktunes
names
class
members
methods
fields
begin
lowercase
letter
subsequent
words
capitalized
underscore
separating
words
playsong
songtitle
named
constants
named
using
capital
letters
underscores
separating
words
euler
maximum
elements
variable
parameter
method
class
names
fact
program
names
meaningful
except
counters
loop
control
variables
may
simple
names
tradition
imparts
meaning
names
method
one
task
well
particular
main
just
get
ball
rolling
bulk
work
done
indirectly
via
method
call
two
method
longer
10
20
lines
think
carefully
whether
undertaking
many
chores
directly
executing
details
instead
done
called
upon
methods
rewrite
method
calls
methods
handle
additioal
chores
details
every
field
method
within
class
declared
using
access
control
modifier
public
private
protected
protected
access
used
truly
necessary
whitespace
appear
method
argument
around
binary
operator
example
createfile
alex
write
instead
createfile
alex
write
instead
one
single
line
code
typically
longer
70
80
characters
don
afraid
break
long
lines
multiple
lines
example
method
call
large
number
parameters
put
one
line
next
etc
line
longer
80
characters
matching
opening
closing
curly
braces
aligned
column
means
opening
curly
brace
follows
statement
appear
directly
letter
line
conditional
expression
statements
within
curly
braces
indented
four
spaces
one
tab
relative
brace
statement
appear
line
opening
curly
brace
two
style
rules
enforce
particular
rigor
class
violating
indicates
either
poor
program
design
often
causes
major
difficult
catch
errors
may
use
break
except
break
case
switch
statement
may
combine
shortcut
operators
expression
example
allowed
remember
significant
violation
style
standards
result
lower
score
lab
written
david
kay
1990
including
much
material
adapted
permission
appendix
programming
people
pascal
david
kay
mayfield
1985
revisions
made
reflect
think
pascal
joe
hummel
norman
jacobson
january
1992
revised
norman
jacobson
fall
1992
grading
form
david
kay
winter
1991
revised
norman
jacobson
fall
1993
fall
1994
revisions
made
reflect
codewarrior
norman
jacobson
april
1996
revised
norman
jacobson
ics
23e
september
1996
major
revisions
ics23
spring
1997
norman
jacobson
march
1997
ics
23
spring
1998
march
1998
ics23
fall
1998
september
1998
ics23
winter
1999
december
1998
revised
reflect
use
java
norman
jacobson
september
2001
minor
revisions
winter
2002
offering
ics
23
norman
jacobson
december
2001
revised
clarify
aspects
style
standards
norman
jacobson
march
2002
revised
norman
jacobson
december
2002
include
details
proper
style
taken
winter
2002
version
similar
document
alex
thornton
thornton
document
adapted
ray
klefstad
coding
standards
minor
revisions
ics
23
winter
2004
norman
jacobson
january
2004
ics
23
spring
2004
january
2004
ics
23
fall
2004
september
2004
ics23
spring
2006
march
2006
may
2006
ics23
fall
2007
december
2006
ics23
winter
2008
december
2007
revised
make
explicit
methods
usually
short
names
functioning
provided
code
must
changed
norman
jacobson
ianaury
2009
cleaned
bit
norman
jacobson
march
2010
march
2011
minor
update
reference
textbook's
style
appendix
minor
clarifications
norman
jacobson
august
2012
