
split cpp 
id
split
cpp
1106
2007
04
16
23
20
29z
chenli
split
cpp
copyright
2003
2007
regents
university
california
redistribution
file
permitted
terms
gnu
public
license
gpl
date
march
2002
authors
michael
ortega
binderberger
miki
ics
uci
edu
liang
jin
liangj
ics
uci
edu
chen
li
chenli
ics
uci
edu
include
include
assert
include
index
include
split
load
branch
buffer
branches
full
node
plus
extra
branch
static
void
rtreegetbranches
struct
node
struct
branch
register
int
assert
assert
load
branch
buffer
0
ibranch
child
every
entry
full
branchbuf
branch
branchbuf
nodecard
calculate
rect
containing
set
coversplit
branchbuf
0
rect
1
itaken
partition
group
taken
true
count
group
0
cover
group
branchbuf
rect
else
cover
group
rtreecombinerect
branchbuf
rect
cover
group
area
group
rtreerectsphericalvolume
cover
group
count
group
pick
two
rects
set
first
elements
two
groups
pick
two
waste
area
covered
single
rectangle
static
void
rtreepickseeds
struct
partitionvars
register
int
seed0
seed1
rectreal
worst
waste
area
nodecard
1
0
worst
worst
waste
seed0
seed1
rtreeclassify
seed0
0
rtreeclassify
seed1
1
copy
branches
buffer
two
nodes
according
partition
static
void
rtreeloadnodes
struct
node
struct
node
struct
partitionvars
register
int
assert
assert
assert
0
ipartition
0
partition
1
partition
0
rtreeaddbranch
branchbuf
null
else
partition
1
rtreeaddbranch
branchbuf
null
initialize
partitionvars
structure
static
void
rtreeinitpvars
struct
partitionvars
register
int
assert
count
0
count
1
0
cover
0
cover
1
rtreenullrect
area
0
area
1
rectreal
0
0
itaken
false
partition
1
print
data
partition
partitionvars
struct
static
void
rtreeprintpvars
struct
partitionvars
register
int
assert
printf
npartition
0
itaken
printf
else
printf
printf
0
ipartition
printf
printf
count
0
area
count
0
area
0
printf
count
1
area
count
1
area
1
area
0
area
1
0
printf
total
area
effectiveness
3
2f
area
0
area
1
float
coversplitarea
area
0
area
1
printf
cover
0
rtreeprintrect
cover
0
0
printf
cover
1
rtreeprintrect
cover
1
0
method
0
choosing
partition
seeds
two
groups
pick
two
rects
waste
area
covered
single
rectangle
evidently
worst
pair
group
remaining
one
time
chosen
put
one
two
groups
one
chosen
one
greatest
difference
area
expansion
depending
group
rect
strongly
attracted
one
group
repelled
one
group
gets
full
force
group
violate
min
fill
requirement
group
gets
rest
last
ones
can
go
either
group
easily
static
void
rtreemethodzero
struct
partitionvars
register
int
rectreal
biggestdiff
register
int
group
chosen
bettergroup
assert
rtreeinitpvars
rtreepickseeds
count
0
count
1
nodecard
1
count
0
nodecard
1
minfill
count
1
nodecard
1
minfill
biggestdiff
rectreal
1
0
itaken
struct
rect
rect
0
rect
1
rectreal
growth0
growth1
diff
branchbuf
rect
rect
0
rtreecombinerect
cover
0
rect
1
rtreecombinerect
cover
1
growth0
rtreerectsphericalvolume
0
area
0
growth1
rtreerectsphericalvolume
1
area
1
diff
growth1
growth0
diff
0
group
0
else
group
1
diff
diff
diff
biggestdiff
biggestdiff
diff
chosen
bettergroup
group
else
diff
biggestdiff
count
group
count
bettergroup
chosen
bettergroup
group
rtreeclassify
chosen
bettergroup
one
group
full
put
remaining
rects
count
0
count
1
nodecard
1
count
0
nodecard
1
minfill
group
1
else
group
0
0
itaken
rtreeclassify
group
assert
count
0
count
1
nodecard
1
assert
count
0
minfill
count
1
minfill
split
node
divides
nodes
branches
extra
one
two
nodes
old
node
one
new
ones
one
really
new
one
created
tries
one
method
choosing
partition
uses
best
result
extern
void
rtreesplitnode
struct
node
struct
branch
struct
node
nn
register
struct
partitionvars
register
int
level
assert
assert
load
branches
buffer
initialize
old
node
level
level
rtreegetbranches
find
partition
partitions
0
rtreemethodzero
put
branches
buffer
2
nodes
according
chosen
partition
nn
rtreenewnode
nn
level
level
level
rtreeloadnodes
nn
assert
count
nn
count
nodecard
1
