ics 31 lab 9 
lab assignment 9 
ics
31
david
kay
uc
irvine
winter
2013
lab
assignment
9
assignment
due
end
lab
wednesday
march
13
ten
day
lab
will
last
lab
assignment
quarter
due
wednesday
tenth
week
will
give
couple
extra
days
go
back
review
need
final
preparation
part
individually
1
read
sections
6
1
6
2
6
4
practice
problems
go
can
skip
problem
6
10
2
try
exercises
6
12
6
13
6
15
6
16
6
18
lab
work
part
partner
lab
choose
partner
assignment
make
sure
ta
knows
partner
remember
choose
different
partner
lab
assignment
work
partner
week
make
sure
know
partner's
name
first
last
contact
information
email
cellphone
whatever
case
one
make
lab
prepare
lab9
py
file
previous
labs
including
line
like
paula
programmer
11223344
andrew
anteater
44332211
ics
31
lab
sec
7
lab
asst
9
suppose
class
takes
multiple
choice
test
going
experiment
alternative
scoring
mechanisms
problem
want
say
random
import
use
methods
randrange
choice
can
look
text
using
help
random
say
three
global
constants
defined
complete
program
might
determine
values
reading
file
just
way
convenience
number
students
200
number
questions
20
number
choices
4
3
choices
4
choices
5
1
write
function
called
generate
answers
generates
returns
string
letters
representing
correct
answers
test
course
answers
real
tests
chosen
randomly
just
way
produce
test
data
use
score
students'
answers
length
string
number
questions
character
string
chosen
randomly
first
letters
alphabet
number
choices
use
choice
method
call
generate
answers
generate
set
answers
assign
result
another
global
constant
called
answers
2
ideally
read
students
exam
answers
file
save
time
skip
file
reading
part
just
generate
random
list
students
answers
start
say
student
represented
string
student's
name
id
string
representing
student's
answers
question
thinking
namedtuple
two
fields
student
namedtuple
'student'
'name
answers'
s1
student
'jones
jane'
'abccdaabaabcbbcaccad'
s2
student
'smith
sam'
'badaccabadccabddcbab'
write
function
random
students
uses
global
constants
generate
return
list
student
namedtuples
size
list
number
students
names
can
randomly
generated
earlier
lab
save
time
can
just
generate
random
id
number
using
randrange
string
representing
student's
answers
generated
precisely
way
generated
correct
answers
duplicate
code
3
modify
student
namedtuple
add
two
fields
one
containing
list
scores
question
1
student's
answer
matches
correct
answer
0
otherwise
number
representing
sum
list
question
scores
student
namedtuple
'student'
'name
answers
scores
total'
s1
student
'jones
jane'
'abccdaabaabcbbcaccad'
1
0
1
1
1
0
10
s2
student
'smith
sam'
'badaccabadccabddcbab'
0
1
0
0
0
1
5
modify
random
students
function
generate
student
records
scores
generate
list
random
students
sort
highest
total
lowest
print
top
10
students'
names
can
print
just
trying
save
paper
screen
space
also
print
mean
average
score
4
previous
part
used
conventional
way
score
multiple
choice
exams
expect
scores
exam
lower
typical
exam
typical
exam
students
average
likelier
choose
correct
answers
wrong
ones
generated
data
completely
random
think
generate
realistically
distributed
random
data
chose
student's
answer
question
choosing
randomly
say
correct
answer
can
bias
selection
towards
choosing
randomly
adding
another
copy
correct
answer
possible
choices
will
increase
likelihood
random
choice
group
will
correct
answer
group
produce
correct
answer
half
time
since
half
choices
group
correct
every
time
generate
student's
answer
question
can
add
group
answer
choices
extra
copies
correct
answer
say
0
twice
number
choices
four
choices
add
0
8
copies
correct
choice
choose
student's
answer
randomly
enhanced
group
answer
choices
can
defining
function
called
generate
weighted
student
answer
takes
string
one
character
correct
answer
returns
string
one
character
student
answer
chosen
randomly
enhanced
group
alternatives
described
write
new
function
called
random
students2
based
random
students
function
generates
student's
answer
question
calling
generate
weighted
student
answer
generate
new
list
students
using
random
students2
sort
highest
total
lowest
print
top
10
students'
names
also
print
mean
average
score
higher
part
3
5
unconventional
way
score
exam
assign
different
weights
different
questions
instructor
might
assign
weights
advance
based
judgement
questions
harder
important
even
unconventional
way
assign
weights
derive
students'
answers
questions
harder
fewer
people
answered
correctly
worth
points
easier
ones
one
way
implement
assign
number
points
problem
number
equal
number
students
missed
problem
write
function
called
question
weights
takes
list
student
records
returns
list
numbers
one
number
question
test
number
number
students
answered
question
incorrectly
hint
helpful
attack
complex
data
structures
layer
layer
try
writing
code
counts
number
wrong
answers
single
question
apply
turn
questions
create
another
global
constant
consists
results
calling
question
weights
list
students
part
4
write
function
called
student
weighted
score
takes
student
record
list
question
weights
returns
student
record
total
field
changed
reflect
student's
score
based
correct
answers
corresponding
question
weights
apply
student
weighted
score
student
list
students
part
4
finally
sort
result
highest
total
lowest
print
top
10
students'
names
along
mean
average
score
exercises
section
use
external
files
provided
author
can
download
textbook
web
site
exercise
6
21
choose
one
exercise
6
24
6
26
choose
two
exercises
6
23
6
25
6
27
6
30
6
32
develop
program
solve
anteater
bed
breakfast
problem
develop
code
bandb
py
file
pay
close
attention
instructions
especially
developing
program
incremental
stages
optional
extra
time
completing
previous
parts
lab
try
one
following
add
menu
style
user
interface
icstunes
similar
interface
used
restaurants
program
add
external
files
icstunes
along
lines
restaurants
program
require
user
interface
done
similar
things
bread
butter
everyday
programming
skills
hurt
practice
implement
weighted
scoring
scheme
less
extreme
one
4
problem
worth
1
point
75
class
answer
correctly
worth
2
points
50
75
answer
correctly
worth
3
points
25
50
answer
correctly
worth
4
points
otherwise
score
list
students
using
scheme
devise
kind
visualization
perhaps
two
dimensional
plot
show
student
scores
using
three
different
scoring
schemes
try
produce
graphical
answer
question
students
score
highly
three
schemes
develop
interactive
interface
anteater
bandb
discussed
problem
writeup
remember
partner
must
complete
partner
evaluation
form
submit
individually
connecting
eee
uci
edu
choosing
survey
tool
lab
section
ics
31
make
sure
know
partner's
name
first
last
can
evaluate
right
person
please
complete
evaluation
end
day
friday
saturday
morning
latest
turn
submit
via
checkmate
lab8
py
file
containing
solutions
parts
separate
bandb
py
file
code
part
remember
said
previous
labs
rereading
assignment
rerunning
python
files
also
remember
student
must
complete
partner
evaluation
form
logging
eee
uci
edu
selecting
survey
tool
evaluations
contribute
class
participation
score
written
david
kay
fall
2012
ics
31
based
part
assignments
ics
h21
informatics
41
david
kay
kay
uci
edu
friday
march
1
2013
3
59
pm
