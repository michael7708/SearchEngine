informatics 102 spring 2012 assignment 5 implementing domain specific language 
assignment 5 
informatics
102
spring
2012
news
course
reference
schedule
lab
manual
code
examples
alex
informatics
102
spring
2012
assignment
5
implementing
domain
specific
language
java
due
date
time
sunday
june
10
11
59pm
introduction
previous
assignment
asked
write
two
java
programs
communicated
one
another
file
one
program
wrote
file
read
make
communication
work
two
programs
agree
format
file
rather
designing
custom
file
format
implementing
code
read
write
scratch
instead
used
domain
specific
language
called
protocol
buffers
described
structure
information
stored
file
relied
protocol
buffers
implementation
automatically
generate
code
based
description
reads
writes
information
previous
assignment
asked
use
domain
specific
language
assignment
focuses
task
designing
implementing
new
one
protocol
buffers
language
will
focus
making
easy
specify
narrow
area
functionality
larger
program
generating
otherwise
repetitive
boilerplate
code
write
scratch
concentrate
efforts
different
domain
needs
will
similar
need
compiler
reads
language
generates
java
output
also
need
runtime
library
implements
code
common
use
language
proceed
design
implementation
language
performing
tasks
writing
program
keeping
eye
design
trying
separate
code
generated
language's
compiler
code
will
form
runtime
library
language
code
forms
business
logic
program
implementing
compiler
takes
language
generates
java
code
putting
runtime
library
generated
code
together
business
logic
first
program
forming
new
simpler
version
program
combines
language
java
example
following
steps
design
implement
domain
specific
language
given
code
examples
section
problem
domain
likely
past
coursework
asked
write
java
programs
console
mode
user
interfaces
input
comes
system
output
goes
system
may
noticed
programs
often
similarly
structured
offering
menu
commands
user
can
enter
handled
asking
user
additional
input
parameters
making
changes
program's
underlying
state
printing
output
confirming
action
taken
furthermore
may
noticed
duplication
information
code
write
example
code
prints
menu
print
commands
match
ones
implemented
elsewhere
embark
designing
domain
specific
language
called
menuba
can
used
describe
menus
typically
used
console
mode
user
interfaces
menuba
allow
us
describe
relevant
information
command
duplication
effort
compiler
will
generate
java
code
tedious
work
implementing
user
interface
like
part
1
prototyping
menuba
30
points
finding
boundaries
first
step
implementing
new
language
decide
precisely
problem
solves
will
allow
say
will
happen
result
saying
goal
use
language
take
tedium
building
console
mode
user
interfaces
java
preserving
java's
usefulness
solving
business
problem
underlies
user
interface
trying
replace
java
just
trying
augment
can
one
particular
thing
better
programs
written
using
menuba
will
broken
three
discrete
parts
command
menus
write
descriptions
specific
command
menus
menuba
compile
code
java
program
write
using
menuba
least
one
runtime
library
java
code
things
related
command
menus
never
varies
one
menu
another
business
logic
code
solves
underlying
problems
particular
program
intended
address
like
calculating
sales
tax
finding
patterns
input
data
performing
web
searches
can
embark
implementation
menuba
prototyping
exact
split
belongs
command
menus
runtime
library
business
logic
will
necessarily
obvious
us
first
instead
need
work
prototype
design
typical
program
built
using
menuba
java
keeping
three
discrete
parts
separate
write
whole
prototype
java
since
menuba
compiler
yet
also
try
write
prototype
way
possible
generate
command
menus
automatically
using
compiler
err
side
pattern
oriented
creative
considering
menuba's
mandate
typical
console
mode
user
interface
provides
user
experience
much
like
one
demonstrated
example
boldfaced
text
input
user
non
boldfaced
text
output
menu
add
player
team
remove
player
team
list
players
team
generate
team
lineup
save
team
file
quit
help
command
add
player
player
name
alex
thornton
player
position
1b
alex
thornton
1b
added
team
command
save
team
team
filename
team
txt
team
information
saved
team
txt
command
valid
command
please
try
type
help
command
menu
add
player
team
remove
player
team
list
players
team
generate
team
lineup
save
team
file
quit
help
command
goodbye
consider
example
see
patterns
emerge
command
menu
associates
command
string
letter
short
string
command
executed
command
menu
textual
description
users
enter
command
strings
matched
command
strings
menu
match
command
executed
match
error
message
shown
menu
shown
every
time
since
experienced
users
program
will
memorized
offer
ability
see
entering
help
command
execution
command
effect
program's
state
happens
particular
command
executed
specific
particular
program
plenty
features
recurrent
every
program
like
one
showing
menu
asking
user
enter
command
strings
matching
command
strings
commands
menu
associating
description
every
command
string
offering
commands
like
help
useful
every
program
recurrent
features
able
encode
using
menuba
leaving
business
logic
happens
command
executed
written
using
java
menuba's
mandate
describe
command
menu
menuba
script
will
written
describes
command
command
menu
command
string
description
java
code
called
executed
important
note
going
consider
menuba's
syntax
yet
can
course
need
long
understand
kind
information
will
go
menuba
script
can
always
design
syntax
later
part
bad
idea
postpone
syntax
decision
might
discover
left
important
details
might
dramatic
impact
syntax
commit
syntax
early
can
put
comfortable
trying
go
prototype
program
part
assignment
write
prototype
program
console
mode
user
interface
maintains
list
names
provides
six
commands
add
name
listremove
name
listprint
names
listclear
names
listquithelp
sure
maintaining
focus
design
prototype
work
objective
write
just
java
program
meets
requirements
challenge
finding
design
keeps
three
necessary
parts
command
menu
runtime
library
business
logic
separate
implementation
program
believe
designed
well
enough
purpose
three
parts
separate
ready
proceed
part
2
part
2
implementing
menuba
50
points
considering
syntax
menuba
now
successfully
defined
boundaries
command
menu
code
menuba
compiler
will
generate
runtime
library
business
logic
able
begin
implementation
menuba
can
get
much
farther
decide
menuba
will
look
like
need
find
syntax
encodes
information
identified
necessary
describe
command
menu
based
design
part
1
commands
menu
including
command
string
description
indication
code
called
name
class
implements
command
menu
name
java
class
menuba
compiler
will
generate
name
class
encapsulates
state
managed
modified
menu's
commands
package
class
implements
command
menu
reside
interoperability
java
almost
always
requires
supporting
packages
since
essentially
real
java
programs
use
information
mind
menuba
script
will
look
like
example
menuba
script
describing
program
will
write
google
queries
console
package
inf102
assignment5
example
menu
examplemenu
currentquerystate
execute
search
query
executequery
show
next
10
results
showpastresults
clear
current
query
clearquery
exit
exit
example
see
menuba
somewhat
java
like
syntax
including
support
java
packages
use
curly
braces
grouping
semicolons
termination
two
slashes
indicate
comment
also
uses
colon
separate
command
string
description
well
arrow
dash
followed
greater
separate
command
name
class
containing
code
handles
like
though
languages
big
small
whitespace
considered
irrelevant
except
separates
words
one
another
menu
examplemenu
though
amount
whitespace
layout
menuba
code
important
reason
stylistic
one
grammar
menuba
follows
non
terminal
symbols
italicized
terminal
symbols
appearing
normal
text
word
empty
special
one
indicating
non
terminal
symbol
can
expand
nothing
script
¡÷
packagedeclaration
menudeclarationpackagedeclaration
¡÷
empty
package
packagename
'
'packagename
¡÷
identifier
'
'
identifier
menudeclaration
¡÷
menu
identifier
'
'
identifier
'
'
menucommandlist
'
'menucommandlist
¡÷
menucommand
menucommand
¡÷
string
'
'
string
'
'
identifier
'
'
couple
lexical
rules
lexical
rules
language
describe
kinds
tokens
individual
words
symbols
etc
can
appear
legally
language
lexical
rules
identifiers
sequences
letters
digits
begin
letter
except
sequences
reserved
words
package
menu
practical
matter
probably
use
exactly
java's
rules
identifiers
java
class
name
legally
specified
menuba
script
though
chosen
simpler
rule
interest
limiting
complexity
strings
sequences
characters
surrounded
double
quotes
containing
newline
characters
interest
simplicity
bother
escape
sequences
special
characters
strings
writing
menuba
compiler
part
assignment
will
write
menuba
compiler
takes
menuba
script
generates
java
class
implements
menu
describes
note
need
code
part
1
particularly
code
identified
runtime
library
beyond
need
following
components
scanner
providing
form
three
files
menubascanner
javamenubatokentype
javamenubascanexception
java
parser
will
need
write
using
recursive
descent
technique
discussed
lecture
parser
read
input
scanner
one
classes
hold
relevant
information
script
objects
parser
will
return
output
code
generator
takes
information
parsed
script
generates
java
file
class
containing
main
method
executes
compiler
please
name
class
menubacompiler
compiler
take
one
command
line
argument
specifying
name
menuba
script
compiled
write
output
file
named
java
replaced
name
menu
described
menuba
script
example
example
script
compiled
file
called
examplemenu
java
generated
use
packages
organize
code
following
way
package
inf102
menuba
compiler
contain
code
compiler
package
inf102
menuba
lib
contain
code
runtime
library
code
can
put
anywhere
like
put
package
absolute
requirements
code
generate
can
combined
runtime
library
business
logic
write
command
line
user
interface
specifically
generate
depends
design
runtime
library
left
open
issue
solve
part
3
using
menuba
20
points
rewrite
program
part
1
using
combination
menuba
java
compile
menuba
script
combine
runtime
library
business
logic
ensuring
program
still
works
able
business
menuba
complete
deliverables
part
1
submit
zip
archive
containing
java
files
make
prototype
part
2
submit
zip
archive
containing
java
files
make
compiler
runtime
library
part
3
submit
zip
archive
containing
menuba
script
business
logic
will
combine
runtime
library
part
2
use
compiler
generate
necessary
code
menuba
script
follow
link
discussion
submit
assignment
via
checkmate
aware
holding
rules
specified
document
including
one
says
responsible
submitting
version
assignment
want
graded
regrade
assignment
simply
submitted
wrong
version
accident
handful
minor
tweaks
alex
thornton
spring
2012
additional
explanation
clarification
added
alex
thornton
winter
2010
originally
written
alex
thornton
winter
2009
