sample questions 
additional questions 
informatics
41
fall
2009
david
kay
uc
irvine
sample
questions
questions
sort
appear
final
exam
sample
exam
length
mix
questions
cover
topics
questions
will
help
review
important
concepts
appeared
exams
past
try
compare
answers
classmates
long
enough
advance
chance
ask
us
issues
resolve
1
write
definition
function
vector
list
hints
remember
vectors
zero
based
careful
produce
reverse
order
list
use
auxiliary
function
vector
list
vector
list
return
list
containing
elements
vector
argument
order
vector
list
vector
1
2
3
returns
list
1
2
3
2
write
definition
function
list
vector
hint
can
without
auxiliary
function
without
vector
set
may
use
need
list
vector
list
vector
return
vector
containing
elements
list
argument
order
list
vector
list
1
2
3
returns
vector
1
2
3
consider
following
function
define
dosomething
assume
0
cond
0
else
dosomething
sub1
sub1
1
returned
following
statements
dosomething
3
1
dosomething
6
2
dosomething
29
5
dosomething
25000
23000
2
one
english
word
mathematical
notation
describe
value
function
returns
terms
arguments
3
now
look
function
define
dosomethingelse
assume
0
cond
0
else
sub1
dosomethingelse
sub1
dosomethingelse
produce
results
dosomething
explain
results
differ
4
routines
tail
recursive
dosomething
dosomethingelse
neither
non
tail
recursive
routine
indicate
circling
specific
operation
code
makes
non
tail
recursive
set
collection
distinct
objects
without
duplicates
suppose
following
operations
defined
sets
empty
set
constant
representing
empty
set
empty
returns
true
set
empty
false
otherwise
element
returns
true
element
set
false
otherwise
insert
returns
set
already
returns
added
otherwise
intersection
s1
s2
returns
set
containing
elements
s1
s2
subtract
s1
s2
returns
set
containing
elements
s1
s2
union
s1
s2
returns
set
containing
every
element
either
s1
s2
without
duplicates
course
1
using
routines
appropriate
using
list
processing
functions
define
scheme
function
called
ski
trip
takes
following
four
sets
arguments
friends
set
friends
early
risers
set
people
know
perhaps
including
people
friends
will
wake
early
enough
get
slopes
lifts
open
rowdy
people
set
people
likely
get
excited
wreck
cabin
fun
folks
set
people
really
know
party
returns
set
people
like
invite
ski
trip
winter
break
friends
early
risers
fun
folks
rowdy
people
2
assuming
implement
sets
normal
scheme
lists
write
definition
function
union
3
using
operations
map
filter
reduce
without
using
explicit
recursion
write
definition
function
intersection
hint
can
quite
short
4
write
definition
subtract
rewrite
definition
union
using
operations
map
filter
reduce
explicit
recursion
restaurants
program
copy
provided
define
following
function
used
top
level
program
without
knowing
whether
collection
implemented
list
bst
vector
whatever
means
call
collection
change
increase
price
cuisine
collection
number
symbol
collection
symbol
name
cuisine
number
number
dollars
add
price
restaurant
serving
cuisine
return
collection
price
changes
one
tough
towards
end
probably
tougher
test
anteater
airlines
stores
scheduled
flights
structure
five
fields
origin
three
letter
airport
code
'lax
departure
departure
time
destination
three
letter
airport
code
arrival
arrival
time
passengers
list
passengers
represented
string
jane
jones
1
define
structure
flight
field
names
given
2
complete
following
definition
predicate
function
valid
flight
takes
expression
checks
whether
appears
valid
flight
define
valid
flight
lambda
like
can
take
2
arguments
flight
structure
airport
code
valid
flight
origin
time
valid
departure
time
valid
airport
code
valid
flight
destination
time
valid
arrival
time
valid
list
strings
flight
passengers
3
assume
already
defined
variable
airport
code
list
list
valid
three
letter
airport
abbreviations
lax
sfo
sna
write
definition
predicate
function
airport
code
valid
takes
symbol
atom
returns
true
symbol
contained
airport
code
list
hint
can
without
recursion
use
function
defined
class
book
4
predefined
predicate
string
takes
single
argument
returns
true
argument
string
write
definition
predicate
list
strings
takes
list
returns
true
every
element
list
string
list
empty
5
define
predicate
flight
goes
takes
two
arguments
flight
structure
symbol
representing
airport
code
returns
true
flight's
destination
matches
symbol
6
anteater
airlines
stores
scheduled
flights
list
flight
structures
flight
structure
defined
previous
problem
write
definition
function
first
flight
takes
flight
list
symbol
representing
airport
code
returns
first
flight
list
whose
destination
matches
symbol
null
list
match
use
flight
goes
described
whether
definition
correct
7
write
definition
function
keep
flights
takes
flight
list
symbol
representing
airport
code
returns
list
flights
containing
flights
original
list
whose
destination
matches
symbol
8
enhance
security
anonymous
air
marshal
will
assigned
every
anteater
airlines
flight
write
definition
add
marshals
takes
flight
list
code
name
adds
code
name
beginning
passenger
list
flight
hint
first
write
function
take
single
flight
add
name
call
function
definition
add
marshals
9
write
definition
complete
passengers
list
takes
flight
list
returns
list
strings
containing
passengers
flights
list
duplications
may
assume
passengers
single
flight
unique
10
5
points
write
function
average
passengers
takes
flight
list
returns
average
number
passengers
flights
flight
list
11
rewrite
average
passengers
make
tail
recursive
answer
part
already
tail
recursive
just
write
already
correctly
get
full
credit
12
anteater
airlines
plans
merge
aardvark
airlines
form
new
airline
aaair
luckily
incredibly
airlines
store
flights
list
flight
structures
described
write
function
merge
flight
lists
takes
two
flight
lists
returns
flight
list
containing
flights
arguments
except
flight
first
list
matches
flight
second
list
origin
departure
time
destination
arrival
time
merged
list
contains
just
one
flight
two
matching
flights'
passenger
lists
combined
may
assume
already
defined
flights
match
takes
two
flight
structures
returns
true
match
described
merge
lists
takes
two
lists
returns
list
contains
elements
arguments
may
also
assume
names
single
passenger
list
unique
within
original
flight
lists
flights
match
hint
careful
consistent
types
data
come
go
function
evaluate
following
expressions
scheme
interpreter
drscheme
case
display
expressions
executed
1
15
4
40
4
2
55
5
12
3
100
cond
5
10
2
37
else
6
1
true
false
features
capabilities
scheme
make
best
choice
great
majority
programming
tasks
2
true
false
programmer
knowledge
java
can
sure
knowledge
will
enough
sustain
productive
innovative
40
year
career
students
course
applied
epistemology
101
graded
two
items
midterm
final
exam
100
points
possible
midterm's
weight
40
course
grade
final
worth
60
write
function
ae101
score
takes
two
arguments
student's
midterm
score
final
exam
score
returns
student's
overall
weighted
score
class
range
0
100
write
two
constant
definitions
weights
contract
brief
purpose
statement
scheme
function
definition
two
tests
form
boolean
expressions
return
true
function
works
correctly
complete
definition
function
number
number
number
boolean
return
true
first
argument's
value
second
third
inclusive
examples
7
0
10
true
3
3
4
true
1
2
3
false
define
lambda
value
low
high
complete
definition
item
list
item
list
expression
list
boolean
return
true
expression
occurs
list
define
item
list
lambda
item
cond
date
structure
make
date
month
day
year
month
symbol
'jan
'feb
day
number
1
31
year
number
1000
3000
1
define
structure
date
field
names
given
2
define
date
object
called
today
appropriate
values
3
complete
following
definition
predicate
function
valid
date
takes
expression
checks
whether
appears
valid
date
use
functions
defined
previous
problems
necessary
valid
date
anything
boolean
define
monthlist
list
'jan
'feb
'mar
'apr
'may
'jun
'jul
'aug
'sep
'oct
'nov
'dec
define
valid
date
lambda
date
structure
item
list
month
valid
date
day
1
31
day
valid
date
year
year
valid
4
define
predicate
function
valid
dates
valid
dates
list
boolean
return
true
items
list
valid
dates
list
empty
return
true
suppose
wish
write
spelling
checker
takes
string
text
input
returns
list
misspelled
words
string
input
may
contain
white
space
punctuation
will
need
extract
words
string
word
string
characters
separated
next
word
white
space
punctuation
precise
characters
count
white
space
punctuation
worry
define
function
spell
check
takes
string
returns
list
words
string
misspelled
precisely
words
occur
dictionary
correctly
spelled
words
use
following
definition
first
word
function
takes
string
returns
first
word
string
rest
words
function
takes
string
returns
copy
string
first
word
removed
string
empty
function
takes
string
returns
true
empty
contains
white
space
punctuation
dictionary
long
list
correctly
spelled
words
word
string
spell
check
string
list
strings
return
list
words
input
string
dictionary
problem
may
use
predefined
functions
member
list
ref
may
use
functions
defined
earlier
exam
may
lose
points
re
implement
something
already
described
1
define
function
position
list
position
list
list
number
return
place
list
first
input
occurs
zero
list
empty
examples
position
list
'a
'
1
position
list
1
empty
0
position
list
3
'
2
3
4
2
2
define
function
item
position
item
position
number
list
input
list
return
item
specified
input
number
empty
range
examples
item
position
3
'
item
position
7
'
empty
item
position
0
'
3
4
empty
3
define
next
list
may
wish
use
predefined
function
length
returns
number
items
list
hint
use
prior
definitions
recursion
next
list
list
return
item
input
list
follows
first
input
empty
none
examples
next
list
'b
'
next
list
'c
empty
next
list
'x
'
empty
next
list
'a
empty
empty
4
define
next
circular
list
next
circular
list
expression
list
expression
like
next
list
item
last
list
first
item
example
next
circular
list
'c
'
5
define
function
next
month
uses
constant
monthlist
see
problem
take
symbol
'jan
'feb
representing
month
return
symbol
following
month
next
month
symbol
symbol
take
month
name
'jan
'feb
return
name
following
month
6
define
function
advance
month
takes
date
see
problem
returns
date
moved
one
month
future
advance
month
date
date
advance
input
date
one
month
day
7
suppose
list
dates
representing
events
calendar
decide
take
month's
skiing
vacation
february
need
postpone
events
scheduled
february
perhaps
moving
one
month
later
generalize
function
clear
month
clear
month
symbol
list
dates
list
dates
return
input
list
advancing
one
month
every
date
whose
month
matches
input
symbol
8
define
function
days
start
month
symbol
number
return
number
days
january
1
start
named
month
non
leap
years
examples
days
start
month
'jan
0
days
start
month
'feb
31
define
daysinmonth
'
31
28
31
30
31
30
31
31
30
31
30
31
will
useful
9
define
function
days
jan1
date
number
return
number
days
january
1
year
specified
date
inclusive
examples
days
jan1
make
date
'jan
3
2005
3
days
jan1
make
date
'feb
1
2005
32
two
sets
data
shown
draw
binary
search
tree
results
inserting
items
order
shown
distinguish
left
branches
clearly
right
branches
1a
13
19
22
7
17
10
2
1b
scheme
python
java
fortran
basic
2
trees
traverse
tree
order
printing
node
result
2a
result
1a
2b
result
1b
evaluate
following
scheme
expressions
1
local
define
make
checker
lambda
threshold
lambda
threshold
define
a1
filter
make
checker
6
'
3
1
4
1
5
9
2
6
define
a2
filter
make
checker
4
'
3
1
4
1
5
9
2
6
list
a1
a2
2
local
define
make
checker
lambda
comparison
op
threshold
lambda
comparison
op
threshold
define
b1
filter
make
checker
1
'
3
1
4
1
5
9
2
6
define
b2
filter
make
checker
3
'
3
1
4
1
5
9
2
6
list
b1
b2
problem
involves
restaurant
collection
program
part
indicate
answer
making
additions
changes
deletions
table
data
shown
part
1
suppose
collection
contains
information
shown
thai
dishes
thai
434
3434
mee
krob
10
95
jacopo's
pizzeria
pizza
343
3434
goat
cheese
pizza
12
00
mitsuki
japanese
232
5353
edamame
4
50
tommy
tang's
thai
454
4545
paht
woon
sen
8
75
thai
touch
thai
242
2424
larb
guy
9
95
kitayama
japanese
335
3535
okonomiyaki
8
50
result
returned
following
code
show
results
making
changes
table
change
values
cross
lines
add
new
lines
appropriate
define
thai
lambda
equal
rrant
cuisine
'thai
collection
remove
thai
2
suppose
collection
contains
information
shown
thai
dishes
thai
434
3434
mee
krob
10
95
jacopo's
pizzeria
pizza
343
3434
goat
cheese
pizza
12
00
mitsuki
japanese
232
5353
edamame
4
50
tommy
tang's
thai
454
4545
paht
woon
sen
8
75
thai
touch
thai
242
2424
larb
guy
9
95
kitayama
japanese
335
3535
okonomiyaki
8
50
result
following
expression
collection
remove
lambda
equal
rrant
cuisine
'japanese
3
suppose
collection
contains
information
shown
thai
dishes
thai
434
3434
mee
krob
10
95
jacopo's
pizzeria
pizza
343
3434
goat
cheese
pizza
12
00
mitsuki
japanese
232
5353
edamame
4
50
tommy
tang's
thai
454
4545
paht
woon
sen
8
75
thai
touch
thai
242
2424
larb
guy
9
95
kitayama
japanese
335
3535
okonomiyaki
8
50
result
following
expression
collection
remove
lambda
thai
equal
rrant
cuisine
'japanese
4
suppose
collection
contains
information
shown
thai
dishes
thai
434
3434
mee
krob
10
95
jacopo's
pizzeria
pizza
343
3434
goat
cheese
pizza
12
00
mitsuki
japanese
232
5353
edamame
4
50
tommy
tang's
thai
454
4545
paht
woon
sen
8
75
thai
touch
thai
242
2424
larb
guy
9
95
kitayama
japanese
335
3535
okonomiyaki
8
50
result
following
expression
define
raise
price
lambda
make
rrant
rrant
name
rrant
cuisine
rrant
phone
rrant
dish
1
00
rrant
price
collection
change
thai
raise
price
5
suppose
collection
contains
information
shown
thai
dishes
thai
434
3434
mee
krob
10
95
jacopo's
pizzeria
pizza
343
3434
goat
cheese
pizza
12
00
mitsuki
japanese
232
5353
edamame
4
50
tommy
tang's
thai
454
4545
paht
woon
sen
8
75
thai
touch
thai
242
2424
larb
guy
9
95
kitayama
japanese
335
3535
okonomiyaki
8
50
result
following
expression
collection
remove
collection
change
thai
raise
price
raise
price
defined
lambda
rrant
price
10
00
6
suppose
collection
contains
information
shown
thai
dishes
thai
434
3434
mee
krob
10
95
jacopo's
pizzeria
pizza
343
3434
goat
cheese
pizza
12
00
mitsuki
japanese
232
5353
edamame
4
50
tommy
tang's
thai
454
4545
paht
woon
sen
8
75
thai
touch
thai
242
2424
larb
guy
9
95
kitayama
japanese
335
3535
okonomiyaki
8
50
result
following
expression
collection
change
collection
remove
lambda
rrant
price
9
00
lambda
equal
rrant
cuisine
'pizza
equal
rrant
cuisine
'thai
lambda
make
rrant
rrant
name
rrant
cuisine
rrant
phone
rrant
dish
rrant
price
2
00
definitions
five
functions
1
write
next
five
routines
recursive
2
write
next
five
routines
tail
recursive
routines
may
may
neither
consider
function
independently
others
pay
attention
functions
given
function
calls
define
print
stars
lambda
cond
zero
newline
else
begin
two
things
order
shown
print
stars
1
print
1
stars
display
print
star
define
print
stars
lambda
cond
zero
newline
else
begin
two
things
order
shown
display
print
star
print
stars
1
print
1
stars
define
keep
matches
lambda
cond
null
empty
equal
first
cons
first
keep
matches
rest
else
keep
matches
rest
define
keep
matches
lambda
keep
matches
help
'
define
keep
matches
help
lambda
list
far
cond
null
list
far
equal
first
keep
matches
help
rest
cons
first
list
far
else
keep
matches
help
rest
list
far
suppose
list
called
rl
restaurants
menus
according
usual
definitions
define
struct
rrant
name
cuisine
phone
menu
menu
list
dishes
define
struct
dish
name
price
define
following
function
name
phone
serving
dish
listof
rrant
string
listof
name
phone
list
returns
list
names
phone
numbers
restaurants
serve
dish
named
second
input
name
phone
number
pair
list
example
cobras
matadors
343
3434
la
cote
basque
344
3334
definitions
map
filter
define
map
define
filter
cond
cond
empty
empty
empty
empty
else
cons
first
first
map
rest
cons
first
filter
rest
else
filter
rest
1
write
definition
function
process
abstracts
map
filter
hint
may
find
useful
think
two
functions
define
always
true
true
define
change
2
write
new
one
line
definitions
map
filter
call
process
nested
list
items
nl
either
1
empty
2
cons
item
nl
3
cons
nl
nl
write
definition
function
deep
unique
described
deep
unique
nl
list
items
return
list
items
occur
input
matter
deeply
nested
duplications
order
result
matter
example
deep
unique
'
3
17
3
huey
huey
17
returns
3
17
huey
may
assume
predicate
list
already
defined
return
true
argument
list
false
otherwise
david
kay
kay
uci
edu
wednesday
november
23
2005
8
40
