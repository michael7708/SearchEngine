informatics 43 spring 2009 course project phase 3 implementation 
phase 3 
informatics
43
spring
2009
news
course
reference
schedule
course
project
code
examples
alex
informatics
43
spring
2009
course
project
phase
3
implementation
due
date
time
wednesday
may
27
9
00pm
background
now
design
triple
enrollment
system
tpes
completed
now
time
try
implement
course
talked
lecture
front
designs
rarely
implementable
without
least
changes
work
implementation
uncommon
discover
aspects
design
incomplete
incorrect
things
fit
together
way
expected
information
need
class
missing
constraints
arise
planned
experience
kinds
mistakes
become
less
common
especially
reflect
implementations
diverge
designs
phase
will
encourage
design
implementation
ultimately
guided
official
requirements
specification
lists
known
requirements
tpes
requirements
will
required
though
can
take
implementation
farther
like
modest
amount
extra
credit
offered
reward
time
additionally
work
encouraged
least
unit
testing
writing
unit
tests
java
using
junit
will
required
unit
test
code
want
experience
least
fair
warn
phase
will
quite
bit
work
however
pace
work
steadily
due
date
expect
able
finish
put
days
due
may
find
difficult
complete
program
program
required
implement
requirements
comprise
implementation
phase
1
official
requirements
specification
modest
amount
extra
credit
will
offered
covering
requirements
implementation
phases
2
3
extra
credit
offered
covering
requirements
prefer
avoid
implementation
phase
4
since
involves
additional
software
database
engine
well
beyond
scope
work
requiring
general
use
design
starting
point
work
phase
however
permitted
make
changes
discover
necessary
unlikely
will
able
implement
design
make
changes
willy
nilly
discussed
need
let
us
know
changes
made
note
working
incrementally
incomplete
programs
run
will
viewed
much
harshly
incomplete
programs
run
address
least
requirements
since
customer
will
able
verify
part
non
running
program
working
finishing
implementation
ran
time
one
thing
writing
program
run
quite
another
importance
program
runs
strongly
suggest
working
program
one
requirements
time
getting
requirements
implemented
tested
working
moving
subsequent
requirements
time
reach
stable
point
subset
requirements
working
save
backup
copy
entire
program
along
list
requirements
working
way
subsequent
work
leads
problem
seems
insurmountable
can
always
go
back
way
things
run
time
can
finish
implementation
can
submit
last
stable
copy
unit
tests
implementation
unit
tests
often
written
unit
tests
focus
testing
individual
components
single
classes
single
methods
single
algorithms
program
context
verifying
work
note
ability
test
components
context
without
worry
effect
related
components
effect
design
classes
designs
testable
others
talk
issue
length
lecture
requiring
write
unit
tests
entire
implementation
place
enormous
amount
work
shoulders
instead
required
write
unit
tests
following
two
algorithms
determining
whether
student
allowed
enroll
coursedetermining
effective
capacity
course
sure
covering
interesting
cases
involved
neither
algorithms
requires
huge
number
tests
neither
can
sufficiently
tested
one
two
test
cases
either
welcome
write
unit
tests
part
implementation
like
can
especially
effective
trickier
parts
otherwise
lot
manual
testing
unit
tests
can
seem
like
lot
work
compared
work
testing
program
entirely
difficulty
often
overrated
however
additional
unit
tests
required
unit
tests
must
written
compatible
junit
4
supported
eclipse
classic
3
4
2
available
link
unit
test
classes
classes
containing
junit
unit
tests
name
ending
word
test
studentenrollmenttest
can
easily
distinguished
classes
comprise
program
reflecting
implementation
work
implementation
maintain
list
places
implementation
differed
design
method
included
design
ended
different
class
method
needed
additional
parameter
design
specified
class
design
split
one
class
implementation
etc
completed
implementation
write
short
document
will
apprise
customer
progress
document
address
following
questions
class
contains
main
method
call
order
run
program
program
take
command
line
arguments
command
line
arguments
required
use
need
know
can
run
program
parts
implementation
finish
particular
official
requirements
implementation
address
address
requirements
beyond
included
implementation
phase
1
parts
implementation
finish
particular
official
requirements
implementation
phase
1
implement
known
bugs
list
changes
made
design
implementing
change
give
brief
justification
change
necessary
sure
save
time
write
document
submit
phase
note
document
need
long
order
adequately
address
questions
asked
worry
will
become
overwhelming
part
assignment
notes
keep
work
especially
regarding
design
elements
changed
requirements
addressed
bugs
found
easier
part
will
may
opt
write
document
piecemeal
implement
program
fine
development
environment
permitted
use
development
environment
like
text
editor
command
line
compiler
one
extreme
full
featured
development
environment
like
eclipse
netbeans
whatever
environment
use
write
standard
java
can
compiled
run
java
se
6
program
require
environment
like
eclipse
non
standard
libraries
extensions
junit
need
unit
tests
suggest
eclipse
classic
3
4
2
available
link
choose
use
eclipse
might
find
following
preconfigured
workspace
use
informatics
43
eclipse
workspace
grade
work
will
using
eclipse
classic
3
4
2
informatics
43
eclipse
workspace
deliverables
required
submit
following
deliverables
zip
archive
containing
java
files
comprise
program
unit
tests
used
java
packages
required
files
arranged
folder
hierarchy
matches
package
hierarchy
include
class
files
files
generated
development
environment
make
sure
unit
tests
written
java
classes
whose
names
end
word
test
can
distinguish
others
document
reflecting
implementation
must
single
document
one
following
formats
microsoft
word
doc
docx
rich
text
format
rtf
pdf
pdf
follow
link
discussion
submit
files
via
checkmate
ics
built
online
assignment
submission
system
aware
holding
rules
specified
document
including
one
says
responsible
submitting
version
specification
want
graded
regrade
work
simply
submitted
wrong
version
accidentally
originally
written
alex
thornton
spring
2009
