ics 22 cse 22 fall 2012 unit testing test driven development junit code examples 
step step code examples 
ics
22
cse
22
fall
2012
news
course
reference
schedule
lab
manual
code
examples
alex
ics
22
cse
22
fall
2012
unit
testing
test
driven
development
junit
code
examples
examples
lecture
went
iterative
process
developing
functionality
class
called
songcollection
name
suggests
intended
define
kind
object
stores
collection
songs
document
briefly
explains
motivation
behind
step
took
provides
links
complete
version
code
including
course
tests
complete
iteration
iteration
added
one
small
piece
functionality
class
iteration
1
size
newly
created
collection
zero
first
iteration
adds
one
simple
piece
functionality
songcollection
class
ensuring
size
newly
created
collection
zero
tried
best
lecture
follow
steps
explained
document
follow
rigorously
writing
test
first
step
writing
test
new
feature
actually
written
feature
using
junit
able
write
minimal
amount
code
perform
test
leveraging
junit
framework's
handling
many
tedious
details
can
concentrate
efforts
trying
test
intended
behavior
rather
worrying
details
gather
test
results
present
user
begin
defining
class
test
songcollection
class
reasonable
name
songcollectiontest
class
need
anything
special
plug
junit
framework
necessary
create
differently
within
eclipse
eclipse
know
intended
put
tests
eclipse
put
code
class
us
code
use
immediately
deleted
public
class
songcollectiontest
next
need
test
checks
whether
size
newly
created
collection
zero
write
junit
based
test
add
method
test
class
public
returns
void
takes
parameters
includes
test
annotation
name
choose
test
critical
say
specifically
trying
test
good
name
might
sizeofnewcollectioniszero
junit
test
method
considered
failed
throws
exception
succeeded
assertions
used
implement
methods
easily
assertion
something
believe
true
point
test
true
exception
thrown
exception
thrown
case
interested
knowing
whether
two
things
equal
zero
size
new
collection
zero
expect
size
collection
observe
method
assertequals
can
called
make
kind
comparison
expect
observe
throws
exception
comparison
fails
effect
succeeds
public
class
songcollectiontest
test
public
void
sizeofnewcollectioniszero
songcollection
emptycollection
new
songcollection
assertequals
0
emptycollection
size
making
test
compile
now
compile
test
fails
following
error
message
songcollection
resolved
type
error
message
telling
us
songcollection
class
missing
surprise
since
created
yet
order
make
test
compile
need
declare
one
since
error
messages
telling
us
recompile
public
class
songcollection
now
recompile
get
new
error
message
method
size
undefined
type
songcollection
compiler
now
telling
us
missing
size
method
write
one
care
stage
just
want
compile
write
method
always
returns
0
public
class
songcollection
public
int
size
return
0
finally
able
compile
test
code
successfully
running
test
making
pass
next
run
test
succeeds
success
case
accidental
nice
test
failed
now
write
minimum
amount
code
makes
test
pass
refactoring
since
just
getting
started
improvements
can
made
either
test
code
done
first
iteration
now
songcollection
class
one
feature
size
new
list
zero
also
test
will
allow
us
verify
feature
will
continue
work
going
forward
test
code
end
iteration
songcollectiontest
javasongcollection
java
iteration
2
size
collection
creating
adding
song
1
iteration
add
one
piece
functionality
verifying
adding
one
song
newly
created
collection
size
collection
1
begin
writing
test
public
class
songcollectiontest
test
public
void
afteraddingonesongthesizeisone
song
song
new
song
songcollection
collection
new
songcollection
collection
add
song
assertequals
1
collection
size
now
need
make
test
compile
necessitates
song
class
since
depending
song
class
actually
anything
need
put
code
yet
remember
write
code
test
shows
will
work
done
public
class
song
also
need
put
add
method
songcollection
class
note
goal
present
make
test
compile
write
code
method
since
method
will
compile
without
code
public
class
songcollection
public
void
add
song
songtoadd
point
test
will
compile
will
fail
since
course
added
code
make
size
list
1
add
song
fix
problem
add
new
field
songcollection
stores
number
songs
requires
constructor
initialize
along
minor
changes
size
add
methods
public
class
songcollection
private
int
songcount
public
songcollection
songcount
0
public
int
size
return
songcount
public
void
add
song
songtoadd
songcount
1
notice
something
know
will
wrong
later
set
songcount
1
add
method
rather
adding
1
reason
code
wrote
direct
way
make
test
pass
worry
case
adding
two
songs
next
iteration
now
thing
want
number
songs
1
add
song
every
little
step
take
making
modifications
compile
code
tests
compiling
successful
run
tests
keeps
us
honest
helps
us
ensure
none
changes
making
will
break
functionality
already
worked
links
completed
code
point
songcollectiontest
javasongcollection
javasong
java
time
little
refactoring
always
remember
implemented
functionality
want
one
iteration
actually
done
iteration
still
need
see
refactoring
can
done
either
code
tests
point
two
tests
songcollectiontest
class
create
manipulate
songcollection
also
pretty
good
sense
tests
will
probably
need
seem
like
big
deal
face
harm
create
collection
time
consider
happen
25
tests
written
changed
design
songcollection
constructor
required
parameter
25
tests
ugh
isolating
code
creates
songcollections
tests
one
place
set
things
will
change
one
place
time
introduce
separate
method
set
execute
test
marking
method
annotation
will
tell
junit
execute
method
test
class
similarly
can
use
annotation
mark
method
run
test
class
case
method
create
songcollection
object
store
field
can
use
test
methods
public
class
songcollectiontest
private
songcollection
collection
public
void
createemptycollection
collection
new
songcollection
test
public
void
sizeofnewcollectioniszero
assertequals
0
collection
size
test
public
void
afteraddingonesongthesizeisone
song
song
new
song
collection
add
song
assertequals
1
collection
size
careful
make
one
minor
change
time
compiling
running
tests
along
way
ensure
made
mistakes
refactoring
changed
tests
improved
design
code
somewhat
eliminating
duplicate
code
goal
refactoring
improve
design
code
without
changing
similarly
realize
creating
song
using
new
song
will
work
get
code
realize
need
songs
artists
titles
isolate
code
creates
new
song
one
place
public
class
songcollectiontest
private
songcollection
collection
public
void
createemptycollection
collection
new
songcollection
test
public
void
sizeofnewcollectioniszero
assertequals
0
collection
size
test
public
void
afteraddingonesongthesizeisone
song
song
createtestsong
collection
add
song
assertequals
1
collection
size
private
song
createtestsong
return
new
song
new
version
code
available
link
songcollectiontest
javasongcollection
javasong
java
iteration
3
continuing
add
songs
will
continue
increase
size
1
time
combined
functionality
first
two
iterations
iteration
will
allow
us
feel
confident
handling
size
collection
add
songs
will
continue
work
matter
many
songs
add
always
start
test
will
verify
size
increases
time
add
one
hundred
songs
public
class
songcollectiontest
test
public
void
sizegrowsaccuratelyassongsareadded
int
1
code
now
compiles
new
test
pass
since
size
collection
will
remain
1
even
adding
two
songs
can
fix
problem
making
relatively
minor
change
add
method
songcollection
class
public
class
songcollection
public
void
add
songcount
now
code
compiles
tests
pass
complete
set
code
stands
now
songcollectiontest
javasongcollection
javasong
java
remaining
question
whether
refactoring
can
done
everything
smells
pretty
good
point
move
next
iteration
iteration
4
song
added
collection
collection
contains
song
now
tackle
problem
ensuring
collection
contains
song
song
added
first
need
test
public
class
songcollectiontest
test
public
void
afteraddingsongtocollectionthecollectioncontainsthesong
song
song
createsong
collection
add
song
asserttrue
collection
contains
song
notice
test
uses
different
assertion
method
called
asserttrue
takes
boolean
value
parameter
throws
exception
value
true
can
assert
general
condition
value
equal
value
case
want
assert
true
collection
contains
song
added
course
compile
test
discover
compile
dreamed
contains
method
yet
exist
need
add
one
songcollection
class
want
test
compile
write
way
public
class
songcollection
public
boolean
contains
song
songtofind
return
false
decided
make
method
return
true
either
fine
since
want
test
compile
now
test
fails
contains
method
always
says
song
collection
matter
fix
problem
absolute
minimum
amount
code
method
always
return
true
time
however
going
anticipate
next
test
going
opposite
condition
ensuring
collection
contain
song
added
point
need
choose
underlying
collection
start
storing
songs
since
sure
point
kinds
searches
might
songs
might
well
begin
flat
data
structure
arraylist
song
discover
later
need
fast
searching
based
key
song
id
can
make
better
decision
data
structure
implement
appropriate
changes
remember
goal
test
driven
development
write
minimum
amount
code
make
test
pass
decisions
deferred
need
made
justifiable
reason
mean
arraylists
right
data
structure
ultimately
often
right
first
choice
get
better
idea
actually
need
updated
version
program
adding
support
new
feature
verifying
tests
indeed
pass
looks
like
songcollectiontest
javasongcollection
javasong
java
need
refactoring
test
class
smells
pretty
good
point
refactoring
necessary
something
rotten
songcollection
class
work
arraylist
already
namely
tracking
number
songs
stored
collection
need
remove
code
track
number
let
arraylist
work
instead
always
make
one
minor
change
time
compiling
re
running
tests
step
make
sure
screwed
note
need
write
new
tests
want
program
behave
way
improve
design
process
code
looks
like
songcollectiontest
javasongcollection
javasong
java
continue
see
goes
far
got
lecture
try
taking
process
little
bit
farther
adding
features
one
time
using
just
process
remember
keep
features
simple
remember
write
tests
first
remember
use
compiler
tests
ensure
every
step
take
made
mistakes
every
minutes
sometimes
per
minute
standing
stable
ground
tests
pass
minimum
amount
code
make
pass
adapted
similar
document
written
alex
thornton
informatics
42
winter
2005
winter
2007
