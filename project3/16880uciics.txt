ics 22 cse 22 fall 2012 project 4 gone movies 
project 4 
ics
22
cse
22
fall
2012
news
course
reference
schedule
lab
manual
code
examples
alex
ics
22
cse
22
fall
2012
project
4
gone
movies
due
date
time
monday
november
19
11
59pm
project
completed
individually
background
business
scientific
contexts
sometimes
costly
make
changes
way
things
yet
sometimes
changes
consider
might
yield
great
benefits
sometimes
know
yield
benefits
without
experimentation
experimentation
costly
might
never
willing
pay
cost
finding
whether
changes
considering
worthwhile
computers
role
play
situations
like
can
write
program
will
show
things
different
make
changes
compare
result
things
now
can
cheaply
find
answer
looking
make
change
turns
positive
change
can
proceed
making
happen
project
consider
situation
like
one
suppose
movie
theater
chain
millennium
cinemas
interested
finding
ways
attract
customers
away
larger
well
established
rivals
proliferation
megaplex
movie
theaters
last
couple
decades
millennium
management
believes
one
problem
movie
goers
face
long
wait
line
buy
tickets
seek
solution
will
allow
customers
spend
less
time
line
hoping
will
dramatically
improve
sales
best
interest
spend
lot
time
running
experiments
especially
since
things
might
want
try
well
end
lengthening
customers'
waits
line
ultimately
hurting
business
large
company
can
spend
money
trying
things
might
negative
impact
absorb
loss
move
small
kind
freedom
aid
analysis
time
customers
spend
line
build
program
will
simulate
various
arrangements
lines
ticket
windows
allow
find
optimal
combinations
theaters
project
will
give
practice
implementing
queues
well
introduce
concept
simulation
program
approximates
real
world
situation
case
movement
customers
arrive
theater
stand
line
buy
tickets
keeps
track
statistics
also
chance
gain
design
skills
starting
project
scratch
worry
though
give
plenty
help
along
way
reminder
partner
project
work
expected
completed
individually
partner
use
pair
programming
technique
program
millennium
requires
program
will
allow
simulate
variety
arrangements
ticket
lines
ticket
windows
patterns
customer
arrival
will
write
program
gives
flexible
simulation
ability
will
allow
user
specify
number
ticket
windows
whether
will
single
line
one
per
window
speed
ticket
attendant
can
process
customers
simulation
parameters
specified
program
processes
file
indicates
arrival
customers
simulating
arrival
ticket
lines
tracking
long
customer
spends
line
ultimately
calculating
statistics
window
line
arrangements
millennium
many
different
styles
theaters
single
screen
theaters
showing
classic
foreign
films
larger
multi
screen
varieties
showing
latest
releases
support
various
sizes
styles
theaters
wishes
investigate
two
arrangements
ticket
windows
lines
one
ticket
windows
line
one
ticket
windows
one
line
feeding
arrangement
lines
will
also
interested
investigating
number
windows
necessary
support
various
numbers
patterns
customers
will
use
simulator
determine
contexts
arrangement
will
appropriate
input
file
order
simulate
different
types
theaters
simulator
will
need
accept
set
parameters
specified
input
file
input
file
specifies
number
ticket
windows
whether
single
ticket
line
separate
line
window
addition
input
file
will
contain
list
customer
arrivals
specifying
many
customers
will
arrive
theater
times
example
input
file
italicized
portions
included
descriptive
purposes
included
actual
input
file
short
simulation
brief
description
simulation
5
length
simulation
minutes
2
number
ticket
windows
many
lines
single
multiple
45
number
seconds
takes
process
customer
window
1
35
number
seconds
takes
process
customer
window
2
1
30
one
customer
arrives
30
seconds
simulation
5
35
five
customers
arrive
35
seconds
simulation
3
45
three
customers
arrive
45
seconds
simulation
1
60
one
customer
arrives
60
seconds
simulation
1
90
one
customer
arrives
90
seconds
simulation
end
end
tag
marks
end
customer
arrivals
input
file
broken
two
parts
setup
section
describes
arrangement
ticket
windows
lines
customer
arrival
section
lists
arrival
customers
setup
section
first
line
setup
section
brief
description
perhaps
sentence
explains
purpose
simulation
next
line
specifies
length
simulation
following
next
line
specifies
many
ticket
windows
will
simulation
followed
either
line
specifies
whether
single
ticket
line
one
ticket
line
per
window
finally
line
windows
numbered
1
states
many
seconds
takes
attendant
window
sell
ticket
single
customer
must
positive
number
greater
zero
ticket
windows
though
pre
defined
maximum
number
seconds
attendant
takes
process
customer
must
also
positive
number
reading
setup
section
simulator
ready
begin
processing
arrival
departure
customers
applicable
data
structures
created
initialized
appropriately
customer
arrival
section
line
customer
arrival
section
input
file
describes
arrival
number
customers
particular
time
time
specified
number
seconds
since
simulation
started
must
increase
file
processed
time
line
file
must
greater
time
line
came
number
customers
must
positive
customers
arrive
get
one
ticket
lines
single
line
obviously
get
line
multiple
lines
customer
processed
one
one
one
get
line
fewest
number
customers
already
event
tie
always
get
one
corresponding
lowest
numbered
window
maximum
number
customers
can
particular
line
window
unoccupied
customer
immediately
moves
corresponding
ticket
line
window
customer
will
stay
appropriate
number
seconds
time
customer
will
leave
window
will
immediately
replaced
another
sake
simplicity
assume
simulator
customers
may
move
one
ticket
line
another
words
suppose
one
ticket
line
per
window
one
first
window
one
first
line
three
customers
second
line
will
assume
customers
second
line
will
go
first
window
obviously
non
issue
one
single
line
assumptions
input
file
may
assume
input
file
formatted
described
may
assume
will
exactly
file
showing
example
may
assume
word
number
expected
will
always
exactly
two
integers
line
supposed
two
integers
may
assume
restrictions
customer
arrivals
ascending
order
respect
time
will
hold
will
know
run
program
name
input
file
specified
command
line
argument
project
3
like
refresh
memory
java
within
eclipse
read
relevant
section
project
3
write
class
main
method
called
simulator
able
run
program
predictable
way
final
report
simulation
complete
simulator
print
final
report
final
report
prints
summary
statistics
simulation
system
final
report
must
contain
following
information
ticket
window
number
tickets
sold
window
may
assume
customer
buys
exactly
one
ticket
percentage
time
spent
idle
can
calculate
counting
number
seconds
customer
window
divide
total
number
seconds
simulation
ticket
line
number
customers
still
waiting
line
maximum
length
line
ever
reached
average
amount
time
customers
waited
line
buy
tickets
count
customers
reached
window
though
may
count
still
window
simulation
ends
maximum
amount
time
customer
waited
line
including
customers
still
line
time
simulation
ends
overall
total
number
tickets
sold
windows
average
amount
time
customers
waited
line
buy
tickets
count
customers
reached
window
though
may
count
still
window
simulation
ends
average
amount
time
customer
spent
ticket
window
naturally
count
customers
reached
window
bought
ticket
count
customers
still
window
simulation
ends
example
file
processed
follows
step
step
explanation
processing
example
file
shown
previous
section
conclusion
example
statistics
shown
times
reported
terms
seconds
final
output
program
need
look
like
suggest
include
something
like
program's
output
simply
way
get
final
statistics
come
correctly
customers
moving
right
places
right
times
simulation
also
provides
us
ability
give
partial
credit
able
get
entire
program
finished
problems
get
complex
worth
considering
ways
reach
stable
ground
partial
solutions
working
partial
output
great
example
time
0
window
1
window
2
idle
one
linetime
30
one
customer
arrives
gets
linetime
30
customer
goes
window
1
spent
0
seconds
line
time
35
five
customers
arrive
get
linetime
35
customer
goes
window
2
spent
0
seconds
line
time
45
three
customers
arrive
get
linetime
60
one
customer
arrives
gets
linetime
70
customer
leaves
window
2
spent
35
seconds
window
2
time
70
customer
goes
window
2
spent
35
seconds
line
time
75
customer
leaves
window
1
spent
45
seconds
window
1
time
75
customer
goes
window
1
spent
40
seconds
line
time
90
one
customer
arrives
gets
linetime
105
customer
leaves
window
2
spent
35
seconds
window
2
time
105
customer
goes
window
2
spent
70
seconds
line
time
120
customer
leaves
window
1
spent
45
seconds
window
1
time
120
customer
goes
window
1
spent
85
seconds
line
time
140
customer
leaves
window
2
spent
35
seconds
window
2
time
140
customer
goes
window
2
spent
95
seconds
line
time
165
customer
leaves
window
1
spent
45
seconds
window
1
time
165
customer
goes
window
1
spent
120
seconds
line
time
175
customer
leaves
window
2
spent
35
seconds
window
2
time
175
customer
goes
window
2
spent
130
seconds
line
time
210
customer
leaves
window
1
spent
45
seconds
window
1
time
210
customer
leaves
window
2
spent
35
seconds
window
2
time
210
customer
goes
window
1
spent
150
seconds
line
time
210
customer
goes
window
2
spent
120
seconds
line
time
245
customer
leaves
window
2
spent
35
seconds
window
2
time
245
window
2
idletime
255
customer
leaves
window
1
spent
45
seconds
window
1
time
255
window
1
idletime
300
simulation
ends
statistics
example
file
statistics
see
processing
example
file
note
decimal
numbers
may
hundredth
cases
depending
whether
handle
rounding
fine
window
1
5
tickets
sold25
00
time
idle
75
seconds
300
window
2
6
tickets
sold30
00
time
idle
90
seconds
300
line
customers
waiting
end
simulationmaximum
length
8
customersavg
wait
time
76
82
secondsmaximum
wait
time
150
seconds
overall
11
tickets
soldavg
wait
time
76
82
secondsavg
time
spent
window
39
55
seconds
additional
examples
test
simulation
want
run
examples
just
one
example
file
provided
however
going
providing
one
example
part
goal
writing
program
find
way
sure
works
means
need
test
case
simulation
means
need
come
interesting
inputs
figure
output
see
program
generates
right
output
part
expecting
project
though
will
required
submit
additional
input
files
fact
can
arduous
task
build
input
files
figure
expected
output
encourage
share
input
files
expected
outputs
one
another
everyone
can
benefit
one
another's
insights
testing
program
suggestions
requirements
design
simulator
many
ways
implement
simulator
will
impose
particular
one
though
will
make
specific
requirements
part
project
however
suggestions
might
help
get
started
along
design
requirements
deciding
classes
somewhat
simplistic
often
effective
way
break
large
design
classes
consider
description
desired
system
look
nouns
technique
give
complete
perfect
design
will
least
give
good
feel
major
abstractions
program
using
approach
program
might
discover
following
ideas
probably
others
course
depending
describe
program
may
discover
different
abstractions
customer
simulator
intended
keep
track
customers
enter
lines
enter
windows
leave
area
tickets
queue
queue
object
manages
set
objects
standing
line
waiting
access
shared
resource
case
program
objects
customers
shared
resource
ticket
window
however
queue
class
built
generic
reused
programs
ticket
line
one
central
features
simulation
customers
enter
back
lines
work
way
emerge
front
example
concept
queue
will
required
use
implement
ticket
line
good
way
implement
ticket
line
contain
queue
distinction
queue
ticket
line
queue
generic
can
store
kind
object
intended
possibly
reused
programs
ticket
line
specifically
manages
customers
keeps
tracks
statistics
necessary
program
ticket
window
another
central
feature
simulation
one
customer
time
can
occupy
ticket
window
window
predetermined
amount
time
customer
will
need
spend
possible
window
idle
customer
ticket
window
will
need
keep
track
necessary
statistics
specific
window
theater
broader
abstraction
theater
area
contains
ticket
lines
ticket
windows
purpose
theater
abstraction
prevent
parts
program
needing
aware
arrangement
lines
windows
example
customer
arrival
processed
theater
object
can
charge
placing
customers
appropriate
lines
theater
object
also
track
summary
statistics
entire
simulation
simulation
object
manages
entire
simulation
delegating
tasks
theater
will
delegate
tasks
objects
ticket
lines
ticket
windows
input
file
can
read
processed
object
will
also
manage
simulation
loop
describe
bit
later
clock
since
simulation
clock
keeps
track
current
time
expressed
number
seconds
since
simulation
started
makes
sense
one
object
shared
classes
keeps
track
current
time
using
queue
implement
ticket
line
required
build
queue
class
project
use
implement
ticket
line
queue
generic
queue
used
programs
required
implemented
linked
list
major
operations
enqueue
dequeue
front
written
will
run
1
time
separately
probably
find
need
define
ticket
line
class
specifically
deals
customers
keeps
track
statistics
necessary
program
two
reasons
wise
separate
queue
ticket
line
queue
can
reused
programs
can
separate
logic
stores
manipulates
queue
customers
logic
tracks
statistics
simulation
program
load
setup
information
input
file
first
setup
simulation
create
theater
object
appropriate
initial
state
based
values
can
implement
simulation
various
ways
suggest
following
approach
means
efficient
way
implement
simulation
efficient
enough
purposes
striking
good
balance
efficiency
ease
implementation
course
write
simulation
loop
iteration
simulates
one
second
second
loop
performs
following
major
tasks
find
current
time
remember
current
time
tracked
number
seconds
since
simulation
started
obviously
start
zero
new
customers
arriving
line
current
time
add
appropriate
lines
check
ticket
window
customer
first
customer
corresponding
ticket
line
removed
line
arrive
window
customer
see
customer
finished
customer
finished
window
specified
number
seconds
customer
finished
leaves
immediately
replaced
first
customer
corresponding
ticket
line
specified
number
seconds
simulation
time
elapse
simulation
ends
accumulated
statistics
printed
memory
usage
may
load
customer
arrivals
memory
beginning
simulation
instead
read
customer
arrivals
memory
one
line
time
necessary
reading
customer
arrivals
memory
ahead
time
will
yield
substantial
penalty
quality
solution
score
project
testing
satisfy
testing
portion
project
write
junit
based
test
class
tests
queue
implementation
necessary
test
parts
program
welcome
test
anything
else
wish
using
junit
one
thing
understand
unit
testing
design
program
big
effect
whether
unit
tests
easy
even
possible
write
positive
feedback
loop
design
permits
unit
tests
written
one
usually
balance
better
alternative
consider
ways
can
make
much
code
unit
testable
possible
limitations
must
implement
linked
list
functionality
may
use
pre
existing
linked
list
implementations
java
util
linkedlist
solution
like
may
reuse
linkedlist
class
previous
projects
though
will
need
make
singly
linked
list
head
tail
references
various
queue
operations
will
run
constant
time
may
also
need
add
one
methods
starting
point
unlike
previous
projects
will
provided
code
starting
point
one
believe
now
skills
write
program
scratch
quite
bit
design
advice
write
sure
spend
time
reading
understanding
ask
questions
discussion
chat
newsgroup
plenty
help
available
encourage
start
early
deliverables
must
submit
java
files
please
turn
class
files
files
generated
development
environment
follow
link
discussion
submit
project
testing
section
adjusted
alex
thornton
winter
2012
section
detailing
use
junit
4
eclipse
rewritten
user
interface
changed
alex
thornton
fall
2008
testing
requirement
restored
rewritten
alex
thornton
spring
2007
design
advice
rewritten
testing
requirement
removed
requirements
adjusted
fit
previous
projects
quarter's
ics
22
offering
alex
thornton
fall
2004
minor
changes
alex
thornton
fall
2002
modifications
inclusion
junit
project
alex
thornton
spring
2002
re
tooled
new
ics
22
including
addition
testing
component
alex
thornton
winter
2002
screws
tightened
alex
thornton
summer
2001
minor
fixes
disambiguation
alex
thornton
spring
2001
originally
written
alex
thornton
winter
2001
