lab assignment d 
lab assignment d 
informatics
42
winter
2012
david
kay
uc
irvine
lab
assignment
assignment
due
end
lab
monday
february
27
pair
programming
assignment
someone
worked
yet
quarter
make
sure
joel
knows
paired
problem
assignment
originally
written
stanford
involves
building
program
reads
grammar
generates
specified
number
strings
sentences
grammar
work
program
can
get
broader
idea
possible
trying
applet
http
www
cs
faculty
stanford
edu
zelenski
rsg
extension
request
grammar
default
pretty
funny
also
try
cs
assignment
programming
bug
math
expression
along
others
strike
fancy
follow
directory
collected
grammar
files
link
bottom
page
general
idea
kind
input
program
will
take
pick
grammars
look
math
expression
easiest
follow
differences
format
grammars
shown
shown
assignment
readable
use
format
assignment
entertainment
application
program
sometimes
need
test
software
lot
data
can
conveniently
generate
hand
program
like
need
create
grammar
describing
test
data
can
produce
much
want
background
grammars
grammar
collection
substitution
rules
describe
set
strings
sentences
sentence
sequence
terminal
symbols
just
terminals
different
kinds
sentence
fragments
represented
nonterminal
symbols
variables
rule
variable
specifying
can
replaced
one
set
possible
sequences
variables
terminals
one
variables
designated
start
variable
means
represents
entire
sentence
example
grammar
follows
supplement
ones
covered
class
start
variable
variables
terminals
0
1
¡÷
0a1a
bb
¡÷
grammar
says
variable
can
replaced
either
sequence
0a1a
variable
variable
can
replaced
conceptual
point
view
grammar
can
used
generate
strings
terminals
following
manner
point
precisely
program
will
generate
strings
program
will
something
equivalent
effect
begin
start
variable
long
still
variables
substituted
pick
variable
rule
variable
left
hand
side
replace
variable
right
hand
side
rule
chose
sequence
substitutions
leading
start
variable
string
terminals
called
derivation
leftmost
variable
always
replaced
step
derivation
called
leftmost
derivation
string
00
1
1
can
generated
grammar
following
leftmost
derivation
begins
start
variable
one
substitution
made
step
proves
can
done
new
part
step
shown
underlined
0a1a
00a1a1a
00b1a1a
00
1a1a
00
1b1a
00
1
1a
00
1
1b
00
1
1
since
00
1
1
can
generated
grammar
say
string
00
1
1
language
grammar
words
language
grammar
set
strings
can
generated
many
grammars
including
one
infinite
number
strings
languages
grammar
generates
infinite
number
strings
since
rule
¡÷
0a1a
can
used
arbitrary
number
times
derivation
random
sentence
generator
grammar
will
describe
set
sentences
may
indeed
infinite
sentence
generate
will
sequence
characters
characters
terminals
grammar
variables
grammar
will
describe
sentence
fragments
start
variable
describing
entire
sentence
program
will
write
python
program
prompts
user
three
things
name
file
containing
grammar
name
start
symbol
grammar
number
sentences
generate
grammar
grammar
file
format
grammar
file
will
contain
series
grammar
rules
format
described
simple
cat
dog
example
class
available
format
grammar
facile
programs
rule
starts
left
curly
brace
line
ends
right
curly
brace
line
lines
file
outside
rules
ignored
program
can
serve
annotations
comments
rule
file
opening
brace
first
line
rule
rule's
left
hand
side
remember
left
hand
side
rule
always
single
nonterminal
variable
grammar
files
nonterminal
variable
names
enclosed
square
brackets
remove
store
variable
names
program
variable
names
will
contain
whitespace
spaces
tabs
newlines
remaining
lines
rule
closing
brace
alternative
right
hand
side
different
way
rewriting
left
hand
side
righthand
side
consists
sequence
variables
whose
names
enclosed
brackets
course
strings
terminal
symbols
may
contain
whitespace
though
may
use
python
conventions
tab
newline
x20
hexadecimal
20
space
wondering
grammar
language
includes
brackets
terminal
alphabet
can
use
hexadecimal
escape
sequences
x5c
x5d
may
assume
grammar
files
will
always
correctly
formatted
anticipate
correct
errors
grammar
file
stage
first
make
sure
can
parse
input
file
correctly
seen
quarter
essential
part
many
programs
converting
data
external
form
internal
form
chosen
use
program
model
parsing
text
files
can
painstaking
tedious
although
python
provides
good
tools
help
usually
interesting
comfortable
able
use
python
write
real
programs
stage
just
produce
output
convinces
program
recognizing
tokens
input
file
correctly
try
store
data
program's
ultimate
data
structures
yet
partial
grammar
file
cat
dog
grammar
np
space
vp
art
output
might
look
like
rule
variable
rightside
variable
np
variable
space
variable
vp
rule
variable
art
rightside
terminal
rightside
terminal
match
precise
appearance
example
particularly
indentation
though
may
way
like
just
want
identify
token
function
dashes
make
sure
extra
whitespace
wrong
places
ultimately
remove
comment
code
since
output
part
program
specification
note
though
writing
kind
testing
code
valuable
technique
helps
sure
parsing
works
independent
parts
program
inhibited
writing
code
useful
development
just
make
final
product
stage
ii
implement
data
structures
program
possibly
classes
possibly
namedtuples
possibly
just
python
code
grammar
name
start
symbol
initial
variable
plus
collection
rules
rule
name
nonterminal
symbol
variable
collection
right
hand
sides
alternatives
rewriting
variable
choose
one
alternative
random
time
start
symbol
occurs
derivation
hint
might
just
implement
key
value
pair
right
hand
side
sequence
terminal
nonterminal
symbols
right
hand
side
rule
one
alternative
rewriting
nonterminal
symbol
symbol
either
nonterminal
must
rewritten
one
right
hand
sides
symbol's
rules
terminal
literal
character
string
appear
final
sentence
fill
data
structures
grammar
data
input
stage
iii
handle
derivations
specified
number
sentences
advice
sentence
generation
algorithm
data
structures
way
processing
part
derivation
probably
easiest
way
code
one
generate
function
can
called
data
structures
use
ladder
determine
data
structure
dealing
handle
structure
described
generate
sentence
grammar
look
rule
corresponding
start
variable
apply
call
generate
ultimately
return
string
sentence
terminals
generated
grammar
part
handled
separate
call
generate
generate
rule
choose
one
right
hand
sides
random
call
generate
generate
right
hand
side
go
symbol
left
right
whether
terminal
nonterminal
call
generate
generate
nonterminal
look
corresponding
rule
grammar
call
generate
returning
result
sentence
fragment
generate
terminal
simply
return
terminal's
value
sentence
fragment
find
python's
random
module
useful
import
can
use
choice
possibly
functions
done
submit
python
source
code
one
py
file
via
checkmate
also
submit
least
two
additional
grammar
files
pair
submit
just
one
solution
partners'
names
clearly
indicated
along
lines
alex's
facile
grammar
make
grammar
tiny
subset
scheme
python
see
kinds
programs
generates
can
see
full
grammars
scheme
python
links
course
reference
page
turn
usual
grading
criteria
lab
assignments
apply
fill
partner
evaluation
eee
modified
david
kay
winter
2012
originally
written
alex
thornton
heavy
influence
worst
joke
ever
alex
thornton
winter
2007
original
concept
mike
cleron
stanford
university
modified
adapted
allison
hansen
julie
zelinski
others
