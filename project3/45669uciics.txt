informatics 45 spring 2010 project 1 keep customer satisfied 
project 1 
informatics
45
spring
2010
news
course
reference
schedule
lab
manual
code
examples
alex
informatics
45
spring
2010
project
1
keep
customer
satisfied
project
plan
due
monday
april
5
11
59pm
program
due
wednesday
april
14
11
59pm
lessons
learned
due
friday
april
16
11
59pm
option
working
partner
using
pair
programming
technique
working
individually
introduction
software
comes
many
forms
runs
many
contexts
spend
lot
time
sure
also
interacting
graphical
user
interfaces
personal
computer
also
interact
software
aspects
life
many
electronic
devices
cell
phone
ipod
even
cheap
alarm
clock
substantially
made
software
car
touch
screen
lets
see
maps
plot
directions
change
air
conditioning
settings
view
current
mileage
along
number
embedded
systems
control
things
like
anti
lock
braking
traction
control
systems
keyless
entry
software
prominent
aspect
features
even
seem
user
interface
every
time
go
web
site
interacting
browser
also
separate
software
called
web
server
executing
another
machine
somewhere
world
software
also
user
interface
instead
tasked
responding
requests
web
pages
course
explore
variety
different
kinds
software
solves
different
kinds
problems
project
opens
exploration
constructing
software
systems
building
skills
writing
java
based
graphical
user
interfaces
find
skills
will
come
later
projects
though
will
pay
spend
time
experimenting
now
additionally
asked
work
project
without
told
every
detail
java
libraries
need
order
build
recurring
theme
quarter
will
cultivating
ability
discover
existing
components
will
help
solve
problems
learning
enough
decide
whether
help
figuring
enough
details
integrate
project
goal
leave
entirely
cold
happy
try
point
right
direction
feel
lost
want
build
confidence
work
toward
self
sufficiency
project
also
introduces
three
part
project
format
seeing
throughout
quarter
project
plan
will
write
document
detailing
planning
attacking
problem
posed
program
solution
problem
posed
summary
lessons
learned
will
discuss
went
well
three
components
project
will
never
due
simultaneously
want
write
plan
submit
proceeded
far
implementation
time
think
document
lessons
learned
implementation
submitted
choosing
partner
optional
begin
working
project
feel
free
choose
partner
among
people
lab
section
fine
even
preferable
read
project
write
ahead
time
though
hand
can
also
feel
free
work
alone
instead
trouble
finding
partner
notify
ta
can
assisted
finding
one
found
partner
notified
ta
pairing
end
lab
meeting
wednesday
april
1
will
required
work
alone
project
goal
partnerships
formed
meaningful
work
done
note
paired
work
includes
phases
project
including
project
plan
lessons
learned
documents
sure
read
section
entitled
pair
programming
front
page
lab
manual
way
business
informatics
45
essentially
prerequisite
courses
use
pair
programming
may
subtle
differences
worth
knowing
front
problem
asked
write
java
program
provides
graphical
user
interface
gui
acts
point
sale
system
fast
food
restaurant
called
se
chubs
goal
program
streamline
process
cashiers
follow
taking
customer
orders
calculating
totals
taxes
accepting
payment
usage
scenario
expected
customer
approaches
counter
orders
items
menu
cashier
inputs
order
program
program
calculates
total
tax
customer
pays
cashier
program
figures
appropriate
amount
change
prints
receipt
program
resets
current
order
cashier
can
start
fresh
handling
next
customer
program
must
meet
following
requirements
program
must
allow
cashier
input
combination
items
restaurant's
menu
fill
customer's
order
program
must
allow
items
restaurant's
menu
entered
program
required
handle
one
order
time
must
possible
remove
items
customer's
order
must
possible
cancel
entire
order
currently
progress
program
must
prominently
display
receipt
screen
order
specified
paid
simulates
ability
print
receipt
special
printer
program
must
able
distinguish
properly
items
taxable
items
customers
charged
sales
tax
taxable
items
others
program
must
always
calculate
totals
taxes
whole
pennies
example
total
can
3
47
never
3
475
program
must
provide
way
show
total
amount
collected
orders
well
total
amount
tax
collected
since
program
started
running
se
chubs
accepts
cash
payments
necessary
handle
checks
credit
cards
though
can
offer
options
like
granted
unlikely
able
offer
actual
credit
card
processing
can
feel
free
fake
wish
restaurant's
menu
se
chubs
locations
offer
menu
presently
contains
following
items
itempricetaxable
cheese
enchilada
2
59yeschicken
enchilada
3
59yesbeef
taco
1
69yeschicken
taco
1
89yesfish
taco
2
39yesbean
cheese
burrito
3
19yeschicken
burrito
5
49yessteak
burrito
6
49yescarnitas
burrito
6
79yeschips
salsa
99yesguacamole
2
49nosmall
drink
1
45nolarge
drink
1
95no
like
restaurants
se
chubs
varies
menu
time
time
program
handle
menu
changes
gracefully
sales
tax
se
chubs
restaurants
california
charges
sales
tax
though
tax
rate
varies
one
location
another
changes
time
time
reason
varies
sales
tax
generally
combination
statewide
tax
taxes
imposed
individual
counties
cities
even
smaller
localities
program
required
know
factors
go
determining
sales
tax
rate
particular
location
must
way
instruct
program
proper
rate
many
details
purposefully
left
unspecified
project
requirements
deliberately
vague
sense
describe
business
problem
solved
rather
exact
details
program
solve
particular
requirements
specifically
user
interface
look
like
something
design
way
think
appropriate
also
specified
precise
format
information
menu
sales
tax
rate
made
available
program
amount
detail
specified
real
world
software
development
scenarios
varies
dramatically
complete
lack
specification
one
extreme
every
detail
every
part
system
specified
tradeoffs
along
spectrum
explore
thoroughly
courses
leaving
project
open
ended
give
chance
exercise
creativity
well
consider
comment
effects
decisions
along
way
remember
though
goal
build
something
cool
necessarily
build
something
solves
business
problem
nothing
wrong
cool
program
solves
problem
straightforward
program
addresses
requirements
vastly
better
cool
program
ignores
misunderstands
planning
phase
software
development
projects
generally
start
planning
phase
specific
activities
done
planning
phase
vary
project
project
line
divides
planning
phase
subsequent
phases
can
somewhat
blurry
one
goals
generally
include
following
understand
problem
domain
enough
depth
able
implement
test
project
understand
requirements
system
enough
detail
able
make
design
decisions
project
user
interface
might
need
look
like
project
will
integrate
software
explore
libraries
might
available
help
provide
portions
required
functionality
form
already
implemented
tested
always
preferable
use
something
complete
battle
tested
assuming
good
fit
design
solves
problem
build
one
prototypes
portions
system
gain
understanding
libraries
might
use
design
approaches
might
take
especially
important
delving
territory
new
often
quarter
devise
list
programming
testing
tasks
need
establish
ones
dependent
others
estimate
amount
time
might
take
complete
many
people
working
project
often
followed
divvying
work
among
course
issue
paired
expected
pair
programming
shared
ownership
everything
splitting
work
partner
steps
apply
every
project
example
might
already
understand
problem
domain
might
enough
experience
technologies
using
prototypes
necessary
reasonable
set
goals
aim
encourage
consider
experimenting
prototyping
parts
program
early
process
might
find
code
write
early
worth
keeping
might
also
learned
enough
experience
know
go
way
feel
though
every
line
code
write
something
need
keep
forever
even
every
line
code
write
gets
step
closer
finished
one
things
makes
good
software
designer
willingness
make
alterations
design
go
well
willingness
sometimes
delete
heavily
rework
large
chunks
code
realize
going
wrong
direction
value
prototyping
spend
less
time
polishing
code
may
eventually
throw
away
focusing
instead
overall
approach
project
plan
encouraged
experiment
prototypes
program
early
however
write
polish
test
entire
program
will
required
write
project
plan
will
recurring
requirement
course
project
will
begin
brief
planning
phase
required
write
project
plan
project
plan
required
address
following
questions
also
free
include
information
like
include
part
goal
satisfy
us
purposes
grading
large
part
goal
consider
planning
sit
will
user
interface
designed
specifically
will
cashiers
use
user
interface
enter
orders
accept
payments
cancel
orders
view
day's
totals
necessary
show
mock
ups
user
interface
welcome
like
list
tasks
expect
work
order
complete
implementation
expecting
break
level
individual
methods
classes
just
like
see
big
picture
tasks
implement
feature
shows
receipt
tasks
dependent
others
expect
will
need
change
program
restaurant's
menu
changes
expect
will
need
change
program
sales
tax
rate
changes
aspects
project
pose
biggest
risk
success
anticipate
difficulty
aspects
project
post
least
risk
success
parts
expect
able
handle
relative
ease
project
plan
due
monday
april
5
11
59pm
see
section
titled
deliverables
information
submit
various
parts
project
writing
program
program
written
entirely
java
gui
built
using
swing
library
part
large
library
ships
java
addition
swing
free
use
part
java
library
find
helpful
though
permitted
use
components
open
source
components
project
restriction
may
well
relaxed
future
now
like
focus
attention
java
swing
strongly
suggest
using
eclipse
development
environment
described
front
page
lab
manual
informatics
45
eclipse
workspace
one
helpful
features
eclipse
helps
organize
work
one
project
many
easily
also
gives
ability
tweak
wide
variety
settings
version
java
use
compile
programs
fonts
colors
displayed
editor
style
code
eclipse
generates
workspace
repository
files
make
projects
settings
workspace
stored
hard
drive
within
single
folder
start
eclipse
select
workspace
folder
like
use
suggest
using
single
worksapce
work
quarter
will
give
easy
access
previous
work
well
maintain
settings
one
project
next
eclipse
provides
large
set
options
allow
configure
lot
experience
using
though
hard
know
options
change
change
unfortunately
default
settings
entirely
appropriate
us
course
additionally
personal
preferences
tend
differ
can
sometimes
make
difficult
pair
work
together
productively
keep
things
straightforward
us
quarter
use
initial
eclipse
workspace
created
empty
workspace
settings
appropriate
use
quarter
settings
will
match
settings
used
ta
grading
work
official
workspace
course
available
link
informatics
45
eclipse
workspace
workspace
provided
zip
format
use
unzip
folder
place
able
find
working
ics
labs
one
good
place
put
drive
will
available
regardless
machine
logged
example
might
put
workspace
folder
named
45workspace
might
instead
want
store
usb
memory
stick
portable
media
sure
keep
backup
case
lose
original
note
mac
users
intend
use
eclipse
machines
zip
archive
may
appear
empty
contents
folder
called
metadata
files
folders
whose
names
begin
character
hidden
mac
os
default
go
ahead
unzip
archive
anyway
limitations
visual
gui
development
tools
limits
project
prefer
write
code
gui
hand
can
understand
mechanics
control
creation
sizing
layout
event
handling
another
restriction
apt
relax
later
quarter
focus
placed
things
due
date
program
due
wednesday
april
14
11
59pm
see
section
titled
deliverables
information
submit
various
parts
project
assessing
lessons
learned
completed
implementation
submitted
take
little
time
reflect
experience
goal
course
build
variety
skills
related
constructing
quality
software
end
like
stop
think
experience
project
way
easing
path
follow
future
projects
submitting
program
need
write
lessons
learned
document
will
another
recurring
requirement
course
lessons
learned
document
reflect
least
following
questions
project
plan
free
include
information
like
include
satisfy
us
also
way
solidifying
thought
process
building
journal
might
refer
future
course
extent
follow
project
plan
implementing
program
features
implement
differently
specified
plan
decide
implement
differently
couple
biggest
successes
project
features
felt
turned
well
challenges
able
overcome
forces
think
helped
successful
cases
couple
aspects
project
gone
better
think
problematic
will
differently
next
time
ensure
handle
better
think
swing
library
far
like
dislike
lessons
learned
document
due
friday
april
16
11
59pm
see
section
titled
deliverables
information
submit
various
parts
project
word
warning
minor
bug
java
6
since
java
6
released
every
times
execute
java
programs
eclipse
see
following
message
console
window
program
ends
error
jdwp
unable
get
jni
1
2
environment
jvm
getenv
return
code
2
jdwp
exit
error
agent
error
jni
env
183
src
share
back
util
820
error
message
seem
anything
program
first
time
saw
searched
google
discovered
bug
report
indicating
bug
windows
implementation
virtual
machine
java
6
installed
machines
ics
labs
see
message
working
subsequent
projects
can
safely
ignore
deliverables
required
deliver
three
parts
project
checkmate
ics
built
online
assignment
submission
system
follow
link
discussion
submit
files
via
checkmate
aware
holding
rules
specified
document
including
one
says
responsible
submitting
version
project
want
graded
regrade
project
simply
submitted
wrong
version
accidentally
three
parts
project
due
date
project
plan
microsoft
word
doc
rich
text
format
rtf
pdf
document
due
monday
april
5
11
59pm
program
collection
java
files
please
submit
anything
java
files
compiled
class
files
parts
eclipse
workspace
though
welcome
zip
java
files
will
necessary
used
packages
since
checkmate
incapable
representing
folder
structures
student
submittals
program
due
wednesday
april
14
11
59pm
lessons
learned
document
another
microsoft
word
doc
rich
text
format
rtf
pdf
document
due
friday
april
16
11
59pm
working
partner
necessary
one
two
partners
submit
project
prefer
partner
submit
three
parts
will
identified
together
checkmate
ta
aware
partnerships
will
figure
project
submissions
belong
pairing
put
names
student
ids
partners
comment
top
java
files
documents
afterward
take
moment
sure
submitted
files
intended
missed
one
able
compile
run
program
can
result
substantial
penalty
since
able
evaluate
program's
correctness
variety
small
tweaks
added
along
inclusion
informatics
45
eclipse
workspace
alex
thornton
spring
2009
originally
written
alex
thornton
spring
2008
