cs143 introduction matlab code 
tutorial 
cs143
introduction
matlab
code
intro
introduction
matlab
adapted
http
www
stanford
edu
class
cs223b
matlabintro
html
stefan
roth
roth
cs
dot
brown
dot
edu
09
08
2003
last
modified
09
10
2003
1
basics
symbol
used
indicate
comment
remainder
line
writing
long
matlab
statement
becomes
long
single
line
use
end
line
continue
next
line
1
2
3
4
semicolon
end
statement
means
matlab
will
display
result
evaluated
statement
omitted
matlab
will
display
result
also
useful
printing
value
variables
matlab's
command
line
little
like
standard
shell
use
arrow
recall
commands
without
retyping
arrow
go
forward
command
history
moves
beginning
line
end
moves
forward
character
moves
back
equivalent
left
right
arrow
keys
deletes
character
deletes
rest
line
right
cursor
goes
back
command
history
goes
forward
equivalent
arrows
tab
tries
complete
command
simple
debugging
command
dbstop
error
issued
running
script
function
causes
run
time
error
execution
will
stop
point
error
occurred
useful
tracking
errors
2
basic
types
matlab
basic
types
matlab
scalars
usually
double
precision
floating
point
vectors
matrices
1
2
3
4
creates
2x2
matrix
1
2
3
4
simplest
way
create
matrix
list
entries
square
brackets
symbol
separates
rows
optional
separates
columns
5
scalar
1
0
0
row
vector
1
2
3
column
vector
v'
transpose
vector
row
column
column
row
1
5
3
vector
filled
specified
range
pi
4
4
4
start
stepsize
end
brackets
optional
empty
vector
creating
special
matrices
1st
parameter
rows
2nd
parameter
cols
zeros
2
3
creates
2x3
matrix
zeros
ones
1
3
creates
1x3
matrix
row
vector
ones
eye
3
identity
matrix
3x3
rand
3
1
randomly
filled
3x1
matrix
column
vector
see
also
randn
watch
zeros
3
creates
3x3
matrix
zeros
indexing
vectors
matrices
warning
indices
always
start
1
0
1
2
3
3
access
vector
element
1
2
3
4
5
7
8
8
9
10
11
12
13
14
15
16
1
3
access
matrix
element
matrix
row
column
2
access
whole
matrix
row
2nd
row
1
access
whole
matrix
column
1st
column
1
1
3
access
elements
1
3
1st
row
2
3
2
access
elements
2
3
2nd
column
2
end
3
keyword
end
accesses
remainder
column
row
1
2
3
4
5
6
size
returns
size
matrix
size
1
number
rows
size
2
number
columns
m1
zeros
size
create
new
matrix
size
list
variables
workspace
whos
list
variables
info
size
type
etc
3
simple
operations
vectors
matrices
element
wise
operations
operations
done
element
element
two
vectors
matrices
added
subtracted
element
wise
multiplied
divided
must
size
1
2
3
4
'
column
vector
2
scalar
multiplication
4
scalar
division
5
6
7
8
'
another
column
vector
vector
addition
vector
subtraction
2
element
wise
squaring
note
element
wise
multiplication
note
element
wise
division
note
log
1
2
3
4
element
wise
logarithm
round
1
5
2
2
2
3
1
element
wise
rounding
nearest
integer
element
wise
arithmetic
operations
include
floor
ceil
vector
operations
built
matlab
functions
operate
vectors
1
4
6
3
row
vector
sum
sum
vector
elements
mean
mean
vector
elements
var
variance
elements
std
standard
deviation
max
maximum
min
minimum
matrix
given
functions
will
operate
column
matrix
return
row
vector
result
1
2
3
4
5
6
matrix
mean
mean
column
max
max
column
max
max
obtaining
max
matrix
mean
2
mean
row
second
argument
specifies
dimension
along
operation
taken
1
2
3
4
5
6
'
1x3
row
vector
times
3x1
column
vector
results
scalar
known
dot
product
inner
product
note
absence
1
2
3
'
4
5
6
3x1
column
vector
times
1x3
row
vector
results
3x3
matrix
known
outer
product
note
absence
matrix
operations
rand
3
2
3x2
matrix
rand
2
4
2x4
matrix
matrix
product
results
3x4
matrix
1
2
3
4
5
6
3x2
matrix
5
6
7
1x3
row
vector
vector
matrix
product
results
1x2
row
vector
8
9
2x1
column
vector
matrix
vector
product
results
3x1
column
vector
1
3
2
6
5
4
7
8
9
3x3
matrix
inv
matrix
inverse
eig
vector
eigenvalues
eig
matrix
eigenvalues
diagonal
matrix
eigenvectors
example
multiple
return
values
svd
singular
value
decomposition
v'
singular
values
stored
matrix
operations
det
norm
rank
reshaping
assembling
matrices
1
2
3
4
5
6
3x2
matrix
make
6x1
column
vector
stacking
columns
sum
useful
sum
elements
reshape
2
3
make
2x3
matrix
vector
elements
column
wise
1
2
3
4
two
row
vectors
horizontal
concatenation
see
horzcat
1
2
3
column
vector
4
vertical
concatenation
see
vertcat
eye
3
rand
3
concatenation
matrices
eye
3
ones
1
3
repmat
5
3
2
create
3x2
matrix
fives
repmat
1
2
3
4
1
2
replicate
2x2
matrix
twice
column
direction
makes
2x4
matrix
diag
1
2
3
create
3x3
diagonal
matrix
given
diagonal
elements
4
control
statements
vectorization
syntax
control
flow
statements
variable
expr
statement
statement
end
expr
vector
1
10
1
0
5
1
1
4
7
expression
statements
end
expression
statements
elseif
expression
statements
else
statements
end
elseif
else
clauses
optional
end
required
expressions
usually
made
relational
clauses
operators
almost
like
warning
loops
run
slowly
matlab
interpretation
overhead
gotten
somewhat
better
version
6
5
nevertheless
try
avoid
vectorizing
computation
rewriting
code
form
matrix
operations
illustrated
examples
examples
1
2
7
loop
1
7
steps
2
print
end
5
13
1
loop
given
vector
10
sample
statement
disp
'larger
10'
print
given
string
elseif
0
parentheses
optional
disp
'negative
value'
else
disp
'something
else'
end
end
another
example
given
mxn
matrix
1xn
vector
want
subtract
every
row
50
10
ones
2
rand
1
implementation
using
loops
1
end
can
compute
thing
using
matrix
operations
ones
repmat
1
version
code
runs
much
faster
can
vectorize
computation
even
loops
contain
conditional
statements
example
given
mxn
matrix
create
matrix
size
containing
zeros
copy
elements
greater
zero
implementation
using
loops
zeros
1
1
0
end
end
end
can
computed
loop
zeros
ind
find
0
find
indices
positive
elements
see
help
find
info
ind
ind
copies
elements
0
5
saving
work
save
myfile
saves
workspace
variables
file
myfile
mat
save
myfile
saves
variables
clear
removes
variables
workspace
clear
clears
entire
workspace
load
myfile
loads
variable
myfile
mat
6
creating
scripts
functions
using
files
matlab
scripts
files
extension
containing
matlab
commands
variables
script
file
global
will
change
value
variables
name
environment
current
matlab
session
script
name
script1
can
invoked
typing
script1
command
window
functions
also
files
first
line
function
file
must
form
function
outarg
1
outarg
myfunction
inarg
1
inarg
function
name
file
function
myfunction
saved
file
myfunction
look
myfunction
myotherfunction
examples
functions
executed
using
local
workspaces
risk
conflicts
variables
main
workspace
end
function
execution
output
arguments
will
visible
main
workspace
1
2
3
4
global
variable
myfunction
2
call
myfunction
local
variable
global
variable
unchanged
myotherfunction
call
myotherfunction
two
return
values
7
plotting
0
1
2
3
4
basic
plotting
plot
plot
versus
index
values
pause
wait
key
press
plot
2
plot
2
versus
axis
0
8
0
8
adjust
visible
rectangle
figure
open
new
figure
pi
24
24
24
plot
sin
xlabel
'radians'
assign
label
axis
ylabel
'sin
value'
assign
label
axis
title
'dummy'
assign
plot
title
figure
subplot
1
2
1
multiple
functions
separate
graphs
plot
sin
see
help
subplot
axis
square
make
visible
area
square
subplot
1
2
2
plot
2
cos
axis
square
figure
plot
sin
hold
multiple
functions
single
graph
plot
2
cos
'
'
'
'
chooses
different
line
pattern
legend
'sin'
'cos'
assigns
names
plot
hold
stop
putting
multiple
figures
current
graph
figure
matrices
vs
images
rand
64
64
imagesc
plot
matrix
image
colormap
gray
choose
gray
level
colormap
axis
image
show
pixel
coordinates
axes
axis
remove
axes
8
working
gray
level
images
imread
'cit
png'
read
png
image
figure
imagesc
display
gray
level
image
colormap
gray
colorbar
turn
color
bar
side
pixval
display
pixel
values
interactively
truesize
display
resolution
one
screen
pixel
per
image
pixel
truesize
2
size
display
resolution
two
screen
pixels
per
image
pixel
i2
imresize
0
5
'bil'
resize
50
using
bilinear
interpolation
i3
imrotate
i2
45
rotate
45
degrees
crop
'bil'
'crop'
original
size
i3
double
i2
convert
uint8
double
allow
math
operations
imagesc
i3
2
display
squared
image
pixel
wise
imagesc
log
i3
display
log
image
pixel
wise
i3
uint8
i3
convert
back
uint8
writing
imwrite
i3
'test
png'
save
image
png
figure
1
2
1
'
1
2
1
16
3x3
gaussian
filter
mask
i2
double
convert
image
floating
point
i3
conv2
i2
convolve
image
filter
mask
i3
conv2
i2
'same'
convolve
image
keep
original
size
subplot
1
2
1
display
original
filtered
image
imagesc
side
side
axis
square
colormap
gray
subplot
1
2
2
imagesc
i3
axis
square
colormap
gray
myfunction
function
myfunction
function
one
argument
one
return
value
2
1
0
1
global
variable
name
myotherfunction
function
myotherfunction
function
two
arguments
two
return
values
created
stefan
roth
last
updated
2003
09
10
