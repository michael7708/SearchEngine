writing methods 

writing
classes
javadoc
introduction
computer
science
iii
ics
21
22
23
introduction
already
learned
lot
using
classes
prewritten
libraries
reading
javadoc
understand
lecture
will
discuss
form
meaning
writing
java
classes
javadoc
will
examine
language
features
already
used
now
perspective
writing
classes
discussion
starts
investigating
methods
general
will
discuss
write
static
methods
first
learn
special
main
method
application
program
simple
library
classes
math
prompt
programs
can
import
will
learn
call
frames
pictures
illustrate
universal
parameter
passing
mechanism
java
copy
value
will
also
learn
write
methods
throw
exceptions
called
objects
arguments
meet
preconditions
finally
will
learn
write
interesting
classes
focusing
declaring
fields
mostly
instance
variables
using
writing
constructors
methods
process
will
see
use
various
features
eclipse
ide
edit
view
debug
perspective
facilitate
analyzing
writing
debugging
classes
method
definitions
parameter
initialization
start
discussing
examining
simple
method
defines
min
method
inside
math
class
illustrates
interesting
aspects
static
method
definitions
reading
code
quickly
scan
ebnf
method
definition
public
static
int
min
int
int
divide
method
definitions
two
parts
header
body
method
header
comprises
access
modifiers
public
static
return
type
int
method
name
min
parameters
int
int
method
threw
exceptions
listed
next
familiar
reading
method
headers
javadoc
previous
lectures
method
body
block
statement
immediately
follows
method
header
lecture
will
focus
attention
writing
block
statements
use
parameter
names
just
like
variable
names
fact
often
call
parameter
variables
make
similarity
explicit
already
discussed
method
called
parameter
variables
always
initialized
matching
arguments
first
method
body
executes
using
values
compute
return
result
can
also
use
local
variables
declared
intialized
block
help
computation
wrote
statement
system
println
math
min
3
5
display
3
declared
int
3
8
wrote
statement
system
println
math
min
3
5
display
8
generally
call
method
writing
name
followed
parentheses
arguments
one
parameter
method's
header
header
parameters
separated
commas
arguments
separated
commas
well
call
method
java
first
evaluates
argument
can
simple
complicated
expression
transmits
passes
matching
parameter
just
means
java
uses
argument's
value
initialize
matching
parameter
method
equivalent
writing
first
parameter
first
argument
second
parameter
second
argument
etc
thus
calling
math
max
3
5
first
parameter
initialized
value
14
3
5
equivalent
3
5
likewise
second
parameter
initialized
value
8
equivalent
java
executes
body
method
typically
performs
computation
using
initialized
parameters
finally
returns
result
mechanism
discuss
next
section
return
statement
will
now
discuss
another
java
statement
return
statement
whose
ebnf
simply
stated
return
keyword
return
statement
return
expression
syntax
constraint
java
requires
expression
must
compatible
return
type
specified
method's
header
either
implicitily
convertible
void
method
constructor
java
requires
us
discard
option
altogether
typically
expression
literal
variable
sometimes
general
expression
using
operators
method
calls
example
will
see
methods
include
return
statements
return
true
return
return
divisor
0
use
return
statement
terminate
method
specify
result
return
whenever
method
executes
return
matter
else
inside
loops
try
catch
method
immediately
terminates
returns
method
called
call
site
method
returns
value
method
call
replaced
value
returns
result
ideally
method
contain
just
one
return
statement
end
fact
can
prove
mathematically
always
way
write
method
one
return
statement
sometimes
methods
easier
understand
multiple
return
statements
thus
will
adopt
pragmatic
approach
putting
simplicity
paramount
aspect
code
write
multiple
return
statements
make
method
simpler
easier
understand
use
able
argue
just
use
sloppy
argue
example
min
method
defined
two
return
statements
simpler
one
one
return
statement
public
static
int
min
int
int
int
answer
instead
one
statement
method's
body
sequence
three
statements
declare
local
variable
decide
initialize
return
value
original
method
just
chose
parameters
returns
without
declaring
local
variable
think
original
method
simpler
easier
understand
fact
method
actually
defined
java
library
using
single
return
conditional
expression
public
static
int
min
int
int
return
sample
methods
following
method
definitions
compute
useful
interesting
values
practice
many
useful
methods
short
like
study
headers
especially
bodies
public
static
boolean
isleapyear
int
year
return
year
4
0
year
100
0
year
400
0
method
hides
messy
calculation
inside
well
named
easy
call
method
just
one
parameter
year
calculation
public
static
boolean
isbetween
int
low
int
middle
int
high
return
low
method
captures
common
pattern
explored
low
correctly
compute
required
value
correct
way
perform
test
bit
verbose
calling
method
can
simplify
code
public
static
double
distance
double
x1
double
y1
double
x2
double
y2
return
math
sqrt
x1
x2
x1
x2
y1
y2
y1
y2
method
computes
simple
euclidean
distance
two
points
must
specified
four
parameters
coordinate
point
although
better
method
use
two
parameters
instance
point
class
represent
four
values
methods
quite
parameters
see
even
public
static
boolean
incircle
double
centerx
double
centery
double
centerradius
double
pointx
double
pointy
return
distance
centerx
centery
pointx
pointy
method
calls
distance
compute
whether
point
whose
coordinates
pointx
pointy
falls
within
circle
whose
center's
coordinates
centerx
centery
whose
radius
centerradius
note
four
coordinate
parameters
incircle
become
arguments
call
distance
role
switch
common
methods
calling
methods
layering
methods
top
methods
kept
small
new
method
accomplishes
much
methods
calls
building
layer
mechanism
enables
power
programming
public
static
int
factorial
int
int
answer
1
int
2
method
interesting
declares
two
local
variables
answer
methods
can
declare
use
local
variables
along
parameters
one
finally
returned
writing
methods
beginners
sometimes
difficulty
determining
declare
parameter
variables
declare
local
variables
thinking
prototypes
helps
information
must
communicated
method
arguments
must
stored
parameter
variable
local
variables
help
computation
need
initialized
arguments
need
specify
factorial
computing
answer
always
initialized
1
always
initialized
2
loop
methods
fewest
number
parameters
possible
variable
can
declared
locally
public
static
int
forint
string
message
try
return
integer
parseint
prompt
forstring
message
catch
numberformatexception
nfe
system
println
enter
int
please
public
static
int
forint
string
message
int
low
int
high
int
answer
prompt
forint
message
low
high
utility
isbetween
low
answer
high
return
answer
system
println
entered
value
range
low
hight
overloaded
forint
methods
two
different
signatures
two
favorites
general
purpose
methods
can
use
many
different
programs
fact
useful
put
methods
prompt
class
can
easily
use
programs
write
also
one
calls
illustrates
power
composing
methods
even
first
calls
two
methods
integer
parseint
prompt
forstring
first
forint
uses
try
catch
ensure
value
entered
user
read
string
fact
legal
int
case
immediately
returns
value
user
enter
legal
value
integer
parseint
method
instead
throws
numberformatexception
return
can
finish
caught
processed
printing
error
message
executing
loop
prompting
user
enter
value
second
forint
passed
three
parameters
used
coordinate
prompting
user
message
enter
value
lower
higher
bound
method
rejects
entered
values
outside
range
prompting
user
enters
value
range
calling
previously
defined
forint
method
method
worry
exceptions
caused
incorrect
data
entry
method
handles
kinds
errors
layering
methods
useful
notice
sophisticated
use
return
statements
terminate
method
return
answer
need
break
statement
terminating
method
loop
terminated
public
static
int
multiroll
diceensemble
int
times
int
sum
0
int
1
finally
method
rolls
diceensemble
object
required
number
times
returning
sum
pips
seen
rolls
can
pass
reference
types
parameters
methods
easily
primitive
types
use
generic
identifier
index
counts
appropriate
number
throws
used
nowhere
else
code
also
written
countdown
loop
parameter
intialized
times
0
times
noting
parameter
times
initialized
method
called
matching
argument
loop
need
initialize
summary
can
define
simply
named
method
parameters
needed
calculation
body
hides
messy
calculation
can
debug
place
class
easily
use
software
write
forgetting
code
inside
always
one
method
name
away
hiding
whatever
complexity
program
requires
layering
methods
can
quickly
amplify
powers
hand
simulation
via
call
frames
section
will
begin
learn
hand
simulate
method
calls
using
call
frame
mechanism
mostly
concerned
passing
arguments
method
call
site
parameters
method
definition
will
expand
upon
mechanism
show
real
predictive
power
discuss
passing
references
objects
methods
next
section
general
form
call
frame
always
concrete
example
see
write
call
frame
min
method
definition
called
math
min
1
first
parameter
mechanism
java
called
copy
value
copy
value
java
copies
value
argument
arguments
evaluated
method
called
call
site
parameter
variable
pictured
always
box
labeled
parameter's
name
type
parameters
just
special
kinds
variables
always
initialized
value
matching
argument
call
site
local
variables
leave
blank
part
call
frame
call
frame
specified
parameters
initialized
java
executes
body
method
refers
parameters
compute
value
result
method
returns
5
replaces
method
call
call
site
system
println
statement
ultimately
5
printed
console
another
example
call
frame
factorial
method
note
returns
call
site
value
returns
result
stored
variable
besides
single
parameter
method
declares
two
local
variables
answer
loop
index
variable
initialized
declarations
1
2
respectively
java
executes
body
method
note
state
changes
variable
illustrated
crossing
old
value
writing
new
value
advanced
call
frames
section
will
explore
call
frames
bit
detail
looking
closely
difference
changing
state
variable
changing
state
object
referred
variable
start
hand
simulating
call
following
method
public
static
void
swap
int
int
int
temp
temp
assume
method
defined
class
named
utility
declare
int
5
8
call
utility
swap
values
ultimately
stored
variables
swapped
remain
unchanged
call
frame
shows
us
important
execute
return
statement
void
method
none
code
java
automatically
equivalent
return
reaches
end
block
body
method
java
allow
implicit
return
non
void
method
becuase
must
specify
expression
tells
java
value
method
returns
result
void
methods
return
nothing
java
can
reasonably
include
implicit
return
end
body
important
note
although
values
parameters
exchanged
code
values
stored
arguments
exchanged
values
stored
arguments
copied
parameters
method
called
transmission
mechanism
one
way
arguments
parameters
thus
parameter
transmission
asymmetrical
argument
variable
value
stored
variable
always
remains
unchanged
method
call
even
change
value
stored
matching
parameter
value
box
argument
changed
method
call
situation
gets
bit
complicated
interesting
references
everything
complicated
interesting
references
recall
copy
reference
variable
make
variable
refer
object
describes
references
passed
arguments
parameters
well
although
value
box
argument
changed
method
call
will
still
refer
object
state
object
refers
can
changed
body
method
calling
mutators
commands
look
call
frame
multiroll
method
illustrate
behavior
assume
method
defined
class
named
utility
declare
diceensemble
dice
new
diceensemble
2
6
call
system
println
utility
multiroll
dice
3
java
passes
argument
parameter
copying
reference
resulting
argument
dice
parameter
sharing
object
time
multiroll
method
calls
roll
state
shared
object
changes
see
rollcount
pips
instance
variables
different
values
returned
getpipsum
7
2
5
4
3
1
5
1
4
account
state
changes
shown
local
variable
sum
first
statement
prints
returned
value
sum
16
second
prints
value
rollcount
object
now
3
summary
change
arguments
method
call
changing
values
stored
matching
parameters
argument
parameter
share
object
can
change
state
object
calling
mutator
command
method
method
method
returns
result
argument
must
refer
object
object's
state
can
changed
final
parameters
finally
update
ebnf
rule
parameter
adds
option
specifying
keyword
final
type
parameter
final
type
identifier
parameter
variable
declared
final
must
treat
like
final
variable
change
state
throughout
method
body
will
always
store
value
initialized
matching
argument
frequently
always
case
method
examines
store
parameters
time
can
specify
parameter
final
java
style
standards
require
specifying
parameters
final
even
remain
unchanged
body
method
still
deciding
think
right
case
meanwhile
can
choose
either
include
final
code
write
emphasize
parameter
change
omit
whatever
choose
consistent
designing
methods
designing
method
first
think
descriptive
name
think
prototype
information
return
type
void
parameter
types
needs
headers
unlike
prototypes
also
supply
descriptive
names
parameters
parameter
variables
used
convey
special
information
method
information
controls
method
computes
methods
may
also
declare
local
variables
needed
temporarily
execution
method
values
initialized
arguments
outside
method
finally
typically
easiest
part
write
statements
implement
method
methods
perform
input
output
unless
primary
purpose
method
notice
except
promptint
methods
others
perform
input
output
sense
methods
get
inputs
parameters
supply
output
either
returned
result
changing
state
objects
parameters
refer
write
methods
perform
input
output
unless
primary
purpose
ebnf
defining
classes
including
package
imports
everything
java
defined
class
simple
programs
already
written
well
library
classes
ebnf
class
relies
heavily
definition
full
member
definition
note
package
class
keywords
package
declaration
package
package
name
class
body
full
member
definition
class
definition
package
statement
import
declaration
access
modifiers
class
identifier
class
body
braces
last
rule
stand
previous
rules
stand
standard
ebnf
repetition
named
classes
java
defined
java
file
examine
three
major
parts
class
definintion
first
package
statement
every
class
defined
one
package
specified
package
statement
option
omitted
class
said
defined
anonymous
also
known
default
package
name
package
characters
whatever
package
class
classes
package
automatically
imported
use
second
class
must
refer
classes
packages
must
imported
explicitly
import
declarations
finally
class
defined
specifies
access
modifiers
almost
always
jut
public
includes
number
full
member
definitions
trivial
complete
class
named
application
defined
anonymous
package
imports
neccessary
class
course
library
main
method
performs
trivial
console
import
edu
uci
ics
pattis
introlib
prompt
public
class
application
public
static
void
main
string
args
int
input
prompt
forint
enter
positive
system
println
entered
typically
class
stored
file
first
name
class
application
java
discussing
main
methods
will
see
define
complete
classes
simple
java
programs
libraries
define
methods
main
method
java
class
can
define
special
main
method
one
members
method
name
special
exactly
following
access
modifiers
header
method
specifies
array
string
parameter
although
will
use
parameter
study
use
java
command
line
will
see
tell
eclipse
ide
special
main
method
execute
public
static
void
main
string
args
can
direct
java
start
program
collection
one
classes
automatically
special
main
method
fact
project
can
include
multiple
classes
class
can
special
main
method
actually
quite
useful
will
discuss
feature
discuss
testing
classes
detail
situation
must
tell
java
special
main
method
start
eclipse
specify
class
whose
main
method
run
selecting
class
either
package
explorer
editor
methods
applications
seen
declare
one
special
static
method
class
java
execute
method
now
will
learn
define
call
static
methods
class
must
place
method
definitions
inside
class
along
main
method
can
call
method
main
static
method
class
can
call
static
method
class
just
using
name
supplying
arguments
match
signature
overloaded
one
signatures
can
also
bit
consistent
verbose
call
static
method
prepending
class
name
method's
name
following
application
class
shows
simple
example
code
import
edu
uci
ics
pattis
introlib
prompt
public
class
application
public
static
int
factorial
int
int
answer
1
int
2
date
calculator
1
program
program
defines
used
five
static
methods
twelve
static
fields
definition
order
java
uses
multi
pass
compiler
means
methods
fields
program
can
defined
order
java
first
reads
method
headers
fields
file
reads
bodies
checking
use
types
methods
fields
correctly
one
standard
way
write
methods
natural
order
body
method
calls
method
method
defined
method
example
might
following
program
form
method
a's
header
method
calls
method
b's
header
call
method
c's
header
method
calls
method
d's
header
calls
main
methods'
header
calls
fact
may
many
natural
orders
example
also
meet
natural
criteria
defining
method
method
even
method
main
method
calls
lots
methods
typically
appears
last
file
reverse
natural
order
body
method
calls
method
method
defined
method
case
main
method
calls
lots
methods
typically
appears
first
file
main
methods'
header
calls
method
d's
header
calls
method
c's
header
method
calls
method
b's
header
call
method
a's
header
method
calls
way
powerful
methods
appear
top
can
read
details
work
aftward
java
uses
multi
pass
compiler
two
orderings
others
legal
discuss
mutually
recursive
methods
will
return
topic
now
words
divide
conquer
program
complexity
now
putting
code
main
method
hundred
lines
code
practice
stopping
now
will
distributing
complexity
writing
methods
placing
application
program
class
libraries
can
write
test
debug
method
class
independently
method
including
main
comprise
one
two
dozen
statements
method
gets
complicated
write
method
method
original
method
call
two
new
methods
get
job
done
another
rule
keeping
complexity
method
small
prohibit
one
loop
complex
java
statement
think
per
method
allow
multiple
loops
nested
loops
notice
complexity
distibuted
date
calculator
program
method
even
main
contains
small
number
statements
throwing
exceptions
introduction
already
discussed
handle
thrown
exceptions
try
catch
statements
now
appropriate
time
begin
discussing
end
exception
processing
throw
detecting
problem
ebnf
rule
throwing
exception
using
keyword
throw
trivial
throw
statement
throw
expression
syntax
constraint
expression
must
refer
object
constructed
class
descended
throwable
class
will
discuss
class
hierarchies
later
now
seen
names
variety
classes
descended
throwable
eofexception
numberformatexception
important
current
needs
illegalargumentexception
illegalstateexception
exceptions
represented
classes
throwing
exception
requires
us
construct
new
instance
class
typically
initializing
state
string
describes
problem
string
can
examined
printed
exception
caught
given
factorial
method
works
non
negative
integers
might
modify
follows
detect
bad
argument
throw
illegalargumentexception
appropriate
message
rather
just
returning
1
notice
throws
illegalargumentexception
now
appears
factorial's
signature
public
static
int
factorial
int
throws
illegalargumentexception
0
throw
new
illegalargumentexception
factorial
must
non
negative
int
answer
1
int
2
simple
statement
first
method
determines
whether
argument
bad
throws
exception
common
check
necessary
preconditions
arguments
start
method's
body
grouping
code
together
separating
code
actually
performs
method's
task
executes
preconditions
parameters
checked
example
argument
matching
parameter
negative
value
java
constructs
instance
illegalargumentexception
class
initialized
appropriate
error
message
throws
exception
statement
throws
exception
java
abandons
sequential
execution
tries
locate
catch
clause
handle
exception
first
inside
method
thrown
method
one
java
goes
back
call
site
method
body
method
repeats
process
repeating
process
java
eventually
gets
back
special
main
method
matching
catch
clause
handle
exception
java
prints
exception
name
exception's
message
string
argument
exceptions
constructor
trace
methods
called
leading
problem
will
use
throw
statements
continue
learn
writing
constructors
methods
classes
will
come
back
topic
throw
statements
try
catch
statements
exception
classes
least
context
class
hierarchies
help
us
understand
complex
error
detection
recovery
mechanism
will
learn
write
new
exception
classes
difference
checked
unchecked
exceptions
methods
library
classes
although
static
methods
might
useful
just
one
application
many
general
enough
used
similar
applications
java
can
easily
collect
methods
class
related
methods
source
code
file
can
easily
import
use
programs
math
class
standard
java
library
serves
exactly
purpose
doe
prompt
class
course
library
collects
together
group
math
related
console
related
methods
example
ccould
easily
group
together
static
methods
fields
date
calculator
program
dateutility
class
shown
use
class
library
program
must
deal
dates
examine
date
calculator
2
program
see
exactly
mechanism
works
project
public
class
dateutility
returns
whether
year
leap
year
public
static
boolean
isleapyear
int
year
return
year
4
0
year
100
0
year
400
0
returns
number
days
month
year
public
static
int
daysin
int
month
int
year
throws
illegalargumentexception
year
1
throw
new
illegalargumentexception
daysin
year
year
positive
month
january
month
december
throw
new
illegalargumentexception
daysin
month
month
range
1
12
thirty
days
hath
september
april
june
november
month
april
month
june
month
september
month
november
return
30
rest
thirty
one
else
month
january
month
march
month
may
month
july
month
august
month
october
month
december
return
31
except
february
must
february
else
see
possible
exception
else
month
february
return
28
isleapyear
year
1
0
returns
ordinal
1st
2nd
3rd
etc
representing
month
day
year
public
static
int
ordinaldate
int
month
int
day
int
year
int
ordinal
0
scan
every
earlier
month
summing
days
month
int
january
month
ordinal
daysin
year
add
day
current
month
return
ordinal
day
returns
date
american
european
string
february
10
1954
return
2
10
1954
10
2
1954
public
static
string
americanformat
int
month
int
day
int
year
return
month
day
year
public
static
string
europeanformat
int
month
int
day
int
year
return
day
month
year
fields
public
static
final
constants
supplied
class
private
use
class
heck
let
programmers
use
class
final
nothing
programmer
can
change
public
static
final
int
january
1
public
static
final
int
february
2
public
static
final
int
march
3
public
static
final
int
april
4
public
static
final
int
may
5
public
static
final
int
june
6
public
static
final
int
july
7
public
static
final
int
august
8
public
static
final
int
september
9
public
static
final
int
october
10
public
static
final
int
november
11
public
static
final
int
december
12
recall
final
variables
constants
java
written
upper
case
identifiers
name
consists
multiple
words
separate
underscores
max
class
size
given
use
library
class
main
method
application
class
must
refer
members
using
class
name
member
name
int
ordinal
dateutility
ordinaldate
month
day
year
observe
inside
class
refer
member
just
name
outside
class
application
class
must
refer
static
member
class
name
followed
member
name
finally
note
constructors
class
likewise
instance
variables
construct
objects
class
just
use
class
name
directly
refer
methods
want
call
class
methods
fields
eclipse
ide
methods
common
programming
various
parts
eclipse
ide
built
deal
easily
will
examine
mechanisms
java
debugger
views
help
us
use
methods
programs
editor
includes
mechanism
locate
display
method
easily
program
library
class
class
active
editor
outline
window
lists
methods
class
can
easily
view
method
editor
clicking
name
outline
window
number
methods
class
grows
mechanism
becomes
useful
quickly
navigating
files
left
method
header
small
shaded
circle
containing
either
minus
sign
plus
sign
minus
sign
means
method
fully
disclosed
plus
sign
means
method
body
non
disclosed
elided
see
header
clicking
circle
toggles
disclosed
elided
method
bodies
can
also
use
debugger
better
understand
methods
debug
methods
written
options
displayed
stepping
program
appear
middle
step
button
arrow
pointing
bar
discussed
executes
method
black
box
show
happens
inside
stepped
method
just
executes
entire
body
one
fell
swoop
left
step
button
arrow
pointing
two
bars
executes
method
first
showing
parameters
local
variables
variables
tab
can
step
statement
method
watch
executes
step
return
statement
will
returned
code
called
method
method
stepping
calls
another
method
can
choose
step
step
call
right
step
button
arrow
pointing
two
bars
executes
remaining
statements
current
method
including
return
statement
note
single
bar
middle
button
represents
entire
statement
stepping
means
ignoring
details
methods
called
statement
double
bars
left
right
buttons
represent
block
code
implementing
method
can
step
method
start
executing
first
line
code
methods
step
method
finish
executing
last
line
code
method
step
method
parameter
local
variables
appear
variables
tab
parameters
will
intialized
values
matching
arguments
name
method
will
also
appear
underneath
thread
main
debug
tab
calls
another
method
method's
name
will
appear
now
directly
underneath
thread
main
whenever
method
returns
name
removed
debug
tab
control
returns
method
called
one
right
debug
tab
click
method
name
debug
tab
will
show
code
executing
method
editor
window
method's
parameters
local
variables
variables
tab
way
easy
shift
focus
among
methods
currently
executing
application
main
method
remains
bottom
method
names
debug
tab
throughout
execution
program
example
looking
bottom
daysin
method
note
parameters
initialized
month
2
year
2006
fact
method
already
called
isleapyear
method
top
methods
one
currently
executing
refocused
attention
back
daysin
method
called
selecting
method
debug
tab
select
isleapyear
method
continue
single
stepping
return
ordinaldate
method
shows
position
executing
body
loop
parameters
local
variables
listed
order
declared
parameters
month
day
year
local
variables
ordinal
loop
index
practice
using
three
kinds
stepping
using
two
date
calculator
programs
time
spend
becoming
familiar
debugging
features
will
pay
many
times
semester
debugging
hard
tools
help
tremendously
defining
classes
construct
objects
will
now
shift
focus
simple
classes
static
members
towards
interesting
useful
classes
can
construct
manipulate
objects
instances
will
first
examine
classes
declare
instance
variables
although
instance
variables
declared
private
wll
learn
members
class
can
manipulate
will
learn
write
constructors
help
initialize
instance
variables
finally
will
build
knowledge
methods
learn
write
methods
manipulate
instance
variables
will
discuss
multiple
uses
keyword
context
classes
construct
objects
classes
java
combine
elements
state
behavior
state
embodied
object's
private
instance
variables
behavior
embodied
class's
public
constructors
methods
manipulate
instance
variables
programmers
think
classes
three
important
different
viewpoints
user
implementor
designer
programmer
thinks
using
class
interested
solely
public
members
constructors
can
used
build
objects
methods
can
called
perform
useful
operations
objects
programmer
interested
can
done
done
long
implementation
works
efficient
reading
javadoc
prime
way
learn
information
programmer
thinks
implementing
class
interested
first
public
members
class
will
supply
programmers
using
class
will
able
addition
also
interested
members
can
implemented
typically
knowing
requires
reading
javadoc
knowing
requires
writing
java
code
specifies
state
object
will
store
method
bodies
work
manipulate
state
programmer
often
presented
many
interesting
decisions
many
ways
implement
functionality
programmer
thinks
designing
class
interested
solely
public
members
class
supplies
person
must
decide
members
include
specify
semantics
member
users
understand
class
implementors
understand
implement
designers
writing
public
prototypes
class
documenting
javadoc
three
views
bit
simplification
often
one
person
takes
multiple
roles
even
three
programmer
might
need
use
class
specific
application
designs
general
class
will
usable
application
hopefully
others
impelments
class
closing
circle
uses
application
good
design
hard
designer
often
needs
lots
experience
using
implementing
classes
can
effective
design
others
can
use
implement
easily
course
will
mostly
take
roles
users
previous
lectures
implementors
will
one
implementors
will
typically
given
design
required
implement
accomplish
process
will
indentify
state
object
stores
declare
define
required
constructors
methods
finally
tests
classes
will
see
classes
may
tested
three
prespectives
designer
tests
class
developing
test
suite
along
javadoc
designer
know
anything
implementation
black
box
testing
test
suites
open
ended
driver
closed
will
learn
junit
testing
implementor
tests
class
running
designer's
tests
implementation
fixing
errors
exposed
testing
implementor
might
also
develop
tests
based
actual
implementation
used
white
box
testing
user
class
implicitly
tests
application
program
application
work
expected
may
indicate
class
es
using
correct
user
may
just
using
incorrectly
situation
non
working
application
interesting
whose
fault
user
class
using
incorrectly
writer
class
implementing
incorrectly
will
examine
perspective
end
lecture
summarize
classes
focusing
private
members
important
thing
know
class
member
defined
class
can
refer
member
defined
class
even
access
modifier
private
access
modifiers
restrict
members
defined
outside
class
can
access
restrict
members
defined
inside
class
can
access
rule
allows
class
implementor
declare
instance
variables
private
directly
accessed
code
outside
class
still
write
constructors
method
inside
class
access
fact
often
accessor
query
methods
just
return
values
stored
private
instance
variable
illustrate
material
will
closely
examine
two
classes
drivers
simplediceensemble
rational
instance
variables
start
looking
implementation
details
two
sample
classes
simplediceensemble
class
must
store
information
characterizing
ensemble
number
dice
sides
per
die
information
current
state
number
rolls
pip
sum
whether
die
show
numer
pips
declares
instance
variables
follows
private
int
numberofdice
private
int
sidesperdie
private
int
rollcount
private
int
pipsum
private
boolean
allsame
rational
class
much
simpler
must
store
numerator
denominator
rational
number
fraction
declares
instance
variables
follows
private
int
numerator
private
int
denominator
classes
typically
group
declarations
fields
top
bottom
although
rules
requiring
placement
recall
javadoc
pages
show
fields
first
declaring
top
reasonable
another
perspective
instance
variables
private
details
declaring
bottom
way
reasonable
whenever
new
constructs
object
first
thing
process
field
declarations
class
includes
reserving
space
field
initializing
unlike
local
variables
fields
initialized
declared
explicitly
initialize
declarations
java
implicitly
initializes
primitive
types
uses
0
int
0
double
false
boolean
null
character
char
reference
types
uses
null
meaning
refer
object
examples
instance
variables
initialized
0
false
simplediceensemble
explicitly
written
private
int
numberofdice
0
private
int
sidesperdie
0
private
int
rollcount
0
private
int
pipsum
0
private
boolean
allsame
false
will
soon
see
constructors
can
often
store
appropriate
values
variables
based
arguments
supply
constructor
technically
constructor
stores
value
instance
variable
reinitialization
initialization
initial
value
already
stored
java
executes
declaration
still
will
speak
initializing
instance
variables
constructors
reinitialization
want
precise
constructors
main
purpose
constructor
ensure
instance
variables
object
constructed
initialized
correctly
done
body
constructor
contains
exactly
statements
can
appear
inthe
body
void
method
instance
variables
constructor
may
nothing
special
leaves
initial
values
received
declared
cases
initializes
actually
reinitializes
given
discussion
instance
variables
using
arguments
passed
constructor's
parameters
constructor
often
validates
arguments
first
throwing
illegalargumentexception
incorrect
classes
quite
complicated
constructors
take
arguments
reinitialize
fields
cases
fields
initialized
correctly
declarations
either
explicitly
implicitly
timer
class
one
example
kind
class
constructor
looks
like
public
timer
fact
fail
define
constructor
class
java
will
automatically
supply
one
looks
like
one
appropriate
class
name
define
even
one
constructor
class
java
will
overload
constructor
defining
one
classes
define
least
one
constructor
many
overload
constructor
constructors
always
parameter
help
reinitialize
instance
variables
simplediceensemble
first
constructor
defined
simplediceensemble
class
public
simplediceensemble
int
numberofdice
int
sidesperdie
throws
illegalargumentexception
numberofdice
1
throw
new
illegalargumentexception
simplediceensemble
constructor
number
dice
numberofdice
1
sidesperdie
1
throw
new
illegalargumentexception
simplediceensemble
constructor
sides
per
die
sidesperdie
1
numberofdice
numberofdice
sidesperdie
sidesperdie
rollcount
see
declaration
implicit
initializaton
0
pipcount
allsame
indeterminate
roll
first
validates
values
two
parameters
either
make
sense
must
least
one
die
must
least
one
side
constructor
throws
illegalargumentexception
appropriate
message
parameters
make
sense
copies
two
instance
variables
reinitializing
three
instance
variables
reinitialized
initial
values
received
decared
correct
rollcount
always
start
zero
pipsum
allsame
although
store
zero
false
really
represent
nothing
dice
rolled
yet
values
work
interlude
variable
name
conflicts
resolving
must
take
briefly
diversion
discuss
variable
name
conflicts
resolve
keyword
three
kinds
variable
names
java
name
parameter
defined
constructor
method
header
name
local
variable
defined
constructor
method
body
name
field
defined
class
java
compiler
automatically
implements
syntax
constraint
prohibits
defining
parameter
name
local
variable
compiler
detect
report
error
following
code
public
static
int
returnit
int
int
1
return
fact
java
points
local
variable
declaration
says
variable
'a'
already
defined
method
java
allow
instance
variables
names
parameters
local
variables
happens
called
variable
name
conflict
use
common
name
conflict
means
whenever
variable
name
conflict
name
never
refers
instance
variable
always
refers
parameter
local
variable
instead
want
refer
instance
variable
must
preface
name
keyword
constructor
reference
object
constructed
numberofdice
refers
numberofdice
instance
variable
defined
inside
class
fact
writing
numberofdice
always
legal
way
refer
numberofdice
instance
variable
object
constructed
whether
variable
name
conflict
constructor
parameter
variables
name
conflict
two
instance
variables
statements
check
numberofdice
sidesperdie
testing
parameter
variables
statements
numberofdice
numberofdice
sidesperdie
sidesperdie
store
values
parameter
variables
disappear
constructor
finishes
executing
instance
variables
exist
long
object
exists
wrote
numberofdice
numberofdice
java
just
store
parameter's
value
back
parameter
variable
stores
nothing
instance
variable
statement
can
cause
hard
locate
bug
another
way
around
whole
name
conflict
problem
change
parameter
names
use
number
sides
name
conflicts
can
write
just
numberofdice
number
sidesperdie
sides
often
case
well
chosen
name
instance
variable
replicated
parameter
name
captures
exactly
right
description
cases
must
understand
name
conflicts
use
resolve
help
avoid
confusion
style
guidelines
java
specify
every
access
instance
variable
prefixed
indicated
explicitly
accessing
field
still
fence
style
rule
back
discussing
constructors
second
simplediceensemble
constructor
much
different
form
first
parameters
second
throw
exceptions
information
specified
constructor's
header
written
constructor
public
simplediceensemble
numberofdice
2
sidesperdie
6
initializes
two
instance
variables
object
represents
two
six
sided
dice
note
parameter
names
constructor
name
conflicts
therefore
can
use
instance
variables
directly
prefix
although
include
prefix
stylistic
reasons
java
provides
even
simpler
way
define
constructor
even
requires
us
learn
new
language
feature
different
context
use
actual
constructor
appears
public
simplediceensemble
2
6
constructor
says
initialize
instance
variables
use
another
constructor
class
one
taking
two
int
arguments
common
pattern
one
general
constructor
many
parameters
used
one
special
constructors
fewer
parameters
initializations
note
needed
add
statements
constuctor
one
none
needed
fact
another
way
handle
initialization
class
declare
private
int
numberofdice
2
private
int
sidesperdie
6
private
int
rollcount
private
int
pipsum
private
boolean
allsame
first
constructor
work
reinitializing
numberofdice
sidesperdie
using
parameters
second
constructor
simplified
contain
nothing
body
now
instance
variables
declared
correctly
represent
two
six
sided
dice
thus
constructors
act
middlemen
accept
arguments
check
values
correctness
ultimately
use
re
initialize
instance
variables
correct
instance
variables
private
can
initialized
declaration
reinitialized
constructor
defined
inside
class
rational
first
general
constructor
defined
rational
class
public
rational
int
numerator
int
denominator
throws
illegalargumentexception
denominator
0
throw
new
illegalargumentexception
rational
construtor
denominator
0
numerator
0
denominator
1
ensure
non
negative
denominator
rational
negative
numerator
negative
denominator
0
denominator
denominator
numerator
numerator
call
gcd
greatest
commmon
divisor
private
static
method
defined
class
int
common
gcd
numerator
denominator
rational
gcd
name
conflict
numerator
numerator
common
denominator
denominator
common
constructor
ultimately
stores
special
values
two
instance
variables
carefully
checking
altering
parameters
first
construct
rational
value
denominator
zero
parameter
values
throws
exception
numerators
denominators
stores
values
according
following
rules
zero
always
stored
0
1
denominator
always
stored
positive
value
numerator
denominator
reduced
common
factors
declare
rational
new
rational
2
4
refers
object
stores
1
numerator
2
denominator
try
examples
parameters
examined
changed
needed
last
two
statements
end
used
resolve
name
conflicts
note
call
method
gcd
static
method
defined
class
non
static
method
can
call
static
method
following
special
constructors
create
new
objects
using
sense
using
another
constructor
class
initialize
instance
variables
public
rational
int
numerator
numerator
1
public
rational
0
1
first
constructors
specify
numerator
parameter
using
construct
rational
value
1
case
parameterless
constuctor
construct
rational
value
0
1
also
written
0
blank
final
recall
can
declare
blank
final
local
variables
can
also
declare
blank
final
instance
variables
must
follow
additional
constraint
java
allows
us
declare
intance
variable
final
initialize
declaration
definition
blank
final
must
initialize
variable
every
constructor
write
otherwise
java
compiler
will
detect
report
error
course
java
compiler
will
ensure
never
try
assign
second
value
final
variable
including
final
instance
variables
methods
method
bodies
follow
rules
constructor
bodies
terms
use
parameter
variables
local
variables
instance
variables
terms
variable
name
conflicts
etc
fact
illustrate
call
frame
non
static
method
will
show
implicit
parameter
named
will
see
parameter
gets
initialized
implicit
argument
method
called
recall
methods
divided
two
categories
mutator
command
methods
can
access
store
instance
variables
declared
class
change
state
object
called
accessor
query
methods
can
access
instance
variables
declared
class
store
change
state
object
called
tell
just
looking
method
header
whether
defines
accessor
mutator
must
look
method
body
javadoc
yet
fundamentally
important
piece
information
method
often
one
can
tell
name
method
accessor
method
names
often
begin
get
also
void
methods
almost
always
mutators
return
result
interesting
thing
can
change
state
object
called
methods
like
nexttoken
stringtokenizer
clas
act
mutator
command
accessor
query
changing
object's
state
returning
value
simplediceensemble
simplediceensemble
class
defines
roll
method
mutator
command
accessor
query
mutator
class
defined
follows
public
simplediceensemble
roll
rollcount
int
firstthrow
randomdie
pipsum
firstthrow
allsame
true
int
2
clarity
discussion
come
prefaced
instance
variable
even
though
name
conflicts
roll
method
parameters
declares
two
local
variables
firstthrow
nextthrow
uses
change
rollcount
pipsum
allsame
instance
variables
methods
often
parameters
primarily
operate
instance
variables
object
pips
showing
die
computed
randomdie
method
will
examine
later
let
us
see
hand
simulate
call
method
using
call
frame
pay
close
attention
implicit
parameter
initialized
implicit
argument
assume
declared
simplediceensemble
dice
new
simplediceensemble
2
6
now
execute
statement
dice
roll
illustrate
call
method
call
frame
assume
roll
3
first
die
5
second
implicit
parameter
appears
every
non
static
call
frame
roll
declares
explicit
parameters
always
initialized
refer
object
method
called
case
call
dice
roll
dice
implcit
argument
initialized
refer
object
dice
equivalent
dice
looks
lot
like
argument
initializing
parameter
even
though
implicit
method
examines
changes
instance
variables
object
well
local
loop
index
variable
hand
simulate
code
assuming
randomdie
returns
3
called
first
time
5
second
note
writing
rollcount
explicitly
showing
object
referred
rollcount
index
variable
accessed
stated
even
wrote
just
rollcount
name
conflicts
meaning
using
variable
exactly
rollcount
notice
call
randomdie
means
call
randomdie
method
object
refers
object
roll
called
generally
non
static
methods
inside
class
can
call
non
static
methods
class
help
accomplish
task
object
case
instance
variables
writing
randomdie
exactly
meaning
calling
another
method
object
roll
called
randomdie
method
must
able
access
sidesperdie
instance
variable
compute
random
roll
die
many
sides
actual
code
simplediceensemble
used
necessary
finally
return
statement
returns
reference
stored
code
nothing
returned
result
instead
written
system
println
dice
roll
getpipsum
java
called
getpipsum
method
returned
reference
printing
value
8
simplediceensemble
class
defines
many
accessor
methods
two
shown
public
int
getrollcount
return
rollcount
public
int
getpipsum
throws
illegalstateexception
rollcount
0
throw
new
illegalstateexception
getpipsum
dice
rolled
return
pipsum
accessors
often
simpler
mutators
forms
many
methods
actually
quite
common
just
returning
value
stored
one
private
instance
variables
note
making
rollcount
pipsum
instance
variables
private
code
external
class
can
directly
examine
change
variables
possibly
trashing
yet
code
can
always
determine
current
values
stored
instance
variables
indirectly
calling
accessor
query
methods
accessor
query
methods
allow
code
determine
value
stored
private
instance
variable
without
giving
code
direct
access
change
instance
variable
note
second
method
first
checks
pipsum
instance
variable
actually
stores
computed
value
returning
dice
yet
rolled
throws
illegalstateexception
object
good
state
yet
call
method
rational
rational
class
immutable
methods
accessors
although
many
construct
return
values
primitive
types
references
new
rational
objects
result
computing
state
old
one
just
many
string
biginteger
methods
rational
class
adopted
style
always
using
accessing
instance
variables
two
simple
accessors
construct
objects
public
int
getnumerator
return
numerator
public
boolean
equals
rational
return
numerator
numerator
denominator
denominator
first
method
just
returns
value
stored
private
numerator
instance
variable
write
just
return
numerator
second
method
returns
whether
object
method
called
object
method
passed
parameter
equal
given
canonical
way
rational
stores
objects
zero
0
1
denominators
always
positive
common
factors
equal
pairs
instance
variables
equal
note
store
objects
canonically
method
work
comparing
rational
1
2
vs
2
4
rational
0
1
vs
0
12
rational
1
2
vs
1
2
using
adds
certain
symmetry
code
write
just
numerator
numerator
denominator
denominator
finally
note
nothing
special
parameter
name
known
students
get
superstitious
parameter
name
long
parameter
name
appears
identically
code
can
use
name
want
illustrate
method
call
call
frame
notice
implicit
parameter
refers
object
refers
implicit
argument
explicit
parameter
refers
object
explicit
argument
refers
nothing
special
parameter
named
can
name
parameter
anything
want
called
equals
references
stored
implicit
explicit
parameters
swapped
method
call
returns
result
false
although
numerators
denominators
different
two
complicated
accessors
construct
objects
public
rational
abs
return
new
rational
math
abs
numerator
denominator
public
rational
add
rational
int
numerator
ad
cb
int
denominator
int
numerator
bd
int
denominator
return
new
rational
abs
method
constructs
returns
new
rational
object
whose
state
absolute
value
state
object
method
called
know
denominator
always
positive
can
use
value
directly
return
type
rational
means
method
returns
reference
object
instance
rational
class
abs
method
return
newly
constructed
rational
whose
numerator
non
negative
denominators
already
positive
add
method
constructs
returns
new
rational
object
whose
state
sum
states
object
method
called
object
passed
explicit
argument
wrote
rational
new
rational
1
2
new
rational
1
3
rational
add
illustrate
variable
method
call
call
frame
note
space
reasons
left
four
local
variables
store
values
1
2
1
3
respectively
add
method
return
newly
constructed
rational
whose
numerator
denomiator
computed
according
standard
algorithm
adding
rational
values
note
code
complicated
constructor
class
will
automatically
reduce
results
lowest
terms
call
add
refers
state
object
refers
object
add
called
refers
state
object
refers
object
argument
add
course
call
add
refer
opposite
objects
since
addition
symmetric
return
result
method
returns
reference
rational
object
can
cascade
method
calls
wanted
compute
sum
objects
three
variables
refer
can
write
add
add
first
creates
object
containing
sum
adds
object
producing
object
storing
total
sum
can
also
write
add
add
produces
result
adding
objects
different
order
classes
include
tostring
method
returns
string
catenating
together
state
object
used
mostly
debugging
purposes
tostring
methods
often
easy
write
examine
special
methods
two
kinds
special
methods
examine
briefly
private
static
kinds
occur
classes
will
write
occur
frequently
private
methods
first
sometimes
class
will
define
private
methods
method
callable
methods
defined
class
methods
outside
class
use
typically
private
methods
small
helper
methods
useful
implementor
class
useful
dangerous
someone
outside
class
like
many
methods
hide
details
simplediceensemble
defines
randomdie
method
uses
random
numuber
generator
simulate
throwing
one
die
roll
method
two
calls
one
one
outside
loop
one
inside
loop
may
get
executed
multiple
times
private
int
randomdie
return
int
math
round
math
random
sidesperdie
5
notice
method
uses
instance
variable
sidesperdie
static
method
random
defined
math
class
always
returns
double
result
semiopen
range
0
1
expression
transforms
value
int
1
sidesperdie
value
equally
likely
occur
static
methods
second
sometimes
class
one
constructor
will
define
static
methods
either
public
private
rational
class
defines
prompt
method
public
static
public
static
rational
prompt
string
system
println
try
int
numerator
prompt
forint
enter
numerator
int
denominator
prompt
forint
enter
denominator
return
new
rational
numerator
denominator
catch
exception
system
println
illegal
value
entered
try
class
can
call
method
code
follows
rational
rational
prompt
enter
recall
use
static
method
outside
class
must
prefix
name
name
class
refrence
object
class
console
interaction
look
like
enter
enter
numerator
1
enter
denominator
2
make
method
static
sole
purpose
construct
return
reference
object
made
method
non
static
write
something
like
get
object
storing
0
1
call
prompt
rational
new
rational
store
new
value
throwing
away
0
1
just
created
prompt
enter
case
first
construct
object
call
non
static
method
just
throw
away
original
object
replacing
reference
object
containing
user
input
rational
thus
much
simpler
easier
use
method
static
rational
class
also
defines
gcd
method
private
static
private
static
int
gcd
int
int
lots
complicated
code
method
called
first
constructor
reduce
lowest
terms
numerator
denominator
dividing
common
factors
method
defined
rational
class
can
call
either
gcd
numerator
denomiator
rational
gcd
numerator
denomiator
note
method
private
called
anywhere
inside
constructor
method
defined
class
finally
notice
randomdie
method
static
must
refer
instance
variable
sidesperdie
static
methods
can
refer
parameter
variables
local
variables
see
prompt
gcd
fact
can
call
static
methods
without
objects
means
guaranteed
access
object's
instance
variables
course
rewritten
static
method
added
parameter
private
static
int
randomdie
int
max
return
int
math
round
math
random
max
5
called
method
roll
randomdie
sidesperdie
thought
former
way
simpler
static
fields
two
main
uses
static
fields
first
foremost
place
declare
constants
using
final
access
modifier
classes
can
use
example
dateutility
class
declares
final
variables
naming
months
rational
class
declares
constants
zero
one
storing
references
object
representing
one
values
recall
one
can
call
mutator
final
variables
change
states
one
store
new
reference
different
object
final
variable
rational
immutable
class
contains
mutator
methods
instance
values
stored
objects
always
will
remain
second
use
static
fields
subtle
use
store
information
shared
objects
class
normally
objects
stores
state
instance
variables
static
variables
stored
special
spot
objects
can
access
suppose
wanted
able
know
many
times
objects
constructed
class
many
times
new
operated
certain
class
can
declare
private
static
int
allocated
0
class
include
statement
allocated
constructor
now
whenever
object
constructed
static
variable
shared
objects
class
incremented
finally
define
public
static
int
getallocated
return
allocated
return
value
happen
declare
field
static
information
stored
instance
variable
choice
object
store
value
part
state
time
object
constructed
initialize
instance
variable
zero
increment
constructor
thus
constructed
objects
instance
variables
storing
1
one
static
field
storing
final
strangeness
static
fields
declarations
intializations
done
just
first
time
java
needs
something
class
contrast
instance
variable
declarations
executed
time
new
constructs
object
fields
class
constructors
instance
variables
ones
mostly
constants
described
see
static
fields
study
careful
understand
writing
javadoc
comments
java
first
popular
programming
language
come
special
program
course
written
java
documenting
classes
important
interesting
programming
involves
locating
collection
useful
classes
determining
constructors
methods
define
use
based
syntax
semantics
information
stored
indexed
viewable
via
standard
web
browsers
links
made
big
difference
programming
efficiency
already
studied
read
web
pages
produced
javadoc
standard
java
library
classes
provided
course
now
will
begin
learn
write
javadoc
comments
document
classes
write
can
run
javadoc
java
source
code
java
files
even
added
none
special
comments
desrcribed
javadoc
still
produces
skeletal
web
page
listing
fields
constructors
methods
summary
detail
tables
web
pages
though
commentary
none
special
parameter
return
throws
information
general
can
document
classes
comments
javadoc
ignores
general
comments
reads
process
comments
written
special
form
comments
start
called
javadoc
comments
notice
javadoc
comment
also
general
comment
starting
also
treated
whitespace
java
compiler
javadoc
commment
prefacing
diceensemble
class
view
along
javadoc
pages
generates
javadoc
course
api
objects
constructed
code
diceensemble
code
class
act
collections
dice
number
dice
ensemble
number
sides
die
can
controlled
programmer
class
models
basic
operations
need
roll
dice
determine
number
pips
showing
individual
dice
entire
ensemble
author
richard
pattis
javadoc
copies
contents
comment
web
page
builds
class
appears
near
top
right
first
summary
table
write
comments
java
file
special
style
ease
editing
line
sentence
sentences
longer
one
line
indented
web
browser
renders
text
nice
paragraph
note
said
javadoc
copies
contents
message
web
browser
renders
text
means
comment
can
us
embedded
html
markup
tags
tags
copied
web
page
rendered
browser
just
like
normal
html
tags
text
notice
use
code
diceensemble
code
render
name
class
code
font
multi
paragraph
description
use
separate
paragraphs
generally
use
html
markup
tags
familiar
format
documentation
finally
note
special
javadoc
markup
tag
author
javdoc
makes
special
use
tag
often
creating
special
html
typical
constructor
method
documented
javadoc
comment
following
form
comment
appear
file
right
member
documents
one
sentence
documentation
param
tag
return
tag
throws
tag
section
always
begins
least
one
sentence
ended
period
material
documentation
can
follow
information
including
first
period
appears
summary
section
also
appears
detail
sections
followed
material
documentation
appearance
something
special
javadoc
markup
tag
javadoc
recognizes
processes
inserting
special
html
markup
commands
highlight
information
coming
tag
include
tags
relevant
constructor
method
parameters
param
tags
otherwise
use
one
tag
per
parameter
constructor
void
method
return
tag
otherwise
use
one
tag
constructor
method
throwing
exceptions
throws
tags
otherwise
use
one
tag
per
exception
information
documented
tags
appears
detail
sections
words
parameters
returns
throws
highlighted
first
word
param
name
parameter
automatically
rendered
code
font
followed
dash
rest
information
write
first
word
throws
name
exception
appears
link
class
name
followed
dash
rest
information
write
can
embed
html
markup
tags
directly
comments
processed
javadoc
will
just
copy
web
page
browswer
will
interpret
javadoc
comment
precede
first
constructor
roll
getpips
methods
diceensemble
class
notice
one
sentence
comment
ends
period
tags
words
enclosed
inside
code
html
commands
displayed
special
font
group
parameter
tags
together
separated
blank
lines
constructs
code
diceensemble
code
object
specifying
number
dice
number
sides
per
die
param
numberofdice
specifies
number
dice
ensemble
param
sidesperdie
specifies
number
sides
every
die
ensemble
pips
showing
1
2
3
code
sidesperdie
code
throws
illegalargumentexception
either
parameter
less
1
public
diceensemble
int
numberofdice
int
sidesperdie
throws
illegalargumentexception
returns
code
diceensemble
cod
rolling
every
die
using
return
type
diceensemble
instead
code
void
code
can
cascade
method
calls
writing
expressions
code
roll
getpipsum
code
instead
writing
roll
statement
return
rolled
dice
ensemble
public
diceensemble
roll
returns
number
pips
showing
die
code
dieindex
code
changed
time
ensemble
rolled
param
dieindex
specifies
index
die
whose
pips
returned
throws
illegalstateexception
ensemble
rolled
throws
illegalarguementexception
code
dieindex
code
outside
range
1
getnumberofdice
return
number
pips
showing
die
code
dieindex
code
public
int
getpips
int
dieindex
throws
illegalstateexception
illegalargumentexception
documentation
javadoc
appears
sun
microsystems
web
site
want
know
javadoc
course
covers
start
reading
will
partially
describe
two
interesting
javadoc
tags
see
link
tags
use
create
links
fields
constructors
methods
either
page
page
documenting
another
class
see
tag
collects
references
puts
special
section
link
tag
embeds
links
documentation
right
appears
typical
use
method
never
called
first
calling
link
diceensemble
roll
roll
method
ensure
dice
actually
pips
showing
first
piece
information
way
refer
field
constructor
method
second
piece
information
word
link
appear
javadoc
web
page
much
information
interesting
tag
including
following
general
forms
can
run
javadoc
program
produce
javadoc
web
pages
cammand
line
many
interesting
options
standard
way
run
javadoc
publicdocs
public
java
link
http
java
sun
com
j2se
1
3
docs
ap
want
type
information
can
download
generate
javadoc
batch
file
contains
command
another
one
generate
javadoc
perspective
implememtor
including
private
stuff
batch
file
also
available
miscellaneous
online
resources
web
page
put
file
folder
contains
java
files
want
run
javadoc
runing
windows
double
click
file
named
generatedocs
bat
will
see
console
window
pop
window
shows
javadoc
utility
running
otherwise
cut
paste
execute
lines
file
creates
folder
named
publicdocs
containing
javadoc
comments
related
public
class
members
ones
reading
class
users
folder
named
privatedocs
containing
javadoc
comments
related
public
private
class
members
ones
read
class
implementors
folder
contains
file
named
index
html
acts
root
javadoc
web
pages
folder
click
start
viewing
javadoc
can
take
seconds
class
javadoc
examines
extracts
web
page
debugging
purposes
link
tags
contain
errors
twice
will
asked
press
key
continue
errors
can
stop
examine
instead
scroll
instance
variables
eclipse
debugger
eclipse
debugger
includes
useful
features
illustrate
classes
construct
objects
material
discussed
previously
lecture
note
editor
debugger
concerning
static
methods
works
non
static
methods
well
know
whenever
method
called
debugger
displays
parameter
variables
local
variables
variables
tab
addition
whenever
non
static
method
called
object
pane
also
displays
special
entry
named
surprised
call
frames
refers
object's
instance
variables
call
frames
accurately
reflect
main
aspect
suppose
stop
first
line
inside
roll
method
full
name
method
packagename
classname
methodname
appears
underneath
thread
main
recall
temp
package
name
class
note
variables
tab
appears
single
line
preceded
box
showing
followed
id
number
ignore
id
number
box
called
disclosure
box
currently
non
disclosing
elided
state
clicking
box
toggles
disclosing
state
contents
will
replaced
instance
variables
object
refers
will
appear
indented
clicking
box
will
return
non
disclosing
state
first
time
two
six
sided
dice
rolled
instance
variables
rollcount
pipsum
allsame
display
initial
values
watching
instance
variables
change
single
stepping
statements
method
can
see
mutator
command
changes
state
object
last
line
method
reached
instance
variables
now
display
new
values
understanding
debugger
treats
objects
crucial
able
debug
classes
quickly
practice
using
kinds
stepping
object
observations
using
drivers
simplediceensemble
rational
classes
summary
class
invariants
long
lecture
discussing
many
interesting
language
features
tons
technical
terms
looked
classes
new
perspective
class
implementor
leveraging
information
learned
previously
class
users
let
try
review
important
ideas
briefly
began
studying
form
meaning
static
method
definitions
along
return
throw
statements
learned
hand
simulate
methods
call
frames
use
programs
two
ways
directly
application
along
main
method
definitions
library
class
examined
metrowerks
ide
makes
using
methods
easier
editor
debugger
discussed
define
instance
variables
class
along
related
topics
write
constructors
help
initialize
methods
manipulate
learned
private
member
can
accessed
members
class
defined
members
outside
class
found
two
interesting
uses
keyword
specify
instance
variables
variable
name
conflicts
help
constructors
finally
discussed
writing
javadoc
document
classes
members
finally
like
look
one
time
constructors
methods
middlemen
respect
private
instance
variables
invariant
statement
something
remains
true
something
manipulated
statement
true
say
satisfied
class
invariant
set
statements
instance
variables
objects
constructed
class
statements
must
true
object
first
constucted
must
remain
true
method
called
course
accessor
queries
change
state
can
ignored
discussing
class
invariants
fact
many
interesting
class
immutable
string
biginteger
rational
class
invariants
true
object
construction
rational
class
example
three
invariants
zero
stored
numerator
zero
denominator
one
denominator
always
stored
positive
value
numerator
denominator
reduced
common
factors
constructor
carefully
ensures
true
various
methods
especially
equals
assume
invariants
true
order
operate
correctly
sometimes
efficiently
diceensemble
class
another
example
requires
positive
values
number
dice
sides
per
die
constructor
also
ensures
invariant
accessor
roll
change
instance
variables
using
private
instance
variables
helps
implementor
ensure
class
invariants
declaring
instance
variables
private
know
place
can
change
code
methods
defined
class
users
class
change
variables
directly
possibly
make
invariant
unsatisfied
imagine
happen
declared
numerator
denominator
public
incompetent
malicious
programmer
store
anything
instance
variables
violating
invariants
stated
thus
class
implementor
prefers
private
instance
variables
sometimes
public
final
ones
will
work
users
class
bad
things
instances
access
modfier
ensures
constructors
methods
class
ultimate
control
state
changes
made
objects
now
come
aids
us
debugging
imagine
scenerio
user
class
getting
bad
results
application
program
blame
user
implementor
class
object's
state
ever
satisfy
class
invariants
implementor
definitely
made
mistake
object's
state
always
satisfies
class
invariants
postcondition
method
satisifed
implementor
also
made
mistake
mistakes
result
user
class
well
designed
class
cohesive
collection
related
instance
variables
constructors
initialize
methods
manipulate
method
performs
small
well
defined
service
taken
together
methods
allow
programmers
everything
needed
objects
constructed
class
composition
coordinated
services
control
programmer
make
well
designed
classes
easy
reuse
many
related
applications
well
designed
class
common
write
many
small
methods
classes
seen
typical
true
even
complicated
classes
may
many
constructors
methods
instance
variables
whose
method
definitions
still
quite
small
goal
ics
21
22
matter
ics
23
gets
closer
collection
classes
teach
design
re
usable
class
goal
teach
read
use
classes
also
goal
able
implement
write
java
file
well
designed
someone
else
class
finally
want
read
java
source
code
files
java's
standard
library
classes
can
find
src
jar
file
jdk1
folder
whatever
folder
representes
top
java
file
system
mine
program
files
java
jdk1
open
file
zip
can
select
examine
nearly
2
000
files
contains
files
comprise
industrial
strength
code
written
excellent
programmers
expect
breeze
code
remarkably
readable
say
compared
libraries
problem
set
ensure
understand
material
lecture
please
solve
announced
problems
read
lecture
get
stumped
problem
go
back
read
relevant
part
lecture
still
questions
please
get
help
instructor
ca
student
write
statement
calls
result
returning
methods
maybe
just
display
returned
result
console
hand
simulate
execution
call
frame
java
allows
methods
parameters
methods
defined
called
specifying
name
followed
empty
argument
list
use
knowledge
semantics
return
statement
explain
happens
following
method
calls
get
confused
think
want
follow
rules
int
return
1
return
2
displayed
system
print
1st
2nd
write
method
named
characteristic
returns
1
parameter
true
0
parameter
false
write
method
named
abs
returns
absolute
value
int
parameter
always
returns
non
negative
magnitude
parameter
call
math
abs
method
write
method
named
signum
returns
1
double
parameter
negative
0
parameter
zero
1
parameter
positive
write
method
named
constrain
calling
constrain
1
5
10
returns
5
middle
value
first
third
values
calling
constrain
1
5
10
returns
1
middle
value
smaller
first
value
method
returns
first
value
calling
constrain
1
15
10
returns
10
middle
value
larger
third
value
method
returns
third
value
thus
method
returns
middle
value
constrained
lie
first
third
values
inclusize
write
method
named
forchar
call
method
forchar
enter
upper
case
letter
'a'
'z'
always
returns
char
whose
ascii
value
'a'
'z'
call
method
forchar
enter
digit
'0'
'9'
always
returns
char
whose
ascii
value
'0'
'9'
write
simple
method
named
makechange
supplied
amount
change
vend
returns
number
quarters
dimes
nickels
pennies
needed
vend
required
change
think
can
write
method
solve
problem
write
method
named
majority
returns
frequently
occuring
value
three
boolean
parameters
matter
values
two
three
possibly
three
three
will
value
example
call
majority
true
false
false
returns
false
call
majority
true
true
true
returns
true
write
method
named
median
returns
middle
value
three
arguments
example
call
median
3
2
5
returns
3
2
5
assume
declare
char
roman
store
character
roman
numeral
write
method
returns
int
equivalent
roman
numeral
1
5
10
50
100
500
1000
stores
character
return
1
write
method
named
isprime
returns
whether
parameter
prime
number
prime
number
1
divisors
neither
0
1
considered
prime
2
smallest
prime
number
3
5
7
11
etc
hint
use
loop
check
possible
divisors
along
operator
write
method
named
harmonic
takes
one
int
parameter
returns
double
value
representing
harmonic
series
order
harmonic
defined
1
1
2
1
3
1
harmonic
2
returns
1
5
harmonic
4
returns
2
083333
write
method
named
fw
returns
number
characters
needed
print
integer
parameter
example
fw
5
returns
1
fw
5
returns
2
fw
453
returns
3
fw
243
returns
4
hint
number
digits
number
related
many
times
can
divide
10
still
non
zero
value
treat
negative
numbers
specially
write
method
named
block
int
height
width
parameter
char
parameter
method
returns
string
printed
displays
rectangle
specified
height
width
consisting
specified
character
calling
system
println
block
5
20
'
'
print
remember
catenating
escape
sequence
character
'
n'
string
causes
carriage
return
character
printed
suppose
program
consists
methods
main
also
suppose
main
calls
calls
calls
calls
nothing
else
calls
calls
find
two
natural
orders
write
methods
file
find
two
reverse
natural
orders
write
methods
file
sample
methods
lecture
identify
ones
makes
sense
throw
illegalargumentexceptions
describe
conditions
note
sometimes
individual
parameters
will
store
reasonable
values
pairs
parameters
will
values
incompatible
saw
lecture
can
specify
parameter
variable
final
example
can
rewrite
factorial
public
static
int
factorial
final
int
int
answer
1
int
2
final
mean
added
parameter
factorial
method
still
work
correctly
parameter
specified
final
find
compile
time
run
time
methods
lecture
can
parameters
declared
final
can
local
variables
methods
declared
final
define
class
following
characteristics
name
utility
cs200
package
contains
two
static
methods
named
factorial
first
takes
int
parameter
returns
int
result
second
takes
biginteger
parameter
returns
biginteger
result
important
whatever
classes
necessary
write
bodies
methods
successfully
explain
defining
class
never
need
write
import
declaration
math
class
predict
half
students
class
will
make
following
mistake
write
one
first
constructors
can
spot
mistake
compare
correctly
written
constructor
lecture
actually
happens
write
code
will
java
detect
report
error
message
will
java
executes
code
public
simplediceensemble
int
numberofdice
2
int
sidesperdie
6
int
rollcount
0
wrote
like
numberofdice
help
explain
simplify
following
declarations
constructor
used
style
always
writing
access
instance
variables
private
int
private
int
private
int
public
int
10
0
examine
code
simplediceensemble
class
assume
decide
roll
dice
automatically
time
ensemble
constructed
initialize
modify
constructor
perform
task
changes
make
method
headers
bodies
assume
want
users
class
able
retrieve
minimum
maximum
number
pips
showing
roll
extra
instance
variables
declare
new
methods
write
changes
old
methods
make
write
class
named
rangetally
instance
class
stores
four
fields
lower
legal
value
upper
legal
value
sum
int
values
range
seen
via
tally
method
total
number
values
seen
whether
range
constructor
initialize
fields
appropriately
accessor
gettally
return
sum
values
seen
range
accessor
getcount
return
count
values
seen
whether
range
mutator
tally
passed
int
parameter
conditionally
tallied
sum
change
fields
appropriate
example
declare
rangetally
new
rangetally
1
10
execute
statements
tally
5
tally
8
tally
15
system
println
gettally
getcount
java
prints
13
3
last
value
counted
summed
range
1
10
specified
constructor
