strong connectivity 
strong connectivity 
strong
connectivity
depth
first
search
directed
graph
can
use
algorithm
undirected
graph
using
edge
types
edges
dfs
directed
graph
tree
edges
edges
leading
new
vertices
search
forward
edges
go
ancestors
descendents
back
edges
go
descendents
ancestors
self
loops
cross
edges
go
unrelated
vertices
lemma
crossedge
dfn
dfn
cross
edges
go
right
left
directed
graph
strongly
connected
path
vertex
vertex
maximal
subgraph
strongly
connected
called
strongly
connected
component
also
called
strong
component
vertices
strong
component
exists
path
exists
path
lemma
gi
vi
ei
strong
component
directed
graph
dfs
forest
vi
ei
intersect
tree
strong
components
trees
subgraphs
spanning
forest
know
roots
strong
components
spanning
forest
know
strong
components
first
deleting
subtrees
consist
strong
components
lie
left
strong
component
headed
lemma
roots
ri
strong
components
gi
listed
order
completion
searchb
ri
searchb
ri
terminates
searchb
ri
1
gi
consists
vertices
descendents
ri
g1
gi
1
help
find
roots
define
lowlink
smallest
numbered
vertex
strong
component
can
reached
going
tree
edges
followed
one
back
xross
edge
root
strong
component
iff
lowlink
dfn
root
strong
component
lowlink
dfn
can
seen
follows
path
root
v's
strong
component
let
first
node
path
outside
v's
subtree
dfn
dfn
since
cross
edges
backedges
strong
component
since
path
root
path
root
can
express
recurrence
relation
lowlink
lowlink
minimum
either
1
dfn
2
dfn
back
cross
edge
3
lowlink
son
strong
components
found
manner
similar
biconnected
components
vertices
put
stack
root
found
stack
popped
depth
first
search
including
lowlink
strong
components
count
0
forall
vertices
flag
new
onstack
stack
£f
exists
flag
new
search
1
search
flag
old
count
count
1
dfn
count
1
lowlink
dfn
stack
¡ö
onstack
yes
let
list
vertices
edge
¡Ú
£f
flag
old
dfn
dfn
onstack
yes
therefore
back
cross
edge
forward
edge
2
lowlink
min
lowlink
dfn
else
flag
new
search
3
lowlink
min
lowlink
lowlink
lowlink
dfn
stack
onstack
print
¡Ú
stack
onstack
print
print
end
strong
component
time
complexity
algorithm
dan
hirschberg
last
modified
oct
28
2003
