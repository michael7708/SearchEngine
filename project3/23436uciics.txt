ics 31 lab 5 
lab assignment 5 
ics
31
david
kay
uc
irvine
winter
2013
lab
assignment
5
assignment
due
end
lab
friday
february
8
preparation
part
individually
coming
lab
1
planning
use
computer
lab
work
download
complete
first
version
restaurants
program
save
computer
run
make
sure
works
environment
want
waste
lab
time
2
read
sections
4
1
textbook
material
already
seen
string
manipulation
conceptually
hard
requires
meticulous
attention
detail
particularly
important
try
practice
problems
www
pythontutor
com
can
run
simple
python
code
see
values
change
memory
helpful
tool
use
check
work
hand
tempting
just
copy
code
watch
work
copy
answer
totally
defeats
purpose
learning
happens
problems
see
answer
3
exercises
4
12
4
15
4
17
4
18
everyone
able
independently
require
creative
algorithmic
thinking
just
need
look
section
text
see
various
language
features
work
author
supplies
correction
128
problem
4
17
part
say
assign
variable
length
run
trouble
check
ta
right
away
4
read
rest
assignment
can
come
lab
monday
prepared
start
work
lab
work
part
partner
lab
choose
partner
assignment
make
sure
ta
knows
partner
remember
choose
different
partner
lab
assignment
work
partner
week
make
sure
know
partner's
name
first
last
contact
information
email
cellphone
whatever
case
one
make
lab
prepare
lab5
py
file
previous
labs
including
line
like
paula
programmer
11223344
andrew
anteater
44332211
ics
31
lab
sec
7
lab
asst
5
define
dish
might
served
restaurant
three
fields
string
name
dish
number
price
keeping
new
labeling
rules
number
number
calories
dish
1
define
namedtuple
representing
dishes
like
create
three
actual
dish
objects
just
make
values
dish
assign
variables
named
d1
d2
d3
2
write
function
called
dish
str
takes
dish
returns
string
form
paht
woon
sen
9
50
330
cal
format
dollar
amount
perfectly
point
3
write
function
called
dish
takes
two
dishes
arguments
returns
true
names
two
dishes
calorie
counts
equal
false
otherwise
write
tests
using
assert
statements
perhaps
including
d1
d2
d3
include
calls
two
identical
dishes
two
dishes
except
price
two
dishes
differ
names
calorie
counts
course
tests
included
lab5
py
file
course
tests
like
every
function
write
except
maybe
ones
print
instead
returning
vaue
coming
thorough
tests
another
programming
skill
people
enjoy
trying
break
software
become
software
quality
assurance
testing
experts
4
write
function
called
dish
change
price
takes
dish
number
returns
dish
parameter
except
price
changed
follows
number
positive
negative
represents
percentage
change
price
100
double
price
50
cut
half
may
problem
like
overtime
pay
problem
may
require
think
little
arithmetic
need
compute
result
figure
write
code
5
write
function
called
dish
cheap
takes
dish
number
returns
true
dish's
price
less
number
false
otherwise
6
now
create
list
called
dl
least
five
dish
objects
play
around
list
shell
minute
two
take
length
sort
append
another
dish
end
make
sure
works
expect
next
create
another
list
called
dl2
contains
least
four
dish
objects
create
one
big
list
extending
dl
dl2
note
difference
append
method
extend
method
take
minute
sure
write
function
called
dishlist
display
takes
list
dishes
returns
one
large
string
consisting
string
representation
dish
followed
newline
'
n'
character
write
tests
usual
use
print
statement
print
string
representation
dishes
big
list
created
7
write
function
called
dishlist
cheap
takes
list
dishes
note
different
dish
cheap
number
returns
true
price
every
dish
list
less
number
go
without
saying
dishlist
cheap
will
call
dish
cheap
solutions
duplicate
code
instead
using
already
defined
function
receive
little
credit
8
write
function
called
dishlist
change
price
takes
list
dishes
number
representing
percentage
change
returns
list
dishes
price
changed
specified
amount
since
lists
mutable
ask
write
differently
specification
change
list
rather
returning
new
list
changed
prices
9
write
function
called
dishlist
prices
takes
list
dishes
returns
list
numbers
containing
just
prices
dishes
list
10
write
function
called
dishlist
average
takes
list
dishes
returns
average
price
dishes
call
previously
defined
functions
wherever
possible
reinvent
wheel
11
write
function
called
dishlist
keep
cheap
takes
list
dishes
number
returns
list
dishes
original
list
prices
less
number
much
like
keeping
consonants
string
12
create
list
least
25
dishes
just
make
part
perfectly
fine
trade
dishes
classmates
partner
just
check
dishes
receive
correctly
formed
write
function
called
takes
parameters
prompts
user
interactive
input
number
representing
percentage
change
prices
prints
result
dishlist
display
big
list
dishes
changes
prices
dishes
big
list
prints
result
dishlist
display
reflecting
changed
list
dishes
copy
complete
first
version
restaurants
program
lab
machine
see
link
call
restaurantsd
py
part
assignment
turn
file
separately
along
lab5
py
file
run
code
make
sure
installed
correctly
now
try
tasks
described
advice
mind
modify
large
unfamiliar
programs
want
especially
careful
make
test
small
changes
one
time
ii
make
changes
deliberately
high
confidence
will
work
intended
rather
just
changing
things
haphazardly
hoping
work
iii
make
small
set
changes
new
copy
code
roll
back
changes
far
back
go
copy
recent
stable
version
easy
lose
way
navigating
around
large
program
steps
will
help
keep
track
1
change
command
adding
new
restaurant
instead
2
add
additional
menu
choice
remove
erase
restaurants
collection
user
types
example
nothing
printed
will
require
modifications
additions
places
can
main
part
work
easily
indeed
single
function
call
test
modified
program
interactively
satisfy
works
intended
3
add
one
new
feature
program
change
prices
dishes
served
user
types
program
ask
user
amount
representing
percentage
change
price
described
apply
price
change
prices
restaurants
collection
design
way
designed
dishes
write
separate
restaurant
change
price
function
example
collection
change
prices
function
call
handle
commands
defined
dish
worked
lists
dish
objects
call
list
dishes
menu
redefine
restaurant
menu
instead
just
one
best
dish
price
also
define
couple
examples
restaurant
namedtuple
'restaurant'
'name
cuisine
phone
menu'
r1
restaurant
'thai
dishes'
'thai'
'334
4433'
dish
'mee
krob'
12
50
500
dish
'larb
gai'
11
00
450
r2
restaurant
'taillevent'
'french'
'01
44
95
15
01'
dish
'homard
bleu'
45
00
750
dish
'tournedos
rossini'
65
00
950
dish
selle
d'agneau
60
00
850
part
lab5
py
file
1
write
python
expression
defines
r3
restaurant
object
french
restaurant
pascal
whose
phone
number
940
752
0107
serve
escargots
12
95
250
cal
poached
salmon
18
50
550
cal
rack
lamb
24
00
850
cal
marjolaine
cake
8
50
950
cal
2
write
function
restaurant
first
dish
name
takes
restaurant
argument
returns
name
first
dish
restaurant's
menu
remember
write
examples
expected
results
assert
statements
write
function
every
function
whether
remind
include
code
check
whether
menu
zero
dishes
return
empty
string
3
write
function
called
restaurant
cheap
takes
two
arguments
restaurant
number
returns
true
average
price
restaurant's
menu
less
equal
number
work
find
essential
keep
track
part
data
working
restaurant
object
string
number
list
dish
hint
functions
wrote
can
used
4
fact
counting
whole
collection
restaurants
four
layers
data
example
collection
list
restaurant
objects
operations
collections
include
collection
new
collection
str
collection
search
name
others
restaurants
program
plus
predefined
operations
lists
like
len
sort
indexing
restaurant
namedtuple
four
fields
strings
name
cuisine
phone
number
list
menu
operations
restaurants
include
ones
defined
like
restaurant
str
automatically
defined
constructor
function
restaurant
predefined
ones
like
replace
menu
called
dishlist
list
dish
objects
rename
operations
defined
menu
display
menu
change
prices
menu
average
also
predefined
list
operations
dish
namedtuple
three
fields
defined
operations
dish
objects
helps
keep
everything
straight
separate
function
layer
want
example
write
function
collection
raise
prices
takes
collection
returns
collection
price
every
dish
every
restaurant
raised
2
50
will
easiest
collection
raise
prices
calls
restaurant
function
restaurant
raise
prices
takes
restaurant
returns
restaurant
prices
raised
2
50
restaurant
raise
prices
turn
call
menu
raise
prices
takes
menu
applies
function
like
dish
raise
250
dish
menu
returns
modified
menu
create
collection
three
restaurants
defined
plus
like
write
function
collection
raise
prices
described
simply
raise
price
2
50
write
function
collection
change
price
works
described
takes
second
parameter
percentage
change
price
didabove
note
keep
passing
percentage
along
successive
function
since
get
bottom
price
individual
dish
actually
use
number
5
write
function
collection
select
cheap
takes
collection
number
returns
list
restaurants
collection
whose
average
price
less
equal
number
use
functions
described
appropriate
now
try
incorporate
menus
full
restaurants
program
start
downloading
clean
copy
first
version
restaurants
program
confident
version
modified
part
may
start
version
instead
part
create
separate
file
called
restaurantsf
py
turn
file
along
lab5
py
file
restaurantsd
py
file
created
earlier
advice
taking
things
slowly
methodically
applies
never
find
running
time
end
week
may
well
methodical
enough
making
changes
code
original
program
section
restaurants
section
collections
want
add
section
dishes
section
menus
dish
section
write
functions
dish
str
already
wrote
dish
get
info
works
along
lines
restaurant
get
info
now
menus
section
write
menu
enter
function
repeatedly
asks
whether
user
wants
add
dish
user
enters
yes
function
prompts
user
create
dish
adds
growing
list
dishes
user
enters
function
returns
compiled
list
dishes
now
call
menu
enter
take
menu
returns
including
whole
data
structure
appropriate
place
menus
section
also
need
someting
create
display
string
menu
dishes
also
need
find
program
call
function
generates
menu
display
string
next
incorporate
price
changing
code
program
ultimately
main
menu
gives
option
change
prices
dishes
served
user
types
program
ask
user
amount
representing
percentage
change
price
apply
price
change
prices
dishes
restaurants
collection
finally
time
also
incorporate
top
level
command
selects
restaurants
prices
specified
value
reusing
code
defined
appropriate
exercises
4
13
4
14
putting
solutions
lab5
py
file
author
supplies
corrections
128
problem
4
13
'abcdefghijklmnopqrstuvwxyz'
128
problem
4
14
picture
text
file
say
assign
variable
address
substring
log
ends
first
blank
space
log
using
string
method
split
indexing
operator
say
assign
variable
date
slice
string
log
containing
date
12
feb
0600
next
exercise
4
19
problem
4
23
instead
book's
problem
4
25
write
function
called
letter
count
two
strings
parameters
function
returns
counts
certain
letters
first
parameter
second
parameter
string
specifies
letters
count
thus
letter
count
message
'aeiou'
return
counts
vowels
string
message
letter
count
message
'
n'
return
counts
white
space
characters
space
tab
newline
function
return
counts
list
count
namedtuples
count
namedtuple
two
fields
letter
number
calling
letter
count
'the
cabbage
baggage'
'abcd'
return
count
letter
'a'
number
5
count
letter
'b'
number
3
count
letter
'c'
number
1
count
letter
'd'
number
0
go
need
break
parts
first
follow
design
recipe
write
function
header
types
parameters
type
return
value
write
docstring
purpose
statement
write
examples
calls
function
expected
results
form
assert
statements
may
take
minutes
time
well
spent
stage
second
define
count
namedtuple
third
always
good
idea
designing
function
thing
count
occurrences
multiple
values
vowels
whatever
design
write
function
task
one
value
takes
string
single
character
returns
single
count
namedtuple
character
number
times
occurs
string
body
function
can
one
line
calls
string
method
covered
chapter
4
fourth
write
body
main
letter
count
function
task
call
count
one
character
function
characters
counting
building
list
counts
returning
end
purposes
assignment
treat
upper
lower
case
characters
distinct
will
make
coding
easier
consider
modify
function
count
upper
lower
case
versions
letter
together
remember
partner
must
complete
partner
evaluation
form
submit
individually
connecting
eee
uci
edu
choosing
survey
tool
lab
section
ics
31
make
sure
know
partner's
name
first
last
can
evaluate
right
person
students
forgetting
specify
partner's
name
survey
now
forget
partner's
name
give
credit
completing
evaluation
please
complete
evaluation
end
day
friday
saturday
morning
latest
takes
couple
minutes
hurts
participation
score
turn
submit
via
checkmate
three
files
lab5
py
file
containing
solutions
parts
two
files
restaurantsd
py
restaurantsf
py
parts
respectively
remember
said
previous
labs
rereading
assignment
rerunning
python
files
also
remember
student
must
complete
partner
evaluation
form
logging
eee
uci
edu
selecting
survey
tool
evaluations
contribute
class
participation
score
get
habit
every
week
friday
submitted
assignment
survey
closes
saturday
miss
forget
indicate
partner's
name
get
credit
filling
missing
one
may
significant
effect
grade
easy
points
everyone
else
getting
written
david
kay
fall
2012
ics
31
based
part
assignments
ics
h21
informatics
41
modified
david
kay
winter
2013
david
kay
kay
uci
edu
monday
february
4
2013
10
16
