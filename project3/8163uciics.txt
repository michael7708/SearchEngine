ics 22 cse 22 project 2 you won't find me there 
project 2 
project
2
find
due
date
time
wednesday
april
20
11
59pm
project
done
pairs
using
pair
programming
technique
introduction
us
lived
one
home
lives
common
people
move
time
time
moving
poses
number
logistical
challenges
least
getting
belongings
new
home
even
discounting
complexity
physical
move
issues
dealt
one
making
sure
people
companies
correspond
friends
employers
banks
utility
companies
new
address
correspondence
can
continue
even
move
try
might
give
everyone
new
address
move
though
always
someone
forget
friend
heard
years
company
business
rarely
someone
make
appropriate
change
records
fortunately
postal
service
provides
service
called
mail
forwarding
mail
addressed
old
address
will
automatically
sent
new
address
instead
even
put
yellow
sticker
envelope
remind
notify
sender
new
address
handy
project
explore
technological
side
mail
forwarding
little
bit
writing
program
determines
whether
individual
pieces
mail
forwarded
address
forward
along
way
gain
experience
implementing
data
structure
called
singly
linked
list
also
learn
implement
generic
classes
generic
way
arraylist
generic
arraylists
take
type
parameter
configures
kinds
objects
store
arraylist
student
choosing
partner
pair
programming
required
project
need
choose
partner
among
people
enrolled
lab
section
different
people
partnered
previously
trouble
finding
partner
notify
ta
can
assisted
finding
one
found
partner
notified
ta
pairing
end
lab
meeting
wednesday
april
13
will
assigned
partner
notified
via
email
ta
selected
partner
will
allow
switch
another
one
will
receive
credit
assignment
work
alone
without
prior
consent
instructor
please
note
prior
consent
include
approaching
us
day
project
due
completed
telling
us
able
find
partner
program
program
will
maintain
list
forwarding
entries
consisting
name
old
address
new
address
program
consists
commands
allow
user
add
new
forwarding
entry
remove
existing
forwarding
entry
report
correct
address
send
piece
mail
based
address
envelope
program
support
following
commands
commandformatdescriptionoutputaddadd
name
old
address
new
addressadds
new
forwarding
entry
forwarding
list
given
name
old
address
new
address
subsequent
mailings
named
person
old
address
will
forwarded
new
address
entry
name
old
address
exists
already
adding
fail
error
message
forwarding
entry
added
output
consist
word
added
line
entry
name
original
address
exists
output
consist
phrase
entry
already
exists
line
removeremove
name
old
address
new
addressremoves
forwarding
entry
forwarding
list
given
name
old
address
new
address
one
subsequent
mailings
named
person
old
address
will
forwarded
forwarding
entry
removed
output
consist
word
removed
line
output
consist
phrase
entry
line
mailmail
name
addressa
piece
mail
ready
sent
addressed
given
name
given
address
command
checks
see
mail
forwarded
different
address
command
output
phrase
send
followed
address
piece
mail
sent
line
mail
forwarded
forwarding
address
printed
original
address
printed
quitquitquits
program
output
consist
word
goodbye
line
program
read
sequence
commands
console
system
write
output
console
system
print
prompts
output
output
required
response
command
specified
minor
important
notes
first
start
program
list
forwarding
entries
empty
mail
forwarding
supported
program
recursive
example
suppose
following
two
forwarding
entries
program's
forwarding
list
name
alex
thornton
old
address
123
main
st
irvine
ca
92697
new
address
234
main
st
irvine
ca
92697name
alex
thornton
old
address
234
main
st
irvine
ca
92697
new
address
111
beach
dr
kihei
hi
96753
piece
mail
sent
alex
thornton
123
main
st
irvine
ca
92697
program
determine
forwarded
234
main
st
irvine
ca
92697
111
beach
dr
kihei
hi
96753
note
write
code
recursively
can
use
loop
solve
problem
instead
program
required
parse
understand
names
addresses
fine
stored
strings
also
fine
program
considers
piece
mail
match
forwarding
entry
name
old
address
match
exactly
example
program's
execution
following
example
program's
execution
boldfaced
italicized
text
indicates
input
normal
text
indicates
output
add
alex
thornton
123
main
st
irvine
ca
92697
234
main
st
irvine
ca
92697
added
mail
alex
thornton
123
main
st
irvine
ca
92697
send
234
main
st
irvine
ca
92697
mail
jane
doe
123
main
st
irvine
ca
92697
send
123
main
st
irvine
ca
92697
add
alex
thornton
234
main
st
irvine
ca
92697
111
beach
dr
kihei
hi
96753
added
mail
alex
thornton
123
main
st
irvine
ca
92697
send
111
beach
dr
kihei
hi
96753
quit
goodbye
notice
prompts
output
output
required
response
command
may
seem
strange
good
reason
described
little
bit
later
write
fair
assumptions
fair
assume
program
will
receive
valid
input
will
test
program
non
existent
commands
existing
commands
wrong
format
say
course
error
handling
unimportant
real
programs
adds
level
complexity
program
like
faced
free
implement
error
checking
like
something
extra
credit
will
offered
event
program
receives
input
follow
specifications
fine
program
ignore
print
error
message
even
crash
testing
program
circumstances
also
fair
assume
will
cycles
among
forwarding
entries
words
can
assume
will
never
case
two
forwarding
entries
will
exist
like
mail
forwarded
back
address
originally
came
alex
123
main
st
irvine
ca
92697
¡÷
234
main
st
irvine
ca
92697alex
234
main
st
irvine
ca
92697
¡÷
123
main
st
irvine
ca
92697
consider
happen
allowed
entries
like
exist
simultaneously
someone
sends
mail
alex
123
main
st
irvine
ca
92697
forwarded
234
main
st
back
123
main
st
234
main
st
program
need
check
case
can
simply
assume
case
will
never
come
test
program
case
fine
program
runs
infinitely
even
crashes
case
algorithm
solving
kind
problem
called
cycle
data
structure
called
graph
will
covered
ics
23
cse
23
storing
forwarding
list
one
central
tasks
program
will
perform
store
access
list
forwarding
entries
two
primary
ways
store
lists
elements
programming
languages
array
commonly
java
arraylist
linked
list
since
explored
use
arraylists
last
project
required
use
linked
list
store
list
forwarding
entries
project
fine
use
singly
linked
list
head
reference
describing
detail
lecture
project
using
complex
variant
linked
list
provides
little
benefit
though
learn
situations
later
quarter
little
extra
complexity
makes
big
positive
difference
starting
point
means
getting
started
providing
code
starting
point
particular
note
provided
main
method
use
without
modification
well
skeleton
linkedlist
class
required
complete
rather
starting
scratch
starting
point
available
zip
archive
wait
kind
crazy
user
interface
unlike
program
wrote
last
project
program
graphical
user
interface
even
attempt
user
friendly
console
interface
fair
question
wonder
one
programs
require
user
friendly
interfaces
important
application
software
like
microsoft
word
itunes
simple
reason
humans
primary
users
software
example
consider
happens
used
web
browser
load
page
clicked
link
typed
address
page
browser
part
required
user
interface
browser
connected
via
internet
machine
located
ics
building
asking
converse
program
called
web
server
web
server's
job
listen
requests
web
pages
responding
requested
pages
error
message
page
exists
user
interface
activity
process
except
browser
may
display
kind
icon
provides
user
feeling
something
happening
otherwise
activity
invisible
page
downloaded
can
displayed
browser
created
request
format
expected
web
server
web
servers
expect
requests
formatted
using
standardized
format
called
http
request
looks
something
like
get
thornton
ics22
labmanual
findme
http
1
1
accept
accept
language
en
us
user
agent
mozilla
4
0
host
www
ics
uci
edu
connection
keep
alive
important
point
though
complex
detailed
standard
specifies
http
requests
supposed
look
like
necessary
vast
majority
human
users
web
know
anything
requests
composed
browsers
consumed
web
servers
people
uninvolved
process
web
server
responds
sending
browser
http
response
another
standardized
format
format
carefully
defined
standard
details
unimportant
almost
everyone
uses
web
responses
composed
web
server
consumed
browser
people
uninvolved
browser
given
information
response
draws
web
page
see
details
web
works
point
assignment
example
serves
suggest
software
needs
clean
user
friendly
interface
web
server
intended
simply
run
quietly
months
time
human
intervention
required
may
write
information
log
especially
something
goes
wrong
otherwise
nothing
listen
requests
generated
formatted
browsers
response
user
activity
respond
appropriately
now
consider
requirements
program
asked
write
project
waits
requests
sent
via
console
though
almost
easily
sent
across
internet
preferred
predefined
format
responds
using
another
predefined
format
program
essence
can
thought
way
web
sever
engine
top
lots
interesting
software
built
new
address
change
added
system
coming
web
form
filled
user
address
sent
system
see
forwarding
address
address
typed
human
user
post
office
even
scanned
using
optical
character
recognition
ocr
automatically
envelope
little
human
intervention
piece
mail
processed
program
says
send
anywhere
original
address
cause
yellow
label
printed
automatically
placed
envelope
machine
building
interesting
parts
suffice
say
place
software
meaningful
user
interface
can
serve
foundation
upon
software
can
built
can
think
program
foundation
testing
previous
project
required
write
test
plan
detailing
specific
actions
perform
test
complete
program
done
testing
program
whole
important
part
making
sure
program
works
relying
solely
whole
program
testing
leads
least
couple
problems
realistically
done
program
done
least
individual
program
features
done
bugs
harder
fix
program
feature
complete
making
changes
greater
probability
introducing
unintended
changes
breaking
features
working
fine
often
difficult
find
source
problem
testing
large
program
complex
feature
whole
many
possible
causes
problem
discussing
unit
testing
lecture
technique
supplements
whole
program
testing
like
previous
project
allowing
get
feedback
whether
individual
methods
classes
working
correctly
necessary
sufficient
condition
large
program
work
correctly
individual
pieces
working
correctly
course
showing
pieces
correct
necessarily
show
program
whole
correct
may
also
problems
way
pieces
interact
one
another
pieces
work
whole
program
certainly
project
requiring
build
automated
tester
like
one
build
class
biggest
method
conversation
lecture
check
course
home
page
section
web
site
like
see
biggest
tester
tester
program
test
linkedlist
class
completely
possible
required
test
parts
program
though
welcome
wish
note
testing
console
mode
input
output
can
problematic
requiring
skills
belts
yet
probably
best
avoided
time
tester
separate
program
separate
class
others
program
main
method
different
main
method
provided
forwardingprogram
class
behaves
manner
tester
wrote
lecture
write
output
test
case
fails
output
specify
inputs
result
expected
result
remember
goal
automated
tester
point
problems
giving
information
failed
without
cluttering
output
information
succeeded
like
test
plan
last
project
predefined
number
test
cases
must
included
tester
complete
important
cases
included
pay
attention
normal
cases
boundary
cases
error
cases
note
iterator
part
linked
list
necessary
also
test
iterator
discussed
lecture
sure
duplicating
large
chunks
code
tester
possible
write
one
method
executes
one
kind
test
case
based
set
parameters
can
use
method
run
several
similar
kinds
tests
deliverables
necessary
one
two
partners
submit
project
tas
aware
partnerships
will
figure
project
submissions
belong
pairing
put
names
student
ids
partners
comment
top
java
files
submit
java
files
including
ones
provided
checkmate
please
turn
class
files
files
generated
eclipse
afterward
take
moment
sure
submitted
files
missed
one
able
compile
run
program
can
result
substantial
penalty
since
able
evaluate
program's
correctness
follow
link
discussion
submit
project
via
checkmate
aware
holding
rules
specified
document
including
one
says
responsible
submitting
version
project
want
graded
regrade
project
simply
submitted
wrong
version
accident
limitations
java
library
contains
linkedlist
class
java
util
linkedlist
permitted
use
project
nice
class
use
practical
context
since
one
skills
like
gain
project
learning
build
linked
list
prebuilt
version
java
library
strictly
limits
acknowledgements
imported
eric
hennigan's
ics
22
turn
adapted
alex
thornton's
version
developed
many
years
