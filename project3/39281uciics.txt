1 arrays the 
1 arrays 
object
class
simple
collections
1
arrays
object
class
simple
collections
introduction
computer
science
iii
ics
21
22
23
introduction
lecture
will
discuss
powerful
aggregate
data
structure
arrays
arrays
allow
us
store
collections
arbitrary
sized
sequences
values
primitive
types
references
objects
easily
access
manipulate
values
will
learn
declare
arrays
picture
perform
operations
arrays
mostly
looping
performing
operations
individual
values
arrays
will
examine
arrays
can
used
instance
variables
classes
learned
basic
array
material
will
discuss
wrapper
classes
object
class
putting
information
together
will
learn
represent
two
simple
general
powerful
collection
classes
stack
queue
expandable
arrays
stored
instance
variables
will
follow
material
later
semester
systematic
study
even
powerful
java
collection
classes
arrays
similar
objects
special
class
will
exploit
similarity
throughout
discussion
arrays
also
strong
connection
arrays
indexed
sequence
integers
loops
easily
generate
sequence
integers
finally
also
connection
files
arrays
often
information
stored
file
easily
processed
sequentially
read
stored
array
can
easily
efficiently
processed
reprocessed
either
sequentially
randomly
declaring
initializing
arrays
declare
initialize
array
variables
like
class
variables
specifying
type
constructor
special
form
1
dimensional
1
arrays
type
specified
java
type
primitive
reference
followed
constructor
uses
type
int
value
computed
literal
general
expression
inside
brackets
value
computed
expression
specifies
length
array
many
values
contains
construct
array
object
length
may
change
mutator
operation
example
can
declare
initialize
array
variable
storing
reference
object
containing
5
ints
declaration
int
new
int
5
variable
object
refers
illustrated
following
picture
pronounce
array
int
pronounces
int
array
array
objects
labelled
array
type
contain
two
major
parts
sequence
indexed
boxes
special
box
named
length
notice
four
important
facts
arrays
illustrated
picture
array
homogeneous
data
structure
indexed
members
labelled
stores
type
int
constrast
classes
discussed
heterogeneous
instance
variables
can
store
different
type
can
declare
arrays
store
sequences
either
primitive
reference
types
int
box
sequence
stores
int
value
labelled
box
sequence
also
labelled
index
0
1
2
etc
always
int
matter
type
stored
inside
box
indexes
numbered
0
one
less
length
array
maximum
index
4
one
less
length
array
5
decision
elegant
mathematical
perspective
disaster
psychological
perspective
humans
start
counting
1
0
us
expect
length
array
index
last
box
array
java
start
indexes
arrays
0
must
overcome
human
nature
use
arrays
programming
array
object
defines
public
final
int
length
instance
variable
stores
length
array
value
specified
array
object
constructed
unchangeable
length
final
access
modifier
attempt
change
value
can
directly
access
accessor
value
stored
field
example
write
length
code
expression
evaluates
5
fact
can
always
specify
highest
legal
index
array
object
expression
length
1
given
reference
array
can
always
determine
length
highest
index
like
instance
variables
indexed
members
automatically
initialized
array
object
constructed
java
initializes
initializes
instance
variables
primitive
types
uses
0
int
0
double
false
boolean
null
character
char
reference
types
uses
null
meaning
refer
object
indexed
members
initialized
0
must
use
non
negative
lengths
construct
arrays
objects
length
0
allowed
interesting
uses
specify
negative
value
special
constructor
arrays
throws
negativearrayssizeexception
can
also
construct
array
declaring
values
must
contain
case
length
array
automatically
inferred
number
values
example
can
declare
initialize
array
variable
storing
reference
object
containing
five
int
values
4
2
0
1
3
order
declaration
int
new
int
4
2
0
1
3
think
int
class
name
4
2
0
1
3
parameters
constructor
object
class
syntax
reasonable
course
take
similarity
far
constructors
always
set
number
parameters
number
arguments
allowed
braces
types
values
braces
must
compatible
type
array
used
constructor
illustrate
result
executing
declaration
following
picture
accessing
arrays
indexed
members
can
access
individual
member
stored
array
object
using
variable
refers
array
object
index
member
want
access
written
expression
inside
brackets
declare
int
new
int
4
2
0
1
3
can
write
system
println
0
java
print
value
stored
index
0
array
4
pronounce
0
index
0
just
sub
0
similar
subscript
mathematical
notation
think
sequence
a0
a1
a2
etc
likewise
can
write
2
0
statement
checks
see
whether
zero
stored
array
object
referred
index
2
note
type
int
pronounced
int
array
access
member
stored
index
type
int
generally
type
pronounced
array
access
member
stored
index
type
golden
rule
arrays
says
unto
array
member
unto
variable
type
wherever
can
use
int
variable
can
use
int
member
thus
can
write
2
8
using
2
left
side
state
change
operator
changing
value
stored
index
2
0
8
can
even
write
2
increments
value
stored
index
2
array
ask
question
can
use
access
array
member
use
question
simplifies
can
use
variable
type
fact
value
written
inside
brackets
can
expression
evaluates
int
will
see
variables
complicated
expressions
used
indexing
arrays
later
lecture
now
note
writing
length
1
0
stores
0
last
index
array
object
note
accessing
member
array
value
computed
index
less
0
greater
equal
length
array
trying
access
member
index
causes
java
throw
arrayindexoutofboundsexception
contains
message
showing
index
attempted
accessed
writing
length
0
throws
exception
since
index
5
array
object
finally
picture
shows
declare
variable
refering
array
object
time
array
object
stores
string
index
declaration
three
expression
statements
intialize
indexes
new
string
objects
although
indexes
always
integers
values
stored
index
depends
type
used
declare
construct
array
example
index
stores
reference
string
object
finally
using
learned
declared
intialized
variable
array
object
just
one
declaration
either
string
new
string
new
string
abc
new
string
lmn
new
string
xyz
string
new
string
abc
lmn
xyz
second
simple
declaration
correct
special
property
string
literals
construct
objects
note
golden
rule
can
use
0
just
like
variable
type
string
therefore
can
write
expression
0
length
returns
3
length
string
object
referred
index
0
string
array
generally
arrays
store
references
objects
indexed
members
can
call
appropriate
method
based
type
reference
member
array
can
call
string
method
object
stored
array
processing
arrays
code
processes
array
iterating
looking
value
stored
indexed
member
array
object
typically
loop
used
generate
indexes
array
object
study
following
code
carefully
although
short
contains
fundamentals
need
understand
writing
array
processing
code
code
computes
sum
values
int
int
sum
0
int
0
length
sum
system
println
sum
sum
non
compact
trace
table
illustrates
hand
simlation
code
notice
statement
sum
repeatedly
executed
slightly
different
meaning
every
time
value
stored
changes
indexed
member
added
sum
always
different
notice
for's
continuation
test
length
length
5
example
final
body
executed
4
highest
index
array
increments
5
test
false
first
time
body
executed
instead
loop
terminated
can
write
test
length
1
meaning
real
programmers
write
test
way
following
code
prints
one
line
separated
spaces
values
stored
array
values
printed
loop
terminates
ends
line
notice
loop
code
used
time
examine
print
add
together
every
member
stored
array
object
body
loop
telling
java
indexed
member
different
int
0
length
system
print
system
println
interesting
version
loop
prints
comma
separated
list
values
stored
array
last
one
followed
comma
new
line
string
catenate
decided
conditional
expression
int
0
length
system
print
length
1
following
code
prompts
user
fill
value
array
notice
loop
code
used
time
store
every
indexed
member
array
object
body
loop
different
int
0
length
prompt
forint
enter
value
following
code
computes
prints
maximum
value
stored
array
original
maximum
value
comes
index
0
array
first
value
stored
array
loop
starts
index
1
second
value
stored
array
int
max
0
int
1
length
max
max
system
println
max
max
also
also
written
code
follows
initializing
max
integer
min
value
starting
loop
index
0
guaranteeing
0
's
value
will
stored
max
first
loop
iteration
int
max
integer
min
value
int
0
length
max
max
system
println
max
max
examine
javadoc
integer
class
learn
public
static
final
int
value
hand
simulate
second
loop
understand
works
fact
replace
statement
either
max
math
max
max
max
max
max
compute
result
although
prefer
statement
finally
following
code
loads
information
file
array
often
perform
operation
early
proagram
process
information
array
one
times
beause
easier
manipulate
information
array
file
work
file
must
first
store
length
array
needed
read
first
used
construct
array
object
exactly
right
size
store
remaining
values
must
read
remaining
values
file
individually
store
array
typedbufferreader
tbr
new
typedbufferreader
enter
file
load
array
string
new
string
tbr
readint
int
0
length
tbr
readstring
tbr
close
note
omitted
try
catch
block
catching
exceptions
assuming
file
contains
correct
data
never
try
read
past
last
data
value
file
course
writing
code
block
allows
us
decide
handle
exceptions
wrong
type
data
enough
data
etc
array
demonstration
application
contains
code
described
section
please
download
unzip
run
examine
code
discussed
secion
illustrating
arrays
appear
eclipse
debugger
strings
arrays
brief
observation
string
reference
type
also
array
like
properties
string
sequence
characters
can
access
individual
chars
string
relevant
differences
know
also
check
material
sun's
javadoc
string
class
assume
declare
string
abc
unlike
arrays
strings
employ
public
int
length
method
public
instance
variable
accessing
length
string
thus
must
write
something
like
length
returns
3
inconsistency
foolish
unlike
arrays
strings
employ
charat
method
accessing
char
specified
index
string
charat
0
'a'
class
immutable
way
change
character
stored
index
unlike
arrays
accessing
illegal
index
string
charat
java
throws
stringindexoutofboundsexception
arrayindexoutofboundsexception
often
think
processing
members
string
using
techniques
loop
processing
members
array
example
typical
loop
processing
characters
string
adds
ascii
values
characters
string
prompt
forstring
enter
name
int
asciicharsum
0
int
0
length
asciicharsum
charat
implicit
conversion
char
int
system
println
's
ascii
sum
asciicharsum
hand
simulate
code
input
holybible
al
gore
array
methods
often
convenient
move
array
processing
operations
methods
section
will
show
write
public
static
methods
process
arrays
can
put
methods
application
library
class
will
exame
non
static
methods
processing
arrays
stored
instance
variables
first
method
finds
returns
lowest
index
stores
string
value
specified
second
parameter
note
form
parameter
variable
array
declaring
local
variable
string
type
public
static
int
findlowestindexof
string
string
value
int
0
length
equals
value
return
return
1
code
immediately
returns
value
stored
finds
stores
equals
string
value
reason
search
standard
convention
returning
1
means
value
found
since
1
never
legal
index
array
method
returns
1
discovers
member
array
store
value
note
use
two
return
statements
believe
simplify
code
agree
try
writing
method
one
return
show
simpler
next
method
returns
whether
every
member
array
stores
0
similar
test
return
structure
findlowestindexof
public
static
boolean
all0
int
int
0
length
0
return
false
return
true
code
immediately
returns
false
soon
finds
non
0
member
array
reason
search
method
returns
true
discovers
every
member
array
store
0
often
see
beginners
write
code
follows
code
complicated
slower
code
terrible
want
programmer
avoid
overly
complicated
slow
code
public
static
boolean
all0
int
int
count0s
0
terrible
code
int
0
length
terrible
code
0
terrible
code
count0s
terrible
code
terrible
code
count0s
length
terrible
code
return
true
terrible
code
else
terrible
code
return
false
terrible
code
next
method
determines
whether
array
stored
increasing
order
technically
non
decreasing
order
ensure
subsequent
value
smaller
least
big
preceeding
one
note
interesting
loop
bounds
interesting
use
index
body
loop
array
stores
values
must
compare
1
pairs
values
compute
answer
first
iteration
comparing
0
1
last
iteration
care
comparing
length
2
length
1
comparing
next
highest
index
highest
one
array
public
static
boolean
increasing
int
int
0
length
1
1
return
false
return
true
code
immediately
returns
false
soon
finds
member
array
followed
smaller
value
reason
search
method
returns
true
discovers
every
member
last
array
followed
value
least
big
following
three
parameter
method
swaps
values
positions
array
public
static
void
swap
int
int
int
int
temp
temp
can
illustrate
example
call
method
using
following
call
frame
notice
method
changes
state
array
object
whose
reference
passed
argument
still
refers
object
method
change
object
refers
state
object
changed
inside
method
finally
interesting
method
interesting
returns
new
array
object
lengthatleast
method
takes
string
parameter
returns
another
string
result
returned
result
contains
strings
parameter
array
least
characters
long
specified
second
parameter
public
static
string
lengthatleast
string
int
int
answerlength
0
int
0
length
length
answerlength
string
answer
new
string
answerlength
int
answeri
0
int
0
length
length
answer
answeri
note
different
values
used
indexes
return
answer
method
works
first
determining
many
values
must
returned
declares
array
exactly
length
next
fills
array
required
values
notice
postfix
operator
returns
result
original
value
answeri
also
increments
next
interation
finally
method
returns
new
array
constructed
filled
assume
declare
string
new
string
ab
abc
abcd
abcde
can
write
string
special
lengthatleast
3
even
lengthatleast
3
never
need
access
original
array
object
making
now
refer
one
lengthatleast
constructed
arrays
instance
variables
can
also
write
classes
define
arrays
instance
variables
constructors
intialize
methods
process
intialized
instance
variables
fact
diceensemble
class
simplediceensemble
extactly
defines
just
three
instance
variables
private
int
sidesperdie
private
int
rollcount
private
int
pips
pips
array
stores
number
pips
showing
dice
ensemble
recall
original
pictures
will
now
make
sense
know
array
objects
illustrated
declaration
diceensemble
d1
new
diceensemble
2
6
constructor
class
reinitializes
sidesperdie
pips
rollcount
declared
store
0
public
diceensemble
int
numberofdice
int
sidesperdie
throws
illegalargumentexception
numberofdice
1
throw
new
illegalargumentexception
diceensemble
constructor
number
dice
numberofdice
1
sidesperdie
1
throw
new
illegalargumentexception
diceensemble
constructor
sides
per
die
sidesperdie
1
sidesperdie
sidesperdie
pips
new
int
numberofdice
name
conflict
pips
write
pips
new
int
numberofdice
reinitializes
instance
variable
sidesperdie
value
second
parameter
reinitializes
instance
variable
pips
using
first
parameter
refer
array
exactly
right
length
contain
values
dice
ensemble
instance
variables
initialized
getnumberofdice
method
becomes
just
public
int
getnumberofdice
return
pips
length
need
use
another
instance
variable
store
number
dice
information
already
stored
can
accessed
via
public
final
int
length
instance
variable
pips
array
likewise
roll
mutator
command
becomes
simply
needs
increment
rollcount
fill
every
member
array
pip
refers
new
random
pip
values
dice
public
diceensemble
roll
rollcount
int
0
pips
length
pips
int
math
round
math
random
sidesperdie
5
return
many
methods
use
pip
array
compute
results
roll
stored
new
pips
getpipsum
method
becomes
just
public
int
getpipsum
throws
illegalstateexception
rollcount
0
throw
new
illegalstateexception
getpipsum
called
dice
rolled
int
pipsum
0
int
0
pips
length
pipsum
pips
return
pipsum
adds
values
pips
array
notice
method
declares
local
variable
pipsum
declared
instance
variable
information
used
method
executing
values
can
forgotten
therefore
need
store
instance
variable
generally
variable
can
declared
locally
instead
instance
variables
preferred
finally
getpips
method
also
simple
bit
subtle
public
int
getpips
int
dieindex
throws
illegalstateexception
illegalargumentexception
rollcount
0
throw
new
illegalstateexception
getpip
called
dice
rolled
dieindex
1
dieindex
pips
length
throw
new
illegalstateexception
getpip
called
dieindex
dieindex
range
1
pips
length
return
pips
dieindex
1
first
checks
either
rolls
dieindex
legal
range
1
number
dice
either
case
throws
exception
otherwise
returns
pips
showing
die
specified
dieindex
die
1
stored
array
index
0
die
2
stored
array
index
1
etc
subtraction
occurs
index
calculation
easy
declare
array
instance
variables
classes
initialize
constructors
manipulate
non
static
methods
recommend
examine
methods
diceensemble
class
work
pips
array
instance
variable
arrays
debugger
eclipse
debugger
easily
displays
arrays
variables
pane
recall
disclosure
box
debugger
allows
us
observe
instance
variable
object
arrays
displays
index
indexed
member
stored
array
surprisingly
debugger
display
length
instance
variable
can
infer
value
index
last
member
shown
object
array's
indexed
members
available
clicking
disclosure
box
plus
sign
changes
contents
box
minus
sign
discloses
indexes
members
array
course
array
members
refer
objects
will
disclosure
boxes
can
click
disclose
information
objects
sample
program
declares
int
howbig
prompt
forint
enter
length
array
int
new
int
howbig
enter
5
prompt
variables
pane
debugger
shows
note
yet
shown
declared
a's
declaration
executed
debugger
shows
now
appears
value
shows
int
5
means
five
element
int
array
ignor
id
part
value
click
disclosure
box
plus
sign
changes
minus
sign
discloses
indexes
members
array
array
values
shown
store
zero
initially
default
int
instance
variables
members
arrays
much
like
prompting
user
new
value
store
index
entered
3
8
12
5
7
debugger
shows
values
highlighted
yellow
set
breakpoint
entire
input
loop
executing
completely
debugger
stops
run
array
demonstration
application
familiarize
operation
debugger
programs
declaring
arrays
arrays
classes
modeling
data
finally
arrays
classes
act
together
synergistically
class
heterogeneous
data
type
defines
number
instance
variables
declared
individual
name
store
different
type
value
array
homogeneous
data
type
defines
one
name
storing
arbitrary
number
indexed
values
declared
store
type
value
combinations
arrays
classes
descriptive
power
need
model
almost
kind
information
computer
semester
progresses
will
see
sophisticated
uses
arrays
classes
combined
array
members
object
class
inside
object
class
instance
variable
array
values
stored
continuing
discussion
arrays
instance
variables
collection
classes
take
short
detour
discuss
four
related
topics
wrapper
classes
object
class
instanceof
operator
reference
casting
wrapper
classes
java
provides
four
wrapper
classes
one
four
primitive
types
java
names
integer
double
character
boolean
note
standard
capitalization
class
names
classes
defined
java
lang
package
main
purpose
wrapper
class
able
represent
primitive
value
object
one
contains
just
primitive
value
state
class
constructor
whose
parameter
primtive
method
returns
value
primitive
stored
constructed
object
intvalue
doublevalue
charvalue
booleanvalue
name
methods
respectively
objects
classes
immutable
object
constructed
primitive
stores
never
changes
examine
javadoc
pages
wrapper
classes
observe
many
constructors
methods
accessors
queries
example
can
define
integer
new
integer
10
variables
now
stores
reference
object
constructed
integer
class
whose
state
10
write
1
int
integer
prototype
adds
integer
int
can
write
intvalue
1
intvalue
method
returns
int
one
stored
object
refers
wrapper
classes
immutable
way
increment
primitive
value
stored
object
refers
write
new
integer
intvalue
1
whose
execution
illustrated
executing
statement
value
object
refers
one
bigger
instead
changing
state
original
object
now
refers
different
one
discuss
increasing
length
array
will
see
similar
solution
wrapper
classes
also
define
various
useful
information
sometimes
quite
lot
example
seen
integer
class
stores
static
final
int
values
min
value
max
value
also
stores
static
int
method
parseint
int
integer
parseint
123
know
java
far
reason
use
wrapper
classes
explore
two
simple
general
collections
stack
queue
can
store
references
objects
primitives
context
want
store
primitive
value
collections
must
first
wrap
object
using
constructor
appropriate
wrapper
class
store
reference
object
collection
object
class
object
class
java
special
class
learn
inheritance
hierarchies
will
see
class
special
root
inheritance
hierarchy
every
class
java
extension
specialization
object
class
can
see
trivially
look
javadoc
class
will
always
show
java
lang
object
first
class
hierarchy
class
defined
java
lang
package
now
though
will
concentrate
just
two
salient
facts
object
class
discussed
can
specify
object
type
variable
includes
local
variables
parameter
variables
instance
variables
now
even
type
stored
indexed
members
array
variables
declare
variable
object
type
variable
can
store
reference
object
constructed
class
methods
can
call
variable
methods
defined
object
class
always
spoken
reference
variable
storing
reference
object
constructed
compatible
class
now
always
meant
constructed
class
java
allows
timer
new
timer
allow
timer
new
rational
1
2
now
see
rule
variable
declared
type
object
can
store
reference
reference
compatible
object
java
allows
object
new
object
object
new
timer
object
new
rational
1
2
note
though
still
store
value
primitive
type
variable
java
allow
object
10
must
store
reference
value
primitive
value
remember
can
use
wrapper
classes
achieve
equivalent
result
java
allows
object
new
integer
10
object
class
defines
dozen
methods
tostring
one
studied
thus
java
allows
calling
tostring
regardless
allowable
declaration
use
regardless
kind
object
reference
object
variable
refers
can
call
object
methods
even
wrote
object
new
integer
10
java
allow
calling
intvalue
intvalue
method
defined
object
class
thus
using
type
object
gives
us
power
one
dimension
restricts
power
another
powerful
variables
type
can
store
generic
references
objects
restricts
us
calling
methods
variables
balance
power
will
explored
throughout
rest
lecture
addressed
later
basis
inheritance
hierarchies
polymorphic
behavior
important
distinction
declared
type
variable
class
object
refers
distinction
type
variable
class
object
refers
always
seems
like
small
leak
rule
will
turn
mighty
river
discuss
interfaces
inheritance
hierarchies
instanceof
operator
learned
variables
declared
type
object
can
store
references
objects
constructed
class
java
provides
way
us
check
whether
reference
refers
instance
specified
class
instanceof
operator
one
two
operators
java
also
keywords
performs
operation
returning
boolean
result
form
use
instanceof
integer
binary
infix
operator
whose
second
operand
name
class
learn
reference
casting
will
see
statements
like
instanceof
integer
something
knowing
reference
integer
finally
java
considers
null
instance
class
refers
instance
class
null
instanceof
returns
false
class
lets
summarize
current
understanding
instanceof
operator
instanceof
returns
true
means
stores
non
null
reference
object
constructed
class
returns
false
means
either
stores
null
stores
reference
object
constructed
class
reference
casting
learned
can
store
reference
object
variable
can
use
object
variable
call
methods
defined
object
class
will
now
learn
tell
java
treat
reference
stored
object
variable
just
like
reference
class
object
refers
really
constructed
gulp
reread
previous
sentence
tortuous
allows
us
use
object
variables
call
methods
defined
class
object
refers
will
discuss
asymmetry
lecture
explore
deeper
lectures
inheritance
assume
define
object
new
integer
10
java
allow
us
call
intvalue
detect
report
error
compile
time
java
allow
us
call
integer
intvalue
using
reference
casting
cast
reference
object
type
integer
calling
intvalue
method
casted
reference
casting
always
write
type
casting
parentheses
casting
type
integer
need
outer
parentheses
casting
lower
precedence
member
selection
dot
operator
want
cast
first
cast
object
reference
another
class
telling
java
compiler
act
though
reference
really
refers
object
class
afterward
java
compiler
allows
us
use
casted
reference
call
methods
defined
class
java
actually
runs
code
program
compiles
correctly
checks
cast
java
discovers
cast
work
reference
really
refer
object
specified
class
throws
classcastexception
trying
call
method
java
checks
cast
automatically
using
instanceof
operator
cast
integer
appears
code
java
first
checks
instanceof
integer
throwing
exception
expression
evaluates
false
technically
stores
null
java
throws
nullpointerexception
even
checking
instanceof
thus
even
given
declaration
object
new
integer
10
write
double
doublevalue
code
casted
double
java
compiler
allows
us
call
doublevalue
method
whent
program
runs
cast
will
throw
classcastexception
cast
fails
java
checks
instanceof
double
expression
evaluates
false
thus
separate
understanding
casting
compile
time
run
time
components
assume
write
cast
code
compile
time
java
allows
treated
refers
object
class
specifically
can
call
methods
defined
class
run
time
java
checks
cast
make
sure
correct
casted
reference
really
refer
object
class
code
continues
executing
java
throws
classcastexception
cast
promise
java
believes
compiling
program
also
checks
running
program
excellent
example
reagan's
statement
arms
reduction
treaties
former
soviet
union
trust
verify
can
explicitly
use
instanceof
operator
ensure
code
will
never
throw
classcastexception
can
write
code
like
instanceof
integer
integer
integer
use
intvalue
code
cast
fail
beause
block
containing
cast
executed
if's
test
instanceof
integer
evaluates
true
pragmatically
casting
often
performed
variable
declaration
illustrated
example
classes
include
equals
method
allows
comparison
reference
object
example
rational
class
include
equals
method
defined
public
boolean
equals
object
instanceof
rational
different
class
return
false
object
return
true
need
check
fields
cast
guaranteed
work
instanceof
rational
rational
otherrational
rational
check
state
fields
return
numerator
otherrational
numerator
denominator
otherrational
denominator
equals
methods
follow
three
part
strategy
parameter
reference
object
correct
type
returns
false
parameter
comparing
object
case
returns
true
immediately
without
checking
state
object
know
object
stores
state
otherwise
legal
cast
parameter
store
local
variable
correct
type
done
states
object
one
compared
collection
classes
introduction
collection
classes
manage
collections
values
include
methods
add
values
collection
remove
values
collection
inquire
values
collection
use
arrays
store
values
unlike
previous
discussion
arrays
always
filled
generally
collection
class
can
represented
two
instances
variables
one
refers
array
storing
values
collection
int
keeps
track
many
indexed
members
array
actually
used
rest
lecture
will
discuss
two
simple
well
known
collection
classes
stack
queue
classes
useful
many
programs
model
real
world
data
processes
definitions
will
heavily
rely
object
type
methods
array
instance
variables
collections
can
used
unchanged
programs
write
kind
generality
reusability
holy
grail
effective
class
design
stack
queue
collections
straightforwad
implement
straightforward
implementation
stack
collection
implements
last
first
ordering
efficient
straightforward
implementation
queue
collection
implemements
first
first
ordering
efficient
later
semester
will
examine
second
complicated
efficient
implementation
queues
fundamental
component
implementations
doublelength
method
increase
length
array
storing
collection
simplestack
simplequeue
classes
cover
lecture
along
simple
driver
application
available
online
can
download
unzip
run
examine
code
simplestack
demonstration
simplequeue
demonstration
applications
stacks
lifo
can
visualize
stack
vertical
array
whose
indexes
increase
array
goes
upward
biggest
index
stores
non
null
reference
known
top
stack
simplestack
object
stores
two
instance
variables
reference
array
value
top
references
added
pushed
removed
popped
near
top
stack
means
characterize
stack
last
first
last
reference
added
pushed
stack
first
one
removed
popped
stack
declared
initialized
simply
simplestack
new
simplestack
following
picture
shows
stack
onto
three
strings
pushed
notice
stack
declared
type
object
indexed
member
can
store
reference
object
also
represent
null
slash
appears
array
index
3
picture
will
continue
use
graphical
notation
throughout
rest
course
null
references
simplestack
collection
class
consists
definitions
elided
fully
shown
discussion
following
constructors
methods
fields
constructors
public
simplestack
int
initialsize
throws
illegalargumentexception
public
simplestack
mutators
commands
public
void
makeempty
public
void
push
object
public
object
pop
throws
illegalstateexception
accessors
queries
public
object
peek
throws
illegalstateexception
public
boolean
isempty
public
int
getsize
public
string
tostring
private
helper
methods
private
void
doublelength
fields
instance
variables
private
object
stack
private
int
top
1
explore
detail
implementation
constructor
method
terms
manipulate
instance
variables
length
doubling
looking
public
constructors
methods
will
examine
private
doublelength
method
called
push
push
values
onto
stack
array
storing
values
must
get
bigger
although
length
array
object
changed
constructed
doublelength
method
equivalent
constructing
new
bigger
object
used
much
approach
increment
variable
refering
immutable
integer
object
thes
code
length
doubling
quite
simple
subtle
private
void
doublelength
object
temp
new
object
stack
length
2
int
0
stack
length
temp
stack
stack
temp
method
called
array
object
stack
refers
filled
references
works
three
steps
declares
local
variable
temp
initializes
refer
newly
constructed
array
object
whose
length
twice
big
length
array
stack
refers
initially
indexed
members
store
null
copies
non
null
references
stack
temp
order
0
top
makes
stack
refer
new
object
thus
intents
purposes
doubled
length
stack
now
refers
array
stores
values
whose
length
storing
new
values
twice
long
picture
illustrates
method
executes
notice
top
remains
unchnaged
1
still
two
references
stored
array
indexed
members
0
1
instance
variable
stack
longer
refers
old
array
object
eventually
java
will
recycle
object
another
similar
way
write
method
maybe
bit
clearer
using
temp
private
void
doublelength
object
old
stack
stack
new
object
stack
length
2
int
0
old
length
stack
old
although
class
define
written
trimlength
method
method
shrinks
array
just
big
enough
store
current
references
stack
first
line
constructs
just
big
enough
array
loop
copies
references
private
void
trimlength
object
temp
new
object
top
1
int
0
top
temp
stack
stack
temp
likewise
implement
method
old
instead
temp
note
include
immediately
return
stack
length
equal
top
1
code
redundant
works
called
trimlength
actions
picture
reversed
stack
implementation
will
now
explore
public
constructors
methods
class
invited
hand
simulate
code
draw
relevant
pictures
help
better
understand
start
definition
general
constructor
public
simplestack
int
initialsize
throws
illegalargumentexception
initialsize
1
throw
new
illegalargumentexception
simplestack
constructor
initialsize
initialsize
1
stack
new
object
initialsize
basically
constructor
verifies
initialsize
parameter
uses
construct
array
can
contain
many
references
recall
arrays
references
constructed
indexed
members
store
null
observe
top
declared
store
1
initially
change
made
say
stack
empty
state
fact
class
invariant
always
top
1
values
stored
stack
constuction
0
values
stored
another
explanation
intial
value
will
emerge
study
code
push
method
second
constructor
parameter
constructs
array
enough
room
just
one
value
written
simply
public
simplestack
1
unless
know
something
special
many
values
will
push
stack
will
often
use
simpler
constructor
makeempty
method
removes
references
stack
reinitializes
top
1
method
call
stack
empty
define
method
mutator
command
public
void
makeempty
int
0
top
stack
null
top
1
understand
method
hand
simulate
state
illustrated
picture
note
indexed
members
greater
top
already
store
null
push
method
mutator
command
adds
reference
top
stack
reference
parameter
stored
one
beyond
old
top
stack
becomes
new
top
stack
first
checks
see
room
array
doubles
length
array
described
always
increments
top
stores
reference
new
index
array
will
always
room
store
public
void
push
object
getsize
stack
length
doublelength
top
stack
top
just
stack
top
notice
newly
constructed
simplestack
stores
1
top
first
time
method
called
increments
value
0
stores
parameter
array
index
0
notice
calls
getsize
check
whether
enough
room
new
reference
stack
can
worry
details
method
later
finally
notice
semantics
prefix
operator
allows
us
perform
state
changes
single
statements
stack
top
parameter
type
object
can
call
push
argument
refers
object
fact
can
easily
push
different
classes
objects
onto
stack
illustrated
pop
method
mutator
command
accessor
queury
returns
reference
object
currently
top
stack
also
removes
reference
stack
replacing
null
value
underneath
becomes
new
top
stack
course
stack
empty
method
called
throws
illegalstateexception
stack
illegal
state
perform
pop
operation
code
written
public
object
pop
throws
illegalstateexception
isempty
throw
new
illegalstateexception
simplestack
pop
stack
empty
object
answer
stack
top
stack
top
null
top
just
stack
top
null
return
answer
notice
reference
top
stack
stored
local
variable
answer
old
indexed
member
set
null
top
decremented
stored
answer
returned
notice
calls
isempty
check
whether
value
stack
popped
can
worry
details
method
later
finally
notice
semantics
postfix
operator
allows
us
perform
state
changes
single
statement
stack
top
null
notice
pop
method
returns
reference
type
object
recall
means
reference
returned
can
refer
object
class
obviously
can
write
object
pop
store
reference
anything
interesting
call
methods
defined
object
class
know
reference
string
object
can
instead
write
string
string
pop
cast
mandatory
otherwise
java
compiler
will
detect
report
error
recall
member
selector
operator
dot
precedence
cast
statement
want
apply
cast
last
need
extra
grouping
parentheses
finally
note
asymmetry
can
call
push
without
casting
argument
reference
stored
object
parameter
works
call
pop
must
cast
reference
anything
useful
another
way
saying
putting
reference
stack
hides
type
taking
reference
stack
type
must
restored
cast
course
can
check
type
instanceof
operator
similarly
peek
accessor
query
returns
reference
currently
top
stack
like
pop
remove
unlike
pop
public
object
peek
throws
illegalstateexception
isempty
throw
new
illegalstateexception
simplestack
pop
stack
empty
return
stack
top
isempty
accessory
query
used
pop
peek
returns
whether
stack
empty
written
simply
public
boolean
isempty
return
top
1
recall
empty
stack
top
stores
1
another
way
implement
method
return
getsize
0
getsize
accessory
query
returns
number
references
stack
written
simply
public
int
getsize
return
top
1
recall
empty
stack
top
stores
1
case
value
getsize
returns
0
recall
class
invariant
states
always
top
1
values
stored
stack
finally
tostring
method
returns
value
top
length
stack
array
string
values
references
stack
uses
lots
catenation
get
job
done
public
string
tostring
string
answer
simplestack
top
top
length
stack
length
int
0
summary
simplestack
stores
stack
array
storing
references
stack
top
storing
index
last
reference
generally
push
increments
top
1
pop
decrements
top
1
first
push
push
empty
stack
stores
reference
index
0
number
references
stack
always
top
1
empty
stack
stores
0
references
top
empty
stack
must
1
size
array
doubled
necessary
never
shrinks
stacks
famous
computer
science
method
calls
implements
via
stacks
method
called
call
frame
computer
equivalent
pushed
onto
call
stack
call
stack
appears
pane
debugger
although
grows
top
downward
call
method
pushes
method
onto
call
stack
return
method
pops
method
call
stack
returning
execute
code
new
method
top
call
stack
one
called
method
just
returned
fact
stacks
common
computing
see
next
section
computers
special
instructions
push
pop
value
onto
hardware
stack
stack
application
rpn
stacks
now
masters
writing
formulas
expressions
java
analyzing
expressions
know
precedence
operators
parentheses
override
precedence
left
right
right
left
associativity
now
ask
question
simplest
way
write
expressions
answer
section
shall
discuss
simpler
notation
writing
expressions
relationship
stacks
use
evaluate
expressions
easily
notation
will
learn
write
expressions
called
reverse
polish
notation
rpn
original
polish
notation
invented
group
famous
polish
logicians
late
1930s
wanted
prove
things
expressions
therefore
wanted
invent
simplest
rules
possible
write
arbitrary
expressions
group
wiped
world
war
ii
notation
rediscovered
1960s
used
lisp
programming
language
many
calculators
also
use
rpn
well
programming
language
forth
polish
notation
operators
always
appear
operands
rpn
operators
always
appear
operands
rpn
simple
operator
precedence
associativity
rules
parentheses
override
precedence
associativity
rules
evaluate
rpn
expression
using
oval
diagrams
straighforward
manner
scanning
left
right
will
ignore
types
concetrate
values
next
token
number
circle
write
value
next
token
operator
use
one
big
circle
enclose
operator
operands
binary
operators
two
previous
circles
however
big
apply
operator
operands
write
resulting
value
big
circle
examples
illustrate
java
expressions
equivalent
rpn
javarpn1
2
31
2
3
1
2
31
2
3
1
2
3
4
5
6
1
2
3
4
5
6
note
one
property
java
rpn
expressions
operands
appear
order
earlier
operator
applied
java
expression
using
complicated
rules
earlier
appears
rpn
picture
illustrating
evaluation
process
expressions
written
rpn
can
use
stack
evaluate
expression
written
rpn
simply
translate
circling
rules
next
token
number
push
stack
next
token
operator
pop
top
two
numbers
stack
apply
operator
values
push
result
value
back
stack
can
translate
algorithm
use
stringtokenizer
get
tokens
simplestack
always
containing
objects
integer
wrapper
class
perform
computation
example
operator
plus
translate
second
rule
following
code
note
casting
integer
operand2
integer
pop
integer
operand1
integer
pop
push
new
integer
operand1
intvalue
operand2
intvalue
non
commutative
operators
must
realize
second
right
operand
top
stack
first
left
operand
underneath
picture
illustrating
evaluation
process
largest
expression
rpn
calculator
project
uses
stringtokenizer
simplestack
classes
implement
calculator
fact
project
also
contains
two
application
programs
first
uses
biginteger
class
instead
integer
wrapper
class
second
allows
relational
logical
operators
well
pushing
popping
references
integer
boolean
wrapper
classes
operator
determines
cast
references
popped
boolean
operators
integer
arithmetic
relation
operators
queues
fifo
can
visualize
queue
horizontal
array
whose
indexes
increase
array
goes
rightward
biggest
index
stores
non
null
reference
known
rear
queue
simplequeue
object
stores
two
instance
variables
reference
array
value
rear
references
added
enqueued
rear
queue
removed
dequeued
front
queue
always
index
0
means
characterize
queue
first
first
first
reference
added
queue
also
first
one
removed
thus
queue
implements
fair
line
first
person
getting
line
first
person
leaving
line
served
others
getting
line
behind
fact
england
people
queue
stand
queue
just
line
stand
line
queue
declared
initialized
simply
simplequeue
new
simplequeue
following
picture
shows
queue
three
strings
enqueued
notice
declared
type
object
indexed
member
can
store
reference
object
also
represent
null
slash
appears
array
index
3
picture
will
continue
use
graphically
notation
throughout
rest
course
call
dequeue
return
remove
first
value
new
picture
becomes
simplequeue
collection
class
consists
definitions
elided
fully
shown
discussion
following
constructors
methods
fields
public
simplequeue
int
initialsize
throws
illegalargumentexception
public
simplequeue
mutators
commands
public
void
makeempty
public
void
enqueue
object
public
object
dequeue
throws
illegalstateexception
accessors
queries
public
object
peek
throws
illegalstateexception
public
boolean
isempty
public
int
getsize
public
string
tostring
private
helper
methods
private
void
doublelength
fields
instance
variables
private
object
private
int
rear
1
explore
detail
implementation
constructor
method
terms
manipulate
instance
variables
doublelength
method
class
almost
identical
one
discussed
simplestack
refers
instance
variable
method
called
array
object
refers
filled
non
null
references
private
void
doublelength
object
temp
new
object
length
2
int
0
length
temp
temp
queue
implementation
now
will
explore
public
constructors
methods
class
invited
hand
simulate
code
draw
relevant
pictures
help
better
understand
definitions
similar
simplestack
class
pop
dequeue
different
implementing
last
first
first
first
difference
make
sure
read
description
method
carefully
start
definition
general
constructor
public
simplequeue
int
initialsize
throws
illegalargumentexception
initialsize
1
throw
new
illegalargumentexception
simplequeue
constructor
initialsize
initialsize
1
new
object
initialsize
basically
constructor
verifies
initialsize
parameter
uses
construct
array
can
contain
many
references
recall
arrays
references
constructed
indexed
members
store
null
observe
rear
declared
store
1
initially
change
made
say
queue
empty
state
fact
class
invariant
always
rear
1
values
stored
queue
constuction
0
values
stored
another
explanation
intial
value
will
emerge
study
code
enqueue
method
second
constructor
parameter
constructs
array
enough
room
just
one
value
written
simply
public
simplequeue
1
unless
know
something
special
many
values
will
enequeue
queue
will
often
use
simpler
constructor
makeempty
method
removes
references
queue
reinitializes
rear
1
method
call
queue
empty
define
method
mutator
command
public
void
makeempty
int
0
rear
null
rear
1
understand
method
hand
simulate
state
illustrated
picture
note
indexed
members
greater
rear
already
store
null
enqueue
method
mutator
command
adds
reference
rear
queue
reference
parameter
stored
one
beyond
old
rear
queue
becomes
new
rear
queue
first
checks
see
room
array
doubles
length
array
described
always
increments
rear
stores
reference
new
index
array
will
always
room
store
public
void
enqueue
object
getsize
length
doublelength
rear
rear
just
rear
notice
newly
constructed
simplequeue
stores
1
rear
first
time
method
called
increments
value
0
stores
parameter
array
index
0
notice
calls
getsize
check
whether
enough
room
new
reference
queue
can
worry
details
method
later
finally
notice
semantics
prefix
operator
allows
us
perform
state
changes
single
statements
rear
parameter
type
object
can
call
enqueue
argument
refers
object
dequeue
method
mutator
command
accessor
queury
returns
reference
object
currently
front
queue
also
removes
reference
queue
shifting
remaining
values
array
left
towards
front
one
index
position
leaves
duplicate
references
rear
1
rear
last
one
replaced
null
course
queue
empty
method
called
throws
illegalstateexception
queuen
illegal
state
perform
dequeue
operation
code
written
public
object
dequeue
throws
illegalstateexception
isempty
throw
new
illegalstateexception
simplequeue
dequeue
queue
empty
object
answer
0
shift
remaining
values
1
rear
left
1
index
positions
0
rear
1
int
0
rear
1
remove
duplicate
rear
copied
rear
1
rear
null
rear
just
rear
null
return
answer
notice
calls
isempty
check
whether
value
queue
dequeued
can
worry
details
method
later
finally
note
semantics
postfix
operator
allows
us
perform
state
changes
single
statement
rear
null
method
much
different
pop
method
stacks
requires
loo
examine
every
value
array
makeempty
tostring
methods
classes
thus
amount
time
takes
dequeue
value
dependent
number
values
already
stored
queue
inefficiency
can
eliminated
complicated
class
implements
queue
will
discuss
later
semester
similarly
peek
accessor
query
returns
reference
currently
front
queue
like
dequeue
remove
unlike
dequeue
public
object
peek
throws
illegalstateexception
isempty
throw
new
illegalstateexception
simplequeue
peek
queue
empty
return
0
isempty
accessory
query
used
dequeue
peek
returns
whether
queue
empty
written
simply
public
boolean
isempty
return
rear
1
recall
empty
queue
rear
stores
1
another
way
implement
method
return
getsize
0
getsize
accessory
query
returns
number
references
queue
written
simply
public
int
getsize
return
rear
1
recall
empty
queue
rear
stores
1
case
value
getsize
returns
0
recall
class
invariant
states
always
rear
1
values
stored
queue
finally
tostring
method
returns
value
rear
length
array
string
values
references
queue
uses
lots
catenation
get
job
done
public
string
tostring
string
answer
simplequeue
rear
rear
length
length
int
0
summary
simplequeue
stores
array
storing
references
queue
rear
storing
index
last
reference
generally
enequeue
increments
rear
1
dequeue
decrements
rear
1
first
enqueue
enqueue
empty
queue
stores
reference
index
0
number
references
queue
always
rear
1
empty
queue
stores
0
references
rear
empty
queue
must
1
size
array
doubled
necessary
never
shrinks
typical
use
queues
simulating
systems
entities
move
one
part
system
another
fixed
order
example
might
want
simulate
supermarket
getting
data
customer
enters
long
customer
shops
store
many
items
customer
buys
long
takes
customer
checkout
reaches
front
checkout
line
remaining
piece
information
missing
long
customer
waits
checkout
line
can
use
queues
operating
data
simulate
variety
cash
register
configurations
registers
may
restrict
number
items
checked
can
determine
whether
certain
configurations
better
others
terms
customer
throughput
length
doubling
performance
analysis
finishing
lecture
short
performance
analysis
doubling
length
expanding
stack
queue
good
strategy
say
compared
expanding
increasing
length
just
one
always
expand
length
array
one
amount
needed
store
new
value
still
required
copy
values
time
construct
new
array
double
length
array
can
put
many
new
values
without
expand
copy
values
analysis
assume
program
reads
file
pushes
value
onto
top
stack
example
reading
1
024
210
values
file
pushing
onto
top
stack
assume
stack
initially
constructed
refer
array
length
1
expand
length
just
one
will
call
expand
method
999
times
first
time
requires
copying
1
value
next
time
2
values
next
time
3
values
final
time
1023
values
total
amount
copying
1
2
1023
523
776
copying
operations
general
formula
1
2
1
2
os
number
copying
operations
grows
square
number
values
push
now
analyze
doubling
approach
first
time
requires
copying
1
value
next
time
2
values
next
time
4
values
final
time
512
values
increasing
array
length
512
length
1024
total
amount
copying
1
2
4
8
16
32
64
128
256
512
1
023
copying
operations
500
times
fewer
previous
method
method
takes
1
second
previous
method
almost
takes
minute
power
2
formula
1
2
4
2n
1
thus
push
values
onto
top
stack
must
double
array
log2
times
note
logarithm
base
2
slowly
growing
function
log2
1
000
10
log2
1
000
000
20
log2
1
000
000
000
30
course
first
approach
array
always
exactly
right
size
second
approach
call
kind
trim
method
reduce
exactly
right
size
require
copying
every
value
previous
example
require
total
2
047
copy
operations
still
250
times
faster
first
method
exact
formula
2log2
1
1
bigger
data
file
efficient
doubling
method
1
000
000
values
first
method
requires
500
000
000
000
500
billion
copy
operations
doubling
method
requires
3
000
000
three
millon
copy
operations
makes
166
666
times
faster
formally
study
analysis
algorithms
will
perform
analyses
like
methods
defined
collection
classes
problem
set
ensure
understand
material
lecture
please
solve
announced
problems
read
lecture
get
stumped
problem
go
back
read
relevant
part
lecture
still
questions
please
get
help
instructor
ca
student
write
method
namd
countoccurence
counts
returns
often
value
specified
int
parameter
occurs
array
specified
int
parameter
explain
following
code
always
compute
correct
result
circumstances
compute
correct
result
public
static
boolean
all0
int
int
0
length
0
return
false
else
return
true
happens
array
swap
called
value
swap
3
3
write
method
name
reverse
reverses
order
int
array
parameter
calling
reverse
twice
results
original
array
ordering
write
method
name
circularshiftleft
shifts
every
value
int
parameter
left
one
index
placing
value
index
0
last
index
write
method
name
circularshiftright
shifts
every
value
int
parameter
right
one
index
placing
value
last
index
index
0
write
swap
method
arrays
string
draw
method
call
call
frame
illustrate
happens
first
last
index
values
swapped
swap
0
length
1
class
one
day
clever
student
showed
following
code
alternative
increasing
method
discussed
asserted
worked
correctly
note
code
inverts
loop
continuation
test
blanched
loop
looks
different
ones
used
analyzing
went
ahead
analyzed
code
rapidly
hand
simulations
brain
code
always
sometimes
never
work
correctly
hint
try
hand
simulation
normal
boundary
cases
works
sometimes
arrays
produce
correct
incorrect
answers
public
static
boolean
increasing
int
int
0
assume
declare
simplestack
new
simplestack
java
allow
us
write
push
null
allowed
explain
allowed
explain
happens
assume
declare
simplestack
new
simplestack
push
values
onto
stack
java
allow
us
write
system
println
pop
allowed
explain
allowed
explain
happens
assume
declare
simplestack
new
simplestack
push
values
onto
stack
explain
use
following
cascaded
method
calls
empty
stack
push
two
values
onto
makeempty
push
push
changes
make
methods
allow
cascaded
method
call
explain
use
following
cascaded
method
calls
retrieve
value
top
stack
object
pop
pop
explain
following
implementation
pop
method
works
correctly
notice
use
try
finally
combination
local
variable
answer
public
object
pop
throws
illegalstateexception
isempty
throw
new
illegalstateexception
simplestack
pop
stack
empty
try
return
stack
top
finally
stack
top
null
top
just
stack
top
null
copying
form
equals
method
rational
class
see
bottom
reference
casting
section
write
equals
method
simplestack
simplequeue
include
state
criteria
think
relevant
change
simplequeue
class
disallow
enqueueing
null
references
either
modifying
array
returning
immediately
throwing
illegalargumentexception
