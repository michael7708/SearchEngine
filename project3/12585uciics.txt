timing 
time 
timing
computer
order
determine
relative
execution
efficiency
various
algorithms
will
need
use
timer
package
available
see
use
package
written
however
advance
approval
may
use
packages
note
cpu
time
used
program
user
time
well
system
system
time
will
interested
capturing
values
user
time
usage
problem
systems
timing
function
gives
times
multiples
01
seconds
others
timing
coarseness
may
significantly
smaller
larger
determine
timing
coarseness
machine
thus
example
system
01
second
timing
coarseness
timing
anything
takes
less
one
fiftieth
second
result
50
error
programs
small
values
easily
fast
solution
algorithm
timed
fast
obtain
accurate
measurement
algorithm
can
run
many
times
succession
cumulative
time
measured
time
can
divided
number
runs
obtain
accurate
measurement
time
required
individual
run
little
possible
successive
calls
occur
timing
taking
place
fact
particularly
speedy
code
time
spent
updating
loop
variable
may
order
magnitude
time
attempting
measure
account
can
subsequently
time
loop
nearly
empty
body
subtract
measure
first
measure
net
result
reflecting
accurately
time
spent
within
code
interest
one
note
optimizing
compilers
will
optimize
loops
contain
empty
body
discarding
timer
package
program
file
timer
compiled
linked
program
system
defines
following
routines
user
time
returns
total
amount
user
cpu
time
used
current
process
start
timer
starts
timer
actually
records
current
value
user
time
elapsed
time
returns
amount
cpu
time
used
since
last
call
start
timer
header
file
timer
declares
routines
defined
timer
included
program
files
invoke
routines
dan
hirschberg
computer
science
department
university
california
irvine
ca
92697
3435
dan
ics
uci
edu
last
modified
dec
7
2011
essential
progress
ideas
class
can
left
optional
reading
lecture
6
defined
weak
secure
authentication
shown
use
one
way
permutation
example
based
modular
exponentiation
build
authentication
protocol
satisfies
security
property
one
weaknesses
authentication
scheme
considered
previous
lecture
stateful
every
verifier
might
want
authenticate
client
needs
separate
verification
key
material
section
11
lecture
notes
lectures
7
8
define
strong
notion
security
authentication
scheme
identification
scheme
show
public
key
stateless
authentication
scheme
based
modular
exponentiation
introduce
concept
zero
knowledge
proof
simulation
proof
technique
show
identification
scheme
based
zero
knowledge
proof
knowledge
discrete
logarithm
scheme
similar
fiat
shamir
identification
scheme
forms
basis
schnorr
signature
scheme
schnorr
crypto'89
show
scheme
secure
discrete
logarithm
assumption
assumption
modular
exponentiation
one
way
function
general
form
scheme
actually
works
using
one
way
function
certain
homomorphic
properties
lectures
9
10
introduce
preimage
resistant
second
preimage
resistant
collision
resistant
hash
functions
introduce
random
oracle
model
hash
functions
implies
properites
show
merkle
tree
merkle
damgard
construction
hash
function
infinite
domain
hash
function
takes
element
small
domain
hash
functions
called
compression
functions
argue
constructions
preserve
needed
properties
hash
function
define
message
authentication
schemes
macs
define
strong
notion
security
macs
resistance
chosen
message
attack
cma
show
secure
mac
scheme
based
hash
function
argue
scheme
cma
secure
long
hash
function
can
modeled
random
oracle
show
also
number
theoretical
hash
scheme
pedersen
crypto'91
collision
resistant
discrete
logarithm
assumption
material
lectures
stinson's
chapter
4
sections
4
1
4
4
section
4
5
recommended
optional
reading
different
take
see
tal
malkin's
lecture
22
pdf
yevgeni
dodis's
lecture
11
pdf
lecture
11
define
signature
schemes
various
notions
security
show
schnorr
signature
scheme
based
authentiaction
protocol
lectures
7
8
argue
existentially
unforgeable
cma
attack
discrete
logarithm
assumption
assuming
random
oracle
model
hash
function
used
scheme
show
standard
digital
signature
standard
dss
signature
can
looked
variant
schnorr
signature
scheme
historically
dss
first
schnorr
signature
better
understood
security
see
stinson's
7
1
7
2
7
4
1
7
4
2
background
reading
optional
subjects
like
one
time
signatues
also
covered
stinson's
chapter
7
5
1
see
yevgeni
dodis's
lecture
12
pdf
tal
malkin's
lecture
18
pdf
lecture
19
pdf
lecture
21
pdf
lectures
12
13
introduce
rsa
permutation
examine
relation
factoring
argue
assumed
trapdoor
permuation
show
rabin's
permutation
argue
rabin
trapdoor
permutation
factoring
rsa
moduli
hard
show
several
signature
schemes
based
rsa
permutation
varying
degrees
security
plain
rsa
padded
rsa
full
domain
hash
rsa
signature
last
scheme
known
existentially
unforgeable
cma
attack
assuming
rsa
trapdoor
permutation
assuming
random
oracle
model
hash
function
stinson
covers
rsa
cryptosystem
chapter
5
far
covered
material
sections
5
1
5
3
5
7
5
8
sections
5
4
5
6
optional
reading
will
come
back
section
5
9
discussing
rsa
encryption
homework
1
due
tuesday
10
5
hmw1
pdf
sol1
pdf
homework
2
due
thursday
10
14
hmw2
pdf
sol2
pdf
homework
3
due
thursday
10
21
hmw3
pdf
sol3
pdf
homework
4
due
thursday
11
04
hmw4
pdf
sol4
pdf
homework
5
due
final
week
hmw5
pdf
