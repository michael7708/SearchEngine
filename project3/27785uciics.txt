ics 65 fall 2012 project 3 back chain gang 
project 3 
ics
65
fall
2012
news
course
reference
schedule
project
guide
code
examples
alex
ics
65
fall
2012
project
3
back
chain
gang
due
date
time
monday
november
19
11
59pm
introduction
openness
internet's
email
service
strength
weakness
nice
able
send
messages
people
knowing
email
addresses
just
nice
able
receive
email
old
friends
found
address
say
linkedin
profile
unfortunately
everyone
internet
well
intentioned
variety
problems
spam
phishing
schemes
arisen
ability
anyone
send
email
anyone
else
virtually
charge
even
people
good
intentions
can
cause
problems
email
network
chain
letters
letters
designed
motivate
receivers
forward
friends
acquaintenances
around
many
decades
paper
form
sent
via
physical
postal
services
since
internet
based
email's
relatively
humble
beginnings
electronic
equivalents
chain
letters
propagating
throughout
network
thanks
relative
ease
low
cost
forwarding
message
many
recipients
inevitable
project
write
simulation
chain
letters
propagating
email
network
real
life
people
network
will
behave
differently
one
another
will
apt
forward
chain
letters
others
will
prefer
ignore
will
tend
forward
chain
letters
many
people
contact
list
others
will
selective
program
will
show
individual
messages
work
way
network
also
will
keep
track
many
copies
message
received
person
project
will
allow
practice
using
inheritance
polymorphism
will
also
provide
opportunity
use
number
features
standard
library
maps
lists
generic
algorithms
covered
lecture
building
ability
learn
new
library
features
existing
documentation
critical
skill
writing
real
software
documentation
will
acquaint
precisely
functions
classes
available
library
will
also
begin
get
accustomed
idioms
terminology
might
covered
yet
makes
better
programmer
course
happy
help
get
stuck
though
may
discover
need
look
details
one
ever
able
keep
entire
library
memorized
large
part
able
quickly
look
things
documentation
important
simulation
central
concepts
simulation
centered
around
following
concepts
least
one
person
simulation
will
interesting
one
persons
inbox
list
messages
waiting
attentiona
contact
list
list
addresses
people
send
email
regularlystrategies
define
decide
whether
forward
chain
letter
people
contact
list
receive
forwarded
copy
also
messages
consist
two
addresses
content
made
unique
id
representing
abstractly
message
says
type
joke
feel
good
story
quality
unsigned
integer
stating
general
likely
forwarded
higher
quality
values
likely
forwarded
message
forwarded
one
person
another
content
remains
addresses
different
additionally
message
dispatcher
keeps
track
mapping
addresses
people
knows
place
message
person's
inbox
based
address
message
simulation
process
program
will
begin
reading
input
file
specifies
email
addresses
people
simulation
addresses
people
person's
contact
list
strategies
govern
person's
behavior
input
file
also
specifies
set
chain
letters
placed
person's
inbox
simulation
begins
email
simulation
chain
letters
various
types
normal
messages
included
simulation
ready
begin
proceeds
according
following
algorithm
suppose
people
numbered
0
1
least
one
person
least
one
message
inbox
person
ascending
order
numbers
0
1
person
least
one
message
inbox
take
first
message
person's
inbox
decide
whether
person
believes
general
message
worth
forwarding
decide
message
forwarded
anyone
group
forward
message
round
robin
nature
simulation
moving
one
person
next
processing
one
message
time
crude
simulation
way
people
often
interleave
email
work
might
throughout
day
message
types
four
kinds
chain
letters
simulation
will
include
jokespyramid
schemes
feel
good
storiesbogus
virus
warnings
message
quality
messages
type
separately
quality
rating
unsigned
integer
indicates
likely
someone
want
forward
message
others
rating
allows
us
simulate
fact
real
world
chain
letters
better
written
others
jokes
considered
funny
broader
audience
others
bogus
virus
warnings
believable
others
thus
likely
forwarded
higher
ratings
considered
better
lower
ones
upper
bound
quality
rating
message
implicit
upper
bound
arises
fact
unsigned
int
type
implementation
upper
bound
around
4
000
000
000
strategies
determining
whether
message
worth
forwarding
person
strategy
determining
whether
particular
message
worth
forwarding
others
person
will
one
following
strategies
forward
messages
regardless
type
quality
forward
messages
one
particular
type
jokes
messages
type
forward
message
quality
rating
threshold
regardless
message's
type
forward
messages
one
particular
type
jokes
message
quality
rating
threshold
forward
messages
type
never
forward
messages
strategies
deciding
list
recipients
forwarded
message
addition
strategy
determining
whether
forward
message
person
also
separate
strategy
deciding
among
members
contact
list
receive
forwarded
copy
message
person
decides
forward
message
strategy
used
decide
recipients
forwarded
copies
will
person
will
one
following
strategies
determining
recipient
list
forward
message
members
contact
list
including
possibly
sender
message
forward
message
members
contact
list
except
sender
sender
appears
contact
list
forward
message
next
member
person's
contact
list
first
message
person
forwards
sent
first
member
person's
contact
list
second
message
sent
second
member
members
received
one
forwarded
message
process
repeats
roughly
simulates
idea
person
might
apt
think
single
person
might
interested
message
handling
duplicate
messages
person
keeps
track
message
content
seen
previously
person
receives
message
whose
content
seen
message
disregarded
forwarded
anyone
regardless
person's
strategies
rule
turns
important
accuracy
simulation
will
allow
simulation
terminate
without
rule
two
people
might
forward
message
back
forth
one
another
forever
assumption
email
addresses
people
simplicity
assume
simulation
person
one
email
address
reason
email
addresses
can
assumed
uniquely
identify
individual
people
configuring
simulation
input
file
specifies
information
configures
simulation
program
accept
one
command
line
argument
specifying
name
input
file
used
configure
simulation
runs
information
command
line
arguments
reading
input
files
provided
later
write
input
file
format
input
file
specifies
two
things
information
person
information
chain
letter
initially
placed
person's
inbox
begins
number
specifying
many
people
will
included
simulation
followed
information
person
person
following
information
listed
email
address
person
assumed
email
addresses
whitespace
unsigned
integer
specifying
number
people
person's
contact
list
email
addresses
person
contact
list
number
corresponding
strategy
person
uses
determining
whether
forward
message
1
means
forward
messages
regardless
quality
2
means
forward
messages
particular
type
regardless
quality
case
2
will
followed
number
corresponding
message
type
message
types
always
indicated
following
numbers
everywhere
else
appear
input
file
jokepyramid
scheme
feel
good
storybogus
virus
warning
3
means
forward
messages
particular
quality
rating
regardless
type
case
3
will
followed
minimum
quality
rating
messages
person
will
forward
4
means
forward
messages
particular
type
meet
minimum
quality
rating
case
4
will
followed
two
numbers
message
type
minimum
quality
rating
5
means
never
forward
messages
number
corresponding
strategy
person
uses
decide
list
recipients
forwarded
message
1
means
forward
message
members
contact
list
2
means
forward
message
members
contact
list
except
possibly
sender
3
means
forward
message
next
member
person's
contact
list
information
people
number
indicates
many
chain
letters
will
initially
placed
people's
inboxes
simulation
starts
followed
information
message
message's
typethe
quality
rating
messagethe
email
address
sender
required
may
known
email
address
defined
earlierthe
email
address
recipient
known
address
already
defined
example
input
file
3
alex
alex
com
1
hello
paul
com
3
10
2
hello
paul
com
2
alex
alex
com
bruce
springsteen
net
1
1
bruce
springsteen
net
1
alex
alex
com
4
3
7
3
2
3
6
feelgood
happy
com
alex
alex
com
4
1
scary
virus
org
bruce
springsteen
net
may
assume
input
file
properly
formatted
according
rules
designed
file
format
can
use
operator
read
file
without
regard
parsing
spaces
worrying
lines
information
appear
one
line
separate
lines
shown
program
easily
able
handle
information
reading
files
follows
later
section
write
okay
program
misbehave
crash
given
improperly
formatted
input
file
hand
program
crash
given
name
non
existent
file
program
given
command
line
argument
output
simulation
simulation
runs
print
information
message
placed
someone's
inbox
including
messages
initially
sent
simulation
starts
information
must
formatted
precisely
like
pay
attention
spacing
capitalization
punctuation
message
received
blah
blah
com
hello
paul
com
content
id
1
type
2
content
field
shows
id
message
content
placeholder
actual
text
message
number
corresponding
message's
type
use
numbers
input
file
jokes
indicated
type
1
pyramid
schemes
type
2
clarity
please
follow
block
message
information
blank
line
conclusion
simulation
print
person
many
copies
message
uniquely
identified
content
received
well
total
number
messages
received
person
output
must
formatted
precisely
following
model
spacing
punctuation
capitalization
relevant
messages
received
hello
paul
com
content
1
3
content
3
1
content
5
2
total
received
6
print
information
corresponds
messages
actually
received
person
words
counts
0
section
except
total
received
field
person
never
received
messages
design
advice
find
program
big
sounds
may
even
find
writing
whole
lot
code
wrote
previous
project
rather
focusing
efforts
low
level
details
memory
management
previous
project
instead
focused
building
larger
program
many
smaller
pieces
using
inheritance
polymorphism
couple
instances
trick
software
design
better
design
easier
will
write
program
mind
design
advice
read
understand
proceed
implementing
project
general
prefer
using
well
behaved
data
types
whenever
possible
keeping
things
like
pointers
dynamic
allocation
minimum
able
avoid
pointers
dynamic
allocation
entirely
program
will
made
lot
simpler
avoiding
whenever
can
probably
want
class
called
message
message
consists
addresses
strings
messagecontent
messagecontent
class
consists
unique
id
quality
rating
messagetype
messagetype
might
best
implemented
enumeration
discuss
briefly
next
week
note
suggesting
use
inheritance
different
kinds
messages
may
seem
like
sacrilege
object
oriented
environment
program
messages
anything
behavior
differentiate
one
kind
message
another
best
reason
encapsulate
content
message
class
makes
easy
construct
forwarded
message
existing
one
simply
copying
messagecontent
supplying
new
values
addresses
also
makes
easy
compare
content
two
messages
especially
choose
overload
operators
messagecontent
objects
simplify
printing
information
messages
received
wise
overload
operator
message
messagecontent
teach
put
output
stream
note
need
overload
operator
since
never
reading
message
input
talk
operator
overloading
next
week
well
probably
want
class
called
person
person
can
represented
object
person
object
might
contain
following
members
inbox
implemented
vector
list
message
objects
since
will
processed
essentially
queue
standard
collection
list
better
choice
vector
since
efficient
remove
first
element
linked
list
first
element
vector
can
also
consider
looking
queue
adapter
standard
library
tremendous
advantage
using
instead
list
though
offer
one
additional
small
learning
experience
contact
list
implemented
vector
list
email
addresses
strings
indication
many
times
message
content
seen
might
best
implemented
map
specifically
one
maps
messagecontent
unsigned
int
number
times
message
content
seen
messagecontent
never
seen
appear
map
aware
map
implemented
balanced
binary
search
tree
means
ability
compare
objects
ordering
using
operators
necessary
key
type
keys
messagecontent
objects
need
overload
operators
messagecontents
pointer
kind
strategy
pointers
polymorphism
next
best
implement
two
kinds
strategies
inheritance
hierarchies
person
given
object
strategies
ask
strategy
objects
figure
whether
forward
message
receive
forwarded
copy
keeps
person
simple
implement
one
inheritance
hierarchy
quality
checking
strategies
abstract
base
class
contains
pure
virtual
function
takes
message
returns
bool
specifying
whether
worth
forwarding
concrete
strategy
inherits
abstract
base
class
implementing
virtual
function
appropriate
way
similarly
implement
another
inheritance
hierarchy
building
recipient
list
abstract
base
class
one
pure
virtual
function
one
building
recipient
list
given
message
concrete
strategy
inherits
abstract
base
class
implementing
virtual
function
appropriate
way
also
messagedispatcher
class
job
route
messages
appropriate
person's
inbox
given
address
job
must
clear
person
object
corresponds
string
reason
want
map
contain
pointers
rather
person
objects
able
point
actual
persons
used
throughout
simulation
rather
copies
may
use
anything
standard
library
classes
functions
like
real
world
never
reason
re
invent
wheel
suitable
pre
built
pre
tested
implementation
already
available
accepting
command
line
arguments
program
writing
program
accept
command
line
arguments
java
command
line
arguments
can
passed
programs
typical
mechanism
accepting
command
line
arguments
program
declare
main
function
accepts
two
arguments
argc
argv
argc
indicates
number
command
line
arguments
passed
argv
array
strings
consisting
actual
arguments
reason
array
count
necessary
whereas
array
necessary
java
arrays
unlike
java
counterparts
know
size
talk
detail
single
multi
dimension
arrays
later
quarter
proper
declaration
main
like
accept
command
line
arguments
int
main
int
argc
char
argv
return
0
declaration
argv
seems
little
strange
pointer
pointer
char
actually
lingo
array
style
character
strings
style
string
implemented
pointer
array
characters
array
implemented
pointer
first
element
details
now
especially
important
suffice
say
can
treat
element
argv
array
string
example
following
code
print
first
command
line
argument
console
cout
argv
1
endl
style
strings
can
implicitly
converted
string
objects
also
able
something
like
need
string
argv
1
count
argc
will
actually
one
greater
number
command
line
arguments
name
executable
program
included
first
element
argv
array
example
execute
program
command
line
following
command
myprogram
alex
happy
today
argc
will
5
argv
will
look
like
01234c
cpp
myprogram
myprogram
exealexishappytoday
argv
0
consists
entire
path
executable
version
program
specifying
command
line
arguments
executing
program
via
visual
studio
developing
program
visual
studio
want
execute
program
using
start
without
debugging
start
debugging
menu
options
corresponding
keyboard
shortcuts
likely
quarter
program
takes
command
line
arguments
need
tell
visual
studio
ahead
time
command
line
arguments
can
specify
program's
arguments
using
following
procedure
right
click
name
project
solution
explorer
project's
name
generally
shown
boldface
text
note
right
clicking
name
solution
name
one
source
files
will
want
ensuing
popup
menu
select
properties
now
see
dialog
displaying
property
pages
project
list
along
left
side
dialog
select
debugging
right
now
see
list
parameters
can
used
configure
program
executed
one
parameters
named
command
arguments
can
specify
command
line
arguments
changing
value
parameter
defaults
empty
string
note
need
include
name
program
arguments
list
parameter
passed
program
argv
1
argv
2
etc
name
program
automatically
becoming
argv
0
need
specify
path
contains
spaces
need
surround
double
quotes
reading
input
file
instead
console
file
input
output
far
quarter
used
two
streams
cin
represents
console
input
cout
represents
console
output
streams
part
iostreams
library
part
standard
library
iostreams
library
also
supports
file
well
string
objects
thanks
inheritance
polymorphism
file
works
similarly
console
already
familiar
differences
mostly
revolve
around
fact
files
less
reliable
may
exist
finite
length
files
can
accessed
non
sequential
order
program
however
reading
input
file
predefined
format
operating
assumption
file
exists
properly
formatted
can
treat
input
file
much
like
console
except
open
beforehand
close
done
deal
fact
might
exist
can
use
file
streams
need
include
appropriate
header
standard
library
include
fstream
opening
file
input
input
file
can
opened
manipulated
using
ifstream
object
stands
input
file
ifstream
constructor
takes
parameter
name
file
tries
open
file
open
input
file
just
need
ifstream
inputfile
filename
txt
one
minor
caveat
constructor
expects
style
string
parameter
string
object
means
will
safe
pass
argv
1
parameter
since
style
string
want
pass
string
first
need
convert
style
string
can
calling
str
string
like
string
filename
ifstream
inputfile
filename
str
possible
opening
file
will
fail
file
may
exist
may
locked
another
running
program
program
may
access
security
reasons
unlike
java
ifstream
constructor
will
throw
exception
fails
open
file
need
test
stream
afterward
make
sure
opening
file
successful
can
easily
test
calling
open
method
stream
like
inputfile
open
deal
fact
file
opened
reading
file
open
file
open
reading
just
like
reading
console
using
either
operator
getline
example
int
inputfile
string
getline
inputfile
closing
file
done
reading
file
best
close
can
close
file
calling
close
method
ifstream
object
like
inputfile
close
noted
ifstream's
destructor
automatically
closes
underlying
file
closed
already
can
omit
call
close
file
object
dies
automatically
appropriate
place
example
one
function
reads
input
file
returns
ifstream
local
variable
within
function
will
need
call
close
one
advantages
programming
language
control
objects
die
opposed
garbage
collected
languages
collector
decides
can
associate
releasing
resources
destruction
object
yet
still
certain
resources
will
released
part
broader
design
strategy
called
resource
acquisition
initialization
talk
later
quarter
program
will
search
files
default
run
via
visual
studio
windows
operating
system
running
programs
working
directory
directory
will
searched
whenever
program
attempts
open
file
without
specifying
complete
path
file
default
visual
studio
sets
working
directory
program
directory
source
code
cpp
files
write
test
input
files
best
place
source
code
directory
program
will
able
find
easily
word
randomness
simulations
real
simulation
work
good
idea
simulations
generate
random
behavior
according
statistical
distributions
rather
behavior
deterministic
opted
design
simulation
deterministic
behavior
will
always
clear
exactly
output
simulation
allows
easily
determine
whether
program
working
also
easily
allows
grade
pointed
real
simulation
include
randomness
behavior
testing
simulation
test
simulation
need
design
input
files
work
expected
output
paper
check
output
see
matches
expectations
can
somewhat
arduous
task
encourage
share
test
input
expected
output
one
another
everyone
can
benefit
one
another's
work
finding
good
reference
material
online
standard
library
default
location
online
documentation
standard
library
resides
handful
sites
exist
provide
nice
documentation
among
best
cppreference
com
find
exploring
new
parts
library
wondering
whether
something
exists
library
great
place
start
search
starting
point
project
starting
point
like
build
scratch
though
given
fair
amount
design
advice
along
way
always
feel
free
ask
questions
word
warning
compatibility
course
entirely
focused
standard
defined
11
standard
important
realize
11
standard
completed
relatively
recently
therefore
compiler
support
varies
somewhat
dramatically
one
compiler
another
particularly
terms
portions
new
library
changes
implemented
cases
aware
submission
required
compile
run
windows
using
visual
studio
2012
project
explores
standard
library
inn
depth
work
predominantly
using
compiler
visual
studio
2012's
compiler
example
running
linux
option
available
well
advised
test
work
visual
studio
2012
thoroughly
may
done
previous
projects
will
easier
fall
one
gaps
supported
one
compiler
supported
another
deliverables
submit
source
cpp
header
files
comprise
program
afterward
take
moment
sure
submitted
files
missed
one
able
compile
run
program
can
result
substantial
penalty
since
able
evaluate
program's
correctness
follow
link
discussion
submit
project
via
checkmate
aware
holding
rules
specified
document
including
one
says
responsible
submitting
version
project
want
graded
regrade
project
simply
accidentally
submitted
wrong
version
handful
modifications
additional
information
added
alex
thornton
fall
2012
originally
written
alex
thornton
summer
2006
