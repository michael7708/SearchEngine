ics31 w13 quiz 7 
quiz 7 
ics31
winter
2013
quiz
7
suppose
definitions
last
week's
quiz
collections
import
namedtupledate
namedtuple
'date'
'year
month
day'
three
fields
numbers
november
12
2012
represented
date
2012
11
12
drivingrecord
namedtuple
'drivingrecord'
'name
license
age
tickets'
name
string
representing
driver's
name
license
string
representing
driver's
licence
number
age
driver's
age
tickets
possibly
empty
list
date
objects
containing
dates
driver
received
traffic
ticket
cited
police
officer
violating
driving
law
complete
definition
date
earlier
consistent
header
docstring
assertions
def
date
earlier
date1
date
date2
date
bool
'''
return
true
date1
earlier
date2
false
otherwise
boolean
function
goes
without
saying
return
either
true
false
'''assert
date
earlier
date
2012
1
1
date
2013
1
1
assert
date
earlier
date
2012
1
1
date
2012
2
1
assert
date
earlier
date
2012
1
1
date
2012
1
2
assert
date
earlier
date
2013
1
14
date
2013
2
1
assert
date
earlier
date
2013
1
14
date
2013
1
1
assert
date
earlier
date
2013
5
1
date
2013
1
1
assert
date
earlier
date
2013
5
14
date
2013
1
1
assert
date
earlier
date
2013
5
1
date
2013
1
14
assert
date
earlier
date
2012
1
1
date
2012
1
1
assert
date
earlier
date
2013
1
2
date
2013
1
1
assert
date
earlier
date
2012
2
1
date
2012
1
1
assert
date
earlier
date
2013
1
1
date
2012
1
1
assert
date
earlier
date
2013
1
1
date
2012
2
1
answer
feedback
answer
date1
year
date2
year
return
true
elif
date1
year
date2
year
return
false
elif
date1
month
date2
month
return
true
elif
date1
month
date2
month
return
false
elif
date1
day
date2
day
return
true
else
return
false
one
way
approach
problem
look
assertions
guarantee
every
set
assertions
exam
will
comprehensive
one
lays
various
cases
check
years
different
d1
d2
d1
d2
actually
years
equal
months
different
d1
d2
d1
d2
days
different
d1
d2
problem
assume
following
function
already
defined
define
def
date
weekend
date
bool
'''
return
true
saturday
sunday
'''
complete
definitions
functions
total
tickets
total
weekend
tickets
weekend
ticket
percentage
def
total
tickets
drl
'list
drivingrecord'
int
'''
return
total
number
tickets
issued
drivers
drl
'''def
total
weekend
tickets
drl
'list
drivingrecord'
int
'''
return
total
number
tickets
issued
saturday
sunday
may
write
second
function
helper
function
break
task
'''def
weekend
ticket
percentage
drl
'list
drivingrecord'
float
'''
return
percentage
tickets
issued
issued
saturday
sunday
value
0
100
'''
answer
feedback
answer
course
need
call
previously
defined
functions
appropriate
never
full
credit
duplicate
code
def
total
tickets
drl
'list
drivingrecord'
int
'''
return
total
number
tickets
issued
drivers
drl
'''
total
0
dr
drl
total
len
dr
tickets
return
totaldef
total
weekend
tickets
drl
'list
drivingrecord'
int
'''
return
total
number
tickets
issued
saturday
sunday
may
write
second
function
helper
function
break
task
'''
total
0
dr
drl
total
total
weekend
tickets
ticketlist
dr
tickets
return
total
alternative
without
helper
function
using
nested
loop
total
0
dr
drl
dr
date
weekend
total
1
return
totaldef
total
weekend
tickets
ticketlist
ticketlist
'list
date'
int
'''
take
list
dates
tickets
issued
count
number
tickets
issued
saturday
sunday
'''
total
0
ticketlist
date
weekend
total
1
return
totaldef
weekend
ticket
percentage
drl
'list
drivingrecord'
float
'''
return
percentage
tickets
issued
issued
saturday
sunday
value
0
100
'''
return
total
weekend
tickets
drl
total
tickets
drl
100
better
coding
practice
check
total
tickets
returns
least
1
since
divide
zero
also
note
get
percentage
need
multiply
100
one
aspect
question
able
use
function
whose
header
docstring
supplied
even
body
function
common
programmer's
experience
time
use
help
look
functions
methods
library
suppose
file
driving
records
shown
john
jones
111222333
24
12
24
11
1
31
12
6
30
12jane
johnson
222333444
25joe
jenkins
333444555
18
4
5
12jill
jefferies
444555666
55
2
24
01
10
18
05
four
fields
separated
tabs
list
ticket
dates
separated
commas
date
mm
dd
yy
format
following
code
creates
list
drivingrecords
file
like
one
def
mmddyy
date
mmddyy
str
date
'''
return
date
mm
dd
yy
'''
parts
mmddyy
split
'
'
return
date
int
parts
0
int
parts
1
2000
int
parts
2
alternative
1infile
open
'records
txt'
'r'
inputlist
infile
drl
dr
inputlist
fields
dr
split
'
t'
len
fields
3
ticketlist
else
ticketlist
fields
3
strip
split
'
'
datelist
ticketlist
datelist
append
mmddyy
date
record
drivingrecord
fields
0
fields
1
int
fields
2
datelist
drl
append
record
print
drl
infile
close
alternative
2infile
open
'records
txt'
'r'
drl
fields
line
split
'
t'
len
fields
3
ticketlist
else
ticketlist
fields
3
strip
split
'
'
datelist
ticketlist
datelist
append
mmddyy
date
record
drivingrecord
fields
0
fields
1
int
fields
2
datelist
drl
append
record
print
drl
infile
close
alternative
3infile
open
'records
txt'
'r'
inputstring
infile
inputlist
inputstring
split
'
n'
drl
dr
inputlist
fields
dr
split
'
t'
len
fields
3
ticketlist
else
ticketlist
fields
3
strip
split
'
'
datelist
ticketlist
datelist
append
mmddyy
date
record
drivingrecord
fields
0
fields
1
int
fields
2
datelist
drl
append
record
print
drl
infile
close
five
different
ways
read
text
files
python
read
read
readline
readlines
line
file
match
ways
listed
one
following
statements
used
alternative
1
used
alternative
2
used
alternative
3
used
loop
check
whether
last
line
tried
read
empty
effective
input
file
organized
fixed
width
columns
answer
feedback
read
used
alternative
3
read
effective
input
file
organized
fixed
width
columns
readline
used
loop
check
whether
last
line
tried
read
empty
readlines
used
alternative
1
line
file
used
alternative
2
