filtertreedoc group 
filtertree 
back
index
appstring
appstringdoc
filtertreeintroduction
approximate
string
search
overviewindexing
options
functionality
answering
approximate
string
queries
filtertree
structurerecommendations
high
level
overview
important
componentsgeneral
components
indexers
searchers
listmergers
statsgen
output
contributors
filtertree
introduction
module
supports
efficient
approximate
string
search
collection
strings
approximate
query
asks
strings
collection
similar
query
string
given
similarity
function
similarity
threshold
approximate
string
search
many
applications
need
answer
approximate
string
queries
following
examples
spellchecking
suggest
good
words
possibly
mistyped
word
record
linkage
identify
records
represent
real
world
entity
mean
feature
many
search
engines
partially
relies
finding
words
similar
given
keyword
overview
indexing
options
provide
three
different
flavors
indexing
searching
provide
specific
optimizations
improving
query
performance
structures
main
memory
including
string
collection
filtertree
inverted
index
structures
main
memory
use
lossy
compression
inverted
index
save
space
string
collection
memory
filtertree
memory
inverted
index
memory
compressed
data
inverted
index
disk
string
collection
disk
filtertree
memory
inverted
index
disk
functionality
support
following
similarity
functions
distance
measures
levenshtein
distance
aka
edit
distance
http
en
wikipedia
org
wiki
levenshtein
distance
jaccard
similarity
http
en
wikipedia
org
wiki
jaccard
similarity
coefficient
cosine
similarity
http
en
wikipedia
org
wiki
cosine
similarity
dice
similarity
http
en
wikipedia
org
wiki
dice
27s
coefficient
support
following
single
signature
filters
partitioning
string
collection
length
filter
charsum
filter
index
structure
filtertree
inverted
index
can
saved
loaded
file
answering
approximate
string
queries
answer
queries
efficiently
module
uses
inverted
list
index
grams
strings
collection
string
decomposed
substrings
grams
size
using
sliding
window
gram
build
list
string
ids
containing
gram
inverted
list
gram
process
answering
queries
based
observation
two
strings
similar
must
share
certain
number
common
grams
depending
similarity
function
similarity
threshold
false
positives
must
removed
post
processing
step
true
similarities
computed
addition
can
increase
performance
queries
using
filters
single
signature
filter
partitions
string
collection
disjoint
subsets
based
criteria
answering
query
need
consider
subsets
example
looking
strings
collection
within
edit
distance
1
string
abcde
know
answer
string
must
length
4
6
partition
string
collection
using
length
strings
can
avoid
processing
irrelevant
string
ids
query
answering
charsum
filter
similar
length
filter
partition
data
strings
based
charsums
sum
characters
string
query
answering
can
determine
range
charsums
answers
must
lie
filtertree
structure
filtertree
structure
facilitates
use
filters
level
tree
partitions
string
collection
based
one
filter
leaf
node
contains
gram
inverted
index
subset
strings
belonging
leaf
answering
query
traverse
tree
identify
leaf
nodes
survive
filtering
criteria
probe
inverted
indexes
attached
leaves
get
list
candidate
answers
following
example
filtertree
fanout
3
length
charsum
filter
applied
recommendations
cases
using
exactly
one
partitioning
filter
yields
best
performance
intuitive
simplified
explanation
follows
memory
indexes
trade
processing
several
inverted
indexes
short
lists
processing
fewer
inverted
indexes
longer
lists
disk
based
indexes
layout
inverted
lists
file
can
optimized
exactly
one
partitioning
filter
used
high
level
overview
important
components
purpose
overview
give
reader
feeling
code
design
many
details
methods
method
parameters
attributes
left
simplicity
blue
components
meant
memory
indexes
yellow
components
meant
disk
based
indexes
red
components
meant
memory
indexes
compressed
combinelists
green
components
meant
memory
indexes
compressed
discardlists
general
components
indexers
searchers
listmergers
statsgen
output
statsgenerator
allows
collecting
performance
data
approximate
string
search
library
example
different
filters
merging
algorithms
datasets
query
workloads
can
tested
good
start
perftest
cc
included
filtertree
folder
performance
numbers
written
output
file
perftest
cc
writes
perftest
search
stats
txt
statsgenerator
intended
advanced
users
familiar
algorithmic
details
approximate
string
search
numbers
generated
depict
different
steps
process
query
answering
will
understood
people
familiar
subject
getting
idea
query
performance
using
certain
parameters
sufficient
focus
field
total
time
measures
average
query
performance
given
workload
contributors
alexander
behm
design
main
author
chen
li
design
project
leader
rares
vernica
design
shengyue
ji
design
implementation
yiming
lu
design
implementation
back
index
