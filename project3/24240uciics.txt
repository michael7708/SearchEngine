lab assignment 5 
fifth lab assignment 
informatics
41
david
kay
uc
irvine
fall
2011
lab
assignment
5
assignment
due
end
lab
friday
october
28
choose
partner
assignment
someone
worked
already
thinking
software
development
course
try
find
partner
similar
interests
class
described
change
restaurant
structure
instead
just
one
best
dish
price
restaurant
menu
dishes
new
rrant
now
make
rrant
name
cuisine
phone
menu
name
string
cuisine
string
phone
string
menu
list
dish
structures
see
defined
new
structure
less
like
define
struct
rrant
name
cuisine
phone
menu
menu
list
dishes
rrant
structure
contains
list
one
fields
dish
list
name
price
dish
make
dish
name
price
name
string
price
number
defined
define
struct
dish
name
price
1
restaurant
definition
add
third
dish
paht
woon
sen
7
95
define
r1
make
rrant
thai
touch
thai
949
640
0123
list
make
dish
mee
krob
8
50
make
dish
larb
gai
10
25
write
scheme
expression
defines
r2
new
rrant
structure
french
restaurant
pascal
whose
phone
number
940
752
0107
serve
escargots
12
95
poached
salmon
18
50
rack
lamb
24
00
marjolaine
cake
8
50
2
write
function
rrant
first
dish
name
takes
rrant
argument
returns
name
first
dish
restaurant's
menu
remember
write
test
cases
examples
write
function
include
code
check
whether
menu
zero
dishes
return
empty
may
find
needing
extract
menu
argument
twice
use
local
avoid
3
write
function
dish
cheap
takes
dish
structure
number
returns
true
price
dish
less
specified
number
4
write
function
menu
cheap
takes
menu
list
dish
structures
number
returns
true
dishes
menu
price
less
specified
number
may
write
code
return
true
menu
dishes
produce
error
message
course
use
dish
cheap
definition
5
write
function
rrant
cheap
takes
rrant
number
returns
true
dishes
restaurant
serves
cost
less
specified
number
course
use
menu
cheap
definition
6
write
function
menu
prices
takes
menu
returns
list
numbers
number
price
dish
menu
function
will
collect
prices
dishes
list
return
list
alternative
approach
class
7
write
function
menu
average
takes
menu
returns
average
price
dishes
menu
think
compute
average
quantities
need
get
predefined
function
length
will
helpful
will
also
helpful
write
function
sum
returns
sum
list
numbers
note
also
need
check
empty
menu
return
zero
case
divide
zero
8
write
function
rrant
cheap
takes
rrant
number
returns
true
average
price
restaurant's
menu
less
specified
number
9
write
function
rrant
keep
cheap
takes
rrant
number
returns
newly
constructed
copy
restaurant
menu
items
cheap
removed
right
way
go
follow
pattern
functions
start
writing
function
operate
menu
call
function
rrant
keep
cheap
function
actual
removal
task
follows
pattern
functions
already
seen
10
write
function
cheap
rrants
takes
list
rrant
structures
number
returns
list
containing
cheap
restaurants
ones
whose
average
menu
price
less
number
use
rrant
cheap
definition
course
collect
definitions
submit
via
checkmate
class
inorder
traversal
bst
called
bst
list
also
insertion
item
bst
called
bst
insert
wrote
function
take
list
items
insert
item
bst
called
list
bst
know
recognize
functions
write
1
end
class
reimplemented
rebuilt
bst
keep
track
duplicate
items
storing
count
many
times
item
occurred
redefined
node
structure
defined
insertion
function
increase
count
time
find
duplicate
item
finish
rewriting
bst
list
produce
example
three
19s
sorted
list
three
19s
input
skeleton
bottom
thursday
afternoon's
class
transcript
available
course
email
archive
complete
definition
including
enough
check
expect
tests
demonstrate
definition
correct
2
class
write
function
search
item
binary
tree
give
chance
now
write
function
bst
member
described
write
process
bsts
defined
class
counts
without
choice
bst
member
number
bst
boolean
return
true
number
appears
bst
false
otherwise
check
expect
bst
member
17
empty
false
check
expect
bst
member
17
list
bst
list
17
true
check
expect
bst
member
17
list
bst
list
34
43
28
16
17
24
134
34
true
check
expect
bst
member
17
list
bst
list
34
3
23
2
25
26
24
false
hints
like
contract
purpose
statement
examples
next
write
function
header
define
lambda
since
tree
either
empty
cond
distinguish
now
return
tree's
empty
empty
two
things
look
equal
return
equal
going
keep
looking
recursively
either
left
subtree
right
subtree
decide
submit
definitions
via
checkmate
part
optional
get
fine
think
interests
might
area
software
development
software
engineering
highly
recommend
giving
try
reimplement
collection
class
restaurants
program
store
restaurants
binary
search
tree
ordered
restaurants'
names
will
involve
changing
definitions
collection
part
code
none
definitions
elsewhere
fact
exatly
thing
whether
restaurant
structures
old
style
one
dish
price
new
style
menu
dishes
data
definition
will
follows
treenode
either
1
empty
2
make
treenode
rootvalue
left
right
rootvalue
rrant
left
right
treenodes
representing
left
subtree
right
subtree
bst
property
restaurant
names
left
subtree
earlier
alphabetically
name
rootvalue
restaurant
names
right
subtree
greater
subtrees
bsts
tips
hints
simplifications
bst
code
wrote
earlier
code
class
useful
guide
compare
strings
alphabetically
use
string
string
string
collection
list
function
inorder
traversal
tree
produces
sorted
list
assume
every
restaurant
collection
will
unique
name
assumption
will
duplications
collection
search
will
always
return
one
element
collection
empty
collection
deleting
items
bst
tricky
item
two
children
leave
holes
need
maintain
bst
property
learn
algorithm
day
now
can
skip
collection
remove
can
just
return
collection
unchanged
point
exercise
restaurant
collection
program
interchangeable
part
can
change
build
internally
list
bst
without
affecting
rest
program
without
requiring
authors
parts
program
make
changes
code
interchangeability
key
aspect
well
designed
modern
software
system
fundamental
principle
object
oriented
programming
remember
partner
must
complete
partner
evaluation
form
via
survey
tool
eee
uci
edu
based
part
ics
h21assignments
david
kay
modified
david
kay
informatics
core
course
fall
2004
fall
2005
fall
2008
fall
2009
fall
2011
david
kay
kay
uci
edu
saturday
october
22
2011
10
35
