
index cpp 
id
index
cpp
5027
2010
02
18
19
41
48z
rares
copyright
2004
2007
regents
university
california
redistribution
file
permitted
terms
bsd
license
date
october
2004
author
liang
jin
include
stdafx
include
include
include
include
assert
include
index
include
card
make
new
index
empty
consists
single
node
struct
node
rtreenewindex
struct
node
rtreenewnode
level
0
leaf
return
search
index
tree
subtree
data
retangles
overlap
argument
rectangle
return
number
qualifying
data
rects
int
rtreequery
struct
node
struct
query
searchhitcallback
shcb
void
cbarg
register
struct
node
register
struct
query
note
suspected
bug
sent
node
cast
rect
fix
yet
tested
register
int
hitcount
0
register
int
assert
assert
level
0
assert
level
0
internal
node
tree
0
ibranch
child
queryoverlap
branch
rect
hitcount
rtreequery
branch
child
shcb
cbarg
else
leaf
node
0
ibranch
child
queryoverlap
branch
rect
hitcount
shcb
call
user
provided
callback
shcb
int
branch
child
cbarg
return
hitcount
callback
wants
terminate
search
early
return
hitcount
search
index
tree
subtree
data
retangles
overlap
argument
rectangle
return
number
qualifying
data
rects
int
rtreesearch
struct
node
struct
rect
searchhitcallback
shcb
void
cbarg
register
struct
node
register
struct
rect
note
suspected
bug
sent
node
cast
rect
fix
yet
tested
register
int
hitcount
0
register
int
assert
assert
level
0
assert
level
0
internal
node
tree
0
ibranch
child
rtreeoverlap
branch
rect
hitcount
rtreesearch
branch
child
shcb
cbarg
else
leaf
node
0
ibranch
child
rtreeoverlap
branch
rect
hitcount
shcb
call
user
provided
callback
shcb
int
branch
child
cbarg
return
hitcount
callback
wants
terminate
search
early
return
hitcount
inserts
new
data
rectangle
index
structure
recursively
descends
tree
propagates
splits
back
returns
0
node
split
old
node
updated
node
split
returns
1
sets
pointer
pointed
new
node
point
new
node
old
node
updated
become
one
two
level
argument
specifies
number
steps
leaf
level
insert
data
rectangle
goes
level
0
static
int
rtreeinsertrect2
struct
rect
int
tid
struct
node
struct
node
new
node
int
level
register
int
struct
branch
struct
node
n2
assert
new
node
assert
level
0
level
level
still
level
insertion
go
tree
recursively
level
level
rtreepickbranch
rtreeinsertrect2
tid
branch
child
n2
level
child
split
branch
rect
rtreecombinerect
branch
rect
return
0
else
child
split
branch
rect
rtreenodecover
branch
child
child
n2
rect
rtreenodecover
n2
return
rtreeaddbranch
new
node
reached
level
insertion
add
rect
split
necessary
else
level
level
rect
child
struct
node
tid
child
field
leaves
contains
tid
data
record
return
rtreeaddbranch
new
node
else
supposed
happen
assert
false
return
0
insert
data
rectangle
index
structure
rtreeinsertrect
provides
splitting
root
returns
1
root
split
0
level
argument
specifies
number
steps
leaf
level
insert
data
rectangle
goes
level
0
rtreeinsertrect2
recursion
int
rtreeinsertrect
struct
rect
int
tid
struct
node
root
int
level
register
struct
rect
register
int
tid
tid
register
struct
node
root
root
register
int
level
level
register
int
register
struct
node
newroot
struct
node
newnode
struct
branch
int
result
assert
root
assert
level
0
level
level
assert
boundary
0
boundary
numdims
1
assert
strcmp
strbound
0
strbound
numdims
1
level
root
level
1
rect
rtreenodecover
root
child
root
rtreeaddbranch
newroot
null
rect
rtreenodecover
newnode
child
newnode
rtreeaddbranch
newroot
null
root
newroot
result
1
else
result
0
return
result
allocate
space
node
list
used
deletrect
store
nodes
empty
static
struct
listnode
rtreenewlistnode
return
struct
listnode
malloc
sizeof
struct
listnode
return
new
listnode
static
void
rtreefreelistnode
struct
listnode
free
delete
add
node
reinsertion
list
branches
will
later
reinserted
index
structure
static
void
rtreereinsert
struct
node
struct
listnode
ee
register
struct
listnode
rtreenewlistnode
node
next
ee
ee
delete
rectangle
non
root
part
index
structure
called
rtreedeleterect
descends
tree
recursively
merges
branches
way
back
returns
1
record
found
0
success
static
int
rtreedeleterect2
struct
rect
int
tid
struct
node
struct
listnode
ee
register
struct
rect
register
int
tid
tid
register
struct
node
register
struct
listnode
ee
ee
register
int
assert
ee
assert
tid
0
assert
level
0
level
0
leaf
node
0
nodecard
branch
child
rtreeoverlap
branch
rect
rtreedeleterect2
tid
branch
child
ee
branch
child
count
minnodefill
branch
rect
rtreenodecover
branch
child
else
enough
entries
child
eliminate
child
node
rtreereinsert
branch
child
ee
rtreedisconnectbranch
return
0
return
1
else
leaf
node
0
leafcard
branch
child
branch
child
struct
node
tid
rtreedisconnectbranch
return
0
return
1
delete
data
rectangle
index
structure
pass
pointer
rect
tid
record
ptr
ptr
root
node
returns
1
record
found
0
success
rtreedeleterect
provides
eliminating
root
int
rtreedeleterect
struct
rect
int
tid
struct
node
nn
register
struct
rect
register
int
tid
tid
register
struct
node
nn
nn
register
int
register
struct
node
tmp
nptr
struct
listnode
reinsertlist
null
register
struct
listnode
assert
nn
assert
nn
assert
tid
0
rtreedeleterect2
tid
nn
reinsertlist
found
deleted
data
item
reinsert
branches
eliminated
nodes
reinsertlist
tmp
nptr
reinsertlist
node
0
maxkids
tmp
nptr
tmp
nptr
branch
child
rtreeinsertrect
tmp
nptr
branch
rect
int
tmp
nptr
branch
child
nn
tmp
nptr
level
reinsertlist
reinsertlist
reinsertlist
next
rtreefreenode
node
rtreefreelistnode
check
redundant
root
leaf
1
child
eliminate
nn
count
1
nn
level
0
0
nodecard
tmp
nptr
nn
branch
child
tmp
nptr
break
assert
tmp
nptr
rtreefreenode
nn
nn
tmp
nptr
return
0
else
return
1
