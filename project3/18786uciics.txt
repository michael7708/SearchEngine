rock roll stops traffic assignment 3 
lab assignment 3 rock roll stops traffic 
rock
roll
stops
traffic
assignment
3
introduction
residents
southern
california
us
face
realities
heavy
traffic
attempt
drive
local
freeway
rush
hour
invariably
experience
major
traffic
jams
long
delays
worse
rarely
apprised
unusual
delays
accidents
road
closures
ve
encountered
even
know
delay
advance
often
difficult
find
suitable
alternate
route
either
re
unfamiliar
area
alternatives
just
clogged
traffic
route
re
trying
avoid
hard
imagine
presence
wireless
internet
connection
everyone
car
help
situation
aside
providing
obvious
ability
download
traffic
reports
maps
demand
also
obtain
minute
traffic
information
little
computing
actively
aid
finding
best
way
get
one
place
another
optimized
distance
also
shortest
drive
time
current
traffic
conditions
allow
example
drivers
diverted
around
scene
accident
traffic
conditions
change
advice
offered
drivers
car
systems
also
change
optimally
routing
cars
around
traffic
jam
sending
different
cars
different
alternate
paths
project
will
write
simplified
version
system
scratch
provide
code
assignment
given
file
computer
friendly
abstraction
map
streets
freeways
along
snapshot
current
traffic
points
map
program
find
shortest
distance
fastest
route
one
location
another
program
ask
user
name
file
read
information
compute
requested
print
results
console
neatly
details
follow
setup
eclipse
assignment
download
unzip
rockandroll
project
folder
add
workspace
place
code
project
source
folder
abstraction
street
map
real
life
street
maps
handy
way
human
determine
appropriate
route
take
one
location
another
present
abstraction
world
scaled
drawing
actual
streets
order
useful
us
street
map
needs
give
us
names
streets
freeways
accurately
communicate
distances
directions
show
us
various
streets
freeways
intersect
program
ll
need
develop
different
abstraction
street
map
abstraction
must
contain
information
pertinent
problem
re
trying
solve
presented
way
will
make
easy
possible
program
solve
surprisingly
picture
made
lines
words
abstraction
useful
program
require
tremendous
amount
effort
design
implement
algorithm
interpret
lines
words
build
appropriate
representation
better
first
design
convenient
representation
write
program
read
understand
input
file
specifies
ll
need
consider
problem
bit
program
main
job
discover
shortest
distance
time
two
locations
reason
couldn
think
locations
particular
point
street
map
example
every
valid
street
address
even
valid
gps
coordinate
simplicity
ll
think
one
two
things
intersection
two
streets
point
freeway
entrance
exit
connecting
pairs
locations
map
stretches
road
order
solve
problem
ll
need
know
two
things
stretch
road
length
milesthe
current
speed
traffic
traveling
miles
per
hour
map
will
consist
two
kinds
roads
streets
freeways
street
sequence
intersections
connected
stretches
road
road
segment
length
speed
traffic
note
going
intersection
intersection
road
necessarily
going
road
length
speed
traffic
well
different
fact
street
one
way
may
even
road
segment
real
life
many
intersections
control
traffic
using
stop
signs
traffic
lights
program
will
ignore
ll
instead
assume
traffic
speeds
streets
adjusted
appropriately
downward
account
time
spent
waiting
stop
signs
lights
streets
freeways
stretches
road
traveling
opposite
directions
need
treat
side
freeway
entirely
separate
road
reasons
streets
also
sequence
ramps
one
side
freeway
sometimes
different
sequence
opposite
side
example
405
south
transition
ramp
leads
73
south
405
north
ramp
since
streets
freeways
properties
purposes
program
can
think
streets
freeways
roads
sequence
locations
connected
stretches
road
output
program
will
trip
exists
message
trip
made
trip
sequence
visits
locations
map
froma
given
starting
location
given
ending
location
example
alex
tells
us
used
live
costa
mesa
trip
home
uci
looked
like
start
peltason
los
trancoscontinue
bison
peltasoncontinue
bison
californiacontinue
bison
73n
rampcontinue
73n
birchcontinue
73n
73n
55n
transitioncontinue
55n
bakercontinue
55n
baker
paularino
ramp
bakercontinue
baker
bristol
started
pelatason
los
trancos
ended
baker
bristol
addition
information
program
will
also
output
information
distance
miles
travel
time
segments
trip
well
overall
distance
travel
time
whole
trip
trip
made
route
starting
point
ending
point
representing
abstraction
street
map
consider
data
ll
need
represent
abstraction
task
organizing
can
seem
overwhelming
however
well
known
data
structure
represents
system
straightforward
way
directed
graph
using
directed
graph
vertices
can
represent
locations
edges
can
represent
stretches
road
connect
since
traffic
travels
one
direction
stretch
road
makes
good
sense
graph
directed
vertex
graph
will
human
readable
name
location
represents
example
vertex
might
named
culver
harvard
might
named
405n
jamboree
name
will
used
display
purposes
won
significance
algorithm
instead
vertices
numbered
uniquely
consecutively
starting
zero
vertices
numbered
0
1
approach
works
much
better
using
names
edge
will
contain
distance
two
vertices
miles
stored
double
current
speed
traffic
miles
per
hour
stored
double
trip
sequence
visits
adjacent
locations
map
locations
represented
vertices
two
locations
adjacent
edge
connecting
trip
simply
path
graph
input
program
read
input
file
can
keep
everything
straight
grading
process
write
main
method
class
called
rockandroll
project
file
contains
sample
input
files
illustrate
format
input
files
program
provide
files
can
test
code
course
test
program
using
additional
legal
input
files
blank
lines
lines
beginning
character
ignored
anywhere
appear
former
improve
readability
latter
can
put
comments
file
blank
comment
lines
can
appear
anywhere
file
sure
file
input
routine
rely
specific
location
file
input
file
separated
three
sections
names
map
locations
road
segments
connecting
trips
analyzed
first
non
blank
non
comment
line
first
section
contains
number
locations
locations
next
lines
file
ignoring
blank
comment
lines
contain
names
location
locations
will
stored
graph
vertices
verticies
numbered
consecutively
order
appear
file
starting
0
next
section
file
defines
road
segments
road
segment
will
edge
graph
first
line
section
defines
number
segments
following
appropriate
number
road
segment
definitions
segment
defined
line
four
values
vertex
number
segment
beginsthe
vertex
number
segment
endsthe
distance
covered
segment
milesthe
current
speed
traffic
segment
miles
per
hour
finally
trips
defined
section
begins
line
containing
number
trips
following
number
trip
requests
trip
request
line
three
values
starting
location
tripthe
ending
location
tripd
program
determine
shortest
distance
program
determine
shortest
driving
time
program
read
vertices
edges
file
build
graph
process
trip
requests
order
appear
content
format
output
trip
request
described
may
assume
input
file
will
formatted
described
provided
data
correct
consistent
instance
file
says
23
locations
will
23
locations
trip
lengths
times
will
positive
starting
ending
locations
trip
will
exist
however
correct
consistent
file
imply
possible
connections
map
locations
actually
exist
instance
may
way
get
point
point
way
get
back
way
get
point
point
program
handle
situations
correctly
gracefully
particular
blow
implementing
graph
two
main
approaches
can
used
implement
graph
adjacency
matrix
adjacency
list
sparse
graphs
ones
edges
relative
number
vertices
better
implemented
adjacency
lists
since
adjacency
matrix
waste
great
deal
memory
storing
many
empty
cells
matrix
street
map
sparse
graph
since
vertex
will
edges
relatively
nearby
vertices
adjacency
lists
far
superior
approach
case
required
use
represent
graph
good
way
store
adjacency
lists
place
vertex
information
cell
arraylist
corresponds
vertex
number
cell
vertex
name
reference
first
node
list
outgoing
edges
edges
store
number
adjacent
vertex
distance
vertex
time
travel
remember
adjacent
vertex
one
can
reached
current
vertex
following
one
edge
will
obviously
need
methods
build
adjacency
lists
access
get
information
particular
vertex
edge
finding
shortest
paths
problem
need
solve
finding
fastest
shortest
trip
along
network
roads
instance
single
source
positive
weighted
shortest
path
problem
words
one
particular
vertex
single
source
ll
finding
shortest
path
another
vertex
edges
positive
weight
case
distance
speed
associated
couple
well
known
algorithms
solving
problem
ll
use
one
called
dijkstra
algorithm
describe
detail
see
section
13
5
goodrich
text
may
follow
approach
elaborate
one
goodrich
another
one
implementing
dijkstra's
algorithm
must
write
actual
code
implementation
particular
copying
code
text
will
considered
plaigarism
violation
course
academic
honesty
rules
dijkstra
algorithm
actually
finds
shortest
path
start
vertex
vertices
graph
needs
calculate
order
work
actually
benefit
suppose
file
multiple
consecutive
trips
starting
vertex
measuring
thing
distance
time
dijkstra
algorithm
compute
first
trip
shortest
paths
vertices
next
trip
starts
place
using
metric
distance
time
just
completed
trip
can
just
look
shortest
path
destination
just
computed
results
previous
trip
use
approach
program
likely
real
file
contain
multiple
consecutive
trips
start
particular
place
well
designed
program
re
compute
data
already
available
vertex
dijkstra
algorithm
keeps
track
three
pieces
information
kv
dv
pv
kv
boolean
flag
indicates
whether
shortest
path
vertex
known
initially
kv
false
vertices
dv
length
shortest
known
path
start
vertex
vertex
algorithm
begins
shortest
paths
known
initially
dv
infinity
vertices
except
start
vertex
dv
0
pv
predecessor
vertex
shortest
known
path
start
vertex
initially
pv
unknown
vertices
except
start
vertex
pv
none
algorithm
proceeds
will
need
calculate
cost
individual
edges
cost
edge
will
called
calculate
cost
depends
whether
re
minimizing
driving
distance
driving
time
re
minimizing
driving
distance
number
miles
edge
re
minimizing
driving
time
number
minutes
required
drive
along
edge
given
length
traffic
speed
dijkstra
algorithm
proceeds
phases
following
steps
performed
pass
set
vertices
kv
false
select
vertex
smallest
dv
set
kv
true
vertex
picked
step
1
vertex
adjacent
edge
kw
false
test
whether
dw
greater
dv
set
dw
dv
set
pw
pass
exactly
one
vertex
kv
set
true
words
discover
one
known
shortest
path
per
pass
pseudocode
algorithm
notice
use
priority
queue
allows
easily
find
vertex
smallest
dv
step
1
vertex
set
kv
false
set
pv
unknown
none
start
vertex
set
dv
infinity
0
start
vertex
priorityqueue
pq
new
priorityqueue
pq
enqueue
start
vertex
0
pq
isempty
vertex
pq
dequeuemin
kv
false
kv
true
vertex
edge
exists
dw
dv
dw
dv
pw
pq
enqueue
dw
conclusion
main
loop
dv
value
corresponding
end
vertex
will
amount
shortest
path
can
find
actual
path
vertices
working
way
backward
end
vertex
start
vertex
following
pv
values
go
along
implies
course
need
store
pv
values
note
dv
node
remains
infinity
algorithm
completes
path
start
vertex
vertex
remember
algorithm
finished
one
trip
store
results
memory
can
look
later
subsequent
trips
turns
need
store
pv
values
reason
store
kv
values
will
true
algorithm
completes
need
store
dv
values
will
need
look
times
distances
vertex
path
anyway
since
always
output
segments
trip
can
easily
sum
calculate
total
can
see
pseudocode
dijkstra
algorithm
will
need
priority
queue
order
implement
required
implement
priority
queue
using
minimum
binary
heap
enqueues
dequeues
log
recall
minimum
binary
heap
one
root
subtree
heap
value
smaller
children
priority
queue
implemented
class
course
remember
write
code
particular
copy
heap
algorithm
straight
book
output
trip
requests
input
file
program
output
neatly
formatted
report
system
includes
leg
trip
distance
time
appropriate
total
distance
time
trip
trip
request
asks
shortest
distance
output
might
look
something
like
following
phony
trips
show
output
format
related
data
file
shortest
distance
alton
jamboree
macarthur
main
begin
alton
jamboree
continue
main
jamboree
1
1
miles
continue
jamboree
405n
ramp
0
3
miles
continue
405n
macarthur
1
3
miles
continue
macarthur
405n
ramp
0
1
miles
continue
macarthur
main
0
2
miles
total
distance
3
0
miles
hand
trip
request
asks
shortest
time
output
might
look
like
shortest
driving
time
alton
jamboree
macarthur
main
begin
alton
jamboree
continue
alton
macarthur
2
7
miles
33
7
mph
4
mins
48
8
secs
continue
main
macarthur
1
1
miles
40
1
mph
1
min
38
7
secs
total
time
6
mins
27
5
secs
printing
time
separate
components
hours
minutes
seconds
appropriate
examples
32
5
secs
2
mins
27
8
secs
13
mins
0
0
secs
3
hrs
13
mins
12
3
secs
6
hrs
0
mins
0
0
secs
zero
hours
show
zero
hours
zero
minutes
show
neither
trip
made
program
print
message
effect
including
start
end
points
something
like
make
trip
roads
north
pole
antartica
limitations
except
java
util
arraylist
may
use
collection
classes
java
util
library
linkedlist
treemap
hashmap
re
free
encouraged
use
utility
classes
scanner
parse
line
file
meaningful
components
optional
work
enhance
program
notifies
user
whenever
input
file
incorrect
don
process
trips
instance
can
check
many
location
entires
compared
number
locations
file
says
present
can
tell
user
road
segment
length
time
negative
zero
can
report
fields
missing
line
many
errors
sorts
checking
present
report
add
designation
locations
show
whether
start
end
real
roads
especially
freeways
presence
way
road
imply
way
onto
road
location
process
trips
input
file
start
start
location
end
end
location
print
error
messages
deliverables
remember
name
file
containing
main
method
rockandroll
java
place
java
files
part
program
source
folder
project
addition
completed
optional
work
include
project
folder
readme
file
explains
features
implemented
algorithms
used
implement
zip
project
folder
submit
zip
file
checkmate
minor
revision
make
clear
trip
made
message
effect
printed
norman
jacobson
may
2012
originally
written
alex
thornton
spring
2001
portions
description
dijkstra
algorithm
based
description
data
structures
algorithms
object
oriented
design
patterns
java
bruno
preiss
revised
ics
23
fall
2001
norman
jacobson
september
2001
minor
revisions
norman
jacobson
december
2001
march
2002
may
2002
june
2002
revised
alex
thornton
fall
2002
minor
revisions
norman
jacobson
december
2002
january
2004
minor
revisions
norman
jacobson
march
2004
reflect
goodrich
text
minor
revisions
norman
jacobson
june
2005
reflect
java
5
0
minor
revisions
norman
jacobson
ics23
spring
2006
march
2006
revised
stress
comment
blank
lines
can
appear
anywhere
input
file
input
file
allow
trips
map
locations
norman
jacobson
ics23
winter
2007
january
2007
minor
format
editing
norman
jacobson
december
2007
december
2008
added
readme
file
document
optional
work
norman
jacobson
january
2009
made
clear
submission
zipped
folder
norman
jacobson
february
2009
minor
format
changes
norman
jacobson
march
2009
made
explicit
dv
infinity
means
path
fixed
minor
typo
norman
jacobson
may
2009
revised
reflect
use
eclipse
thus
project
folder
effect
minor
edits
norman
jacobson
march
2010
couple
minor
edits
norman
jacobson
may
2010
march
2011
clarifications
regarding
paths
recomputed
norman
jacobson
may
2011
couple
minor
edits
norman
jacobson
march
2012
