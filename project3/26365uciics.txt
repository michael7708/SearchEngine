lab assignment a 
lab assignment a 
informatics
42
winter
2012
david
kay
uc
irvine
lab
assignment
luck
lady
tonight
assignment
due
end
lab
wednesday
january
25
enough
time
novice
python
programmer
complete
task
bearing
mind
informatics
42
six
unit
course
typically
will
require
work
outside
normally
scheduled
lab
hours
will
also
notice
specifications
assignments
course
longer
seen
good
thing
explanation
give
guidance
technical
specifications
like
novels
speed
read
just
one
time
expect
gain
information
need
plan
read
specifications
carefully
plan
go
back
read
pick
additional
details
expect
complete
assignment
pairs
following
usual
pair
programming
guidelines
may
choose
project
one
pair
programming
holiday
quarter
lots
little
details
get
really
hard
alone
suggest
try
pick
partner
whose
experience
level
relatively
close
seems
optimize
effectiveness
efficiency
partners'
learning
learn
less
effort
problem
synopsis
write
program
play
dice
game
craps
including
playing
computer
compiling
statistics
fairness
dice
handling
bets
assignment
divided
four
stages
succeeding
stage
built
upon
already
written
previous
stage
expect
design
write
test
program
according
stages
first
get
first
stage
program
working
modify
satisfy
second
stage
make
sure
stage
entirely
correct
working
perfectly
go
next
complete
stage
must
demonstrate
briefly
ta
tutor
works
correctly
go
following
stage
try
add
second
stage
features
first
stage
debugged
just
twice
large
program
search
errors
fact
breaking
problem
several
subprograms
will
speed
coding
aid
debugging
keep
getting
far
wrong
track
sometimes
students
think
yes
business
stages
nice
idea
time
it'll
take
long
wrong
will
take
time
thus
cause
frustration
unhappiness
trying
debug
whole
program
seems
longer
stages
stage
nicely
manageable
piece
taxing
will
find
program
focuses
mostly
control
structures
get
right
things
happen
right
order
including
managing
interactions
user
skills
need
program
languages
like
python
find
object
oriented
design
model
view
controller
organization
even
unit
testing
will
help
much
certainly
try
isolate
separate
functionality
like
rolling
two
dice
returning
result
separate
functions
interactive
nature
program
randomness
dice
will
lead
simply
run
interactive
tests
frequently
can
grading
score
will
depend
primarily
correctness
adherence
specifications
essentially
thing
always
far
better
implement
subset
functionality
correctly
attempt
implement
features
program
retains
bugs
secondary
aspects
score
will
include
contract
purpose
information
appropriate
reasonable
adherence
python
coding
conventions
idioms
avoidance
grossly
clumsy
stylistically
poor
code
assignments
class
code
compile
correctly
will
receive
little
credit
matter
long
hard
worked
compile
real
way
tell
statement
problem
operators
oldest
established
permanent
floating
crap
game
new
york
decided
computerize
racket
figuring
since
computer
can
shoot
craps
faster
human
games
can
played
money
can
made
sky
masterson
fingered
write
program
craps
game
played
two
six
sided
dice
die's
faces
numbered
1
6
player
shooter
rolls
dice
shooter
wins
right
away
total
two
faces
natural
7
11
craps
2
3
12
shooter
loses
anything
else
becomes
shooter's
point
shooter
keeps
rolling
either
winning
making
point
rolling
number
losing
crapping
rolling
7
rolls
2
3
11
12
special
meaning
shooter
trying
make
point
stage
stage
will
write
interactive
program
play
single
game
craps
complete
stage
produce
sample
sessions
like
following
welcome
sky
masterson's
craps
game
roll
7
natural
shooter
wins
thank
playing
another
possible
session
welcome
sky
masterson's
craps
game
roll
6
point
6
roll
12
roll
12
roll
4
roll
10
roll
7
crapped
shooter
loses
thank
playing
use
reference
materials
online
python
documentation
textbook
find
generate
random
numbers
often
just
tell
specific
details
like
need
experience
looking
things
easy
thing
find
takes
ten
minutes
ask
someone
rather
spending
time
stage
ii
make
enhancements
stage
separate
copy
stage
program
modify
copy
stage
modify
program
plays
succession
games
continuing
player
asks
quit
alternating
games
played
human
player
computer
human
player
plays
single
game
described
stage
computer
will
roll
dice
game
program
ask
player
like
play
another
round
answer
yes
whole
process
repeated
program
prints
final
message
halts
sample
session
stage
follows
user's
input
shown
bold
face
welcome
sky
masterson's
craps
game
game
roll
7
natural
shooter
wins
computer's
game
roll
3
craps
shooter
loses
like
play
game
roll
3
craps
shooter
loses
computer's
game
roll
8
point
8
roll
7
crapped
shooter
loses
like
play
game
roll
6
point
6
roll
8
roll
11
roll
10
roll
5
roll
7
crapped
shooter
loses
computer's
game
roll
8
point
8
roll
6
roll
10
roll
4
roll
8
made
point
shooter
wins
like
play
thank
playing
stage
iii
sky
trust
completely
though
afraid
might
make
game
crooked
pal
can
beat
odds
stage
will
demonstrate
dice
loaded
roll
function
pretty
random
modify
program
keeps
track
number
times
possible
total
2
12
comes
entire
session
player
decides
stop
playing
continue
rolling
silently
exactly
2000
rolls
plot
results
histogram
form
showing
frequently
possible
two
dice
total
2
12
came
results
might
look
like
welcome
sky
masterson's
craps
game
game
roll
2
craps
shooter
loses
computer's
game
roll
10
point
10
roll
5
roll
10
made
point
shooter
wins
like
play
thank
playing
distribution
dice
rolls
2
54
2
3
118
5
4
164
8
5
228
11
6
253
12
7
333
16
8
284
14
9
227
11
10
157
7
11
116
5
12
66
3
stage
iv
expect
every
pair
will
able
complete
final
stage
similar
students
similar
classes
past
done
singly
pair
runs
unusual
difficulty
stage
know
can
get
reasonable
score
assignment
without
assuming
turn
entirely
correct
stage
will
add
betting
game
initially
player
computer
given
500
program
will
play
series
games
alternating
turns
human
player
computer
just
stage
ii
program
ends
either
player
want
play
player
runs
money
goes
broke
play
program
will
print
betting
statistics
described
printing
final
message
ending
computer
unlike
human
player
infinite
credit
funds
can
go
zero
without
affecting
play
neither
player
may
make
negative
bet
human
player's
turn
starts
program
asks
much
player
wants
bet
human
player
needs
roll
make
point
program
will
ask
roll
much
add
current
bet
player
tries
bet
money
program
will
print
message
ask
another
amount
human
player's
turn
computer
will
simply
match
human
player's
bet
computer's
turn
computer
will
bet
half
current
funds
75
whichever
lower
computer
debt
broke
will
bet
15
amount
computer's
bet
displayed
player
will
asked
make
bet
player
can
bet
amount
computer
bet
amount
player
whichever
lower
player
attempts
bet
handle
player
bets
computer
bet
program
lowers
player's
bet
match
player
bets
less
computer
computer
will
reduce
bet
match
player's
bet
initial
bets
betting
occurs
computer's
turn
finally
program
also
keep
track
statistics
print
end
entire
session
keep
track
much
player
human
computer
bet
won
much
left
end
also
keep
track
smallest
largest
pot
game
average
pot
size
sample
session
stage
welcome
sky
masterson's
craps
game
game
much
like
bet
100
roll
10
point
10
much
like
bet
300
roll
9
much
like
bet
50
roll
8
much
like
bet
100
sorry
already
bet
450
00
bet
50
00
left
much
like
bet
0
roll
8
much
like
bet
0
roll
2
much
like
bet
0
roll
9
much
like
bet
0
roll
10
made
point
shooter
wins
950
00
computer
50
00
computer's
game
computer
bets
25
00
much
like
bet
100
bet
computer
bet
changed
25
00
roll
6
point
6
roll
10
roll
11
roll
6
made
point
shooter
wins
925
00
computer
75
00
like
play
game
much
like
bet
500
roll
7
natural
shooter
wins
1425
00
computer
425
00
computer's
game
computer
bets
15
00
much
like
bet
15
roll
8
point
8
roll
7
crapped
shooter
loses
1440
00
computer
440
00
like
play
final
game
statistics
total
amount
bet
total
amount
won
final
balance
990
00
1930
00
1440
00
computer
990
00
50
00
440
00
smallest
pot
game
30
00
largest
pot
game
1000
00
average
pot
value
495
00
thank
playing
distribution
dice
rolls
2
70
3
3
120
6
4
151
7
5
218
10
6
266
13
7
319
15
8
289
14
9
240
12
10
173
8
11
98
4
12
56
2
get
started
read
assignment
specification
reading
twice
hurt
absolutely
essential
work
small
increments
tiny
change
run
code
make
sure
behaves
correctly
novice
programmers
even
experienced
ones
sometimes
fall
terrible
trap
add
whole
lot
code
program
try
run
code
even
compile
correctly
debugging
job
enormous
point
easy
way
tell
part
code
error
add
one
tiny
portion
code
time
rerunning
addition
adding
correct
overall
development
time
shorter
can
locate
error
small
part
code
recently
added
non
computing
related
illustration
better
take
small
easy
steps
rather
trying
bite
lot
everyone
read
atul
gawande's
article
icu
checklists
keep
adding
new
functionality
small
piece
small
piece
running
testing
go
satisfied
requirements
assignment
specification
way
approach
task
less
daunting
one
hint
add
functionality
add
extra
print
statements
print
values
variables
changing
way
can
see
progress
correct
otherwise
computations
even
remove
statements
sure
code
works
development
helpful
turn
turn
via
checkmate
one
python
source
code
py
file
containing
code
final
version
completed
registered
checkmate
quarter
now
instructions
syllabus
usual
pair
submit
just
one
solution
partners'
names
clearly
listed
top
file
also
usual
every
student
must
fill
partner
evaluation
form
eee
uci
edu
can
get
partner
evaluation
lab
logging
eee
uci
edu
choosing
myeee
selecting
survey
class
participation
score
will
suffer
neglect
turned
email
nagging
option
evaluation
remember
within
day
due
date
original
concept
references
musical
guys
dolls
david
smallberg
rewritten
david
kay
september
1985
modified
use
ics
21
david
kay
october
1990
revised
norman
jacobson
winter
1991
minor
revisions
norman
jacobson
fall
1991
david
kay
winter
1992
norman
jacobson
fall
1992
david
kay
winter
1993
revised
python
informatic
42
david
kay
winter
2012
