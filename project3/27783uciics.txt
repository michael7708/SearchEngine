informatics 102 spring 2012 assignment 2 metadata reflection 
assignment 2 
informatics
102
spring
2012
news
course
reference
schedule
lab
manual
code
examples
alex
informatics
102
spring
2012
assignment
2
metadata
reflection
due
date
time
wednesday
may
2
11
59pm
introduction
programming
languages
provide
set
keywords
allow
communicate
elements
program's
meaning
language
processor
compiler
interpreter
cases
keywords
reserved
meaning
permitted
used
identifiers
names
methods
classes
etc
can
used
mean
language
defines
mean
usually
small
set
keywords
forms
part
backbone
syntax
semantics
language
part
makes
language
distinctive
recognizable
reasonable
meanings
configurable
java
course
set
keywords
classes
identified
keyword
class
loops
identified
keywords
immutability
various
kinds
specified
keyword
final
access
controlled
public
private
protected
set
keywords
available
java
limited
changes
rarely
fact
powerful
forces
counteract
kind
change
one
need
compatibility
older
java
programs
newer
versions
language
can
become
problem
keyword
adopted
matches
identifiers
used
older
programs
foreach
loop
added
java
language
decided
denote
keyword
rather
something
specific
like
foreach
another
desire
prevent
languages
becoming
bloated
special
purpose
keywords
become
prohibitively
difficult
understand
learn
teach
even
compile
call
general
purpose
programming
language
java
attempts
useful
wide
variety
problem
domains
strongly
biased
toward
one
use
java
write
line
business
applications
run
desktops
graphical
user
interfaces
write
back
end
business
logic
web
applications
write
middleware
connects
distributed
applications
together
write
games
run
mobile
devices
write
automated
tests
can
use
java
write
things
different
problem
domains
implies
different
requirements
well
different
design
elements
need
encode
one
language
one
set
keywords
places
limit
can
specify
succinctly
try
bend
java
far
direction
specific
one
domain
sometimes
fair
amount
work
make
want
even
though
java
capable
want
better
else
equal
succinct
program
better
longer
complicated
one
one
solution
problem
explore
later
quarter
design
small
languages
targeted
issues
specific
problem
domain
use
languages
areas
application
apply
even
within
confines
general
purpose
language
like
java
can
write
dramatically
simpler
flexible
designs
can
include
metadata
programs
metadata
general
purpose
program
instructions
instead
special
markings
define
whose
meanings
choose
communicate
important
domain
specific
concepts
constructs
programs
long
markings
available
language
processing
tools
like
compilers
say
preprocessors
run
compiler
know
something
problem
domain
available
accessible
run
time
can
used
affect
meaning
programs
allowing
us
effectively
introduce
new
keywords
specific
particular
program
kind
program
require
changes
underlying
programming
language
order
support
java
provides
ability
place
metadata
programs
form
annotations
built
annotations
java
library
like
suppresswarnings
webservice
also
option
creating
specific
problem
trying
solve
annotations
can
placed
many
java
constructs
including
classes
methods
constructors
parameters
fields
local
variables
annotations
available
compile
time
others
available
program
run
time
annotations
available
run
time
useful
mechanism
allow
program
find
java
provides
one
umbrella
larger
mechanism
called
reflection
allows
program
find
structure
run
time
letting
program
determine
class
object
belongs
methods
class
supports
annotations
placed
classes
methods
basis
information
objects
reflected
classes
can
created
methods
can
called
objects
fields
can
set
makes
interesting
done
dynamically
code
can
used
create
different
kinds
objects
call
different
methods
set
different
fields
without
classes
objects
methods
fields
ever
explicitly
named
code
reflection
may
sound
strange
first
many
practical
uses
program
can
find
structure
run
time
can
write
code
will
behave
differently
automatically
depending
structure
annotations
important
context
provide
something
search
well
means
configuration
consider
example
junit
popular
java
unit
testing
framework
determines
methods
tests
looks
methods
test
annotation
calls
automatically
never
write
importantly
never
maintain
code
explicitly
calls
assignment
explore
use
java
annotations
reflection
implementation
plug
architecture
program
allows
annotated
code
comforming
set
rules
plugged
without
aware
code
ahead
time
way
eclipse
able
execute
plug
ins
like
ajdt
plug
aspectj
also
learn
use
aspectj
turn
certain
run
time
errors
compile
time
errors
useful
technique
assist
plug
writers
meeting
requirements
plug
architecture
problem
assignment
given
simple
image
viewing
application
written
java
supports
ability
make
image
modifications
using
filters
built
application
single
filter
horizontally
mirrors
image
will
add
two
things
application
plug
support
allowing
application
load
filter
plug
ins
identified
configuration
file
plug
filters
marked
annotations
loaded
dynamically
using
reflection
aspect
written
aspectj
can
used
enforce
compile
time
checking
plug
ins
turning
violations
plug
architecture's
rules
compile
time
errors
starting
point
provided
code
complete
version
application
minus
plug
support
aspect
required
write
provided
zip
archive
want
extract
src
folder
new
aspectj
project
eclipse
provided
code
arranged
following
packages
inf102
assignment2
contains
main
class
application's
main
method
inf102
assignment2
ui
contains
application's
graphical
user
interface
inf102
assignment2
filters
contains
supporting
code
related
filtering
images
will
described
detail
later
write
inf102
assignment2
plugins
contains
code
related
plug
support
required
write
code
package
permitted
modify
code
packages
provided
application
works
provided
version
application
simple
user
interface
allows
open
close
image
files
format
supported
natively
java
least
jpeg
png
gif
bmp
one
image
can
open
time
necessary
close
open
image
opening
another
note
particularly
large
image
files
couple
megabytes
may
load
without
program
becoming
slow
even
running
memory
mostly
way
load
files
will
easily
accessible
two
dimensional
array
objects
can
require
lot
memory
large
image
practical
image
editor
take
different
approach
filter
menu
contains
list
filters
supported
application
provided
version
will
one
filter
called
mirror
horizontally
plug
support
added
application
will
able
load
collection
additional
filters
though
mirror
horizontally
will
always
appear
list
familiarizing
application
code
proceeding
wise
set
eclipse
project
containing
code
application
familiarize
application
running
experimenting
read
comments
provided
code
part
1
adding
plug
support
application
description
plug
architecture
plug
architecture
image
viewer
requires
plug
written
method
conforms
following
requirements
method
must
filterplugin
annotation
must
name
parameter
specified
method
must
public
non
static
method
must
return
void
take
one
filterableimage
parameter
method
work
modifying
given
filterableimage
rather
returning
new
modified
one
method
must
appear
class
argument
constructor
method
must
stateless
new
object
class
created
invocation
method
method
may
appear
class
package
methods
reside
particular
package
intent
requirement
allow
individual
plug
developers
place
plug
ins
package
structure
methods
conform
requirements
represent
plug
ins
application
quietly
ignore
format
configuration
file
configuration
file
simple
list
fully
qualified
class
names
one
per
line
contain
plug
filter
methods
conform
requirements
fully
qualified
mean
class
names
include
name
package
written
example
configuration
file
hypothetical
set
plug
ins
inf102
assignment2
plugins
newplugins
hello
moreplugins
need
inf102
assignment2
plugins
filterpluginloader
class
contains
method
called
loadfilters
starting
point
code
need
write
load
plug
ins
need
read
names
classes
listed
configuration
file
load
plug
ins
classes
using
reflection
method
will
need
return
objects
implement
filter
interface
make
appropriate
calls
reflected
methods
sure
run
time
checking
skip
filters
conform
requirements
listed
part
2
using
aspectj
check
plug
requirements
compile
time
plug
methods
required
meet
certain
requirements
listed
previous
part
part
write
one
aspects
aspectj
verify
methods
filterplugin
annotation
meet
requirements
requirements
met
raise
compile
time
error
need
separate
error
message
kind
violation
though
can
like
may
possible
check
requirements
using
aspectj
requirement
checked
briefly
describe
comment
one
aspects
deliverables
submit
code
inf102
assignment2
plugins
package
including
aspect
written
package
code
provided
checkmate
need
submit
plug
ins
though
welcome
submit
think
interesting
submit
class
files
files
generated
development
environment
java
classes
written
files
whose
names
end
java
aspects
written
files
whose
names
end
aj
follow
link
discussion
submit
assignment
via
checkmate
aware
holding
rules
specified
document
including
one
says
responsible
submitting
version
assignment
want
graded
regrade
assignment
simply
submitted
wrong
version
accident
clarifications
adjusting
language
alex
thornton
spring
2012
tweaks
clarifications
added
alex
thornton
winter
2010
originally
written
alex
thornton
winter
2009
