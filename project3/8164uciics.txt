ics 22 cse 22 project 3 what's simple true 
project 3 
project
3
simple
true
due
date
time
friday
april
29
6
59pm
project
done
individually
introduction
first
programming
language
learned
simple
language
called
basic
basic
good
teaching
tool
day
versatile
easy
learn
project
will
implement
limited
version
basic
called
facile
supports
eleven
kinds
statements
building
facile
interpreter
project
will
give
additional
practice
inheritance
polymorphism
allow
implement
linked
list
based
stack
provide
design
experience
since
will
responsible
designing
parts
project
reminder
partner
project
work
expected
completed
individually
partner
follow
pair
programming
model
previous
projects
pair
programming
great
technique
prepare
work
future
courses
individual
work
will
expected
like
opportunity
quarter
work
couple
projects
individually
facile
language
discuss
requirements
interpreter
later
write
first
talk
facile
language
facile
program
sequence
statements
one
per
line
example
facile
program
let
3
print
gosub
7
print
print
goto
10
let
4
let
6
return
print
end
line
contains
exactly
one
statement
may
blank
lines
facile
assigns
line
number
lines
first
line
program
numbered
1
second
line
numbered
2
last
line
program
period
line
execution
facile
program
always
begins
line
number
1
predefined
limit
number
lines
facile
program
variables
facile
program
26
variables
named
capital
letters
variable
capable
storing
integer
value
variables
need
declared
like
java
26
created
automatically
beginning
program
given
value
0
initially
value
variable
may
changed
let
statement
let
statement
changes
value
one
variable
examples
let
3
changes
value
variable
3let
9
changes
value
variable
9
can
print
value
variable
console
using
print
statement
print
statement
prints
value
one
variable
followed
newline
consider
following
short
facile
program
let
3
let
9
print
print
output
3
9
execution
facile
program
facile
program
executed
one
line
time
beginning
line
number
1
ordinarily
execution
proceeds
forward
line
1
will
execute
first
followed
line
2
followed
line
3
execution
continues
either
end
statement
reached
reaches
line
appears
end
program
like
programming
language
possible
facile
write
programs
execute
sequence
though
mechanisms
bit
primitive
language
like
java
goto
statement
causes
execution
jump
immediately
given
number
example
statement
goto
4
jumps
execution
line
4
example
facile
program
uses
goto
let
1
goto
4
let
2
print
program
line
1
executed
first
setting
variable
a's
value
1
goto
statement
will
immediately
jump
execution
program
line
4
skipping
second
let
line
4
prints
value
1
output
program
1
goto
statement
may
jump
either
forward
backward
meaning
following
program
legal
facile
program
see
can
figure
output
remember
value
variable
yet
assigned
let
0
let
5
goto
7
let
4
print
print
end
print
print
goto
3
goto
statements
permitted
jump
beyond
boundaries
program
lines
line
1
lines
completes
program
goto
statement
encountered
program
executed
interpreter
terminates
error
message
mathematical
operations
facile
provides
typical
mathematical
operations
can
performed
variables
addition
subtraction
multiplication
division
operation
provided
statement
changes
value
given
variable
examples
use
let
4
add
3
print
let
5
sub
3
print
let
6
mult
7
print
let
7
div
2
print
example
add
statement
adds
3
value
storing
result
printing
will
display
7
console
output
program
7
2
42
3
important
note
since
variables
facile
integers
div
statement
implements
integer
division
meaning
result
floor
integral
part
quotient
example
7
2
3
second
operand
may
zero
meaning
statement
div
0
illegal
facile
program
encounters
division
zero
immediately
terminates
error
message
statement
facile
provides
statement
acts
like
conditional
goto
compares
value
variable
value
jumps
execution
program
given
line
number
comparison
true
comparison
can
use
one
typical
relational
operators
equal
equal
let
3
let
5
4
5
print
print
program
variables
given
values
3
5
respectively
statement
compares
4
since
less
4
execution
jumps
line
5
b's
value
printed
program's
output
simply
5
statement
facile
substantially
less
flexible
java
equivalent
statement
facile
token
must
followed
exactly
five
tokens
first
must
name
variable
second
must
one
relational
operators
third
must
integer
constant
fourth
must
word
fifth
must
line
number
behave
way
might
expect
example
0
4
means
jump
line
4
equal
0
like
goto
statements
statements
permitted
jump
beyond
boundaries
program
attempt
cause
facile
program
terminate
error
message
subroutines
methods
functions
facile
simplified
mechanism
called
subroutine
subroutine
chunk
facile
code
can
called
issuing
gosub
statement
gosub
much
like
goto
causes
execution
jump
particular
line
however
gosub
also
causes
facile
program
remember
jumped
subsequently
return
statement
reached
execution
continues
line
following
gosub
statement
caused
jump
example
let
1
gosub
6
print
print
end
let
2
let
3
return
program
line
1
executed
first
setting
value
1
next
gosub
statement
reached
execution
jumps
line
6
facile
also
remembers
return
statement
reached
execution
jump
back
line
following
gosub
case
line
3
line
6
executed
next
setting
2
line
7
sets
3
now
reach
return
statement
causing
execution
jump
back
line
number
remembering
line
3
line
3
prints
value
2
line
4
prints
value
3
next
reach
line
5
end
statement
program
ends
subroutines
can
used
similarly
java
methods
except
take
parameters
return
value
consider
following
example
contains
subroutine
prints
values
time
called
let
3
gosub
10
let
4
gosub
10
let
5
gosub
10
let
1
gosub
10
end
print
print
print
return
subroutines
may
call
subroutines
meaning
two
gosub's
may
reached
return
reached
rules
similar
methods
call
methods
java
gosub
reached
facile
will
remember
line
return
return
reached
execution
will
move
line
remembered
recent
gosub
example
let
1
gosub
7
print
end
let
3
return
print
let
2
gosub
5
print
return
example
execution
begins
line
1
setting
variable
1
next
jump
line
7
gosub
remember
jump
back
line
3
encounter
return
line
7
prints
1
line
8
changes
a's
value
2
now
reached
line
9
another
gosub
statement
point
execution
will
jump
line
5
also
need
remember
jump
back
line
following
gosub
line
10
reach
return
also
need
remember
line
previous
gosub
line
3
line
5
sets
3
encounter
first
return
statement
remembering
two
lines
line
3
line
10
line
10
recently
remembered
line
execution
jumps
line
10
line
10
prints
3
now
encounter
another
return
statement
line
11
remembering
line
3
first
gosub
execution
jumps
line
3
printing
still
3
ending
program
line
4
output
program
1
3
3
like
goto
statements
gosub
statements
permitted
jump
beyond
boundaries
program
lines
line
1
lines
completes
program
gosub
statement
encountered
program
executed
interpreter
terminates
error
message
also
error
return
statement
encountered
previous
gosub
facile
program
will
immediately
terminate
print
error
message
case
well
whitespace
facile
programs
may
blank
lines
amount
placement
blank
space
words
line
considered
irrelevant
following
legal
facile
program
let
5
goto
7
let
4
print
print
end
print
print
goto
3
want
experiment
facile
interpreter
program
capable
executing
program
written
programming
language
microsoft's
first
ever
software
project
back
bill
gates
still
college
student
1970's
basic
interpreter
computer
called
altair
software
allowed
people
write
execute
basic
programs
altair
making
one
first
legitimate
personal
computers
history
launching
microsoft
path
becoming
one
largest
powerful
companies
world
providing
facile
interpreter
windows
try
sample
programs
ordinarily
use
windows
remember
machines
ics
labs
run
windows
ample
opportunity
experiment
facile
might
even
want
pair
program
experiment
zip
archive
contains
interpreter
facile
exe
facile
programs
appear
write
along
additional
ones
demonstrate
fatal
errors
division
zero
return
statement
without
corresponding
gosub
goto
non
existent
line
feel
free
write
well
unzip
archive
one
folder
double
click
program
fairly
self
explanatory
word
warning
interpreter
make
serious
attempt
handling
syntax
problems
assumes
input
file
legal
facile
program
attempt
run
input
file
legal
facile
may
see
message
error
program
also
possible
may
simply
crash
interpreter
provided
can
experiment
language
questions
comfortable
it'll
turn
implement
facile
interpreter
bear
mind
facile
interpreter
implements
much
optional
work
described
additional
challenges
section
will
behave
correctly
samples
given
write
program
project
building
facile
interpreter
program
capable
executing
facile
program
generating
correct
output
according
specification
previous
sections
since
somewhat
familiar
java
write
facile
interpreter
java
since
java
runs
many
operating
systems
means
completed
able
use
interpreter
run
facile
programs
windows
mac
os
linux
unix
several
platforms
shabby
promise
however
will
provide
foundation
multi
billion
dollar
company
will
provided
starting
point
complete
skeleton
program
bit
design
work
time
around
worry
plenty
design
advice
available
course
happy
answer
questions
encounter
problems
facile
interpreter
provided
runs
simple
graphical
user
interface
program
hand
read
one
facile
program
input
file
execute
writing
output
facile
program
console
system
can
keep
everything
straight
grading
process
please
write
main
method
class
called
facile
way
can
run
program
using
following
command
java
facile
program1
name
input
file
specified
command
line
argument
program
ran
interpreter
command
execute
facile
program
file
program1
starting
point
previous
projects
provided
wtih
code
get
started
time
will
provided
underlying
code
will
design
part
program
including
class
contains
main
method
bear
mind
main
method
will
need
class
called
facile
main
method
must
expect
filename
facile
program
passed
command
line
argument
discussed
previous
section
provided
code
available
zip
archive
interpreter
work
typical
interpreter
will
execute
program
one
statement
time
keeping
track
might
call
program
state
goes
along
case
java
interpreter
might
imagine
quite
bit
work
done
interpreter
need
keep
track
objects
creating
new
ones
garbage
collecting
old
ones
necessary
well
maintain
call
stack
along
various
tasks
required
java
programs
implementing
efficient
complete
java
interpreter
project
easily
take
many
programmer
years
facile
interpreter
much
simpler
program
since
facile
much
simpler
programming
language
interpreter
will
need
execute
facile
program
one
statement
time
updating
program
state
necessary
either
end
statement
reached
can
simply
treated
end
statement
like
program
state
consists
following
information
line
code
currently
executing
might
call
program
counter
integer
value
26
variablesthe
line
numbers
remembered
gosub
statements
since
return
jumps
back
line
following
recent
gosub
makes
sense
store
line
numbers
stack
statement
different
effect
program
state
example
let
statement
will
cause
value
one
variables
change
cause
program
counter
incremented
since
let
statement
execution
continues
next
statement
goto
statement
will
cause
program
counter
changed
line
number
specified
statement
reading
program
input
file
representing
memory
program
will
need
begin
reading
facile
program
input
file
representing
memory
number
ways
solve
problem
one
way
read
program
memory
collection
strings
strings
containing
one
line
input
program
every
time
particular
line
executed
need
parsed
see
kind
statement
executed
might
imagine
terribly
inefficient
way
implement
interpreter
since
statement
may
need
parsed
permitted
use
approach
interpreter
better
approach
one
requiring
use
instead
read
input
program
parse
represent
objects
inheritance
polymorphism
provide
natural
design
approach
problem
abstract
class
called
statement
contains
functionality
common
statements
provided
abstract
class
part
starting
point
common
functionality
statements
can
executed
though
happens
executed
different
depending
type
statement
represented
statement
class
provided
abstract
method
called
execute
kind
statement
let
print
etc
subclass
statement
can
designed
letstatement
printstatement
class
contains
fields
store
information
needed
execute
statement
case
let
statement
example
necessary
information
name
variable
value
assign
also
needed
statement
subclasses
actual
implementation
execute
method
example
provided
partially
complete
letstatement
class
starting
point
need
design
implement
others
needs
code
can
parse
input
file
create
appropriate
sequence
statement
objects
part
starting
point
provided
skeletal
implementation
class
called
parser
just
reads
input
file
returns
arraylist
statement
containing
statements
program
note
line
numbers
facile
start
1
0
suggest
storing
null
first
element
arraylist
storing
actual
statement
objects
indices
beginning
1
alternative
storing
statements
beginning
index
0
will
require
error
prone
practice
adding
subtracting
one
converting
line
numbers
arraylist
indices
can
easily
lead
chaos
may
assume
input
file
contains
syntactically
legal
facile
program
acceptable
program
either
print
error
message
ignore
lines
understood
even
crash
event
given
input
file
legal
facile
good
thing
java
compilers
behave
way
will
test
interpreter
syntactically
legal
facile
programs
though
programs
may
run
time
errors
discussed
three
kinds
run
time
errors
division
zero
return
statement
without
corresponding
gosub
goto
gosub
line
outside
boundaries
program
interpreter
will
need
behave
reasonably
cases
printing
meaningful
error
message
terminating
gracefully
designing
interpreter
size
program
increases
one
difficult
obstacles
programmers
face
need
separate
concerns
one
primary
strategies
programmers
use
separate
concerns
break
large
program
set
smaller
pieces
obvious
mechanism
breaking
program
object
oriented
language
java
use
classes
especially
difficult
novice
programmers
keep
concerns
separate
temptation
always
try
think
complete
picture
since
strategy
works
well
short
programs
write
first
starting
programs
become
larger
confusion
naturally
sets
complete
picture
can
difficult
keep
brain
even
moderately
small
java
programs
typically
built
many
classes
encompass
great
deal
complexity
good
design
principle
break
program
classes
relatively
small
size
even
means
creating
lot
classes
will
allow
concentrate
efforts
one
largely
absence
others
project
will
encourage
begin
thinking
programs
way
will
give
ability
write
much
larger
programs
main
tasks
program
must
perform
read
contents
input
file
parsing
line
storing
object
memory
represents
facile
statement
appearing
line
create
representation
initial
program
state
begin
executing
program
one
statement
time
execution
statement
will
cause
program
state
changed
may
also
cause
output
appear
console
continue
executing
program
end
statement
reached
suggest
breaking
program
following
way
facile
class
will
contain
main
method
suggest
little
creating
interpreter
object
passing
program's
command
line
argument
constructor
print
error
message
command
line
argument
passed
program
interpreter
class
will
oversee
execution
interpreter
one
input
file
interpretation
requires
following
sequence
steps
parsing
input
file
creating
initial
program
state
executing
one
statement
time
program
ends
actual
work
delegated
classes
interpreter
acting
manager
parser
class
parses
input
file
returns
arraylist
objects
representing
statements
stack
generic
stack
use
store
return
points
gosub
statements
since
maximum
number
gosub's
may
encountered
program
must
implement
stack
linked
list
based
stack
programstate
class
represents
state
executing
facile
program
contains
program
counter
values
26
variables
stack
return
points
gosub
statements
statement
abstract
class
represents
facile
statement
subclasses
letstatement
printstatement
etc
implement
actual
statements
provided
portions
many
classes
starting
point
good
idea
build
many
underlying
pieces
need
implement
couple
statements
say
let
print
first
afterward
add
new
kinds
statements
one
two
time
making
changes
required
underlying
pieces
implementing
stack
generically
part
starting
point
project
provided
skeleton
generic
stack
class
required
implement
stack
generically
using
skeleton
required
implement
linked
list
suggest
using
linkedlist
class
previous
project
underlying
implementation
though
may
rebuild
linked
list
functionality
directly
stack
class
prefer
use
stack
store
integers
generic
classes
versatile
can
used
store
kind
object
stack
string
stores
strings
stack
arraylist
voter
stores
arraylists
voters
however
one
wrinkle
values
primitive
types
like
int
char
objects
brings
question
store
ints
generic
classes
arraylist
stack
since
legal
create
arraylist
int
stack
char
classes
integer
character
java
library
define
object
wrappers
primitive
type
integer
object
object
stores
int
within
java
5
0
adept
converting
ints
integer
objects
back
automatically
using
new
feature
called
autoboxing
autounboxing
autoboxing
means
automatically
wrapping
primitive
value
object
autounboxing
means
automatically
unwrapping
object
giving
back
primitive
value
inside
tricky
part
knowing
declare
generic
class
appropriately
allow
store
boxed
primitive
values
suppose
want
store
arraylist
integers
create
one
notice
use
integer
instead
int
arraylist
integer
new
arraylist
integer
thanks
automatic
conversions
int
integer
back
can
now
treat
arraylist
though
contained
ints
instead
integers
couple
examples
statement
adds
int
3
arraylist
turns
java
will
automatically
wrap
int
integer
object
relevant
performance
perspective
wrapping
takes
time
add
3
fetching
values
arraylist
can
fetch
int
instead
integer
object
java
automatically
unwrapping
object
int
get
0
approach
will
handy
program
since
need
stack
integers
suggest
declaring
stack
integer
can
essentially
treat
though
really
stack
int
command
line
arguments
passing
parameters
entire
program
command
line
arguments
java
methods
can
take
parameters
allow
caller
configure
job
method
example
get
method
arraylist
class
allows
us
ask
one
elements
arraylist
requires
integer
parameter
specifies
index
element
caller
wants
want
first
element
list
call
get
parameter
0
programs
can
take
parameters
want
reason
want
method
parameters
programs
can
take
parameters
can
use
configure
program
behaves
ics
21
cse
21
may
used
program
called
javac
java
compiler
compile
java
source
files
say
example
file
called
musiclist
java
wanted
compile
command
line
run
command
javac
musiclist
java
case
javac
name
program
just
typed
javac
telling
java
compiler
run
telling
file
wanted
compile
name
program
remaining
elements
command
called
command
line
arguments
case
musiclist
java
command
line
argument
interpreted
program
name
file
compiled
java
programs
can
take
command
line
arguments
well
run
java
program
command
line
using
java
command
typically
write
command
line
java
facile
case
facile
name
class
contains
main
method
want
pass
command
line
argument
java
program
command
line
just
adding
command
just
like
use
javac
example
want
pass
filename
prog1
parameter
facile
interpreter
command
line
like
java
facile
prog1
command
line
arguments
made
available
program
can
use
configure
behavior
accessing
command
line
arguments
within
java
program
ever
wondered
signature
main
method
public
static
void
main
string
args
particular
ever
wondered
args
array
well
mystery
anymore
args
contains
command
line
arguments
example
run
java
program
way
command
line
java
myprogram
alex
happy
today
myprogram
class'
main
method
will
called
args
array
will
look
like
0123alexishappytoday
accessed
args
0
main
example
get
alex
access
args
1
get
also
since
arrays
can
tell
length
access
length
field
args
length
will
tell
many
command
line
arguments
example
args
length
will
4
program
want
pass
value
args
0
expected
filename
main
method
interpreter
class
can
use
information
know
file
parsing
interpreting
also
want
main
method
check
whether
number
arguments
anything
1
want
print
error
message
return
main
without
anything
else
setting
command
line
arguments
eclipse
one
issue
us
since
use
eclipse
rather
command
line
run
java
program
within
eclipse
type
command
command
line
right
click
file
package
explorer
select
run
java
application
set
command
line
arguments
answer
run
program
little
bit
differently
run
program
command
line
arguments
use
procedure
instead
normally
right
click
java
file
package
explorer
window
contains
main
method
case
facile
java
ensuing
menu
select
run
also
normally
instead
selecting
java
application
select
run
configurations
will
cause
window
pop
number
options
can
set
let
get
lost
options
one
thing
want
set
window
choose
arguments
tab
program
arguments
field
type
arguments
case
type
name
filename
like
interpreter
run
prog1
click
run
button
lower
right
corner
window
eclipse
will
now
execute
program
though
typed
command
command
line
java
facile
prog1
allow
eclipse
find
facile
files
place
folder
within
eclipse
workspace
corresponds
project
example
project
called
project3
find
folder
called
project3
within
eclipse
workspace
put
facile
files
note
put
bin
src
folders
within
project
aware
done
every
time
run
program
will
arguments
use
procedure
change
programs
like
ones
wrote
previous
projects
will
affected
though
testing
satisfy
testing
portion
project
required
implement
programmatic
unit
test
program
previous
project
tester
test
minimum
stack
programstate
classes
though
may
include
tests
classes
wish
may
well
find
additional
testing
helps
get
program
working
remember
tester
separate
program
separate
class
separate
main
method
facile
interpreter
executing
facile
interpreter
tests
run
facile
quick
reference
list
facile
statements
supported
interpreter
brief
description
effect
statements
var
may
name
variable
int
may
integer
constant
1
3
15
linenum
may
line
number
1
1000
statementdescriptionlet
var
intchanges
value
variable
var
integer
int
print
varprints
value
variable
var
console
add
var
intadds
int
value
variable
var
sub
var
intsubtracts
int
value
variable
var
mult
var
intmultiplies
value
variable
var
integer
int
div
var
intdivides
value
variable
var
integer
int
goto
linenumjumps
execution
program
line
numbered
linenum
var
op
int
linenumcompares
value
variable
var
integer
int
using
relational
operator
op
comparison
true
jumps
execution
program
line
numbered
linenum
statement
effect
gosub
linenumtemporarily
jumps
line
numbered
linenum
return
statement
will
cause
execution
jump
back
line
following
gosub
returnjumps
execution
program
back
line
following
recently
executed
gosub
statement
endends
program
immediately
special
marker
indicates
end
program
text
behaves
end
statement
encountered
deliverables
must
submit
java
files
including
provided
please
turn
class
files
files
generated
development
environment
follow
link
discussion
submit
project
limitations
must
implement
stack
class
furthermore
must
use
linked
list
based
implementation
may
store
stack
elements
array
arraylist
may
use
existing
java
util
stack
class
also
may
use
existing
java
util
linkedlist
class
said
may
fact
use
arraylist
store
objects
represent
statements
program
remember
program
stored
stack
stack
storing
return
points
gosub
statements
course
use
generic
arraylist
appropriately
specialized
arraylist
statement
additional
challenges
facile
interpreter
provided
implements
additional
features
want
work
interpreter
might
try
supporting
additional
features
though
required
extra
credit
offered
firstly
can
include
two
additional
statements
statementdescriptioninc
varadds
1
value
variable
var
example
statement
inc
adds
one
value
dec
varsubtracts
1
value
variable
var
example
statement
dec
subtracts
one
value
including
statements
facile
dramatically
increase
power
allow
convenient
incrementing
decrementing
can
handy
constructing
simple
loops
another
improvement
increases
expressiveness
language
quite
bit
consider
statement
let
defined
let
statement
sets
value
variable
integer
constant
imagine
wanted
set
value
variable
equal
value
variable
facile
defined
allow
fundamental
operation
reason
fact
interpreter
provided
many
places
integer
constant
may
normally
appear
facile
program
possible
allow
name
variable
appear
instead
case
print
also
allow
integer
constant
instead
variable
name
example
statements
may
given
interpreter
let
sets
value
equal
value
print
3
prints
integer
constant
3
console
add
adds
value
value
storing
result
sub
mult
div
similar
add
statement
aboveif
4
jumps
line
4
less
equal
3
4
jumps
line
4
3
less
equal
4
9
4
jumps
line
4
4
less
equal
9
extent
facile
supported
interpreter
provided
interested
discussing
approaches
implementing
suggestions
happy
chat
might
also
consider
designing
implementing
new
statements
accomplish
important
goals
others
choosing
allow
facile
programmers
put
comments
code
bring
interesting
question
design
language
line
numbers
counted
lines
contain
code
define
additional
variables
can
store
string
values
instead
integers
basic
language
names
variables
trailing
characters
might
variables
capable
storing
string
add
statement
perhaps
variant
print
statement
output
string
text
string
literal
value
string
variable
console
allow
statement
compare
two
string
variables
compare
string
variable
string
literal
add
statement
read
integer
string
console
store
variable
acknowledgements
imported
eric
hennigan's
ics
22
turn
adapted
alex
thornton's
version
developed
many
years
