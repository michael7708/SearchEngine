ics 142 winter 2004 assignment 4 
assignment 4 
ics
142
winter
2004
news
course
reference
schedule
lab
manual
ics
142
newsgroup
alex
ics
142
winter
2004
assignment
4
due
date
time
thursday
march
4
11
59pm
introduction
discussed
outset
course
doubt
heard
read
two
major
types
language
processors
compilers
interpreters
compilers
translate
program
one
language
equivalent
program
another
often
lower
level
language
interpreters
execute
program
generate
output
sense
translating
program
source
target
language
executes
though
overall
aims
different
share
great
deal
functionality
compilers
interpreters
must
read
understand
structure
meaning
source
program
must
able
determine
whether
program
syntactically
semantically
erroneous
must
report
errors
usable
fashion
noted
interpreter
may
work
executing
program
may
work
piecemeal
program
executing
language
like
monkie2004
majority
semantic
rules
can
checked
statically
program
executes
either
kind
language
processor
best
starting
phases
built
first
three
assignments
scanning
input
program
breaking
tokens
parsing
tokens
determining
syntactic
structure
program
building
intermediate
representation
program
abstract
syntax
tree
performing
static
semantic
checking
phases
completed
clear
program
syntactically
semantically
correct
least
respect
semantic
rules
can
checked
statically
convenient
tree
based
representation
program
ready
operated
upon
point
however
way
proceed
radically
different
depending
whether
intend
build
compiler
interpreter
building
compiler
may
proceed
writing
module
takes
abstract
syntax
tree
generates
flat
intermediate
representation
one
closer
machine
code
will
eventually
want
emit
want
compiler
perform
various
optimizations
reduce
possible
amount
time
memory
will
consume
executed
next
need
map
intermediate
code
machine
code
will
require
us
select
appropriate
sequence
machine
instructions
intermediate
code
instruction
well
deciding
use
registers
cache
memory
reduce
number
accesses
main
memory
worse
yet
virtual
memory
stored
disk
finally
compiler
using
knowledge
source
program
gained
phases
will
emit
target
code
hand
interpreter
concerned
rewriting
input
program
concerned
executing
determining
output
given
intermediate
representation
program
abstract
syntax
tree
interpreter
operates
traversing
evaluating
meaning
nodes
fly
example
expression
tree
rooted
addition
operation
interpreter
can
evaluate
first
evaluating
left
subtree
determining
value
evaluating
right
subtree
determining
value
finally
adding
two
values
together
yield
final
result
addition
since
interpreter
viewing
program
essentially
source
level
needs
maintain
symbol
table
declaring
variables
declarations
reached
removing
declarations
variables
fall
scope
mechanism
needs
included
support
calls
subprograms
may
either
involve
creation
maintenance
explicit
run
time
stack
complete
activation
records
simpler
approach
built
subprogram
calls
interpreter's
source
language
next
depends
kind
language
processor
intend
build
assignment
will
ask
build
upon
work
previous
assignment
extending
program
complete
monkie2004
interpreter
done
able
execute
monkie2004
programs
view
output
future
assignments
will
explore
aspects
remaining
tasks
performed
compiler
though
pointed
will
building
complete
monkie2004
compiler
quarter
changes
monkie2004
language
assignment
changes
made
syntax
static
semantic
rules
language
remain
previous
assignment
one
change
apparent
intent
language
though
involves
rule
never
formally
specified
meaning
ref
keyword
originally
intended
ref
used
signify
formal
parameter
passed
using
pass
reference
semantics
assignment
ref
keyword
may
still
appear
parameter
list
simplification
will
meaning
parameters
will
passed
value
optionally
may
implement
pass
reference
semantics
ref
wish
required
offering
extra
credit
want
ideas
implement
feel
free
contact
dynamic
semantic
rules
monkie2004
following
list
dynamic
semantic
rules
monkie2004
considered
supplement
static
semantic
rules
presented
previous
assignment
applies
programs
lexical
syntactic
static
semantic
errors
rules
cover
aspects
monkie2004
programs
meaning
run
time
rules
describe
behavior
legal
monkie2004
programs
cases
dynamic
semantic
errors
described
monkie2004
program
encounters
dynamic
semantic
error
prints
error
message
output
terminates
immediately
execution
monkie2004
program
begins
global
declarations
made
global
variables
assigned
default
initial
values
described
rules
global
declarations
made
procedure
following
signature
called
procedure
program
procedure
exists
dynamic
semantic
error
program
terminates
immediately
exist
execution
program
lasts
program
returns
dynamic
semantic
rules
monkie2004
three
types
variables
monkie2004
programs
integer
boolean
string
integer
variables
may
contain
signed
32
bit
integral
values
range
231
231
1
inclusive
coincidentally
mirrors
allowable
range
java
int
values
addition
subtraction
multiplication
division
integer
negation
work
expect
yielding
result
performing
mathematical
operation
appropriate
number
integer
operands
overflow
underflow
causes
value
wrap
around
java
231
1
1
231
considered
dynamic
semantic
error
monkie2004
means
need
write
special
code
handle
avoid
case
relational
operators
work
expect
well
given
two
integer
operands
values
operands
compared
using
given
relational
operator
yielding
boolean
result
true
comparison
true
false
otherwise
division
operation
right
operand
zero
dynamic
semantic
error
monkie2004
boolean
variables
may
contain
one
two
possible
values
true
false
number
operators
take
boolean
operands
necessary
define
effect
operator
takes
one
boolean
operand
yields
negation
value
operand
false
yields
true
true
yields
false
operator
takes
two
boolean
operands
yields
true
operands
value
true
short
circuited
meaning
operands
always
evaluated
yielding
result
operator
similar
operator
except
short
circuited
left
operand
evaluated
first
value
false
operation
yields
false
operation
yields
value
right
operand
operator
takes
two
boolean
operands
yields
false
operands
value
false
short
circuited
else
operator
similar
operator
except
short
circuited
left
operand
evaluated
first
value
true
else
operation
yields
true
else
operation
yields
value
right
operand
xor
operator
takes
two
boolean
operands
yields
true
two
operands
evaluate
different
values
xor
short
circuited
implies
operator
takes
two
boolean
operands
short
circuited
operation
left
operand
evaluated
first
value
false
implies
operation
yields
true
implies
operation
yields
value
right
operand
relational
operators
may
take
two
boolean
operands
case
behave
way
expect
compare
values
operands
yielding
true
comparison
true
false
string
variables
contain
sequence
zero
characters
character
member
unicode
character
set
represented
16
bit
character
code
surprisingly
representation
java
uses
store
strings
operators
take
string
operands
operator
takes
two
string
operands
yields
concatenation
value
right
operand
value
left
example
monkie
2004
yields
monkie2004
relational
operators
may
take
two
string
operands
case
perform
lexicographical
comparison
values
operands
operation
yields
true
comparison
true
false
otherwise
lexicographical
comparison
strings
monkie2004
behaves
fashion
similar
comparison
strings
java
using
compareto
method
information
see
link
variables
implicitly
initialized
default
value
time
declaration
integers
implicitly
initialized
zero
strings
implicitly
initialized
empty
string
booleans
implicitly
initialized
false
rule
applies
global
variables
local
variables
implicitly
declared
result
variable
functions
procedure
function
calls
behave
similarly
many
programming
languages
may
learned
previously
actual
parameters
evaluated
left
right
order
resulting
values
matched
positionally
corresponding
formal
parameters
used
initialize
first
actual
parameter's
value
used
initialize
first
formal
parameter
implicitly
declared
result
variable
function
represents
function's
return
value
return
value
function
last
value
assigned
result
function's
body
executed
result
never
assigned
return
value
default
value
assigned
result
function's
outset
block
statements
executed
executing
statement
within
order
statements
executed
following
way
first
conditional
expression
evaluated
yielding
boolean
value
value
true
block
statement
follows
keyword
executed
value
false
block
statement
follows
else
keyword
executed
loops
executed
following
way
first
conditional
expression
evaluated
yielding
boolean
value
value
false
loop
exited
control
moves
statement
follows
loop
value
true
block
statement
follows
keyword
executed
block
statement
finished
executing
control
jumps
back
top
loop
condition
tested
assignment
statements
executed
following
way
expression
right
hand
side
assignment
evaluated
yielding
value
value
placed
variable
named
left
hand
side
assignment
seven
predefined
subprograms
used
console
input
output
behave
following
way
function
read
string
string
input
cursor
appears
user
may
type
input
hit
enter
key
input
typed
prior
hitting
enter
key
combined
string
value
returned
function
procedure
print
string
string
characters
contained
string
printed
console
output
cursor
remains
line
afterward
function
read
integer
integer
input
cursor
appears
user
may
type
input
hit
enter
key
input
typed
user
pressing
enter
sequence
digits
optionally
preceded
minus
sign
converted
corresponding
integer
value
lies
within
legal
range
integer
values
function
returns
corresponding
integer
value
input
typed
user
anything
else
including
input
begins
legal
integer
additionally
contains
characters
dynamic
semantic
error
procedure
print
integer
integer
string
representation
i's
value
printed
console
positive
integers
printed
decimal
form
17
negative
integers
magnitudes
printed
decimal
form
preceded
minus
sign
17
output
cursor
remains
line
afterward
function
read
boolean
boolean
input
cursor
appears
user
may
type
input
hit
enter
key
input
typed
user
pressing
enter
exactly
string
true
function
returns
boolean
value
true
input
typed
user
pressing
enter
exactly
string
false
function
returns
boolean
value
false
input
typed
user
anything
else
including
input
begins
either
true
false
additionally
contains
characters
dynamic
semantic
error
procedure
print
boolean
boolean
b's
value
true
string
true
printed
console
otherwise
string
false
printed
console
output
cursor
remains
line
afterward
procedure
print
endline
output
cursor
moved
beginning
next
line
implementing
interpreter
assuming
completed
solution
least
part
1
previous
assignment
completed
cup
script
specifying
parser
builds
ast
input
program
support
also
set
java
classes
implement
various
kinds
ast
nodes
ast
node
present
contains
analyze
method
used
perform
static
semantic
checking
children
appropriate
given
ast
symbol
table
interpreter
relatively
straightforward
implement
get
wrong
plenty
devilish
details
conceptually
difficult
explain
much
suggested
provided
example
code
starting
point
variable
stored
symboltable
will
need
accompanied
value
since
different
variables
will
different
values
unfortunately
need
store
object
reference
variable
symboltable
case
integer
variables
store
integer
object
boolean
variables
store
boolean
object
strings
store
string
objects
initially
declaring
variable
will
given
default
value
0
integers
false
booleans
empty
string
strings
easily
support
determination
initial
values
added
getinitialvalue
method
type
class
returns
object
initial
value
variables
type
definition
node
global
variable
declarations
subprogram
declarations
needs
declare
symboltable
st
method
added
declare
method
adds
declaration
either
global
variable
subprogram
symbol
table
already
got
code
analyze
method
declares
symbols
symbol
table
can
reuse
statement
node
needs
execute
symboltable
st
method
added
depending
kind
statement
body
method
will
different
basic
idea
will
affect
whatever
changes
implied
statement
example
assignment
statement
will
cause
variable's
value
changed
expression
node
needs
evaluate
symboltable
st
method
added
returns
object
represents
expression's
value
depending
kind
expression
body
method
will
different
basic
idea
evaluate
method
will
evaluate
appropriate
kind
expression
returning
appropriate
value
example
evaluate
method
concatenationexpression
will
first
evaluate
left
hand
operand
calling
evaluate
evaluate
right
hand
operand
return
concatenation
two
results
support
procedure
function
calls
subprogram
declared
symbol
table
needs
accompanied
ast
node
represents
subprogram
example
subprogramdeclaration
class
extends
definition
solution
previous
assignment
add
subprogramdeclaration
field
subprogram
class
along
accessor
method
access
additional
parameter
subprogram
constructor
declaresubprogram
method
symboltable
class
pass
also
add
call
method
subprogramdeclaration
class
takes
two
parameters
symboltable
arraylist
values
actual
parameters
call
method
return
object
return
value
subprogram
procedures
can
return
null
functions
can
return
integer
boolean
string
objects
appropriate
since
dynamic
semantic
errors
cause
interpreter
immediately
terminate
program
created
unchecked
exception
class
called
interpreterexception
every
dynamic
semantic
error
causes
one
thrown
caught
driver
class
predefined
subprograms
can
implemented
classes
extend
subprogramdeclaration
class
equivalent
call
method
instead
traversing
ast
will
simply
consist
java
code
provided
example
starting
point
along
utility
class
called
consoleinput
likely
find
useful
one
fact
will
greatly
simplify
implementation
may
freely
assume
time
interpreter
begins
executing
input
program
free
lexical
syntactic
static
semantic
errors
example
may
assume
operands
concatenation
operation
strings
type
expression
right
hand
side
assignment
statement
matches
type
variable
left
hand
side
means
even
quite
bit
casting
can
least
assume
casts
will
proper
starting
point
officially
starting
point
assignment
solution
previous
assignment
testing
static
semantic
checker
assignment
meaning
will
test
solution
assignment
using
monkie2004
programs
syntactically
correct
violate
static
semantic
rules
able
get
previous
assignment
done
will
doubly
penalized
unless
solution
previous
assignment
reported
errors
legal
monkie2004
programs
however
unable
complete
part
1
previous
assignment
will
need
get
finished
can
proceed
one
want
use
code
starting
point
providing
suggested
approaches
example
code
interpreter
can
use
ignore
discretion
available
zip
archive
zip
archive
aware
code
provided
may
fit
perfectly
design
may
need
make
modifications
code
provided
much
uncommented
give
ideas
proceed
solution
assignment
since
will
starting
somewhat
different
solution
previous
assignment
really
practical
provide
code
surely
work
previous
designs
thought
files
provided
help
lead
good
direction
deliverables
place
completed
cup
script
java
files
comprise
program
zip
archive
submit
zip
archive
need
include
java
files
created
cup
parser
java
tokens
java
penalize
however
aware
regenerating
grading
process
sure
really
come
cup
script
please
include
files
class
files
zip
archive
also
include
example
code
starting
point
end
using
follow
link
discussion
submit
assignment
remember
accept
paper
submissions
assignments
accept
via
email
circumstances
order
keep
grading
process
relatively
simple
require
keep
program
designed
way
can
compiled
executed
following
set
commands
cup
monkie
cup
javac
java
java
driver
inputfile
limitations
limitations
previous
assignment
still
apply
one
may
make
changes
monkie2004
grammar
given
previous
assignment
except
actions
wrote
build
abstract
syntax
tree
modifications
needed
make
assignment
adding
names
symbols
right
hand
sides
rules
need
refer
associated
values
changes
cup
script
permitted
originally
written
alex
thornton
winter
2004
