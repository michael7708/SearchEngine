asst 3 syntax vars real f p 
syntax variables real functional programming 
assignment
due
monday
february
7
7
00
locking
box
cs
189
turn
everything
completed
time
grade
straggling
assignments
summary
assignment
will
work
realistic
functional
programs
also
get
experience
bnf
issues
scoping
binding
readings
review
questions
assignment
covers
sebesta
chapters
3
4
know
answers
review
questions
listed
turn
list
help
identify
important
concepts
text
hand
infer
topics
skip
omit
entirely
unimportant
chapter
3
1
7
8
14
chapter
4
1
2
4
6
14
16
18
23
part
syntax
description
sebesta
text
following
problems
problem
set
starting
page
152
pick
one
five
parts
problem
2
pick
two
four
parts
problem
4
problem
6
problem
8
problem
10
problem
11
written
trick
question
write
ebnf
grammar
html
documents
cover
html
just
handle
ten
popular
tags
including
basic
forms
use
boxed
text
instead
angle
brackets
nonterminals
get
confused
angle
brackets
part
html
part
ii
scoping
binding
sebesta
text
following
problems
problem
set
starting
page
189
labeled
problem
set
review
questions
2
4
6
9
draw
two
contour
models
problem
9
one
static
scoping
one
dynamic
class
will
help
lot
problems
section
required
feel
comfortable
scoping
issues
try
work
part
iii
functional
programming
real
programs
attached
assignment
simple
scheme
program
maintain
database
restaurant
objects
available
lab
server
load
program
edscheme
click
lambda
button
play
around
evaluate
restaurants
transcript
window
give
commands
add
remove
print
search
restaurants
represent
restaurant
names
either
double
quoted
strings
lisp
lists
symbols
just
keep
one
representation
consistently
turn
anything
demonstrate
experimentation
1
modify
program
code
gives
user
additional
menu
choice
clear
restaurants
collection
user
types
'c'
program
remove
restaurants
collection
next
command
'p'
example
nothing
printed
will
require
modifications
additions
places
can
main
part
work
easily
indeed
single
function
call
key
think
functionally
changing
values
describing
creating
new
value
2
search
command
currently
allows
user
search
restaurants
name
know
collection
select
allows
much
flexible
searching
however
modify
search
collection
routine
main
program
give
user
choice
searching
name
cuisine
user
chooses
search
cuisine
prompt
type
cuisine
perform
requested
search
appropriate
calls
collection
select
hint
consider
using
code
second
page
notes
scheme
handout
3
now
ask
much
code
taken
accomplish
thing
write
answer
worth
thinking
also
attached
assignment
implementation
binary
search
trees
scheme
available
server
load
experiment
1
happens
add
duplicate
item
item
whose
value
already
tree
2
enhance
implementation
adding
count
field
node
duplicate
added
count
increased
item
deleted
count
decreased
node
actually
deleted
count
reaches
zero
3
saving
copy
code
2
modify
implement
lazy
deletion
nodes
instead
actually
removing
node
tree
count
gets
zero
just
mark
deleted
alter
routines
searching
adding
appropriately
useful
situations
values
enter
leave
tables
repeatedly
turn
final
code
part
paper
electronically
ics
141
dropbox
masterhit
server
lab
labeled
clearly
name
student
id
4
go
back
original
binary
search
tree
code
made
modifications
parts
2
3
note
bst
add
bst
delete
common
structure
combine
find
matches
remove
matches
notes
scheme
handout
can
paper
turn
electronically
5
extra
credit
lazy
deletion
count
field
implemented
handling
normal
non
lazy
deletion
just
question
something
different
node's
count
gets
zero
modify
code
3
let
user
specify
creating
tree
whether
use
lazy
normal
deletion
need
modify
constructor
take
another
parameter
whose
value
either
'lazy
'normal
make
optional
parameter
using
normal
deletion
default
case
store
new
tree
indication
kind
deletion
uses
kind
deletion
called
6
extra
credit
allow
complex
values
like
structures
tree
essence
building
templated
class
need
supply
key
selector
key
comparison
functions
create
tree
7
extra
credit
implement
favorite
tree
balancing
algorithm
extra
credit
find
many
indications
can
sebesta
text
sebesta
get
functional
programming
scheme
treat
scheme
completely
seriously
popular
languages
look
omissions
subtleties
wording
examples
practical
applications
functional
programming
check
web
site
functional
programming
real
world
http
www
cs
bell
labs
com
wadler
realworld
also
take
look
www
scheme
com
describes
scheme
implementation
claims
generate
code
performance
nothing
turn
