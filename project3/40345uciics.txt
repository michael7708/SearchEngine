second homework 
more java scheme restaurants 
assignment
due
start
discussion
section
friday
january
17
students
take
ics
h21
now
time
play
restaurants
program
passed
class
code
available
web
http
www
ics
uci
edu
kay
courses
h21
restaurants
txt
able
part
tuesday's
lecture
first
subparts
accessible
now
1
make
copy
file
open
drscheme
evaluate
clicking
green
arrow
remember
need
use
least
pretty
big
version
scheme
interactions
lower
window
type
restaurants
run
program
typing
commands
add
remove
print
search
restaurants
simplicity
restaurants
program
asks
users
enter
nonnumeric
information
lisp
lists
parentheses
scheme
strings
makes
better
sense
enter
non
numeric
information
enclosed
double
quotes
instead
parentheses
require
change
code
perhaps
changing
prompt
user
2
modify
code
command
adding
new
restaurant
'n'
instead
'a'
require
change
two
places
3
print
collection
restaurants
nice
blank
line
separating
information
restaurant
modify
program
achieve
need
add
one
procedure
call
newline
one
place
4
modify
program
code
gives
user
additional
menu
choice
remove
erase
restaurants
collection
user
types
'e'
program
remove
restaurants
collection
example
next
command
'p'
nothing
printed
will
require
modifications
additions
places
can
main
part
work
easily
indeed
single
procedure
call
key
think
functionally
changing
values
describing
creating
new
value
5
modify
program
adds
another
menu
item
adjust
prices
dishes
served
user
types
'a'
program
ask
user
amount
positive
negative
representing
percentage
change
price
100
double
price
50
cut
half
apply
price
change
prices
restaurants
collection
hints
approach
want
cool
can
postpone
looking
might
approach
first
writing
change
price
procedure
takes
restaurant
percentage
change
number
returns
restaurant
information
except
price
changed
appropriately
next
might
write
call
collection
change
uses
change
price
changes
prices
restaurants
collection
finally
can
incorporate
calls
main
program
adding
appropriate
command
handling
6
extra
credit
rather
tough
point
search
command
currently
allows
user
search
restaurants
name
can
see
collection
select
allows
much
flexible
searching
however
modify
search
collection
routine
main
program
give
user
choice
searching
name
cuisine
user
chooses
search
cuisine
prompt
type
cuisine
perform
requested
search
appropriate
calls
collection
select
hint
consider
using
code
second
page
notes
scheme
handout
sure
comfortable
overall
organization
operation
program
day
might
asked
students
took
ics
h21
build
rudimentary
telephone
book
now
follow
conventional
java
practice
writing
class
file
whose
file
name
class
name
person
class
file
person
java
sure
spelling
capitalization
identical
compile
classes
given
directory
say
javac
java
run
code
say
java
name
class
containing
main
function
1
first
create
class
phonenumber
four
integer
fields
areacode
exchange
number
extension
phone
number
949
824
5072
ext
1000
949
areacode
824
exchange
5072
number
1000
extension
extension
field
may
zero
numbers
without
extension
course
need
constructor
getter
methods
also
tostring
method
produces
number
format
given
promptuser
method
takes
bufferedreader
parameter
returns
newly
constructed
phonenumber
asking
user
enter
number's
components
one
one
2
modify
person
class
last
week's
assignment
include
along
name
age
fields
phone
field
contains
phonenumber
object
3
create
class
called
phonebook
contain
zero
objects
person
class
implement
phonebook
array
whose
maximum
size
defined
constant
static
final
int
1000
aside
constructor
create
empty
people
class
class
methods
int
size
returns
number
person
objects
class
initially
zero
void
add
person
adds
specified
person
class
particular
order
phonebook
already
full
print
error
message
add
person
person
lookup
string
returns
person
object
whose
name
matches
parameter
may
return
first
person
matches
check
multiple
entries
name
name
found
return
null
void
remove
string
removes
phonebook
person
whose
name
matches
parameter
check
duplicate
names
void
print
prints
persons
class
compact
format
rely
tostring
method
person
class
double
averageage
returns
average
age
persons
phonebook
zero
phonebook
empty
4
create
phonebooktest
class
contains
statements
exercise
operations
class
demonstrate
critical
reader
work
properly
good
advice
testing
read
two
sections
testing
alex
thornton's
first
ics
22
lab
http
www
ics
uci
edu
thornton
ics22
labmanual
money
one
thing
think
test
program's
behavior
array
full
typing
1001
names
feasible
approach
take
5
extra
credit
may
enhance
program
one
following
ways
remember
never
start
extra
credit
required
parts
working
perfectly
enhance
promptuser
method
phonenumber
class
allow
user
type
whole
phone
number
form
parsing
string
extract
components
easy
probably
first
extra
credit
attempt
check
duplicate
names
prohibit
treat
attempt
add
duplicate
name
update
name's
field
values
return
single
person
new
phonebook
containing
matching
people
add
reverselookup
method
takes
phonenumber
returns
person
phonebook
whose
phonenumber
matches
add
partiallookup
method
takes
string
returns
new
phonebook
persons
whose
name
starts
string
need
look
methods
string
class
find
one
help
comparison
turn
checkmate
system
checkmate
ics
uci
edu
now
running
go
site
follow
instructions
associate
ics
h22
part
turn
one
file
via
checkmate
containing
modified
restaurants
code
part
turn
java
file
class
checkmate
guides
anticipate
problems
checkmate
system
used
successfully
three
quarters
trouble
confusion
arise
follow
procedure
first
wait
hour
try
issue
resolved
send
us
email
nobody's
grade
will
suffer
checkmate
problems
long
done
everything
can
based
part
ics
h22
assignments
david
kay
winter
2000
earlier
modified
david
kay
winter
2001
based
part
ics
h21
assignments
david
kay
fall
2002
earlier
modified
david
kay
winter
2003
including
logistical
information
ics
22
lab
manual
alex
thornton
david
kay
406b
computer
science
university
california
irvine
irvine
ca
92697
3425
949
824
5072
fax
949
824
4056
email
kay
uci
edu
friday
january
17
2003
12
46
pm
