ics 23 cse 23 summer 2012 project 2 black white 
project 2 
ics
23
cse
23
summer
2012
news
course
reference
schedule
lab
manual
alex
ics
23
cse
23
summer
2012
project
2
black
white
due
date
time
friday
july
20
11
59pm
introduction
othello
also
known
reversi
well
known
two
player
strategy
game
project
provided
java
program
allows
human
players
play
othello
one
another
goal
develop
intelligent
algorithm
play
othello
human
player
another
intelligent
algorithm
particular
asked
write
search
strategy
routines
will
allow
program
play
game
instead
human
player
everyone
submitted
project
run
tournament
algorithm
will
compete
written
others
tournament
course
credit
associated
competing
notoriety
putting
together
better
algorithm
anyone
else's
may
best
algorithm
win
game
othello
othello
strategy
game
played
square
board
divided
8x8
grid
rules
game
along
notion
strategy
described
wikipedia
entry
reversi
played
othello
seen
previously
remember
works
least
read
sections
wikipedia
entry
cover
rules
game
knowing
game
played
attempting
complete
project
will
save
lot
time
effort
provided
program
will
already
play
game
othello
two
human
players
will
allow
play
computer
player
create
ai
class
write
necessary
code
othelloaifactory
class
described
later
write
starting
point
code
need
complete
project
included
zip
archive
much
code
provided
jar
previous
project
provided
java
files
heavily
commented
give
sense
parts
need
written
use
parts
code
will
need
interface
need
work
two
classes
first
need
create
new
class
implements
othelloai
interface
class
needs
named
certain
way
specifically
name
class
needs
begin
othelloai
followed
eight
digit
student
id
student
id
12345678
class
called
othelloai12345678
important
include
tournament
unless
done
created
ai
class
also
need
write
one
line
code
othelloaifactory
class
comments
class
will
explain
need
everything
else
left
run
program
othello
class
contains
main
method
run
program
execute
othello
class
provided
gui
simple
straightforward
use
run
othello
window
will
appear
green
area
label
click
start
game
click
green
area
asked
specify
whether
player
controlled
human
computer
now
specify
human
implemented
ai
yet
clicking
ok
starts
game
human
controlled
player
makes
move
double
clicking
empty
square
grid
squares
constitute
valid
moves
mouse
cursor
will
turn
hand
square
valid
one
much
like
hover
link
browser
computer
simply
moves
turn
gui
animates
placing
flipping
tiles
can
see
moves
action
status
messages
display
score
remind
whose
move
necessary
terminology
will
building
rudimentary
artificial
intelligence
ai
computer
can
play
game
othello
another
instance
artificial
intelligence
task
project
fairly
narrow
can
disregard
vast
majority
code
gave
implements
either
gui
game
logic
fact
code
provided
jar
rather
source
code
reason
three
main
abstractions
need
understand
order
write
code
required
project
contents
grid
cell
represented
enumeration
othellocell
three
possible
values
othellocell
none
empty
cell
othellocell
black
cell
containing
black
tile
othellocell
white
cell
containing
white
tile
locations
grid
cells
denoted
ordered
pairs
row
column
custom
two
dimensional
arrays
java
row
numbers
column
numbers
begin
0
range
possible
locations
0
0
7
7
ai
analyzes
possibilities
will
necessary
evaluate
current
game
situation
collectively
call
description
current
situation
game
state
tersely
state
game
state
comprised
contents
grid
cell
score
game
flag
indicating
whose
turn
flag
indicating
whether
game
ended
since
possible
two
ai's
playing
makes
sense
encapsulate
ai
class
two
objects
class
created
play
one
another
implement
ai
class
implements
othelloai
interface
consists
method
called
choosemove
analyzes
possibilities
picks
ai's
next
move
since
move
denoted
square
new
tile
placed
choosemove
returns
object
type
othellomove
contains
row
number
column
number
game
trees
can
think
possible
game
states
arranged
conceptually
kind
search
tree
called
game
tree
node
tree
contains
particular
game
state
children
game
states
can
result
making
valid
move
state
root
tree
initial
game
state
othello
game
first
move
made
children
initial
state
possible
states
can
arise
black
player
moves
first
making
valid
opening
move
four
states
corresponding
four
possible
moves
black
player
permitted
make
opening
moves
illegal
considered
partial
look
othello
game
tree
picture
initial
state
four
possibilies
black
player
can
choose
initial
move
first
see
three
possible
moves
white
player
can
make
response
moves
pictured
tree
continues
grow
fashion
surprisingly
game
tree
can
grow
large
rather
quickly
find
difficult
draw
much
paper
call
leaves
game
tree
final
states
leaves
indicate
states
one
player
won
game
exhaustively
searching
possibilities
time
player
wants
pick
move
wants
pick
one
will
lead
winning
game
state
one
algorithm
determine
best
move
three
steps
apply
evaluation
function
final
game
state
evaluation
function
typically
returns
number
higher
numbers
considered
better
identify
final
state
highest
value
end
game
like
occur
best
win
us
determine
path
current
game
state
final
state
chose
make
move
takes
us
current
game
state
path
toward
chosen
final
state
assuming
complete
game
tree
disposal
simple
approach
implement
however
practical
limitations
make
approach
impossible
first
number
game
states
level
tree
grows
exponentially
work
way
tree
since
number
possible
moves
can
taken
particular
game
state
simply
enough
memory
store
entire
game
tree
can
imagine
build
game
tree
20
levels
deep
four
possible
moves
can
made
particular
state
number
nodes
tree
greater
420
one
quadrillion
nodes
besides
even
enough
memory
available
store
tree
processing
time
create
entire
game
tree
prohibitive
need
find
compromise
approach
perhaps
always
find
best
possible
outcome
makes
decision
reasonable
amount
time
using
reasonable
amount
memory
also
important
realize
just
found
path
end
game
want
mean
can
force
events
take
place
will
get
just
goal
make
moves
best
interest
opponent's
goal
opposite
algorithm
will
need
account
fact
opponent
wants
beat
much
want
beat
opponent
heuristic
search
study
artificial
intelligence
much
say
good
ways
search
toward
goal
impractical
check
possible
paths
toward
can
first
make
use
following
observation
suppose
top
player
made
move
game
bottom
player
wants
figure
best
move
make
using
search
tree
approach
discussing
bottom
player
need
concern
subtree
current
game
state
root
move
made
moves
made
can
ignored
now
possible
take
paths
tree
thus
analyzing
next
move
make
need
generate
part
search
tree
originates
current
game
state
good
step
toward
reducing
storage
needs
significantly
though
first
step
especially
early
game
might
still
huge
numbers
states
can
arise
state
currently
reduce
workload
even
can
employ
technique
called
heuristic
search
heuristic
search
generate
much
relevant
subtree
practical
using
resulting
game
states
guide
us
selecting
move
hope
will
best
even
though
time
get
full
information
move
might
turn
several
strategies
use
heart
strategy
use
notion
evaluation
function
discussed
earlier
need
rate
particular
game
state
way
can
decide
large
number
game
states
best
outcome
us
simple
approach
though
one
ignores
important
aspects
game
following
eval
state
number
tiles
belonging
number
tiles
belonging
opponent
also
important
note
need
actually
build
game
tree
memory
algorithm
will
perform
sort
depth
first
search
game
tree
meaning
can
use
parameters
recursive
method
stored
run
time
stack
perform
search
negating
need
actually
build
store
game
tree
will
dramatically
reduce
amount
memory
needed
choose
move
since
one
path
tree
will
ever
need
stored
run
time
stack
time
eight
level
deep
search
store
many
eight
nodes
rather
nodes
can
reached
eight
moves
might
huge
putting
ideas
together
can
develop
search
algorithm
will
help
us
evaluate
possible
moves
might
make
algorithm
looks
something
like
int
search
othellogamestate
int
depth
depth
0
return
evaluation
else
turn
move
valid
move
can
make
make
move
yielding
state
s'
search
s'
depth
1
return
maximum
value
returned
recursive
search
calls
else
valid
move
opponent
can
make
make
move
yielding
state
s'
search
s'
depth
1
return
minimum
value
returned
recursive
search
calls
things
need
discuss
algorithm
first
notice
two
cases
recursion
either
algorithm's
turn
currently
making
decision
opponent's
turn
case
algorithm
almost
except
algorithm's
turn
maximum
value
returned
words
algorithm
wants
make
best
possible
move
can
behalf
opponent's
turn
minimum
value
returned
assumed
opponent
will
also
make
move
best
interest
turn
worst
interest
may
assume
algorithm
will
always
black
white
player
either
black
white
player
might
played
algorithm
deciding
whether
turn
opponent's
turn
exercise
caution
ensure
making
right
decision
second
notice
depth
parameter
will
used
limit
depth
search
make
sure
search
manageable
amount
work
time
recurse
one
level
deeper
depth
reduced
one
stop
recursing
reaches
zero
need
experiment
bit
decide
depth
can
handled
reasonable
amount
time
without
limiting
depth
find
moves
will
take
orders
magnitude
longer
willing
wait
third
observe
one
player
makes
move
necessarily
case
player
will
making
next
move
occasionally
othello
player
gets
move
twice
row
care
must
taken
deciding
whose
turn
easiest
way
deal
problem
count
current
game
state
keep
track
can
always
tell
reliably
whose
turn
lastly
note
algorithm
returns
evaluation
best
state
best
state
short
calling
search
4
state
asks
following
question
looking
four
moves
future
assuming
best
can
opponent
well
will
state
turn
need
exercise
care
actually
implementing
algorithm
choosemove
will
able
call
search
use
result
help
choose
right
move
evaluation
functions
core
ai
will
set
apart
others
evaluation
function
uses
decide
good
board
configuration
leaving
open
problem
welcome
implement
evaluation
function
however
like
might
want
poke
around
web
looking
strategy
guides
information
taking
account
example
squares
othello
board
considered
important
others
intended
fun
play
program
see
can
beat
also
hope
enjoy
fine
tuning
program
trouble
beating
tournament
project's
due
date
passed
gathering
ais
together
running
tournament
determine
best
ai
fairness
explain
tournament
will
organized
ai
will
play
two
games
ai
one
black
white
primary
factor
determining
best
ai
total
percentage
games
won
draws
will
count
1
2
win
1
2
loss
first
foremost
important
win
games
secondary
factor
used
case
tie
total
number
tiles
accumulated
games
means
winning
games
big
opposed
squeaking
close
wins
important
tie
winning
small
often
still
trumps
winning
big
less
often
ai
will
given
5
seconds
cpu
time
choose
moves
running
tournament
1
7
ghz
intel
core
i7
though
multiple
cores
will
using
one
core
game
running
multiple
games
simultaneously
ai
permitted
launch
additional
threads
processes
must
work
entirely
thread
calls
choosemove
method
ai
takes
long
make
move
returns
null
throws
exception
named
according
naming
convention
violates
rules
laid
project
write
will
disqualified
tournament
outcome
tournament
will
bearing
grade
will
hopefully
motivate
think
bit
might
tune
evaluation
function
explore
alternative
ways
helping
ai
see
farther
future
required
fundamentally
use
algorithm
shown
write
though
optimizations
can
make
inclined
sure
whether
idea
permissible
ask
glad
let
know
think
good
luck
deliverables
need
turn
othelloaifactory
java
file
file
containing
ai
class
along
additional
classes
created
need
turn
files
provided
follow
link
explanation
turn
project
clarifications
writeup
conversion
provided
code
use
jar
alex
thornton
summer
2012
originally
written
alex
thornton
fall
2007
portions
taken
end
game
alex
thornton
norman
jacobson
