deliverable 3 design 
architecture design? 
ics
125
project
software
system
design
fall
quarter
1999
architecture
module
specifications
due
date
described
course
syllabus
overview
finalizing
requirements
team
shall
develop
design
fully
satisfies
requirements
application
deliverable
will
consist
two
primary
components
design
specification
consisting
high
level
architectural
design
module
specifications
integration
test
plan
may
wish
object
oriented
design
adhere
object
modeling
technique
case
design
specification
include
following
three
models
object
model
consists
object
diagrams
dynamic
model
consists
event
traces
state
diagrams
functional
model
consists
data
flow
diagrams
design
describe
system
level
objects
tasks
operations
relationships
objects
tasks
external
interaction
environment
well
object
class
specifications
detail
object
design
conjunction
object
oriented
design
team
must
develop
integration
test
plan
covering
interfaces
specified
modules
objects
integration
test
plan
must
cover
interactions
modules
objects
applying
functional
test
heuristics
black
box
module
class
interface
design
specification
developing
test
plan
interaction
modules
objects
document
must
specify
correspondence
requirements
specification
design
may
show
correspondence
way
feel
appropriate
make
notations
throughout
document
using
table
cross
references
paragraph
numbers
developing
software
design
will
undoubtedly
reveal
inadequacies
previous
documents
please
note
problems
done
solve
forget
include
meeting
minutes
performance
appraisals
document
refer
syllabus
complete
check
list
turned
make
sure
post
design
document
meeting
minutes
team
web
page
deliverable
objectives
quality
keep
mind
key
objectives
design
document
develop
coherent
representation
software
will
satisfy
requirements
identify
inadequacies
requirements
decompose
system
sub
systems
provide
related
sets
services
establish
framework
sub
system
control
communication
specify
modules
can
assigned
coding
responsibilities
document
design
decisions
rationale
provide
reference
tool
readable
developers
testers
maintainers
provide
basis
integration
testing
addition
keep
mind
design
document
exhibit
following
qualities
complete
everything
essential
described
rigorous
expressed
well
defined
notation
consistent
mismatched
interfaces
uniform
entire
document
level
detail
modifiable
document
will
change
just
like
others
desensitized
change
hides
implementation
details
secrets
confirmable
verifiable
testable
can
tell
met
design
document
contents
introduction
expand
introduction
discuss
specific
approaches
design
system
organization
document
description
essentially
just
updated
version
introduction
included
previous
deliverable
understanding
expand
understanding
section
previous
document
make
sure
add
descriptions
steps
actions
took
understand
technology
studied
phase
make
changes
section
add
text
describing
change
necessary
accurately
reflects
new
understanding
section
need
different
understanding
changed
project
plan
will
iterative
expansion
previous
submission
expand
project
plan
represent
accomplished
work
far
reassess
project
risks
expand
task
network
work
breakdown
structure
include
effort
expended
complete
task
based
work
done
revise
estimates
much
team
can
accomplish
deliver
make
changes
add
text
describing
change
necessary
will
improve
ability
team
accomplish
work
proposed
design
specification
architecture
overview
architectural
stylewhat
style
architecture
adopt
provide
reference
defining
document
system
architecture
overviewthis
place
one
great
diagram
shows
system
built
might
want
use
one
diagram
show
different
abstractions
design
data
flow
view
layers
abstraction
view
object
view
os
process
view
subsystem
narrativewhat
subsystem
means
major
limitations
current
design
modules
objects
specificationif
like
use
object
modelling
technique
omt
see
associated
omt
format
suggestion
list
modules
objects
within
system
module
object
provide
module
specification
name
definition
purpose
narrative
comment
works
interfaces
apis
using
java
terminologypublic
private
protected
data
state
keep
variables
access
access
module
object
data
fit
inheritance
uses
heirarchy
constraints
constraints
object
module
cardinality
many
will
useful
diagrams
uses
composed
design
class
diagrams
state
transition
diagrams
api's
class
category
diagrams
useful
diagrams
integration
test
plan
includes
integration
test
plan
capable
demonstrating
design
meets
functionality
specified
requirements
test
cases
cover
module
object
module
object
interaction
specified
design
consider
module
object
subsystem
apply
functional
black
box
test
heuristics
input
output
coverage
error
exception
coverage
parameters
identified
operation
interface
addition
develop
test
case
module
object
interaction
note
desired
test
cases
can
grouped
design
entity
apply
otherwise
cross
reference
listing
sort
provided
test
test
id
purpose
test
item
tested
input
specification
output
specification
expected
results
test
oracle
mechanism
test
environmental
needs
special
test
procedures
initial
demonstration
plan
will
demonstrate
tracking
control
mechanisms
configuration
management
will
modules
objects
managed
file
structure
sub
directories
makefiles
etc
persistent
data
requirements
cross
reference
modules
objects
satisfy
requirements
table
mapping
requirement
module
objectmake
sure
complete
consistent
modifications
prior
documents
requirements
requirements
changed
added
deleted
place
make
explicit
highlight
requirement
changed
added
deleted
customer
developer
etc
make
sure
requirements
meet
objectives
completeness
understandability
utility
unambiguity
consistency
requirements
changed
section
identical
submitted
earlier
glossary
defines
terms
used
specifications
portion
document
may
written
extension
glossary
submitted
requirements
may
separate
document
defines
terms
local
design
phase
additional
documentation
section
reserved
additional
documentation
developed
phase
project
specifically
course
developing
architecture
understanding
various
technologies
involved
project
changed
discovered
items
documented
important
include
information
also
list
major
background
sources
used
phase
plan
use
remainder
project
includes
references
similar
systems
procedures
requirements
presentations
reviews
see
syllabus
dates
team
prepare
15
minute
presentation
will
allow
5
minutes
questions
prepare
presentation
appropriately
presentation
include
following
context
project
brief
current
state
project
plan
highlights
design
including
overview
architecture
comprise
bulk
presentation
one
key
module
object
specifications
modifications
requirements
arose
result
design
process
overview
integration
test
plan
