smart ics core knowledge skills chart bren school information computer sciences 
ics 51 
site
will
look
much
better
browser
supports
web
standards
accessible
browser
internet
device
school
bren
ics
mission
dean's
welcome
bren
gift
donald
bren
hall
visit
bren
school
contact
us
equity
diversity
departments
computer
science
informatics
statistics
research
research
areas
research
centers
research
highlights
education
graduate
apply
degrees
tuition
costs
courses
faq
research
areas
policies
forms
contact
counselor
graduate
housing
computing
support
visit
bren
school
undergraduate
computing
support
computer
lab
information
contact
counselor
course
listings
degrees
faq
financial
aid
honors
program
housing
ics
jobs
mentor
program
policies
recently
admitted
student
council
student
life
student
resources
tuition
costs
prospective
undergrad
uci
parents
people
faculty
staff
graduate
students
community
alumni
friends
parent
programs
leadership
council
make
gift
news
get
involved
tech
talks
information
sessions
sponsor
projects
leadership
council
corporate
partners
sponsor
interns
icsjobs
butterworth
competition
bren
school
home
undergraduate
admissions
transfer
students
smart
ics
program
core
knowledge
skills
smart
ics
core
knowledge
skills
chart
core
knowledge
skills
ics
51
introductory
computer
organization
courses
6d
21
22
23
52
132
sections
catalog
description
course
prerequisites
restrictions
prerequisite
skills
concepts
minimum
knowledge
skills
ics
51
catalog
descriptionmulti
level
view
system
hardware
software
operation
interconnection
hardware
elements
instruction
sets
addressing
modes
virtual
memory
operating
systems
laboratory
work
using
low
level
programming
languages
ics
51
course
prerequisitesics
21
cse
21
grade
better
mathematics
6gics
51
restrictionsics
51
knowledge
prerequisites
skills
conceptsin
addition
skills
concepts
introduced
previous
classes
students
computing
skills
enter
class
learn
independently
first
week
quarter
use
microsoft
visual
6
0
equivalent
tool
enter
compile
debug
assembly
code
ics
51
minimum
knowledge
skillsbinary
numbers
mastery
convert
binary
numbers
decimal
octal
hexadecimal
vice
versa
two's
complement
one's
complement
sign
magnitude
representation
negative
binary
numbers
binary
arithmetic
proficiency
understand
numbers
represented
inside
computer
radix
number
systems
computer
organizationmastery
identify
different
components
simple
computer
system
identify
different
parts
central
processing
unit
cpu
explain
fetch
decode
execution
cycle
identify
different
elements
compose
data
path
explain
main
differences
primary
secondary
memories
understand
need
memory
hierarchy
memory
addressing
proficiency
understand
concepts
languages
levels
virtual
machines
principle
locality
caching
exposure
overview
historical
evolution
computers
systems
overview
different
types
secondary
memory
overview
different
input
output
devices
digital
logicmastery
basic
gates
nand
xor
boolean
algebra
create
truth
tables
implement
boolean
functions
draw
graphical
representation
circuit
combinational
circuits
multiplexers
decoders
encoders
use
combinational
circuits
solve
typical
problems
memory
decoding
function
generation
input
selection
etc
memory
organization
design
circuit
perform
address
decoding
given
memory
organization
proficiency
simplification
boolean
expressions
using
boolean
algebra
theorems
arithmetic
circuits
half
adders
full
adders
arithmetic
logic
unit
alu
design
simple
alu
latches
flip
flops
explain
differences
two
memory
elements
identify
understand
differences
different
types
flip
flops
master
slave
edge
triggered
understand
concept
clocks
elements
synchronization
exposure
able
implement
simplified
circuit
using
basic
gates
given
high
level
english
description
problem
timing
diagrams
sequential
non
combinational
circuits
external
buses
width
clocking
interruptions
understand
triggered
handled
useful
micro
architecturemastery
understand
concept
micro
programmed
control
clearly
explain
difference
execution
programs
main
memory
control
store
describe
detail
data
path
example
implementation
currently
mic
architecture
register
transfer
language
describe
micro
instructions
mic
architecture
explain
clearly
timings
phases
associated
execution
micro
instruction
implement
simplified
instruction
set
mic
architecture
ijvm
using
micro
instructions
proficiency
explain
usefulness
stack
architecture
mic
understand
memory
model
used
ijvm
convert
simple
java
programs
ijvm
exposure
understand
tradeoffs
speed
cost
given
implementation
pipelining
issues
instruction
sets
addressing
modesproficiency
design
simple
instruction
sets
expanding
operation
codes
identify
different
addressing
modes
immediate
direct
register
register
indirect
indexed
base
indexed
stack
understand
differences
different
addressing
modes
exposure
understand
design
criteria
instruction
formats
virtual
memory
cache
memorymastery
understand
need
virtual
memory
describe
different
implementations
virtual
memory
paging
segmentation
explain
concept
page
fault
handled
memory
management
unit
mmu
convert
physical
addresses
virtual
addresses
identify
memory
references
generate
page
faults
explain
need
caching
explain
basic
principle
caching
locality
principle
explain
detail
compare
different
cache
architectures
fully
associative
set
associative
directed
mapped
design
cache
memory
systems
compare
virtual
memory
cache
memory
proficiency
explain
working
set
concept
describe
different
page
replacement
policies
compare
external
internal
fragmentation
assembly
language
programmingmastery
understand
write
compile
debug
execute
assembly
language
programs
using
visual
6
0
equivalent
identify
different
registers
x86
processor
family
currently
use
pentium
family
microprocessors
identify
major
types
instructions
used
majority
assembly
programs
store
load
values
memory
loops
branches
proficiency
develop
programs
manipulate
numbers
variable
length
strings
become
familiar
subset
instruction
set
pentium
family
microprocessors
return
top
page
uc
copyright
uci
directory
intranet
site
map
icswebmaster
ics
uci
edu
updated
june
11
2012
