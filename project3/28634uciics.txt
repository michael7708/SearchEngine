sli classes cs178 notes matlab 
matlab 
classes
group
research
publications
code
login
classes
cs178
notes
matlab
brief
introduction
matlab
programming
see
cheat
sheet
list
many
useful
matlab
commands
basics
matlab
defining
scalars
vectors
matrices
vectors
matrices
row
vectors
defined
1
2
3
4
5
6
7
sequences
values
can
use
colon
form
1
7
1
2
7
7
1
1
column
vectors
ac
1
2
3
4
5
6
7
transpose
complex
conjugate
transpose
'
'
respectively
ac
1
2
3
4
5
6
7
'
matrices
defined
similarly
1
2
3
4
5
6
7
8
9
10
11
12
several
useful
constructors
matrices
a0
zeros
3
4
create
3x4
matrix
zeros
a1
ones
3
4
create
3x4
matrix
ones
ru
rand
2
2
create
2x2
matrix
uniform
random
numbers
0
1
rn
randn
3
2
create
3x2
matrix
gaussian
random
numbers
mean
0
variance
1
repmat
3
2
create
matrix
tiling
copies
3
copies
2
across
arithmetic
operations
arithmetic
operations
defined
vectors
matrices
2
adds
scalar
value
2
every
entry
similarly
power
etc
can
add
two
vectors
size
2
add
two
vectors
size
unless
one
scalar
access
entry
vector
use
parentheses
2
2
20
matrices
use
two
arguments
3
1
3
1
20
basic
operations
also
generalize
dimensional
arrays
arithemetic
operations
defined
vectors
matrices
'
dot
product
vectors
'
matrix
vector
product
element
wise
versions
times
divide
specified
vector
given
elementwise
product
arithmetic
scalars
vectors
matrices
logical
relations
0
1
2
0
0
2
test
returns
logical
vector
1
0
1
test
logical
vector
0
1
0
2
test
2
logical
vector
1
1
0
true
true
every
0
1
0
0
acts
individual
columns
returns
logical
row
vector
flow
control
best
sure
test
condition
scalar
fprintf
'some
elements
true
n'
end
loops
behave
normally
best
test
condition
scalar
15
fprintf
'while
iter
n'
1
end
loops
step
code
value
series
1
10
fprintf
'iteration
n'
2
note
changing
will
affect
next
iteration
end
7
2
9
13
fprintf
'
n'
end
can
step
arbitrary
series
plotting
line
plots
use
vectors
values
values
1
1
5
2
3
3
5
4
0
2
0
4
4
3
plot
'b
o'
blue
solid
line
circles
points
hold
plot
current
plot
plot
log
'r
'
red
dashed
line
intermediate
subjects
find
can
access
internals
vectors
indices
logical
vectors
size
0
1
2
1
idx
find
0
returns
list
indices
condition
true
idx
2
4
find
0
extracts
subseries
condition
true
0
2
find
0
0
replace
negative
entries
zero
0
1
2
1
equivalent
way
thing
using
logical
indexing
0
remove
replace
empty
positions
0
0
0
replace
negative
entries
zero
random
numbers
basics
rand
1
10
10
uniformly
distributed
random
numbers
0
1
randn
2
10
2x10
standard
gaussian
independent
variance
1
draws
pi
randperm
10
random
permutation
reordering
1
10
ceil
10
rand
1
10
random
re
sampling
bootstrap
1
10
seeds
often
useful
reproducible
random
numbers
rand
'state'
seed
use
state
random
generator
initial
seed
seed
randn
'state'
seed
idea
gaussian
random
generator
toolboxes
stats
optimization
structures
cell
arrays
cell
arrays
store
collections
mismatched
objects
different
type
size
1
rand
1
5
2
rand
1
10
3
uint32
1
5
structs
can
also
hold
collections
use
names
rather
vector
matrix
indexing
myrandom
rand
1
5
myzeros
zeros
3
3
miscellaneous
command
history
diary
record
input
output
file
diary
diary
stop
recording
diary
stop
recording
saving
loading
save
file
mat
save
variables
file
mat
load
file
mat
restore
variables
file
mat
save
file
txt
var
ascii
save
variable
var
file
txt
ascii
format
var
load
'file
txt'
load
single
variable
text
file
advanced
material
classes
old
style
classes
like
structs
encapsulation
overloading
store
member
functions
directory
myclassname
see
course
examples
details
mex
files
matlab
interpreted
can
make
slow
things
including
many
loops
repeated
computations
sometimes
compiled
code
can
faster
mex
functions
compiled
code
usually
called
matlab
definition
makes
platform
specific
must
recompiled
architecture
performance
boost
can
worth
last
modified
march
04
2012
01
24
pm
bren
school
information
computer
science
university
california
irvine
