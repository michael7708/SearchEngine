yet another configurable extensible event service 
yancees project main page 
yancees
yet
another
configurable
extensible
event
service
concepts
introduction
principles
benefits
design
evaluation
system
implementation
documentation
publications
download
introduction
project
study
use
configurable
extensible
architectures
ability
provide
versatility
publish
subscribe
infrastructures
goal
support
development
application
specific
publish
subscribe
infrastructures
also
identify
design
trade
offs
derive
set
software
engineering
principles
better
support
infrastructure
producers
consumers
process
building
evolving
re
using
versatile
middleware
evaluate
approach
comparing
yancees
traditional
versatility
strategies
implemented
existing
publish
subscribe
infrastructures
current
industrial
research
infrastructures
strive
support
application
domain
variability
evolution
adopting
different
versatility
strategies
see
survey
versatility
strategies
define
versatility
ability
software
used
different
purposes
usable
useful
way
examples
versatility
strategies
found
literature
industry
include
1
specialization
build
new
publish
subscribe
infrastructures
scratch
support
novel
requirement
sets
2
generalization
reuse
minimal
generalized
publish
subscribe
cores
siena
elvin
scribe
3
variation
reuse
one
size
fits
variable
infrastructures
corba
ns
ready
recently
4
flexibility
adopting
configurable
extensible
compositional
approaches
case
dream
facet
green
yancees
context
yancees
flexible
component
framework
allows
construction
application
specific
publish
subscribe
infrastructures
supports
customization
extension
feature
set
along
main
publish
subscribe
design
dimensions
event
publication
subscription
routing
notification
protocol
models
use
plug
ins
extensible
languages
examples
extensions
include
advanced
event
subscriptions
including
event
correlation
alternate
notification
policies
push
pull
infrastructure
protocols
mobile
applications
ad
hoc
p2p
protocols
end
user
protocols
event
source
location
browsing
event
persistence
services
fast
routing
cores
many
others
yancees
extended
configured
support
different
applications
different
domains
impromptu
project
study
effective
security
visualizatins
vavoom
visual
java
virtual
machine
ic
server
test
bed
study
contextual
collaboration
trade
offs
recently
comparing
yancees
compositional
approach
versatility
approaches
empirical
study
middleware
versatility
trade
offs
yancees
architectural
design
principles
according
cambridge
advanced
learner
dictionary
versatility
ability
change
easily
one
activity
another
ability
used
many
different
purposes
context
software
engineering
versatility
computational
system
charactetistic
allows
use
multiple
contexts
easily
supporting
requirements
different
application
domains
hence
software
engineering
perspective
specifically
context
publish
subscribe
infrastructures
versatility
ability
software
systems
withstand
diversity
constant
evolution
application
domain
requirements
useful
usable
way
experience
yancees
shows
versatility
achieved
though
proper
application
specialization
generalization
variation
extensibiliy
configurability
construction
usable
useful
infrastructures
can
support
variability
evolution
application
domain
yancees
versatility
achieved
proper
combination
following
software
engineering
principles
1
separation
concerns
criteria
modularization
2
design
change
extensibility
configurability
around
stable
publish
subscribe
infrastructures
design
dimensions
3
generality
reduce
complexity
induced
dependency
driven
incompatibilities
4
abstraction
development
domain
specific
subscription
notification
languages
thus
better
supporting
end
users
5
optional
reuse
existing
infrastructures
6
improved
usability
trhough
automation
simplicity
principles
explained
follows
separation
concerns
design
yancees
applied
separation
concerns
criteria
modularization
defining
stable
interfaces
modules
around
assumptions
likely
change
parnas
72
hence
variability
features
publish
subscribe
domain
centered
way
events
represented
event
model
way
events
filtered
routed
subscription
routing
models
way
events
delivered
notification
model
additional
interaction
ways
infrastructure
example
event
source
browsing
mobility
support
others
main
variability
dimensions
chosen
variation
points
yancees
variation
points
define
component
models
support
definition
modular
units
variation
extension
supporting
reuse
separation
concerns
also
applied
use
multiple
interfaces
end
user
publish
subscribe
interface
extension
interface
targeted
developers
anticipation
change
support
different
application
requirements
achieved
use
flexible
component
framework
supports
configurability
extensibility
along
main
variability
dimensions
design
concerns
publish
subscribe
infrastructures
component
frameworks
support
configurability
extensibility
follows
configurability
usually
case
application
domains
require
sub
set
features
infrastructure
configurability
supports
coherent
combination
publish
subscribe
characteristics
application
specific
infrastructures
allows
tailoring
infrastructure
specific
requirements
specific
application
domains
also
helps
reduction
footprint
infrastructure
cases
memory
cpu
resources
scarce
example
pdas
extensibility
constant
evolution
application
domain
requirements
make
construction
one
size
fits
approaches
fixed
set
features
inadequate
order
support
unforeseeable
requirements
main
design
dimensions
pub
sub
infrastructures
must
extensible
yancees
extensibility
supported
along
main
variability
dimensions
publish
subscribe
infrastructures
according
component
models
generality
one
way
minimize
impact
dependencies
configuration
management
costs
incompatibility
problems
adopt
general
fixed
data
representation
central
features
event
format
changes
can
virtually
impact
variability
dimensions
need
generalized
yancees
default
event
model
represented
tuple
based
attribute
value
abstraction
default
subscription
model
content
based
generalization
broadens
reuse
requiring
fewer
adaptations
existing
plug
ins
cases
models
apply
rule
use
stability
ratio
incoming
total
dependencies
design
dimension
criteria
selecting
dimension
generalize
abstraction
ability
define
domain
specific
subscription
notification
languages
support
application
developers
reducing
cognitive
distance
involved
development
event
driven
applications
words
ability
extend
configure
subscription
notification
languages
well
event
routing
protocol
models
frees
application
developers
tasks
associated
data
format
adaptation
complexity
implementing
domain
specific
features
reuse
finally
yancees
supports
reuse
many
components
can
also
reuse
existing
infrastructures
siena
elvin
others
way
achieve
interoperability
existing
publish
subscribe
networks
another
goal
reuse
leverage
features
provided
existing
generalized
infrastructures
usability
order
useful
fulfill
purpose
software
must
usable
software
consumers
perspective
usability
yancees
consequence
application
abstraction
separation
concerns
automation
abstraction
comes
use
high
level
subscription
notification
languages
simple
client
side
api
hides
users
concerns
related
runtime
selection
initialization
configuration
components
implement
features
required
end
users
ability
hide
concerns
end
users
comes
application
automation
finally
separation
extension
usage
concerns
provide
multiple
interfaces
support
infrastructure
developers
infrastructure
users
simplicity
complexity
major
source
problems
software
development
approaches
minimize
complexity
result
efficient
evolvable
less
prone
errors
solution
order
escape
one
size
fits
syndom
addition
many
variables
system
increases
complexity
configuration
costs
even
affect
performance
yancees
built
simple
core
around
different
extensions
optional
plug
ins
installed
taming
costs
versatility
application
principles
increasing
infrastructure
versatility
come
expense
extra
complexity
due
following
facts
1
different
publish
subscribe
concerns
orthogonal
words
participate
process
publishing
routing
notifying
events
define
implicit
semantic
data
control
dependencies
components
example
use
global
event
representation
assumptions
event
frequency
creates
oportunities
feature
interaction
2
moreover
complex
features
built
combination
different
components
need
communicate
defining
explicit
dependencies
different
parts
components
system
3
dynamic
characteristic
publish
subscribe
model
require
additional
support
run
time
allocation
components
response
client's
needs
4
finally
reuse
existing
infrastructures
require
support
adaptation
order
address
requirements
following
strategies
adopted
yancees
automation
user
interaction
infrastructure
build
process
static
variability
management
even
though
different
concerns
publish
subscribe
systems
can
separated
different
variability
dimensions
usually
case
concerns
completely
orthogonal
words
components
implemented
context
predefined
configuration
result
changes
one
dimension
may
affect
dimensions
example
content
based
subscription
directly
dependent
event
format
advanced
event
processing
sequence
detection
dependent
timing
assumptions
induced
different
routing
protocols
filters
subscription
languages
properly
enforced
documented
changes
apparently
unrelated
features
may
interfere
order
consequence
fundamental
problem
dependencies
must
adequately
managed
two
main
strategies
adopted
manage
issues
indirection
documentation
automation
indirection
one
way
prevent
ripple
effect
changes
different
parts
software
use
standardized
interfaces
decision
points
component
specific
adaptations
can
performed
points
apply
information
hiding
principle
defining
stable
interfaces
implemented
different
components
yancees
achieved
use
standard
component
model
interfaces
use
adapters
application
factory
design
pattern
mediator
creation
plug
ins
runtime
factory
design
pattern
supports
component
parametrization
allowing
components
tailored
particular
runtime
context
time
created
documentation
dependencies
components
system
must
made
explicit
order
prevent
misconfiguration
yancees
information
can
defined
configuration
file
allowing
automatic
checking
dependencies
automation
without
automation
process
configuring
building
versatile
infrastructure
can
become
overly
complex
error
prone
yancees
configuration
managers
dynamic
parsers
used
integrate
automatically
load
user
required
features
supporting
management
feature
dependencies
preventing
inconsistent
configurations
allowing
runtime
construction
user
tailored
subscriptions
hence
differently
variation
based
infrastructures
corba
ns
user
needs
navigate
hierarchy
objects
order
assemble
subscriptions
yancees
strives
simplify
user
interaction
infrastructure
use
subscription
notification
languages
express
queries
event
model
also
adopt
configuration
language
dedicated
express
different
configurations
dependencies
components
dynamism
dynamic
variability
management
publish
subscribe
infrastructures
inherently
interactive
subscriptions
user
defined
logical
expressions
order
content
events
directly
dependent
features
provided
infrastructure
subscriptions
also
dynamic
posted
removed
runtime
different
users
hence
order
support
many
possible
combinations
features
server
may
intrinsic
interactivity
publish
subscribe
model
yancees
support
runtime
loading
assembling
features
valid
subscription
word
subscription
language
installed
yancees
can
expressed
terms
different
commands
hence
subscriptions
used
orchestrate
composition
plug
ins
runtime
strategy
copes
configurability
customization
also
supports
co
existence
different
feature
sets
infrastructure
example
content
based
fast
topic
based
subscriptions
can
supported
time
yancees
finally
strategy
promotes
rational
allocation
resources
features
loaded
demand
copying
restricted
environments
pdas
reflexive
architecture
consequence
different
data
control
dependencies
publish
subscribe
variability
dimensions
complex
features
usually
implemented
combination
different
plug
ins
example
event
persistence
mobility
protocols
others
since
plug
ins
dynamically
allocated
need
locate
runtime
order
communicate
consequence
yancees
supports
runtime
plug
location
use
plug
registry
plug
registry
provides
single
point
access
active
components
infrastructure
supports
name
based
access
active
plug
ins
given
moment
time
support
adaptation
optional
reuse
existing
infrastructures
siena
elvin
way
achieve
interoperability
reduce
development
costs
associated
routing
model
requires
means
convert
yancees
internal
model
event
representation
subscription
notification
languages
existing
infrastructures
yancees
achieved
use
adapters
dispatcher
model
support
different
interfaces
infrastructure
users
infrastructure
developers
different
needs
respect
way
must
interact
infrastructure
users
interested
selecting
utilizing
features
provided
infrastructure
developers
interested
extending
configuring
infrastructure
meet
different
user
needs
support
different
roles
yancees
provides
different
interfaces
goal
simplify
interaction
system
exposing
necessary
api
king
user
supported
apis
publication
subscription
api
used
application
developers
extension
configuratoin
api
used
develpers
strategy
selection
implicitly
supported
subscription
language
runtime
allows
subscribers
select
different
commands
according
need
example
content
based
topic
based
filtering
yancees
benefits
yancees
incorporates
principles
strategies
component
framework
illustrated
follows
core
components
extended
configured
user
defined
plug
ins
filters
adapters
subscription
notification
models
defined
according
extensible
languages
guide
restrict
process
runtime
composition
subscription
notification
plug
ins
existing
publish
subscribe
infrastructures
siena
elvin
can
reused
routing
components
overlays
components
integrated
according
configuration
file
architecture
description
checks
coherent
composition
plug
ins
resulting
infrastructure
loaded
supporting
combined
features
figure
1
general
yancees
approach
development
application
specific
publish
subscribe
infrastructures
combining
different
features
implemented
means
plug
ins
filters
protocols
yancees
allows
built
application
specific
notifications
services
provides
following
benefits
support
right
ammount
featues
application
domain
resulting
reduced
footprint
can
support
environment
restricted
application
domains
support
subscription
languages
match
exact
need
application
thus
raising
abstraction
infrastructure
api
reducing
cognitive
distance
infrastructure
application
domain
reuse
existing
features
implemented
plug
ins
servies
filters
well
exisiting
notificaiton
servers
development
novel
publish
sbscribe
infrastructures
reduced
development
time
incresed
reusability
point
view
application
developers
interoperability
existing
publish
subscribe
infrastructures
elvin
siena
infrastructures
can
reused
publish
subscribe
cores
yancees
better
evolvability
features
can
added
removed
updated
according
chaning
needs
domain
better
maintainability
modularization
provided
plug
model
allow
better
isolation
components
facilitating
corrective
maintenance
process
component
framework
design
yancees
supports
extension
configuration
different
publish
subscribe
infrastructures
features
along
main
variation
extension
points
infrastructure
points
1
subscription
model
defines
way
information
consumers
express
interest
events
2
notification
model
defines
way
events
sent
consumers
subscriptions
match
3
event
model
prescribes
way
events
represented
4
publication
model
permits
processing
interception
events
publication
time
supporting
development
different
extensions
5
routing
model
permits
implementation
different
routing
strategies
content
based
topic
based
channel
based
others
6
protocol
model
represents
types
interaction
infrastructure
publication
subscription
events
well
different
infrastructure
protocols
internally
yancees
provide
set
component
frameworks
combine
1
dynamic
parsers
allocate
plug
ins
according
user
provided
subscriptions
subscription
notification
commands
2
input
output
publication
filters
way
intercept
event
publication
implement
global
policies
filters
3
special
static
plug
ins
implement
services
example
mdns
persistence
4
configuration
managers
dynamic
parsers
builders
orchestrate
integration
different
components
load
time
runtime
5
adapters
can
support
existing
publish
subscribe
infrastructures
ex
siena
elvin
custom
made
cores
6
set
component
frameworks
provides
interfaces
composition
rules
different
variation
points
component
framework
defines
standard
interfaces
composition
mechamisns
common
data
representations
yancees
specific
component
models
one
variability
dimensions
threee
major
composition
mechanisms
interfaces
defined
communication
plug
ins
subscription
notification
routing
models
achieved
use
listener
design
pattern
pipe
filter
design
pattern
case
input
output
filters
standard
interfaces
case
services
dispatchers
subscription
notification
plug
ins
therefore
composed
one
another
registering
other's
listeners
whereas
filters
composed
connecting
standard
input
standar
output
filter
services
prescribe
particular
interface
integration
components
mediated
plug
registry
component
permits
different
pllug
ins
locate
name
references
cases
however
composition
process
automated
example
subscription
notification
plug
ins
composed
runtime
subscription
parsing
engine
according
provided
subscription
notification
expression
defined
according
grammar
rules
subscription
notification
languages
finally
event
model
extensible
events
generic
objects
methods
content
must
especialized
yancees
users
main
components
apis
presented
figure
2
follows
figure2
general
yancees
architecture
plug
ins
red
main
extension
variation
points
apis
blue
sum
unifying
composition
approach
adopted
yancees
component
model
listener
pattern
components
producers
consumers
event
allowing
multiple
consumers
listen
existing
components
components
also
management
interface
allow
runtime
composition
listener
hierarchies
evaluation
yancees
used
implementation
different
applications
part
swirl
project
part
evaluation
ic
server
infrastructure
behind
activity
explorer
also
conducted
comparative
analysis
benefits
costs
using
yancees
compared
approaches
results
study
available
website
isr
technical
report
prototype
implementation
yancees
prototype
implemented
tested
java
j2sdk1
4
2
wsdp1
2
provides
xmlschema
validation
support
dom
parser
currently
framework
supports
core
mechanisms
presented
previous
sections
input
output
filters
subscription
notification
protocol
plug
ins
shared
services
can
configured
boot
time
use
configuration
description
files
system
ported
work
using
siena
elvin
also
supports
fast
topic
based
dispatcher
communication
client
stubs
server
implemented
using
java
rmi
protocol
following
plug
ins
implemented
event
sequence
detection
pull
push
notification
policies
polling
protocol
simple
persistence
service
memory
fast
multiplexer
dispatcher
topic
based
many
features
service
multi
threaded
supports
many
simultaneous
subscriptions
publications
non
blocking
operations
input
output
buffers
implemented
improve
overall
throughput
performance
download
regular
builds
yancees
available
folder
http
awareness
ics
uci
edu
rsilvafi
yancees
dist
last
snapshot
labeled
snapshop
directories
usually
represents
current
version
bug
fixes
using
projects
uci
current
source
code
available
cvs
repository
examples
installation
instructions
user
manual
configurations
construction
yancees
manual
page
construction
software
distributed
according
following
license
txt
software
tested
j2sdk1
4
2
java
api
xml
processing
available
sun
wsdp1
2
web
services
pack
higher
yancees
bundles
convenience
provide
examples
yancees
bundled
different
configurations
bundles
include
yancees
snapshot
jar
file
publisher
subscriber
source
codes
windows
unix
shell
scripts
provided
well
configuration
file
used
customize
yancees
minimal
yancees
august
2006
snapshot
configured
fast
switch
core
subscription
language
one
command
require
filters
messages
specified
attribute
name
siena
yancees
august
2006
snapshot
configured
siena
routing
core
provides
siena
configuration
language
extra
sequence
detector
plug
version
used
example
yancees
prototype
version
1
0august
2009
fourth
stable
public
release
yancees
prototype
available
previous
releases
can
downloaded
java
implementation
prototype
can
downloaded
follows
full
source
code
documentation
binaries
scripts
yancees
1
0
zip
binaries
base
code
without
plugins
yancees
core
1
0
jar
source
code
base
code
without
plugins
yancees
core
src
1
0
zip
documentation
yancees
doc
1
0
zip
release
notes
basically
stable
version
yancees
core
components
used
versatility
trade
offs
case
study
bug
fixes
version
supports
server
side
plug
ins
subscription
notification
protocol
server
side
services
server
side
input
output
filtersclient
side
filters
plug
insfixed
attribute
value
pair
event
format
yanceesevent
buffered
non
blocking
publication
notification
implementations
improved
throughputduring
case
studies
developed
different
plug
ins
supprting
content
based
core
topic
based
core
rules
event
sequence
detection
content
based
subscription
languag
plug
insclient
side
filters
plug
inspush
pull
notificationpublicatio
filtersprotocolsthese
plug
ins
shipped
separatedly
part
versatility
trade
offs
case
study
roberto
silveira
silva
filho
http
www
ics
uci
edu
rsilvafi
irvine
ca
june
8th
2005
click
yancees
previous
releases
roberto
silveira
silva
filho
irvine
ca
august
15th
2009
publications
technical
reports
2007
silva
filho
redmiles
managing
feature
interaction
documenting
enforcing
dependencies
software
product
lines
proceedings
9th
international
conference
feature
interactions
software
communication
systems
pp
39
54
grenoble
france
september
3
5
2007
2005
silva
filho
redmiles
striving
versatility
publish
subscribe
infrastructures
proc
5th
international
workshop
software
engineering
middleware
sem'2005
conjunction
acm
esec
fse
conference
lisbon
portugal
september
5th
6th
2005
2005
silva
filho
redmiles
survey
versatility
publish
subscribe
infrastructures
technical
report
uci
isr
05
8
university
california
irvine
may
2005
2004
silva
filho
redmiles
preserving
versatility
event
based
middleware
technical
report
uci
isr
04
7
university
california
irvine
october
2004
2004
silva
filho
de
souza
redmiles
design
experiments
yancees
versatile
publish
subscribe
service
technical
report
uci
isr
04
1
university
california
irvine
april
2004
2003
silva
filho
de
souza
redmiles
design
configurable
extensible
dynamic
notification
service
proc
second
international
workshop
distributed
event
based
systems
debs'03
conjunction
acm
sigmod
pods
conference
san
diego
ca
usa
june
8th
2003
additional
materials
slides
icfi
2007
conference
available
slides
sem
2005
workshop
available
slides
debs
2003
workshop
available
current
yancees
brochure
available
yancees
poster
presented
isr
internal
workshop
june
2004
available
acknowledgments
research
sponsored
nsf
grants
0133749
0205724
0326105
0527729
0524033
ibm
eclipse
technology
exchange
grant
intel
corporation
research
staff
roberto
silveira
silva
filho
professor
david
redmiles
institute
software
research
information
computer
science
university
california
irvine
ca
92697
3425
page
last
updated
august
8th
2008
