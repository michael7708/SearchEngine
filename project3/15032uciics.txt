cs 295 run time techniques efficient reliable program execution 
project faq 
project
faq
thanks
dr
mason
chang
providing
following
project
information
information
will
added
class
progresses
parsing
constant
pool
class
file
fread
weird
even
though
reached
end
file
get
ferror
make
sure
open
file
binary
mode
add
open
mode
read
first
line
paragraph
file
operations
google
fopen
fread
fclose
ferror
feof
print
memory
operations
printf
scanf
memcpy
memset
sprintf
malloci'm
getting
crazy
big
number
negative
number
reading
byte
byte
casted
int
will
sign
extend
value
byte
value
read
greater
127
need
chop
bottom
8
bits
can
bitwise
anding
value
0xff
function
get
size
data
type
sizeofdo
example
sure
consider
beginning
file
magic
cp
entries
e1
e2
namelen1
namechars
e3
e4
namelen2
ff
ee
cd
ab
1e
00
00
00
00
02
06
00
00
00
3c
69
6e
69
74
3e
00
02
07
00
00
00
denotes
logical
separation
data
defined
file
spec
first
parse
magic
numbers
integer
parse
constant
pool
size
integer
constant
pool
size
refers
number
entries
constant
pool
actual
byte
length
constant
pool
entry
constant
pool
either
none
0
integer
1
method
2
first
entry
constant
pool
e1
type
none
second
entry
constant
pool
e2
method
2
parse
method
constant
pool
entry
method
constant
pool
entry
starts
integer
tells
many
bytes
method
name
parse
integer
namelen1
parse
6
number
bytes
namechars
finished
parsing
one
method
constant
pool
entry
now
parse
third
entry
e3
constant
pool
none
fourth
entry
constant
pool
e4
method
2
parse
another
method
using
technique
used
previous
paragraph
will
see
cp
int
need
really
big
constant
integer
example
int
323878237
turn
java
bytecode
ldc
references
constant
pool
jvm
interpreter
know
call
method
just
name
compare
method
need
call
correct
method
name
call
can
assume
method
names
unique
implement
system
println
print
function
whenever
see
method
name
println
printint
whatever
print
function
call
method
printf
building
ssa
three
steps
1
create
basic
blocks
2
link
basic
blocks
successors
predecessors
3
create
instructions
steps
1
2
require
implement
instructions
yet
know
pc
represents
block
need
map
maps
program
counter
locations
bytecode
pc
basic
block
pc
location
represents
beginning
block
range
block
example
first
basic
block
represents
pc
0
9
map
contain
one
entry
pc
0
basic
block
0
instruction
types
need
instruction
binaryinstruction
conditioninstruction
constantint
phiinstruction
callinstruction
unconditionalbranch
conditionalbranch
returninstruction
arrays
need
newarrayinstruction
setarrayelementinstruction
getarrayelementinstruction
methods
need
parameterinstruction
method
parameters
represent
everything
method
object
list
basicblock
basicblock
object
basicblock
list
basicblock
successors
another
list
predecessors
basicblock
list
instruction
instruction
points
operands
phiinstruction
phi
list
basicblock
list
instruction
phi's
really
operand
represents
pair
basicblock
instruction
says
control
flow
comes
basic
block
bb1
phi
represents
instruction
i1
nice
trick
map
element
list
basicblock
list
instruction
index
phi
bb2
constantvalueinstruction
42
0
element
list
basicblock
can
point
bb2
0
element
list
instruction
can
point
constantvalueinstruction
42
getting
loop
headers
forward
gotos
make
sure
build
java
files
javac
command
line
eclipse
state
objects
state
keeps
track
instruction
local
variable
points
current
point
time
will
multiple
state
objects
always
operate
one
keep
updating
however
begin
states
end
states
basic
block
cloned
states
one
basic
block
three
state
objects
current
one
modify
begin
end
states
independent
states
may
point
instruction
different
state
objects
register
allocator
basic
block
order
need
build
blocks
reverse
post
order
sketch
algorithm
located
wikipedia
topological
sorting
use
version
uses
depth
first
search
kicker
add
node
list
add
beginning
list
rather
end
list
order
register
allocate
iterate
backwards
reverse
post
order
list
four
steps
1
get
blocks
reverse
post
order
2
build
live
ranges
3
build
interference
graph
4
allocate
registers
registers
never
use
esp
ebphow
phis
treated
operands
phi
get
live
ranges
added
current
phi
instruction
id
operands
phi
get
added
live
set
assembler
read
table
doom
assemble
something
mod
table
freakishly
confusing
whole
point
mod
table
build
1
byte
8
bits
total
segmented
three
parts
top
2
bits
represent
mod
access
register
next
3
bits
represent
destination
register
value
0
7
bottom
3
bits
represent
source
register
value
0
7
mod
byte
looks
like
mod
bit
dst
reg
src
register
00
000
000
say
wanted
move
ebx
edx
opcode
mov
0x8b
since
using
actual
registers
rather
referring
value
register
mod
bit
0b11
3
decimal
ebx
3
0b011
table
src
register
edx
register
2
0b010
total
need
write
two
bytes
0x8b
mov
opcode
0xd3
0b11
010
011
mod
11
dst
edx
src
ebx
can
build
lots
bit
shifting
ala
3
6
2
3
3
shift
number
3
six
bits
left
2
shift
three
bits
left
3
0b
binary
0x
hex
x86
instructions
use
add
sub
idiv
imul
mov
call
push
pop
return
jump
cmp
jcc
remember
idiv
imul
put
result
certain
registers
idiv
puts
quotient
eax
remainder
edx
imul
can
sometimes
put
certain
results
certain
registers
want
jccs
must
occur
immediatley
cmp
looking
intel
manual
know
opcode
use
look
instructions
use
r32
modrm
requests
example
add
use
0x3
destination
left
value
saying
add
r32
m32
cmp
use
3b
cmp
r32
m32
r32
left
use
cmp
m32
r32
debug
gdb
lookup
info
registers
display
pc
si
commands
info
registers
gives
values
registers
display
pc
single
steps
x86
si
checkout
examining
memory
overall
using
gdb
gdb
painful
happens
call
need
save
registers
perform
call
restore
can
pushing
registers
onto
stack
make
call
pop
stack
call
print
method
create
method
calls
printf
takes
integer
get
address
method
move
eax
perform
call
indirect
near
0xff
2
2
means
mod
rm
bit
destination
register
set
2
3
6
2
3
eax
eax
stored
address
printint
can
choose
register
make
debugging
easier
instruction
generate
x86
can
insert
nop
nop
opcode
nothing
will
help
deliniate
instructions
emitted
x86
code
resolve
phis
reach
jump
instruction
check
block
jumping
target
block
phis
get
phi
instructions
target
block
insert
moves
current
block
phi
operand
register
phi
instruction
register
getting
permission
denied
try
execute
jit
compiled
code
make
sure
mark
page
executable
mprotect
osx
linux
virtualprotect
windows
include
sys
mman
unix
osx
windows
windows
constant
int
instruction
constants
known
immediates
assembly
look
mov
r32
immi32
0xb8
rd
rd
means
0xb8
destination
register
say
wanted
move
number
10
register
ebx
011
3
remember
registers
file
registers
order
table
doom
need
0xb8
ebx
0xb8
3
one
byte
32
bit
integer
number
10
byte1
0xb8
3
byte2
6
0x0000000a
mean
opcode
rd
like
push
pop
instructions
rd
stands
destination
register
want
push
edx
edx
010
2
opcode
opcode
2
checkout
question
11
concrete
example
deal
cdecl
stuff
really
good
tutorial
generate
jump
offsets
jcc
jmp
requires
4
byte
offset
offset
location
jump
instruction
memory
address
jump
target
say
jump
instruction
exists
memory
location
0x100
wanted
jump
address
0x400
fill
4
byte
offset
0x400
0x400
0x100
0x300
jump
return
instructions
use
use
jcc
jmp
ret
near
instructions
far
ones
general
get
containers
lists
vectors
hashmaps
can
roll
making
wrappers
around
vector
class
use
std
containers
syntax
cast
void
function
pointer
void
compiledcode
assembler
assemble
method
location
jit
compiled
code
int
fp
declare
function
pointer
method
returns
int
takes
parameters
fp
int
compiledcode
cast
void
function
pointer
fp
actually
execute
heres
function
pointers
making
template
class
says
class
exist
template
classes
must
defined
header
file
cpp
file
order
include
files
cpp
files
always
include
header
files
files
never
include
header
files
unless
standard
files
iostream
etc
getting
type
defined
forward
declare
header
file
just
type
class
somethingelse
pointers
structures
info
another
student
found
resource
helpful
string
methods
strncmp
strncpy
strncat
can
convert
string
string
calling
data
method
string
null
terminated
string
strings
work
std
string
check
say
type
recognized
need
forward
declare
types
use
type
must
use
pointer
type
type
example
want
list
basicblock
method
object
method
file
list
basicblock
basicblock
forward
declare
basicblock
method
cpp
file
need
include
basicblock
uncategorized
javap
exist
install
java
jdk
jre
see
bytecodes
javac
generated
class
file
file
javap
testclasswhat
language
features
need
support
statements
local
variables
integers
arithmetic
operators
