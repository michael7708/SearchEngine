program 5 
program 5 graph class dijkstra's algorithm 
program
5
graph
implemented
via
collectionsandan
important
graph
algorithm
fundamental
data
structures
ics
23
introduction
programming
assignment
designed
improve
knowledge
using
collection
classes
especially
map
set
teaching
important
concepts
representing
graphs
writing
graph
processing
algorithms
two
problems
assignment
first
problem
write
class
named
hashgraph
implements
graph
interface
includes
wide
variety
simple
efficient
bookkeeping
operations
nodes
edges
directed
graph
second
problem
involves
implementing
important
graph
algorithm
using
hashgraph
algorithms
dijkstra's
shortest
paths
algorithm
writing
hashgraph
will
run
junit
tests
verify
bit
strong
word
correct
may
also
find
useful
test
class
driverforgraph
driver
can
individually
test
methods
classes
interactively
see
results
returned
values
state
changes
mostly
using
tostring
junit
test
driver
included
start
project
folder
project
also
included
javadoc
hashgraph
class
built
comments
java
file
already
familiar
classes
implementing
map
set
interfaces
use
standard
hashmap
hashset
implementations
actually
will
write
hashset
implementation
weekend
now
use
arrayset
work
program
just
substitute
hashset
arrayset
send
email
telling
get
hashset
difference
will
speed
operations
two
different
set
representations
will
implement
hashgraph
class
using
interfaces
classes
along
two
simple
inner
classes
implemented
specially
assignment
simpleedge
lot
like
simpleentry
hashmap
class
implementing
graph
edge
localinformation
provided
hashgraph
class
javadoc
comments
methods
along
full
implementations
simpleedge
localinformation
classes
change
former
final
two
definitely
read
understand
code
also
provided
interface
named
edgevalueio
file
edgevalueio
java
various
simple
classes
implementing
interface
standard
edge
values
examine
files
briefly
mostly
information
used
load
write
methods
need
translate
string
information
files
download
unzip
following
eclipse
project
start
use
start
working
program
part
assignmnment
will
update
turn
single
java
file
project
see
checkmate
submission
assignment
details
one
student
submit
assignment
student's
names
appear
comments
top
submitted
program
please
turn
program
finish
can
accurately
assess
progress
class
whole
assignment
print
document
carefully
read
marking
parts
contain
important
detailed
information
find
review
work
assignment
turn
files
hashgraph
class
start
folder
contains
one
main
file
examine
update
hashgraph
java
lots
others
importantly
graph
java
read
understand
can
download
run
special
executable
version
driverforgraph
help
understand
specification
problem
observe
programmer
user
interaction
implement
suggest
create
small
graphs
int
edges
enter
using
driver
call
various
methods
graph
see
behavior
hashgraph
class
acts
repository
nodes
edges
comprise
graph
organized
way
allows
us
quickly
access
information
useful
graph
algorithms
part
complexity
comes
keeping
updating
redundant
information
will
represent
graph
primarily
using
two
maps
one
nodes
keys
one
edges
keys
representation
easy
get
nodes
edges
directly
connected
node
get
value
associated
edge
nodemap
maps
key
node
name
represented
string
value
localinformation
object
stores
four
sets
nodes
edges
lead
node
destination
nodes
node
origin
node
nodes
whose
edges
lead
node
origin
nodes
node
destination
node
edges
leading
nodes
node
edges
node
origin
node
edges
nodes
leading
node
edges
node
destination
node
edgemap
maps
key
edge
value
object
generic
type
often
using
string
wrapper
class
edge's
value
can
use
class
value
clarification
although
accessor
named
getvalue
simpleedge
class
along
getorigin
getdestination
edge
values
stored
simpleedge
objects
examine
class
instead
retrieved
edgemap
getvalue
using
simpleedge
object
key
stores
origin
destination
node
partition
connected
nodes
two
sets
outgoing
incoming
using
outnodes
innodes
instance
variables
localinformation
class
likewise
partition
edges
two
sets
outgoing
incoming
using
outedges
inedges
instance
variables
localinformation
class
sets
computed
necessary
main
maps
efficient
cache
values
able
use
values
directly
without
re
computing
downside
caching
takes
space
whenever
udpate
main
maps
must
also
update
related
localinformation
sets
complexity
programming
assignment
comes
variety
methods
return
iterable
objects
typically
means
return
sets
nodes
edges
keep
track
localinformation
sets
set
interface
extends
iterable
code
using
iterable
object
can
easily
turn
concrete
set
list
supplying
iterable
object
constructor
class
iterators
allow
remove
method
work
want
code
access
iterator
nodes
edges
remove
nodes
edges
directly
cause
sorts
inconsistencies
cached
values
programmer
wreck
carefully
controlled
data
structures
removal
done
hashgraph
methods
aid
task
supplied
decorator
iterable
named
unremovable
delegates
hasnext
next
original
iterable
object
supplied
constructor
throws
unsupportedoperationexception
whenever
remove
called
brief
list
methods
graph
interface
methods
documented
fully
class
writing
already
written
bodies
methods
others
must
write
two
constructors
one
constructs
empty
graph
another
constructs
graph
copy
graph
parameter
addnode
adds
node
outgoing
incoming
nodes
edges
graph
addedge
adds
edge
graph
updating
localinformation
origin
destination
nodes
adding
nodes
automatically
first
already
exist
graph
removenode
removes
node
graph
well
edges
refer
node
updates
localinformation
affected
nodes
affected
nodes
origin
destination
nodes
removed
edges
removeedge
removes
edge
graph
updating
localinformation
origin
destination
nodes
clear
removes
nodes
edges
graph
load
reads
graph
file
see
comment
details
write
writes
graph
file
see
comment
details
details
ensure
graphs
written
file
can
read
back
getnodecount
returns
number
nodes
graph
getedgecount
returns
number
edges
graph
hasnode
determines
whether
node
graph
hasedge
determines
whether
edge
graph
getedgevalue
returns
value
associated
edge
parameter
null
edge
graph
indegree
returns
number
incoming
edges
node
outdegree
returns
number
outgoing
edges
node
degree
returns
number
edges
outgoing
incoming
node
getallnodes
returns
iterable
object
nodes
graph
whose
remove
method
disabled
getalledges
returns
iterable
object
edges
graph
whose
remove
method
disabled
getoutnodes
returns
iterable
object
nodes
graph
desinations
given
node
via
edge
whose
remove
method
disabled
getinnodes
returns
iterable
object
nodes
graph
origins
given
node
via
edge
whose
remove
method
disabled
getoutedges
returns
iterable
object
edges
graph
given
nodes
origin
whose
remove
method
disabled
getinedges
returns
iterable
object
edges
graph
given
nodes
destination
whose
remove
method
disabled
tostring
returns
textual
representation
graph
including
nodes
edges
contains
nodes
sorted
alphabetic
order
edges
sorted
destination
nodes
edges
sorted
origin
nodes
although
interface
contains
many
methods
many
similar
functionality
code
implemented
relatively
easily
via
powerful
collection
classes
used
represent
graph
methods
normally
void
say
addnode
return
entire
hashgraph
object
see
return
end
using
approach
can
cascade
method
calls
addnode
addnode
instead
writing
two
sequential
statements
addnode
addnode
huge
win
convenience
see
style
void
method
can
instead
made
return
object
often
writing
testing
debugging
one
method
class
will
immediately
lead
correct
code
one
methods
simpler
methods
called
inside
complicated
methods
many
programming
problems
understanding
concepts
involved
will
take
lots
time
writing
code
must
come
afterward
straightforward
although
bugs
will
lead
discover
yet
information
generally
exception
throwing
methods
non
existant
nodes
edges
parameters
methods
return
empty
sets
special
values
like
null
cases
removing
non
existent
nodes
edges
methods
make
state
changes
throw
exceptions
writing
testing
hashgraph
class
try
write
test
debug
one
method
time
using
driver
driverforgraph
class
basically
call
tostring
every
mutator
see
state
class
changed
correctly
start
writing
first
constructor
simplest
methods
manipulate
nodemap
addnode
getallnodes
necessary
tostring
method
hashgraph
next
write
addedge
can
try
update
localinformation
origin
destination
nodes
suggest
leaving
functionality
needed
later
use
two
methods
build
graph
next
write
getalledges
method
write
getnodecount
getedgecount
methods
can
easily
computed
respective
maps
work
successfully
write
hasnode
hasedge
getedgevalue
methods
write
getedgevalue
method
tostring
method
show
values
edges
remember
test
adding
edge
value
adding
edge
different
value
new
edge
replace
old
one
next
write
clear
load
write
methods
next
make
sure
addedge
updates
localinformation
write
indegree
outdegree
degree
methods
follow
writing
getoutnodes
getinnodes
getoutedges
getinnodes
test
adding
edges
works
corectly
finally
write
second
constructor
removeedge
method
removenode
method
will
automatically
call
removeedge
every
edge
related
node
removed
must
make
localinformation
updates
call
tostring
every
mutator
see
state
class
changed
correctly
course
can
run
junit
test
process
will
grade
part
assinment
extended
dijkstra's
algorithm
implementing
graph
algorithm
hashgraph
class
part
programming
assignment
will
implement
extended
version
dijkstra's
algorithm
using
hashgraph
class
well
various
collection
classes
algorithm
reads
graph
whose
edges
store
integers
representing
costs
computes
minimum
cost
shortest
paths
nodes
given
node
user
prompted
node
given
node
can
compute
minimum
cost
reach
list
nodes
path
fyi
solution
added
50
lines
code
main
start
folder
contains
file
dijkstra
java
contains
code
many
comments
guide
implementation
will
also
summarize
extended
dijkstra
algorithm
data
stored
objects
class
named
info
contains
name
node
cost
minimum
path
reach
node
initialzed
infinity
updated
algorithm
name
node
shortest
path
initialized
updated
algorithm
objects
class
ultimately
stored
three
collections
values
keys
map
values
priority
queue
lowest
cost
highest
priority
class
contains
comparator
prioritization
temporarily
values
set
declare
map
put
node
graph
key
map
value
new
object
info
filled
yet
prompt
user
name
starting
node
graph
keep
prompting
user
enters
node
name
graph
find
info
node
graph
set
cost
0
since
start
node
cost
reach
0
put
info
values
keys
map
priority
queue
long
priority
queue
yet
empty
process
another
node
remove
highest
priority
value
priority
queue
one
whose
cost
lowest
initially
start
node
call
min
node
now
know
least
costly
path
start
node
min
every
node
destination
min
node
get
d's
info
see
cost
infinite
greater
cost
path
start
node
min
plus
cost
edge
min
1
update
cost
info
smaller
number
2
set
predecessor
min
3
put
info
set
changed
info
objects
use
iterator
remove
changed
info
objects
priority
queue
re
add
objects
cost
priority
different
priority
queue
continue
around
loop
print
map
note
info
values
filled
minimum
cost
reach
node
node
preceding
minimum
path
repeatedly
prompt
user
name
stopping
node
graph
ignore
node
name
graph
find
cost
start
node
node
list
nodes
path
repeatedly
getting
predecessors
map
stack
will
useful
visit
nodes
backwards
stopping
node
starting
node
want
print
paths
forward
starting
node
stopping
node
overall
algorithm
uses
stack
priority
queue
set
map
collections
studied
implemented
except
queue
can
download
run
special
executable
version
dijkstra
program
help
understand
specification
problem
observe
programmer
user
interaction
implement
test
flightcost
txt
file
typing
later
names
two
cities
