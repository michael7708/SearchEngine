ariadne methodology 
methodology 
overviewmethodologypublicationsfundingpersonnel
approach
technical
dependencies
ariadne
strongly
based
concept
dependencies
dependencies
among
pieces
code
exist
components
inevitably
make
use
services
provided
components
data
structure
containing
dependency
relationships
program
called
call
graph
contains
information
components
call
services
provided
components
system
ariadne
supports
creation
visualization
call
graphs
java
programs
java
object
oriented
language
call
graph
describes
relationship
methods
invoked
methods
context
respective
classes
packages
social
dependencies
describing
dependencies
source
code
call
graph
potentially
describes
dependencies
among
software
developers
responsible
software
components
example
component
depends
component
assuming
developed
developer
implemented
developer
since
depends
can
infer
developer
depends
developer
hence
able
describe
social
dependencies
necessary
populate
call
graph
social
information
information
software
developer
wrote
part
code
update
new
visualizations
new
visualization
interface
allows
users
easily
reveal
information
technical
dependency
information
meaning
information
lost
layout
reduced
dependency
graph
keeps
important
graph
characteristics
benefits
consistent
layout
helps
highlight
information
required
reason
coordination
needs
take
advantage
available
screen
real
estate
ariadne
lays
dependency
information
type
table
based
fashion
placing
numerous
data
items
along
longest
screen
dimension
called
code
units
occupy
axis
authors
occupy
axis
ordered
alphabetically
default
users
can
reorder
axes
based
upon
queries
data
associated
meta
data
draw
connections
dependent
author
code
unit
dependent
upon
back
author
responsible
code
unit
repeat
set
socio
technical
dependency
information
project
color
line
dependency
denotes
directionality
dependency
shares
color
originating
dependent
author
viewing
dependency
information
using
hybrid
table
graph
based
approach
offers
pattern
recognition
capabilities
easy
filtering
comparisons
unfiltered
overview
dependency
information
allows
us
show
state
dependencies
entire
project
perspective
possible
recognize
patterns
way
developers
call
developers
code
prominent
code
modules
prominent
authors
even
specific
area
code
filtering
overview
artifact
reveals
connections
authors
using
artifact
managers
developers
can
focus
artifacts
different
granularities
may
undergoing
many
changes
order
determine
developers'
progress
focusing
artifact
may
allow
managers
developers
locate
developers
affecting
affected
changes
artifact
using
additive
approach
can
compare
calls
code
units
made
one
author
made
another
author
user
can
click
authors'
names
reveal
dependency
information
ariadne's
visualization
technique
preserves
ease
identifying
connections
authors
found
simple
social
network
graphs
developers
looking
axis
users
can
readily
determine
inbound
outbound
connections
project's
developers
presence
color
corresponding
author's
name
indicates
outbound
dependency
presence
authors'
colors
indicates
inbound
socio
technical
dependency
authors
ariadne's
visualization
makes
significant
departure
traditional
graph
based
approach
eliminate
advantages
method
data
display
authorship
information
node
call
graph
can
extracted
configuration
management
repository
currently
ariadne
supports
cvs
repositories
combining
information
call
graph
authorship
information
cm
repository
can
create
social
call
graph
describes
software
developers
depend
software
developers
given
piece
code
directed
edge
package
indicates
dependency
directed
edges
authors
packages
indicate
authorship
information
every
node
call
graph
might
different
options
associated
authorship
information
example
company
one
might
decide
use
information
last
person
committed
changes
file
last
committer
sometimes
considered
expert
another
company
ownership
architectures
used
since
expresses
relationship
developers
source
code
temporal
analysis
dependencies
one
ariadne's
features
ability
download
specific
releases
software
project
arbitrary
point
time
using
feature
created
following
four
graphs
four
distinct
releases
megamek
project
megamek
open
source
project
freely
available
internet
graphs
convey
idea
developers'
roles
megamek
changed
time
first
graph
illustrates
early
development
megamek
author
spiker
depended
upon
however
latest
release
tells
us
author
spiker
remains
central
project
developers
making
calls
modules
code
author
staindedg
implemented
result
expect
remaining
authors
frequently
coordinating
work
spiker
stainedg
whose
interfaces
heavily
depended
upon
ariadne's
users
envision
two
types
users
ariadne
software
developers
use
identify
colleagues
need
interact
need
informed
changes
going
impact
similar
interests
project
managers
researchers
interested
understanding
interplay
changes
architecture
software
social
impact
example
analyzing
density
social
network
identifying
bridges
network
one
can
understand
key
role
played
software
developers
coordination
process
better
understand
coordination
communication
needs
