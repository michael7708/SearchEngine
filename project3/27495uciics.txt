program 5 
program 5 
program
5
writing
classes
introduction
computer
science
ics
21
introduction
programming
assignment
designed
ensure
know
write
simple
classes
classes
filled
static
methods
referenced
class
name
normal
classes
one
can
construct
objects
storing
state
instance
variables
call
methods
objects
primarily
will
writing
methods
either
static
write
constructors
specify
use
fields
mostly
instance
variables
course
will
continue
gaining
experience
standard
control
structures
java
blocks
ifs
loops
breaks
well
basic
java
features
declarations
expression
statements
using
arithmetic
state
change
relational
logical
operators
write
class
using
iterative
enhancement
use
following
process
write
driver
testing
class
typically
console
program
allows
us
call
every
method
class
will
often
provide
later
will
examine
writing
different
kind
driver
using
junit
decide
needed
instance
variables
class
declare
possible
initialize
write
required
constructors
write
header
method
filled
minimal
body
called
stubbing
methods
class
void
method
body
can
just
method
returning
reference
type
body
return
null
method
returning
primitive
type
body
just
return
literal
type
return
false
return
0
etc
class
driver
compiles
fill
body
method
test
driver
continue
filling
body
next
method
etc
bit
art
determine
methods
implement
test
first
good
heuristic
implement
test
tostring
first
help
debug
others
implement
test
simplest
methods
first
ones
call
methods
defined
class
often
case
collection
classes
method
adding
value
collection
will
written
early
test
accessors
method
remove
value
will
write
three
classes
assignment
cases
will
provide
driver
programs
will
use
test
classes
always
can
check
behavior
programs
mine
downloading
unzipping
running
file
program
5
executables
help
understand
specification
problem
observe
programmer
user
interaction
implement
see
program
1
details
run
executables
pcs
eclipse
pcs
macs
remember
can
run
programs
examine
source
java
code
note
packages
used
assignment
package
driver
program
complete
must
write
one
class
drives
classes
either
empty
need
revised
classes
provided
complete
please
careful
deciding
whether
variables
instance
variables
parameter
variables
local
variables
using
start
working
assignment
download
program
5
project
folder
contains
outlines
classes
write
assignment
driver
programs
use
test
classes
write
run
debug
class
program
finish
part
submit
java
file
one
programmer
pair
dropoff
programs
one
part
matter
pair
submits
person
submit
parts
course
program
contain
student
names
comment
one
cut
pasted
ane
filled
top
program
program
1
static
library
write
methods
class
named
sum
abbreviating
static
utility
methods
contains
four
methods
described
driver
class
prompts
user
information
use
calling
methods
prints
results
return
can
easily
debug
first
change
sum
class
different
package
one
using
uci
user
id
something
like
edu
uci
pattis
use
package
name
import
driver
class
change
name
package
sum
class
let
eclipse
fix
problem
click
red
select
first
option
move
sum
java
package
package
name
please
write
following
methods
meet
specification
stated
throw
exceptions
except
ones
mentioned
normally
case
none
methods
input
output
parameters
returned
values
majority
takes
three
boolean
parameters
returns
boolean
result
whose
value
one
majority
majority
true
true
false
returns
true
three
boolean
arguments
two
possible
boolean
values
one
values
always
majority
either
2o
3
3
3
try
find
compact
method
body
enumerating
eight
possibilities
run
executable
information
isprime
takes
one
int
parameter
returns
boolean
whose
value
true
parameter
prime
number
parameter
negative
method
throw
illegalargumentexception
appropriate
message
next
defintion
prime
will
use
method's
body
parameter
0
1
return
false
technically
neither
0
1
prime
parameter
larger
value
return
false
number
2
parameter
1
exactly
divides
parameter
example
parameter
15
try
divisors
2
14
inclusive
using
general
loop
thess
values
divisor
immediately
return
false
none
values
exactly
divides
parameter
method
finally
return
true
run
executable
information
constrain
takes
three
int
parameters
returns
int
result
whose
value
constrained
lie
within
1st
3rd
parameter
values
returns
2nd
parameter
lies
1st
3rd
inclusive
returns
1st
2nd
parameter
less
1st
returns
3rd
2nd
parameter
greater
3rd
example
constrain
0
5
10
returns
5
value
2nd
parameter
1st
3rd
constrain
0
5
10
returns
0
value
2nd
parameter
smaller
1st
parameter
constrain
0
15
10
returns
10
value
2nd
parameter
larger
3rd
parameter
run
executable
information
digits
takes
one
int
parameter
returns
int
result
whose
value
number
digits
first
parameter
method
works
parameter
returns
positive
value
1
greater
example
digits
0
returns
1
digits
1245
returns
4
digits
10
returns
2
method
computes
result
counting
many
times
can
divide
parameter
10
reaching
single
digit
number
division
represents
chopping
digit
parameter
run
executable
information
bigrational
infinite
precision
rationals
write
class
named
bigrational
updating
class
named
rational
assignment
actually
bridge
using
writing
classes
actually
just
translating
rational
class
bigrational
contains
methods
translated
instance
variables
bodies
bigrational
instead
using
two
int
instance
variables
storing
numerator
denominator
rational
use
two
biginteger
instance
variables
importing
using
java
math
biginteger
class
bigrational
instance
variables
can
store
integers
number
digits
tens
hundreds
thousands
etc
refer
javadoc
biginteger
throughout
assignment
might
even
want
print
copy
quicker
reference
must
translate
rational
class
instead
using
ints
becomes
bigrational
class
uses
biginteger
operators
applied
int
variables
must
translated
method
calls
biginteger
variables
operators
ints
available
equivalent
methods
bigintegers
use
bigrational
java
file
provided
mostly
copy
rational
java
file
must
translate
rational
constructors
methods
project
file
also
contains
driver
class
compiles
correctly
bigrational
class
compiles
correctly
general
hints
translation
wherever
see
rational
int
class
change
bigrational
biginteger
except
return
type
compareto
method
remain
int
parameter
todecimalstring
remain
int
biginteger
class
static
fields
zero
one
need
biginteger
values
say
10
use
constructor
create
one
biginteger
ten
new
biginteger
10
int
write
biginteger
write
add
multiply
can
also
write
expression
cascaded
method
call
multiply
add
although
looks
bit
strange
order
operands
changed
gcd
method
biginteger
class
use
method
directly
constructor
define
private
static
method
operation
bigrational
class
remove
method
code
writing
compareto
method
bigrational
make
use
compareto
method
biginteger
remember
still
return
int
biginteger
finally
already
completely
translated
todecimalstring
method
appears
original
form
updated
form
commented
can
study
differences
use
methods
guide
translate
methods
put
orignal
code
comment
remove
uncomment
translated
code
will
work
biginteger
instance
variables
run
executable
information
program
compiles
runs
intially
test
methods
using
driver
entering
small
values
can
compute
result
1
2
1
3
5
6
eventually
try
running
harmonic
sum
option
100
200
comparing
output
executable
need
write
update
javadoc
class
just
focus
translating
instance
variables
methods
ball
bouncing
ball
simulations
write
simple
class
named
ball
can
use
simulate
bouncing
ball
two
drivers
simulation
one
textual
ball
class
one
graphical
characterize
ball's
state
five
values
color
color
change
size
int
radius
ball
pixels
change
height
double
feet
changes
simulation
elasticity
double
change
determines
much
ball
bounces
velocity
double
feet
per
second
changes
simulation
states
intrinsic
ball
properties
independent
simulation
color
size
elasticity
percentage
downward
velocity
converted
upward
velocity
bounces
states
result
simulation
height
velocity
fill
fields
instance
variables
constructor
methods
ball
class
fields
represent
ball's
states
using
types
color
int
double
constructor's
parameters
specify
ball's
state
except
velocity
always
start
0
new
constructs
new
ball
object
methods
mostly
accessors
return
information
ball's
state
simulation
can
display
ball
getcolor
getsize
getheight
note
tostring
method
return
large
string
containing
name
instance
variables
current
values
might
return
values
prints
like
ball
color
java
awt
color
255
0
0
size
15
height
10
0
elasticity
0
9
velocity
0
0
note
color
class
tostring
method
can
call
update
method
computes
new
height
velocity
ball
specified
amount
time
passes
similar
rocket
calculation
much
simpler
compute
velocity
end
time
interval
velocity
start
time
interval
gravity
dt
compute
average
velocity
interval
average
velocity
start
end
interval
compute
height
end
time
interval
height
start
time
interval
average
velocity
interval
times
dt
height
negative
store
velocity
end
time
interval
velocity
start
next
time
interval
height
negative
make
0
store
opposite
average
velocity
times
elasticity
velocity
start
next
time
interval
first
test
ball
class
using
main
method
ball
class
remember
rewrite
tostring
method
correctly
print
anything
check
results
executable
test
ball
class
using
graphic
driver
colors
use
positive
int
values
0
255
size
use
reasonable
sized
positive
integer
15
pixels
height
exceed
10
elasticity
generally
use
double
value
0
1
note
even
perfect
bounce
elasticity
1
way
equations
simplified
exact
terms
bouncing
ball
may
eventually
come
rest
try
elasticity
1
actuallly
specify
1
value
random
number
appropriate
range
will
use
default
values
1
everything
except
elasticity
experiment
running
program
1
values
note
written
correct
header
methods
inball
part
compiles
correctly
ball
class
must
change
filling
instance
variables
bodies
constructors
methods
try
debugging
ball
using
construct
one
button
first
test
later
construct
many
