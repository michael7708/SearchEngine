cs 167 introduction cryptography homework 1 
homework 2 
cs
167
spring
2010
homework
2
cryptanalyzis
substitution
vigenere
ciphers
back
main
class
page
note
can
submit
homework
individually
team
teams
include
3
students
homework
due
final
exam
date
june
9
noon
homework
will
write
test
java
program
cryptanalyze
two
versions
substitution
cipher
bonus
problem
version
vigenere
cipher
three
ciphers
task
create
code
given
ciphertext
finds
key
used
encrypting
ciphertext
outputs
corresponding
plaintext
ciphertext
given
input
code
will
encryption
text
fragment
taken
one
following
three
sources
jack
london's
martin
eden
jane
eyre
charlotte
bronte
lawrence's
sons
lovers
will
test
cipher
breaker
code
provide
three
categories
short
50
medium
100
long
200
say
given
number
text
fragment
chose
testing
will
always
start
end
full
word
text
fragment
code
will
tested
will
never
include
word
fragments
consequently
length
chosen
fragment
might
bit
longer
shorter
50
100
200
cipher
team
provide
two
things
working
java
code
can
tested
us
code
also
clearly
commented
one
can
understand
code
works
looking
documentation
code
broken
following
subsections
one
page
description
designed
program
can
use
pseudocode
long
explains
clearly
algorithm
implemented
high
level
description
example
dont
need
know
implemented
simple
subprocedures
subprocedure
performs
decryption
ciphertext
given
guessed
key
subprocedure
tests
whether
decrypted
plaintext
contains
words
english
dictionary
etc
instead
want
see
designed
key
search
algorithm
using
simple
subprocedures
whose
inner
workings
need
described
expanded
5
30
10
analysis
accuracy
running
time
cryptoanalytic
code
analysis
must
include
results
testing
made
code
include
graphs
success
rate
running
time
code
particular
require
include
three
graphs
graphs
ciphertext
plaintext
length
axis
first
graph
give
average
running
time
code
ciphertexts
given
length
second
graph
give
average
accuracy
code
ciphertexts
given
length
accuracy
output
measured
terms
percentage
letters
plaintext
code
returns
correctly
words
real
plaintext
length
code
returns
plaintext
string
m'
accuracy
equals
number
indexes
1
m'
number
characters
m'
agree
notice
different
number
alphabet
letters
code
identified
correctly
example
plaintext
aaaab
code
outputs
m'
aaaac
accuracy
code
run
80
third
graph
plot
average
values
function
time
accuracy
execution
code
long
text
note
first
plot
asked
average
values
second
average
values
words
perform
5
experiments
denote
timing
code
5
experiments
1
5
accuracy
1
5
value
argument
three
graphs
computed
follows
first
graph
gives
average
1
5
second
graph
gives
average
1
5
third
average
1
5
graphs
based
computation
time
accurancy
requested
parameters
50
100
200
also
test
code
also
larger
n's
300
400
500
can
draw
graph
hand
given
timing
data
observe
specify
many
tests
made
compute
average
n's
made
timings
note
code
performs
correctly
even
higher
values
provie
three
plots
larger
values
will
also
test
code
higher
values
instead
50
100
200
hoped
code
can
crack
compute
average
timing
average
given
value
can
take
average
5
runs
performed
ciphertexts
restulting
encrypting
5
text
fragments
chosen
hand
note
testing
purposes
pick
text
fragments
truly
random
can
just
run
experiment
subsequent
approximately
long
text
fragments
three
text
sources
bonus
can
provide
experimental
validation
design
choices
make
software
words
make
parameter
choices
code
can
provide
us
results
experiments
show
choice
parameters
indeed
beneficial
cipher
descriptions
paragraph
changed
6
1
10
input
texts
ciphers
will
prepared
following
filtering
procedure
first
replace
non
letter
asci
characters
everything
except
chars
65
90
97
122
spaces
32
replace
every
substrings
spaces
every
substring
repeated
32
chars
single
space
finally
translate
small
caps
large
caps
replace
every
character
97
122
32
btw
notice
last
step
can
done
beginning
instead
change
output
result
filtering
can
encoded
string
characters
27
code
welcome
stick
asci
encoding
java
code
vigenere
encryption
ta
wrote
recommend
easy
get
math
encryption
process
wrong
way
let
represent
input
text
filtering
let
added
6
2
10
filtering
procedure
implemented
java
code
new
version
vigenere
encryption
just
case
need
comparison
link
old
version
java
code
used
previously
posted
filtering
procedure
different
three
ciphers
work
follows
1
substitution
1
cipher
divides
sequence
words
w1
w2
wj
wi
string
large
caps
concatenation
w1
space
w2
space
w3
wj
picks
substitution
cipher
key
random
permutation
26
applies
permutation
strings
w1
w2
wj
let
c1
c2
cj
resulting
ciphertexts
ciphertext
output
cipher
computed
c1
space
c2
space
c3
cj
2
substitution
2
cipher
treats
single
string
alphabet
union
large
caps
space
27
hence
can
represented
27
picks
random
permutation
27
applies
permutation
crucial
difference
cipher
previous
one
treats
space
words
yet
another
character
encrypts
way
contrast
previous
cipher
revealed
spaces
clear
encrypted
word
text
separately
revealing
particular
length
word
3
vigenere
cipher
treats
single
string
alphabet
point
2
can
represented
27
picks
length
vigenere
key
random
4
5
6
picks
random
vigenere
key
alphabet
length
encrypts
using
key
code
will
tested
added
6
1
10
test
code
first
look
timing
accuracy
results
claim
code
point
2
will
test
code
either
50
100
200
parameters
wanted
whatever
parameters
claim
code
works
reasonable
time
every
will
set
time
variable
testing
code
10
times
average
running
time
claimed
average
running
time
graph
report
test
code
running
10
times
10
randomly
chosen
text
fragments
sources
plaintexts
length
50
see
btw
will
choose
10
randomly
chosen
text
fragments
sources
plaintext
will
use
set
10
text
fragments
testing
student's
code
text
fragment
will
filter
using
filtering
procedure
see
denote
result
note
will
encrypt
using
randomly
chosen
run
code
time
specified
check
two
things
output
1
time
code
took
2
accuracy
returned
plaintext
measured
exactly
like
descibed
item
2
documentation
specification
take
averages
measurements
described
item
2
will
compare
graph
supplied
code
output
anything
within
time
mark
accuracy
0
time
time
finally
will
compare
results
students
will
award
prizes
forms
letters
recommendation
students
whose
code
wins
cipher
type
plaintext
length
category
resources
useful
resources
can
use
building
code
first
look
wikipedia
substitution
vigenere
ciphers
discuss
various
weaknesses
ciphers
cryptanalysis
techniques
exploit
weaknesses
webpage
letter
frequencies
including
space
webpage
also
contains
2nd
3rd
order
statistics
frequencies
pairs
triples
letters
can
use
well
perhaps
speed
code
something
consider
analyze
frequencies
pairs
triples
three
text
sources
make
table
2nd
3rd
order
statistics
better
reflects
text
corpora
plaintext
exercise
will
sourced
webpage
letter
frequencies
without
space
page
also
includes
frequencies
first
letters
can
also
useful
speeding
code
note
also
given
frequency
space
can
derive
numbers
numbers
however
might
notice
incompatible
surprise
letter
frequencies
depend
corpus
texts
frequencies
measured
different
text
corpora
lead
different
estimations
letter
frequencies
write
simple
analyzer
three
texts
know
ciphertext
will
generated
use
frequencies
instead
either
three
parallel
average
list
english
words
useful
resource
obvious
way
test
whether
key
correct
test
whether
decrypted
plaintext
contains
words
english
dictioary
exercise
however
since
know
plaintext
source
probably
get
better
fit
just
constructed
dictionary
words
directly
three
text
sources
java
code
vigenere
encryption
updated
filtering
procedure
