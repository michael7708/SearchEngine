
trie cpp 
id
trie
cpp
1106
2007
04
16
23
20
29z
chenli
trie
cpp
implementation
trie
class
copyright
2004
2007
regents
university
california
redistribution
file
permitted
terms
gnu
public
license
gpl
date
october
2004
author
liang
jin
liangj
ics
uci
edu
include
stdafx
include
include
include
include
include
include
include
include
parameters
include
include
include
nfa
include
nfamatch
using
namespace
std
include
trie
extern
double
totaledtime
construction
destruction
trie
trie
root
trienewnode
trieinitnode
root
setname
root
names
epsilon
memset
content
'
'
trielen
trie
trie
triefreenode
root
struct
trienode
trie
trienewnode
register
struct
trienode
new
node
struct
trienode
malloc
sizeof
struct
trienode
assert
trieinitnode
return
void
trie
trieinitnode
struct
trienode
register
struct
trienode
register
int
count
0
iscompressed
false
names
0
com
size
0
com
depth
0
0
alph
size
child
null
parent
null
void
trie
triefreenode
struct
trienode
int
assert
delete
count
0
parent
null
free
else
0
alph
size
child
null
triefreenode
child
child
null
free
return
void
trie
triecleartrie
triefreenode
root
root
trienewnode
setname
root
names
epsilon
struct
trienode
trie
copytrie
struct
trienode
struct
trienode
parent
int
struct
trienode
newnode
trienewnode
newnode
names
names
newnode
iscompressed
iscompressed
newnode
count
count
newnode
depth
depth
newnode
com
depth
com
depth
newnode
com
size
com
size
newnode
parent
parent
newnode
count
0
return
newnode
0
alph
size
child
null
newnode
child
copytrie
child
newnode
return
newnode
string
trie
trie2str
struct
trienode
root
string
result
onenode2str
root
result
return
result
void
trie
onenode2str
struct
trienode
node
string
result
int
char
name
node
count
0
node
iscompressed
false
name
getsinglename
node
names
result
append
name
1
else
result
append
char
alpha
10
sprintf
alpha
node
names
result
append
alpha
result
append
char
temp
2
itoa
node
com
depth
temp
10
sprintf
temp
node
com
depth
result
append
temp
result
append
return
else
result
append
node
name
1
node
iscompressed
false
name
getsinglename
node
names
result
append
name
1
else
result
append
char
alpha
10
sprintf
alpha
node
names
result
append
alpha
result
append
char
temp
2
itoa
node
com
depth
temp
10
sprintf
temp
node
com
depth
result
append
temp
result
append
node
count
1
result
append
int
counter
0
0
iname
node
child
null
onenode2str
node
child
result
counter
node
count
1
result
append
counter
node
count
1
result
append
return
struct
trienode
trie
str2trie
string
input
struct
trienode
trienewnode
trieinitnode
setname
names
epsilon
input
erase
0
1
remove
beginning
epsilon
state
str2onenode
input
return
void
trie
str2onenode
struct
trienode
node
string
input
int
pos
input
find
first
'
'
int
subindex
struct
trienode
temp
node
int
index
pos
1
single
path
0
inames
input
index
getindex
input
temp
child
index
parent
temp
temp
count
temp
temp
child
index
else
1
input
'
'
char
substring
new
char
0
substring
input
1
substring
1
'
0'
iscompressed
true
char
name
new
char
0
1
substring
'
'
name
substring
setname
names
substring
com
size
else
break
name
'
0'
names
atoi
name
subindex
0
subindex
alph
size
subindex
getnameexist
names
subindex
true
com
size
com
depth
atoi
substring
1
temp
child
alph
size
1
38
compressed
node
parent
temp
temp
count
temp
temp
child
alph
size
1
skip
part
delete
substring
delete
name
return
pos
0
chars
single
path
parent
0
inames
input
index
getindex
input
temp
child
index
parent
temp
temp
count
temp
temp
child
index
else
1
input
'
'
char
substring
new
char
0
substring
input
1
substring
1
'
0'
iscompressed
true
char
name
new
char
0
1
substring
'
'
name
substring
setname
names
substring
com
size
else
break
name
'
0'
names
atoi
name
subindex
0
subindex
alph
size
subindex
getnameexist
names
subindex
true
com
size
com
depth
atoi
substring
1
temp
child
alph
size
1
alph
size
1
compressed
node
parent
temp
temp
count
temp
temp
child
alph
size
1
skip
part
delete
substring
delete
name
input
erase
0
pos
erase
everything
first
including
input
erase
0
1
input
length
0
return
int
leftcount
0
int
cursor
0
0
input
length
input
'
'
leftcount
0
string
input2
input
substr
cursor
cursor
str2onenode
temp
input2
cursor
1
else
input
'
'
leftcount
else
input
'
'
leftcount
0
leftcount
else
input
'
'
leftcount
0
last
branch
string
input3
input
substr
cursor
cursor
str2onenode
temp
input3
break
assert
input
length
1
return
void
trie
addtotrie
string
int
lcv
index
character
append
struct
trienode
root
loop
length
string
add
traverse
trie
lcv
0
lcv
length
lcv
character
lcv
character
processing
index
getindex
character
child
node
character
child
index
null
make
one
child
index
trienewnode
child
index
parent
trieinitnode
child
index
setname
child
index
names
character
count
another
string
node
child
index
count
move
node
loop
child
index
int
trie
getindex
int
character
int
index
character
'a'
character
'a'
'a'
index
count
0
insert
erase
insert
length
1
1
get
rid
last
since
insert
will
append
addtotrie
insert
return
0
alph
size
t2
child
null
name
getsinglename
t2
child
names
insert
append
name
1
insertstrs
t2
child
insert
insert
erase
insert
length
1
1
long
trie
getsize
struct
trienode
assert
string
trie2str
return
length
double
trie
getnumofstr
struct
trienode
assert
double
counter
0
0
getnum
counter
return
counter
bool
trie
getnum
struct
trienode
double
counter
int
double
temp
count
0
leaf
node
iscompressed
false
node
compressed
counter
else
compressed
temp
double
pow
com
size
com
depth
temp
0
0
counter
double
pow
com
size
com
depth
return
true
else
interior
node
0
alph
size
child
null
getnum
child
counter
return
true
void
trie
assigndepth
assert
root
root
depth
assignonedepth
root
int
trie
assignonedepth
struct
trienode
count
0
leaf
node
depth
0
return
0
int
bool
first
true
int
depth
temp
0
alph
size
child
null
first
depth
assignonedepth
child
1
first
false
else
temp
assignonedepth
child
1
temp
depth
depth
temp
depth
depth
return
depth
int
trie
getalpha
struct
trienode
assert
int
bool
existing
alph
size
0
ichild
null
getalphahelper
child
existing
int
counter
0
0
ichild
null
getalphahelper
child
existing
existing
27
true
existing
27
false
return
existing
void
trie
getalphahelper
struct
trienode
bool
existing
int
index
int
count
0
leaf
node
iscompressed
false
index
getindex
getsinglename
names
existing
index
true
else
0
alph
size
getnameexist
names
true
existing
true
return
index
getindex
getsinglename
names
existing
index
true
0
alph
size
child
null
getalphahelper
child
existing
return
bottom
compression
void
trie
getcandidatebottom
struct
trienode
vector
list
insert
depth
2
nodes
vector
candidate
list
depth
2
struct
bottomelem
ce
new
struct
bottomelem
ce
int
numofchars
getalpha
ce
newstrs
double
pow
numofchars
depth
1
ce
oldstrs
getnumofstr
ce
newsize
numofchars
int
floor
log10
depth
1
1
3
1
numofchars
floor
1
3
ce
oldsize
trie2str
length
1
1
minus
trie2str
include
name
ce
newstrs
0
ce
oldstrs
invalid
ce
cost
invalid
else
ce
cost
ce
newstrs
ce
oldstrs
ce
benefit
ce
oldsize
ce
newsize
list
push
back
ce
return
depth
0
depth
1
return
compressed
node
count
candidate
int
0
ichild
null
getcandidatebottom
child
list
return
void
trie
compresstriebottomup
vector
candid
getcandidatebottom
root
candid
candid
getcandidatelist
get
leaf
nodes
int
size
size
candid
size
double
originalsize
trie2str
root
length
struct
bottomelem
ce
struct
trienode
parent
double
benefitratio
tempratio
double
maxbenefit
double
mincost
tempcost
int
id
vector
iterator
originalsize
trielen
candid
size
0
compress
find
best
one
compress
id
1
size
candid
size
0
size
candid
cost
invalid
mincost
candid
cost
maxbenefit
candid
benefit
id
break
else
mincost
invalid
maxbenefit
candid
benefit
id
break
size
candid
cost
invalid
candid
cost
mincost
mincost
candid
cost
maxbenefit
candid
benefit
id
else
candid
cost
mincost
candid
benefit
maxbenefit
mincost
candid
cost
maxbenefit
candid
benefit
id
else
tempcost
invalid
tempcost
mincost
mincost
tempcost
maxbenefit
candid
benefit
id
else
tempcost
mincost
candid
benefit
maxbenefit
mincost
tempcost
maxbenefit
candid
benefit
id
id
1
break
ce
candid
id
parent
ce
parent
compress
subtree
attach
child
ce
bool
existing
existing
getalpha
ce
true
struct
trienode
newnode
newnode
trienewnode
newnode
count
0
newnode
iscompressed
true
newnode
depth
ce
depth
1
newnode
com
depth
ce
depth
1
newnode
com
size
0
0
alph
size
existing
true
setname
newnode
names
getcharfromindex
newnode
com
size
ce
child
alph
size
1
newnode
0
alph
size
1
ce
child
null
triefreenode
ce
child
ce
child
null
ce
count
1
newnode
parent
ce
remove
entry
candidate
list
insert
parent
candid
begin
0
id
candid
erase
parent
null
bool
found
false
candid
begin
candid
end
parent
found
true
break
found
false
parent
exist
list
insert
parent
struct
bottomelem
par
new
struct
bottomelem
par
parent
int
numofchars
getalpha
par
par
newstrs
double
pow
numofchars
par
depth
1
par
oldstrs
getnumofstr
par
par
newsize
numofchars
int
floor
log10
par
depth
1
1
3
1
numofchars
floor
1
3
par
oldsize
trie2str
par
length
1
1
minus
trie2str
include
name
par
newstrs
0
par
oldstrs
invalid
par
cost
invalid
else
par
cost
par
newstrs
par
oldstrs
par
benefit
par
oldsize
par
newsize
candid
push
back
par
originalsize
maxbenefit
final
cleanup
0
candid
size
delete
candid
end
return
top
compression
void
trie
compresstrietopdown
int
id
index
vector
candidates
struct
trienode
newroot
newroot
trienewnode
setname
newroot
names
epsilon
newroot
depth
root
depth
construct
initial
result
tree
bool
existing
existing
getalpha
root
true
struct
trienode
temp
trienewnode
temp
iscompressed
true
temp
count
0
temp
depth
root
depth
1
temp
com
size
0
temp
com
depth
temp
depth
0
alph
size
existing
true
setname
temp
names
getcharfromindex
temp
com
size
newroot
count
1
newroot
child
alph
size
1
temp
temp
parent
newroot
struct
topelem
te
te
getcandidatetop
root
newroot
candidates
push
back
te
double
originalsize
trie2str
newroot
length
double
mincost
0
double
tempcost
double
maxbenefit
process
candidate
list
vector
iterator
double
benefitratio
tempratio
struct
topelem
te1
bool
first
true
int
numofcenters
1
candidates
size
0
originalsize
trielen
numofcenters
cost
originalsize
trielen
candidates
cost
numofcenters
cost
maxbenefit
candidates
benefit
id
start
false
else
tempcost
candidates
cost
tempcost
mincost
mincost
tempcost
maxbenefit
candidates
benefit
id
else
tempcost
mincost
candidates
benefit
maxbenefit
mincost
tempcost
maxbenefit
candidates
benefit
id
id
1
break
te1
copy
candidates
id
copy
te1
old
candidates
id
old
te1
subtree
candidates
id
subtree
te1
newsize
candidates
id
newsize
te1
newstrs
candidates
id
newstrs
te1
oldsize
candidates
id
oldsize
te1
oldstrs
candidates
id
oldstrs
te1
cost
candidates
id
cost
te1
benefit
candidates
id
benefit
candidates
begin
0
id
candidates
erase
int
test
candidates
size
first
add
clean
liang
triefreenode
newroot
end
newroot
te1
subtree
te1
copy
newroot
first
false
else
te1
subtree
parent
te1
copy
parent
index
getindex
getsinglename
te1
copy
names
te1
copy
parent
child
index
te1
subtree
add
clean
liang
triefreenode
te1
copy
end
te1
copy
te1
copy
parent
child
index
te1
copy
te1
subtree
0
alph
size
te1
old
child
null
te1
old
child
depth
1
depth
1
furthur
decompression
possible
struct
topelem
te2
te2
getcandidatetop
te1
old
child
te1
copy
child
candidates
push
back
te2
remove
entry
candidate
list
insert
children
originalsize
mincost
numofcenters
mincost
add
clean
liang
triefreenode
root
0
candidates
size
triefreenode
candidates
subtree
delete
candidates
root
newroot
return
struct
topelem
trie
getcandidatetop
struct
trienode
pold
struct
trienode
pcopy
int
bool
existing
construct
future
subtree
uncompress
node
struct
trienode
sub
trienewnode
sub
names
pold
names
sub
depth
pold
depth
int
sizeincrease
0
0
alph
size
pold
child
null
temp
te
old
child
struct
trienode
children
trienewnode
children
names
pold
child
names
setname
children
names
getsinglename
pold
child
names
children
iscompressed
false
children
count
1
children
depth
pold
child
depth
children
parent
sub
sub
child
children
sub
count
struct
trienode
grandchildren
trienewnode
pold
child
depth
1
furthur
data
just
attach
'
'
struct
trienode
grandchildren
trienewnode
setname
grandchildren
names
epsilon
grandchildren
depth
0
grandchildren
iscompressed
false
grandchildren
count
0
children
child
alph
size
2
grandchildren
grandchildren
parent
children
else
furthur
data
attach
compressed
node
sizeincrease
existing
getalpha
pold
child
true
struct
trienode
grandchildren
trienewnode
grandchildren
iscompressed
true
grandchildren
count
0
grandchildren
depth
pold
child
depth
1
grandchildren
com
size
0
grandchildren
com
depth
grandchildren
depth
0
alph
size
existing
true
setname
grandchildren
names
getcharfromindex
grandchildren
com
size
children
child
alph
size
1
grandchildren
grandchildren
parent
children
struct
topelem
te
new
struct
topelem
te
old
pold
te
copy
pcopy
te
subtree
sub
int
numofchars
pcopy
child
alph
size
1
com
size
te
newstrs
getnumofstr
sub
te
oldstrs
double
pow
numofchars
pcopy
depth
1
te
newstrs
invalid
te
oldstrs
0
te
benefit
invalid
else
te
benefit
te
oldstrs
te
newstrs
te
cost
sub
count
return
te
get
edit
distance
trie
string
int
trie
geted
string
str
nfa
nfa
clock
tv1
tv2
double
time
tv1
clock
nfamatch
nm
new
nfamatch
nfa
int
distance
distance
nm
match
str
bool
good
nm
match
str
2
delete
nm
tv2
clock
time
tv2
tv1
clocks
per
sec
double
1000
0
totaledtime
time
return
distance
bool
trie
geted
string
str
int
delta
clock
tv1
tv2
double
time
tv1
clock
nfa
nfa
new
nfa
nfa
convertfromtrie
nfamatch
nm
new
nfamatch
nfa
int
distance
distance
nm
match
str
bool
good
nm
match
str
delta
delete
nm
tv2
clock
time
tv2
tv1
clocks
per
sec
double
1000
0
totaledtime
time
delete
nfa
return
good
int
trie
getnumofnodes
struct
trienode
int
count
assert
count
0
return
1
else
count
0
0
alph
size
child
null
count
getnumofnodes
child
count
return
count
void
trie
setname
int
names
char
character
int
index
getindex
character
int
oper
1
oper
oper
index
names
names
oper
return
char
trie
getsinglename
int
names
int
int
oper
1
0
alph
size
oper
names
0
break
oper
oper
1
char
temp
getcharfromindex
return
temp
bool
trie
getnameexist
int
names
int
index
int
oper
1
oper
oper
index
oper
names
0
return
true
else
return
false
