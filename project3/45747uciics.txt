ics 32 winter 2013 code example classes 
writing classes python 
ics
32
winter
2013
news
course
reference
schedule
project
guide
code
examples
alex
ics
32
winter
2013
code
example
classes
background
seen
previously
use
namedtuples
one
way
python
collect
heterogeneous
data
single
object
piece
data
called
field
fields
identified
names
can
access
value
field
change
value
fields
instead
want
change
field
build
new
namedtuple
one
field's
value
replaced
different
one
beyond
namedtuples
really
know
much
anything
useful
limited
problem
bringing
pieces
together
object
however
think
types
objects
built
python
language
standard
library
like
strings
realize
just
store
things
like
namedtuples
can
also
things
example
consider
interaction
python
interpreter
'boo
happy
today'
upper
'boo
happy
today'
split
'
'
'boo'
'is'
'happy'
'today'
creating
string
storing
variable
ask
string
couple
things
us
hey
look
like
letters
uppercase
hey
split
list
words
using
spaces
delineate
one
word
ends
another
begins
give
back
resulting
list
syntax
upper
called
method
call
object
upper
called
method
since
type
str
since
upper
method
belonging
str
type
properly
str
class
can
call
method
upper
case
asking
uppercase
version
however
ask
integer
float
list
socket
thing
upper
method
classes
make
sense
different
classes
support
different
methods
specific
types
objects
seeing
strings
can
things
addition
just
storing
things
natural
next
step
might
us
wonder
create
objects
endowed
similarly
objects
smarter
know
things
answer
can
just
know
write
python
classes
python
class
blueprint
new
kind
object
blueprint
specifies
objects
class
can
defining
set
methods
representing
one
operation
objects
capable
performing
example
str
class
built
python
contains
number
methods
seen
like
upper
split
startswith
define
new
class
using
class
construct
python
simplest
kind
class
one
know
much
anything
aside
built
things
objects
can
write
way
class
mostlybraindeadobject
pass
statements
loops
pass
used
specify
class
empty
empty
class
interesting
one
instead
write
class
something
simple
first
though
need
know
little
bit
mechanics
method
calls
python
quite
seem
method
calls
python
make
method
call
python
going
meets
eye
example
consider
method
call
made
previously
split
'
'
'boo'
'is'
'happy'
'today'
ask
many
parameters
passed
method
might
well
tempted
answer
one
however
methods
quite
like
functions
get
called
object
something
asking
particular
object
case
object
python
alternative
syntax
calling
methods
use
often
write
programs
especially
clear
demonstrates
answer
question
one
str
split
'
'
'boo'
'is'
'happy'
'today'
alternative
syntax
written
first
specifying
name
class
containing
method
case
str
class
class
string
objects
built
followed
dot
followed
method's
name
followed
parameters
notice
first
parameter
listed
object
wanted
call
method
whenever
write
method
calls
clearer
familiar
form
split
'
'
python
essentially
translates
calls
behind
scenes
longer
form
str
split
'
'
sounds
like
ticky
tack
detail
worth
knowing
writing
long
form
method
calls
generally
good
idea
verbose
less
clear
critical
detail
want
understand
write
methods
see
methods
need
seems
like
extra
parameter
usually
called
self
represents
object
method
called
constructing
object
class
blueprint
kind
object
stands
reason
must
way
create
object
blueprint
python
called
constructing
object
calling
class'
constructor
calling
function
whose
name
name
class
mostlybraindeadobject
statement
executes
will
refer
mostlybraindeadobject
object
constructed
mostlybraindeadobject
class
see
also
possible
require
constructor
take
parameters
can
write
code
executed
object
initialized
uses
parameters
initialization
objects
attributes
objects
python
class
specifies
kind
object
additionally
objects
python
collection
attributes
information
storing
given
time
assigning
value
attribute
simple
assignment
statement
except
use
dot
operator
qualify
object
like
store
attribute
example
given
mostlybraindeadobject
object
created
earlier
can
store
values
attributes
interpreter
directly
read
back
later
a1
3
a2
4
a3
5
a1
a2
a3
12
general
rule
rarely
assign
object's
attributes
willy
nilly
like
instead
assign
values
attributes
within
class
initializing
object
constructed
changing
whenever
need
changed
syntax
important
assign
object's
attribute
saying
object
name
attribute
name
value
note
classes
written
way
makes
kind
open
ended
assignment
objects'
attributes
impossible
example
tried
string
attributeerror
raised
writing
counter
class
next
write
class
implements
counter
whose
role
count
many
times
asked
count
lifetime
initially
count
zero
time
asked
count
count
incremented
grows
times
imagine
using
class
like
example
implement
hit
counter
web
page
keeps
track
many
times
web
page
visited
spend
much
time
writing
class
envision
like
work
say
decide
want
c1
counter
c1
count
1
c1
count
2
c1
count
3
c2
counter
c2
count
1
c1
count
4
want
able
construct
counter
object
pass
parameters
count
initialized
zero
want
count
method
increments
returns
count
belonging
counter
note
example
separate
counter
objects
separate
counts
attributes
belong
objects
opposed
classes
complete
counter
class
consists
two
methods
special
initializer
method
called
init
called
whenever
object
class
initialized
just
created
count
method
increments
returns
count
class
counter
def
init
self
self
count
0
def
count
self
self
count
1
return
self
count
notice
things
writing
method
class
lot
like
writing
function
def
construct
used
interesting
difference
even
though
want
methods
accept
parameters
listed
parameter
called
self
sure
re
read
section
titled
method
calls
python
come
back
reason
make
calls
methods
extra
parameter
added
others
parameter
object
method
called
convention
call
parameter
self
wanted
assign
value
attribute
way
saw
previously
specify
object
whose
attribute
want
assign
followed
dot
followed
name
attribute
self
count
means
count
attribute
belonging
object
self
remember
self
object
method
called
example
init
function
says
object
initialized
set
count
attribute
belonging
object
initialized
zero
recall
using
single
underscore
front
name
function
module
specify
intended
private
detail
module
implemented
one
code
using
module
needs
know
use
can
attributes
methods
classes
nothing
stops
someone
assigning
new
value
count
attribute
belonging
counter
object
underscore
least
hint
intend
attribute
private
visible
counter
object
visible
outside
code
person
class
wrote
lecture
along
counter
class
described
person
pycounter
py
