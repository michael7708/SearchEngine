program 3 
program 3 
program
3
intermediate
program
suite
ii
introduction
computer
science
ics
21
introduction
please
print
copy
assignment
read
carefully
highlight
material
think
will
useful
working
program
submitting
programmmng
assignment
continuation
program
2
designed
ensure
know
write
programs
combine
standard
control
structures
java
blocks
ifs
loops
break
statements
terminate
loops
statements
declarations
expression
statements
will
continue
write
test
debug
programs
using
iterative
enhancement
finally
work
writing
clearest
simpliest
code
possible
declaring
appropriate
number
variables
natural
type
aggressive
final
appropriate
block
smallest
scope
will
write
three
programs
assignment
always
can
check
behavior
programs
mine
downloading
executable
zip
file
program
3
executables
unzipping
see
program
1
details
run
executables
pcs
eclipses
pcs
macs
remember
can
run
programs
examine
source
java
code
copy
input
output
form
executable
programs
programs
write
use
exactly
prompts
messages
cannon
rocket
programs
executable
versions
kernel
enhancement
information
listing
number
lines
solution
programs
programs
formated
standard
way
counting
lines
code
even
code
line
brace
closes
block
counting
blank
lines
lines
filled
comments
cannon
program
34
lines
rocket
program
47
lines
average
program
47
lines
programs
might
smaller
might
larger
program
starts
going
2
3
times
size
mine
might
want
rethink
come
get
help
please
follow
instructions
program
finish
enhancement
continuing
next
one
including
printing
whatever
messages
displays
console
copied
exactly
feel
free
use
infinite
loop
break
statements
write
loops
finished
may
simplify
loops
general
forwhile
loops
feel
comfortable
advanced
loops
write
start
programs
please
pay
particularly
close
attention
following
style
principles
discussed
lecture
coding
style
names
choose
good
names
variables
alignment
indent
statements
clarify
meaning
control
structures
locality
keep
related
information
together
separate
unrelated
information
comments
document
code
appropriately
comments
please
examine
sample
programs
provided
examples
good
programming
style
look
solutions
previous
programming
assignment
learn
copy
style
just
artists
middle
ages
learned
copy
master's
style
developing
program
style
will
graded
handing
programs
wait
receive
graded
program
2
will
give
feedback
style
work
assignment
create
one
java
project
call
program3
create
three
new
java
classes
one
class
program
2
class
will
contain
program
will
write
solve
one
problem
name
classes
cannon
rocket
average
write
run
debug
class
program
program
2
finish
part
submit
java
file
one
programmer
pair
dropoff
programs
one
part
matter
pair
submits
person
submit
parts
course
program
contain
student
names
comment
one
cut
pasted
ane
filled
top
program
program
1
physics
simulation
optimization
will
write
program
determines
angle
fire
cannon
projectile
hits
center
entrance
cave
first
will
discuss
relevant
laws
motion
learn
write
code
simulates
flight
projectile
will
write
code
searches
correct
angle
fire
cannon
repeated
simulating
projectile
range
angles
general
coupling
simulation
optimization
finding
optimal
angle
shoot
cannon
powerful
problem
solving
technique
picture
relevant
information
note
trajectory
cannon
shell
air
resistance
parabola
simulate
flight
projectile
cannon
must
know
speed
feet
second
angle
£c
radians
must
choose
time
increment
dt
seconds
simulation
start
simulation
coordinates
projectile
0
feet
simulation
time
0
seconds
time
increment
incremented
dt
seconds
coordinate
incremented
cos
£c
dt
feet
coordinate
incremented
sin
£c
32
17
dt
feet
statements
incrementing
variables
appear
program
order
show
equations
imprecise
ignore
air
resistance
among
problems
good
enough
certainly
simple
enough
purposes
assuming
gravitational
acceleration
downward
32
17
feet
second
2
also
assume
dt
will
always
01
seconds
simulation
runs
either
coordinate
goes
negative
angle
able
reach
target
coordinate
reaches
exceeds
required
distance
target
point
can
check
coordinate
determine
whether
right
height
hit
target
design
code
test
debug
program
using
iterative
enhancement
5
mini
projects
test
project
compare
executable
ensure
correct
proceeding
next
enhancement
methodology
will
use
larger
programs
good
idea
practice
technique
program
small
even
can
write
entire
program
write
kernel
program
prompts
user
speed
feet
per
second
angle
degrees
convert
radians
projectile
conversion
1
degree
£k
180
radians
also
look
javadoc
math
class
includes
toradians
todegrees
methods
use
one
advanced
prompt
fordouble
methods
ensure
speed
within
range
0
10000
angle
within
range
0
90
hint
look
prompt
class
javadoc
introlib
api
overloaded
versions
fordouble
method
choose
correct
one
write
loop
simulates
projectile
using
information
coordinate
goes
negative
printing
time
coordinates
iteration
pretty
big
kernel
lots
details
enter
speeds
angles
test
compare
executable
enhance
program
prompts
user
distance
within
range
0
100000
terminates
simulation
loop
either
coordinate
goes
negative
coordinate
exceeds
distance
enter
speeds
angles
test
termination
conditions
enhance
program
prompts
user
height
within
range
0
100000
computes
£c
rather
prompting
angle
straigh
line
cannon
0
0
entrance
cave
distance
height
prints
angle
degrees
simulation
angle
hint
look
math
class
javadoc
sun's
api
two
argument
version
arctangent
function
math
atan2
computes
result
radians
can
explain
angle
will
never
shoot
projectile
high
almost
always
shoot
low
enhance
program
prompting
user
whether
detailed
trace
use
one
advanced
prompt
forboolean
methods
default
value
false
detailed
trace
requested
print
information
requested
print
final
time
coordinate
coordinate
simulation
terminates
enhance
program
embedding
entire
simulation
prompting
inside
another
loop
outer
loop
simulates
projectile
calculated
£c
bigger
£cs
starting
calculated
£c
simulate
cannon
simulation
final
coordinate
termination
inner
loop
greater
height
terminate
program
outer
loop
angle
best
approximation
shooting
projectile
cave
otherwise
final
coordinate
greater
height
increment
angle
1
degrees
1
radians
new
angle
exceeds
90
print
message
entered
speed
reach
target
terminate
outer
loop
otherwise
try
simulation
run
inner
loop
new
angle
ensure
new
£c
simulation
starts
cannon
shell
origin
time
zero
use
tracing
submit
final
enhancement
program
one
meeting
complete
specifications
might
try
testing
final
program
final
executable
distance
10
000
height
2
000
speed
700
speed
600
hit
target
questions
output
ask
simulating
flight
rocket
write
program
performs
following
tasks
prompt
user
enter
following
information
describing
rocket
thrust
pounds
thrust
duration
seconds
mass
pounds
assume
user
always
enters
reasonable
values
write
input
validation
code
part
assignment
prompt
user
asking
whether
print
detailed
trace
flight
simulate
rocket
flying
vertically
straight
using
values
simulation
time
increment
01
seconds
user
requested
tracing
print
time
thrust
acceleration
velocity
end
interval
height
end
interval
continue
simulation
rocket
reaches
apex
recognized
velocity
initially
zero
positive
rocket
ascends
begins
go
negative
insufficient
thrust
rocket's
height
will
immediately
go
negative
without
ever
launching
upwards
print
following
information
accumulated
rocket's
entire
flight
total
impulse
entered
thrust
times
thrust
duration
total
flight
time
burn
coast
time
burn
time
thrust
duration
user
enters
coast
time
time
end
thrust
apex
maximum
velocity
achieved
entire
simulation
maximum
height
achieved
entire
simulation
basic
formula
simulating
rocket
flight
th
cd
v2
recompute
formula
every
time
interval
simulation
acceleration
time
interval
computed
th
thrust
time
zero
thrust
time
use
entered
thrust
thrust
zero
rocket
coasting
cd
coefficient
drag
use
0001
program
current
velocity
start
interval
mass
rocket
gravitational
acceleration
surface
earth
32
17
feet
sec
sec
rocket
starts
time
0
height
velocity
0
time
interval
01
seconds
call
dt
program
increments
total
time
dt
calculates
acceleration
rocket
formula
time
interval
remember
use
correct
thrust
depending
time
either
original
thrust
0
depending
time
compares
thrust
duration
calculates
new
velocity
height
end
time
interval
follows
new
end
time
interval
velocity
old
start
time
interval
velocity
dt
average
velocity
interval
average
old
new
velocities
new
end
time
interval
height
old
start
time
interval
height
average
velocity
dt
maximum
velocity
height
may
updated
depending
values
start
time
interval
newly
computed
velocity
height
end
time
interval
important
understand
description
coding
java
design
code
test
debug
program
using
iterative
enhancement
6
mini
projects
test
project
ensure
correct
proceeding
next
enhancement
methodology
will
use
larger
programs
good
idea
practice
technique
program
small
even
can
write
entire
program
write
kernel
program
prompts
user
rocket
information
specified
loops
incrementing
time
exceeds
time
engine
stops
burning
displaying
time
thrust
time
interval
ensure
time
thrust
displayed
correctly
loop
terminates
correct
time
try
thrust
100
5
seconds
mass
1
kernel
subsequent
enhancements
worry
anything
mass
enhance
program
computes
acceleration
velocity
starts
0
correctly
change
loop
terminate
velocity
becomes
negative
rocket
reached
apex
falling
back
earth
iteration
loop
compute
acceleration
using
formula
shown
paying
close
attention
whether
engine
burning
update
velocity
using
description
shown
addition
displaying
time
thrust
eventually
drop
0
finished
burning
display
acceleration
interval
velocity
end
interval
enhance
program
computes
height
starts
0
correctly
iteration
loop
update
height
using
formula
shown
addition
displaying
everything
else
display
height
end
time
interval
enhance
program
keep
track
maximum
velocity
height
addition
displaying
everything
else
display
values
end
time
interval
finally
display
values
loop
terminates
enhance
program
display
required
information
loop
terminates
display
information
correct
form
information
includes
total
impulse
flight
time
broken
burn
time
coast
time
maximum
velocity
maximum
height
enhance
program
prompt
user
tracing
default
value
false
display
intermediate
results
user
enters
true
always
print
information
loop
terminates
see
previous
enhancement
remember
use
final
appropriately
aggressively
declaring
constants
representing
information
needed
program
submit
final
enhancement
program
one
meeting
complete
specifications
note
program
submit
print
intermediate
results
unless
user
explicitly
requests
tracing
test
debugged
completed
program
thrust
100
lbs
time
10
secs
mass
1
lb
compare
results
excutable
full
credit
results
match
exactly
certainly
many
digits
printed
double
questions
output
ask
average
upgrade
start
project
new
project
folder
instead
download
average
project
folder
unzip
use
unzipped
folder
project
folder
compiled
run
prompts
user
file
name
processes
exam
scores
file
compute
average
exams
first
value
file
maximum
score
possible
exam
almost
remaining
values
legal
exam
scores
final
value
file
must
1
value
called
sentinel
marks
end
data
file
value
processed
computing
average
average
project
folder
also
includes
data
files
ending
txt
can
test
program
prompted
file
name
type
one
names
work
files
need
top
level
project
folder
worry
file
reading
part
code
correct
need
changed
just
concentrate
overall
looping
structure
program
add
java
declarations
statements
appropriate
locations
make
following
changes
make
changes
one
time
designing
coding
testing
debugging
enhancement
proceeding
next
one
starting
write
program
run
mine
times
familiarize
youself
enhance
program
discard
scores
0
maximum
score
inclusive
neither
count
exams
use
computing
sum
display
message
immediately
illegal
score
discarded
note
file
average3
txt
contains
large
number
scores
including
one
low
one
high
enhance
program
count
total
number
range
scores
print
value
statistics
end
program
scores
display
statistics
enhance
program
keep
track
minimum
maximum
legal
scores
file
print
values
end
along
average
total
number
range
scores
process
scores
range
think
will
initialize
update
extremal
variables
hint
imagine
someone
giving
one
card
another
value
card
discard
card
go
next
one
compute
maximum
cards
handed
initialize
maximum
minimum
scores
scores
processed
insure
process
proceeds
correctly
problem
similar
finding
maximum
velocity
height
rocket
program
different
submit
final
enhancement
program
one
meeting
complete
specifications
test
debugged
completed
program
four
input
files
ensure
computes
correct
statistics
finally
remember
update
description
comment
include
new
functionality
added
program
