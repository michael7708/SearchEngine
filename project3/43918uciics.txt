more java 

java
introduction
computer
science
iii
ics
21
22
23
introduction
short
lecture
will
clarify
points
meaning
final
variable
declarations
introduce
two
operators
used
conditional
expressions
discuss
short
circuit
evaluation
logical
operators
features
allow
us
write
compact
understandable
code
understand
language
features
final
real
world
constant
named
value
never
changes
examples
constants
£k
pi
speed
light
mass
proton
think
etc
programs
constant
variable
whose
value
never
changes
within
scope
time
variable
declared
slightly
liberal
definition
real
world
constant
program
constant
program
constant
real
world
constant
example
compute
mortgage
program
uses
current
interest
rate
value
real
world
constant
value
changes
daily
program
starts
computing
mortgage
payments
current
interest
rate
constant
program
seen
can
declare
local
variables
constants
using
final
access
modifier
recall
final
restricts
can
access
variable
variable
declared
final
must
intialized
value
can
examined
subsequent
expressions
value
can
never
changed
state
change
operator
will
use
terms
constant
final
variable
interchangably
write
code
tries
change
constant
java
compiler
detects
reports
syntax
constraint
error
fact
can
use
rule
get
interesting
information
compiler
every
statement
change
state
variable
changing
variable
constant
let
compiler
locate
errors
try
change
state
write
programs
declare
constants
instead
using
magic
literals
names
constants
will
help
us
remember
constant
means
without
see
values
6
022141e23
2
99792458e8
using
constants
instead
variables
makes
programs
less
prone
error
use
variable
might
accidentally
change
value
stores
impossible
constants
using
constants
also
makes
easier
change
programs
upcoming
rocket
program
can
write
01
lots
places
needed
change
value
001
accurate
simulation
might
search
code
carefully
make
correct
changes
might
01s
program
refering
time
increment
instead
declared
final
double
dt
01
dt
stands
delta
change
time
program
used
constant
dt
throughout
code
change
value
requires
editing
just
one
line
code
recompiling
program
although
use
final
example
may
bit
confusing
perfectly
legal
int
count
0
int
sum
0
final
int
score
prompt
forint
enter
score
1
terminate
score
1
break
count
sum
score
system
println
average
sum
count
example
score
declared
final
indeed
value
initialized
never
changes
scope
block
score
declared
block
finishes
score
becomes
undeclared
loop
re
executes
block
redeclaring
reinitializing
score
constant
use
score
meets
technical
requirements
constant
programmers
pronounce
code
excellent
others
say
indicating
final
worth
think
constants
specify
initializer
declaration
surprsingly
necessary
initializer
omitted
called
blank
final
variable
java
compiler
smart
enought
ensure
blank
final
variable
eventually
assigned
initial
value
blank
final
variable
used
assigned
value
blank
final
variable
never
reassigned
another
one
value
ok
write
code
like
final
double
blank
final
code
refer
constant
whatever
value
assigned
constant
one
branch
else
code
care
refer
change
constant
attempt
store
value
will
detected
reported
error
java
compiler
learn
write
instance
variables
classes
will
see
reasonable
uses
blank
final
conditional
operators
two
operators
work
together
java
helping
us
condense
code
allowing
us
write
short
expressions
instead
longer
statements
two
operators
constitute
called
conditional
expression
please
constrast
statements
sometimes
called
conditional
statements
distinction
expression
statement
important
ebnf
rule
conditional
expression
conditional
expression
expression
expression
expression
syntax
constraint
first
expression
must
return
boolean
result
second
two
expressions
must
return
result
type
can
type
must
match
will
write
conditional
expressions
using
following
form
almost
always
putting
parentheses
makes
reading
easier
test
expressiont
expressionf
together
called
ternary
operators
unary
binary
three
operands
called
distfix
operators
distributed
around
operands
prefix
infix
postfix
semantically
java
first
evaluates
test
true
result
conditional
expression
result
evaluating
expressiont
false
result
conditional
expression
result
evaluating
expressionf
two
three
expressions
ever
evaluated
conditional
expression
must
unique
result
type
value
can
computed
either
expressiont
expressionf
java
compiler
syntax
constraint
requires
expressions
type
look
three
concrete
examples
conditional
expressions
statements
condense
one
can
often
simplify
short
statements
even
shorter
conditional
expressions
large
statements
often
simplified
0
0
0
1
0
else
1
pennies
1
system
println
1
penny
else
system
println
pennies
pennies
system
println
pennies
pennies
1
penny
pennies
2
0
system
println
even
else
system
println
even
system
println
2
0
even
upon
reading
code
many
students
think
statements
simpler
familiar
statements
less
familiar
conditional
expressions
experience
programmers
think
conditional
expressions
simpler
course
form
ultimately
use
matter
taste
important
understand
conditional
expressions
can
switch
back
forth
simple
statements
possible
short
circuit
evaluation
learned
binary
infix
operators
evaluate
operands
first
compute
resulting
value
actually
ordering
correct
logical
operators
instead
operators
use
short
circuit
evaluation
always
evaluate
left
operand
first
can
compute
resulting
value
operand
alone
without
evaluating
right
operand
determine
resulting
value
left
operand
alone
evaluate
right
operand
compute
resulting
value
note
left
operand
evaluates
false
result
must
false
false
false
well
false
true
evaluate
false
value
right
operand
irrelevant
note
left
operand
evaluates
true
result
must
true
true
false
well
true
true
evaluate
true
value
right
operand
irrelevant
see
can
use
short
circuit
property
programming
assume
program
declares
int
totalparts
0
badparts
0
increments
appropriate
variables
part
tested
next
assume
ratio
bad
parts
total
parts
ever
5
05
want
recognize
problem
display
message
short
circuit
evaluation
can
simply
write
totalparts
0
double
badparts
double
totalparts
05
system
println
many
bad
parts
notice
totalparts
zero
left
operand
false
java
bother
evaluate
right
operand
without
short
circuit
evaluation
java
evaluate
right
operand
causing
exception
thrown
division
zero
also
written
second
conjunct
first
java
division
comparing
totalparts
zero
also
throw
exception
operands
operators
symmetric
short
circuit
evaluation
used
programming
language
without
short
circuit
evaluation
write
following
complicated
code
achieve
safety
division
zero
totalparts
0
double
badparts
double
totalparts
05
system
println
many
bad
parts
requires
two
nested
statements
instead
one
final
example
suppose
writing
game
playing
program
user
must
terminate
bet
play
loop
purse
0
elects
quit
former
true
user
even
prompted
electively
quitting
must
quit
money
short
circuit
evaluation
can
write
one
statement
captures
semantics
purse
0
prompt
forboolean
quit
break
short
circuit
evaluation
purse
zero
if's
test
will
evaluate
true
prompting
user
purse
zero
will
user
prompted
quitting
programming
language
without
short
circuit
evaluation
safely
write
following
complicated
code
purse
0
break
prompt
forboolean
quit
break
requires
two
sequential
statements
instead
one
finally
short
circuit
evaluation
actually
works
conditional
expressions
example
write
conditional
expresson
true
1
1
0
java's
result
1
expression
evaluates
true
java
evaluates
expression
1
expression
1
0
java
fully
evaluated
expressions
first
throw
exception
recall
semantics
conditional
expression
java
first
evaluates
test
true
result
conditional
expression
result
evaluating
expressiont
false
result
conditional
expression
result
evaluating
expressionf
uses
test
determine
expression
evaluate
evaluates
one
expression
always
evaluates
two
three
expressions
problem
set
ensure
understand
material
lecture
please
solve
announced
problems
read
lecture
get
stumped
problem
go
back
read
relevant
part
lecture
still
questions
please
get
help
instructor
ca
student
assume
declared
final
int
maxclasssize
50
following
statements
cause
java
compiler
detect
report
error
also
assume
int
maxclasssize
system
println
maxclasssize
maxclasssize
50
maxclasssize
10
maxclasssize
2
assume
declared
final
stringtokenizer
st
new
stringtokenizer
man
plan
canal
panama
following
statements
cause
java
compiler
detect
report
error
also
assume
int
string
st
nexttoken
st
counttokens
st
new
stringtokenizer
another
string
examine
two
code
fragments
say
whether
legal
rewrite
statement
using
conditional
expression
int
prompt
forint
enter
0
final
int
0
else
final
int
1
system
println
int
prompt
forint
enter
final
int
0
0
else
1
system
println
assume
declare
int
wrong
following
conditional
expression
system
println
0
0
non
zero
translate
following
statement
equivalent
conditional
expression
see
max
else
max
assume
declare
int
minute
assign
value
0
59
write
conditional
expression
whose
values
always
two
digit
string
representing
minute
stores
5
result
05
stores
25
result
25
