ics 22 cse 22 project 5 signal noise 
project 5 
project
5
signal
noise
due
date
time
friday
may
27
6
59pm
project
completed
individually
introduction
ability
generate
random
data
conforms
particular
format
can
handy
uncommon
us
want
test
programs
large
amount
data
can
find
bugs
inefficiencies
especially
arise
dealing
large
data
sets
kind
testing
often
called
stress
testing
generating
large
amounts
random
data
tedious
task
people
task
can
certainly
imagine
computer
good
hard
see
program
capable
generating
data
given
format
useful
kinds
circumstances
project
will
write
program
randomly
generates
data
form
described
grammar
grammars
addition
nice
way
model
problem
recurrent
study
computer
science
likely
see
studies
will
also
gain
practice
implementing
recursive
algorithm
java
vital
skill
will
find
useful
many
ways
continue
study
computing
grammars
grammar
collection
substitution
rules
describe
set
sentences
sentence
sequence
terminals
different
kinds
sentence
fragments
represented
variables
rule
variable
specifying
can
replaced
one
set
possible
sequences
variables
terminals
one
variables
designated
start
variable
means
represents
entire
sentence
example
grammar
follows
start
variable
variables
terminals
0
1
¡÷
0a1a
bb
¡÷
grammar
states
variable
can
replaced
either
sequence
0a1a
variable
variable
can
replaced
conceptual
point
view
grammar
can
used
generate
strings
terminals
following
manner
point
precisely
program
will
generate
strings
program
will
something
equivalent
effect
begin
start
variable
long
still
variables
substituted
pick
variable
rule
variable
left
hand
side
replace
variable
right
hand
side
rule
chose
sequence
substitutions
leading
start
variable
string
terminals
called
derivation
leftmost
variable
always
replaced
step
derivation
called
leftmost
derivation
string
00
1
1
can
generated
grammar
following
leftmost
derivation
begins
start
variable
one
substitution
made
step
proves
can
done
0a1a
00a1a1a
00b1a1a
00
1a1a
00
1b1a
00
1
1a
00
1
1b
00
1
1
since
00
1
1
can
generated
grammar
say
string
00
1
1
language
grammar
words
language
grammar
set
strings
can
generated
many
grammars
including
one
infinite
number
strings
languages
grammar
generates
infinite
number
strings
since
rule
¡÷
0a1a
can
used
arbitrary
number
times
derivation
concept
grammar
will
central
random
sentence
generator
grammar
will
describe
set
sentences
may
indeed
infinite
sentence
generate
will
sequence
words
words
terminals
grammar
variables
grammar
will
describe
sentence
fragments
start
variable
describing
entire
sentence
program
will
write
java
program
takes
grammar
file
input
writes
specified
number
randomly
generated
sentences
one
per
line
output
file
name
input
file
number
sentences
name
start
variable
name
output
file
passed
command
line
arguments
program
main
method
placed
class
called
generator
will
easily
able
figure
run
example
program
executed
command
line
java
generator
grammar
grm
10
start
sentences
command
specifies
grammar
file
file
called
grammar
grm
ten
sentences
generated
using
start
variable
start
written
output
file
called
sentences
program
required
take
four
command
line
arguments
order
though
course
values
might
different
fewer
four
command
line
arguments
provided
program
print
error
message
terminate
format
grammar
file
one
inputs
program
will
grammar
file
containing
one
rules
following
form
rule
starts
left
curly
brace
line
ends
right
curly
brace
line
opening
brace
first
line
rule
left
hand
side
remember
left
hand
side
rule
variable
name
delimited
brackets
drop
storing
variable's
name
memory
substring
method
string
class
will
handy
subsequent
lines
rule
alternative
right
hand
sides
different
ways
rewriting
left
hand
side
right
hand
side
consists
sequence
variables
whose
names
enclosed
brackets
terminals
combination
separated
whitespace
sequence
ends
semicolon
will
always
preceded
least
one
space
may
lines
text
outside
braces
lines
intended
comments
grammar
ignored
program
may
assume
grammar
files
will
always
precisely
form
required
check
errors
grammar
file
example
grammar
file
generates
random
facile
programs
since
program
generates
sentences
appear
one
line
word
nl
used
place
newline
character
separates
lines
facile
program
can
use
find
replace
text
editor
solve
program
make
possible
execute
generated
facile
programs
using
interpreter
project
3
generated
programs
will
syntax
errors
may
run
time
errors
problems
infinite
loops
division
zero
make
assumptions
variable
names
see
example
grammar
file
may
assume
names
variables
will
never
spaces
tabs
otherwise
may
make
assumptions
names
variables
will
many
rules
will
many
right
hand
sides
rule
will
general
grammar
file
meets
requirements
parsed
successfully
program
storing
grammar
set
objects
description
grammar
file
can
come
following
conclusions
grammar
file
contains
collection
rules
rules
variable
collection
right
hand
sides
right
hand
side
sequence
terminals
variables
facts
lead
directly
idea
design
set
objects
will
used
store
grammar
memory
imagine
following
classes
comprising
design
grammar
terminal
contains
word
makes
one
terminal
variable
contains
name
variable
righthandside
contains
sequence
terminals
variables
sequence
implies
order
important
suggest
using
arraylist
store
since
want
sequence
can
contain
terminals
variables
kinds
objects
might
make
sense
terminal
variable
implement
interface
called
symbol
need
methods
will
mark
terminal
variable
similar
purposes
grouping
together
arraylist
symbol
terminal
variable
implement
symbol
nothing
else
arraylist
symbol
will
able
contain
terminals
variables
nothing
else
rule
contains
name
variable
set
righthandsides
since
need
select
righthandside
randomly
generating
random
number
makes
sense
store
righthandsides
arraylist
though
order
turns
irrelevant
grammar
contains
name
start
variable
collection
rules
will
often
need
search
collection
looking
rule
particular
variable
may
use
flat
data
structure
arraylist
linked
list
store
rules
linear
search
like
however
better
approaches
employ
discussed
additional
challenges
section
later
write
learn
better
approaches
ics
23
cse
23
like
use
similar
object
oriented
approach
storing
grammar
memory
will
lead
clean
recursive
algorithm
generating
sentences
algorithm
described
next
section
generating
random
sentences
grammar
stored
grammar
set
objects
described
previous
section
possible
implement
relatively
straightforward
recursive
algorithm
generate
random
sentences
algorithm
revolves
around
idea
generating
sentence
fragments
putting
fragments
together
complete
sentence
first
step
implementation
establish
fact
objects
make
grammar
grammars
rules
righthandsides
variables
terminals
can
sentence
fragments
complete
sentences
generated
concept
can
wrapped
interface
called
generable
might
look
something
like
public
interface
generable
public
string
generate
grammar
random
grammar
rule
righthandside
variable
terminal
implement
interface
though
course
actual
implementation
generate
method
will
differ
one
class
another
necessary
generate
take
grammar
parameter
process
generating
sentence
sometimes
necessary
look
rule
grammar
corresponds
particular
variable
sketch
sentence
generation
algorithm
generate
sentence
grammar
call
generate
method
grammar
object
grammar
object
will
look
rule
corresponding
start
variable
call
generate
passing
parameter
generate
method
rule
chooses
one
righthandsides
random
using
random
object
passed
parameter
calls
generate
generate
method
righthandside
iterates
terminals
variables
left
right
calling
generate
putting
results
together
sentence
fragment
generate
method
variable
asks
grammar
rule
corresponding
variable
calls
generate
returning
result
sentence
fragment
generate
method
terminal
simply
returns
value
terminal
sentence
fragment
amazing
thing
recursive
strategy
relatively
little
code
able
ask
grammar
generate
random
sentences
caveat
symbol
interface
symbol
interface
implemented
terminal
variable
way
mark
terminals
variables
symbols
also
specify
symbols
generable
words
possible
generate
sentence
fragment
kind
symbol
terminal
variable
requires
one
additional
piece
syntax
learned
possible
one
interface
extend
another
general
interface
extends
interface
contains
methods
plus
methods
listed
case
symbol
interface
introduce
new
methods
include
generate
method
generable
interface
write
java
follows
public
interface
symbol
extends
generable
implementing
symbol
interface
variable
terminal
variable
terminal
will
required
generate
method
will
necessary
explicitly
state
variable
terminal
implements
generable
implied
fact
implement
symbol
random
number
generation
random
number
generation
work
since
program
must
generate
sentences
randomly
necessary
us
briefly
discuss
random
number
generators
work
computers
generate
sequences
genuinely
random
numbers
instead
generate
sequence
numbers
satisfy
statistical
tests
randomness
numbers
often
called
pseudo
random
numbers
provided
algorithm
used
generate
sequence
well
chosen
little
practical
difference
random
numbers
pseudo
random
ones
random
number
generator
object
generates
sequence
pseudo
random
numbers
works
number
sequence
determined
evaluating
mathematical
function
previous
number
sequence
time
say
give
next
pseudo
random
number
calculation
performed
one
got
back
last
time
result
returned
copy
stored
can
used
later
determine
next
number
sequence
order
start
process
number
needs
picked
will
used
calculate
opening
number
sequence
number
called
seed
selection
seed
important
mathematical
function
applied
every
time
ask
random
number
always
picked
number
seed
always
get
sequence
pseudo
random
numbers
handy
testing
programs
behave
randomly
good
want
truly
random
behavior
randomly
selected
seed
also
necessary
course
computers
select
numbers
random
common
way
supply
randomly
selected
seed
take
current
value
system's
clock
use
seed
truly
random
will
essentially
impossible
control
precisely
since
system
clock
kept
terms
milliseconds
java
random
class
java
util
package
provides
easy
use
random
number
generator
can
use
program
first
need
create
random
object
represents
sequence
pseudo
random
numbers
construct
object
initializes
seed
using
system
clock
created
random
object
can
ask
next
pseudo
random
number
calling
methods
nextint
nextlong
nextboolean
nextdouble
example
using
nextint
method
follows
random
new
random
done
resulting
random
object
reused
throughout
execution
program
int
nextint
100
nextint
100
returns
pseudo
random
number
range
0
99
inclusive
one
important
thing
remember
random
number
generation
work
project
single
random
object
represents
essence
sequence
random
numbers
important
create
one
random
object
use
throughout
program's
execution
good
technique
solving
problem
create
random
object
outside
grammar
pass
parameter
call
make
generate
solutions
problem
one
makes
possible
test
program
even
though
supposed
behave
randomly
explain
testing
section
later
write
infinite
recursion
expected
behavior
cases
grammars
permitted
recursive
example
following
grammar
legal
¡÷
ax
write
grammar
input
format
pass
program
input
program
will
recurse
infinitely
terminate
stackoverflowerror
happens
java
runs
space
store
call
stack
keeps
track
information
methods
currently
executing
reason
program
will
cause
program
crash
simply
way
recursion
suppose
start
variable
grammar
generate
will
called
rule
corresponding
start
variable
will
looked
rule
generate
will
called
rule
variable
generate
will
called
first
symbol
rule's
right
hand
side
variable
rule
corresponding
will
looked
grammar
rule
generate
will
called
rule
variable
generate
will
called
first
symbol
rule's
right
hand
side
variable
rule
corresponding
will
looked
grammar
test
program
grammars
like
expected
fact
difficult
avoid
program
crash
given
grammars
another
way
think
grammar
like
sentences
language
infinitely
long
surprising
program
generate
sentences
recurse
infinitely
note
recursive
grammars
problem
¡÷
xa
grammar
describes
infinite
language
sentences
sequence
one
x's
written
input
format
passed
program
grammar
cause
program
generate
sentences
various
numbers
x's
roughly
half
will
one
roughly
one
quarter
will
two
x's
roughly
one
eighth
will
three
x's
stop
think
minute
average
sentences
will
distributed
way
testing
problem
randomness
revisited
project
confronted
problem
testing
program
intentionally
random
behavior
randomness
makes
program
useful
finished
complicates
matter
testing
difficult
know
whether
difference
expect
get
caused
program
bug
intentionally
random
fluctuations
output
solution
problem
explore
testing
phase
project
solution
set
something
called
mock
object
mock
object
one
takes
place
actual
object
task
may
behave
unpredictably
may
require
using
resources
external
program
connect
web
site
load
information
database
will
cloud
results
unit
tests
possible
failures
unrelated
issues
testing
case
use
mock
random
number
generator
called
mockrandom
will
behave
just
like
random
object
java
will
nextint
method
will
also
extend
random
mockrandom
can
used
place
random
anywhere
like
difference
mockrandom
rather
giving
back
sequence
random
numbers
will
actually
give
back
exactly
sequence
numbers
ask
useful
test
code
know
exactly
expect
output
link
code
mockrandom
providing
use
check
comment
file
example
works
mockrandom
java
need
test
write
junit
test
generate
methods
various
grammar
classes
many
objects
interrelated
grammars
contain
rules
rules
contain
righthandsides
righthandsides
contain
symbols
etc
best
just
write
one
junit
test
case
class
tests
sentence
generating
behavior
total
note
required
test
parsing
input
file
writing
output
file
just
necessary
write
tests
set
grammar
various
sub
objects
call
generate
pass
mockrandom
object
generate
place
actual
random
object
deliberately
choosing
sequence
random
numbers
know
result
generating
sentence
try
think
interesting
grammars
test
just
use
one
generate
two
sentences
leave
interesting
cases
need
deal
different
numbers
right
hand
sides
rule
recursive
rules
infinitely
recursive
rules
think
might
try
will
uncover
bug
fine
hard
code
grammars
directly
test
methods
example
might
write
something
like
may
need
write
something
slightly
different
depending
design
names
various
methods
grammar
new
grammar
rule
r1
new
rule
righthandside
rhs1
new
righthandside
rhs1
addsymbol
new
terminal
alex
rhs1
addsymbol
new
terminal
rhs1
addsymbol
new
variable
r1
addrighthandside
rhs1
ultimately
want
test
methods
create
grammar
create
mockrandom
chosen
sequence
random
numbers
call
generate
method
assert
resulting
sentence
expected
deliverables
must
submit
java
files
comprise
program
please
turn
class
files
files
generated
development
environment
follow
link
discussion
submit
project
additional
challenges
discussed
earlier
write
sensible
design
strategy
write
grammar
class
encapsulates
complete
grammar
grammar
collection
rules
can
represented
rule
object
earlier
sections
write
advocate
storing
rule
objects
flat
data
structure
arraylist
linked
list
using
linear
search
whenever
need
look
rule
corresponding
particular
variable
however
actually
poor
approach
number
rules
will
large
many
sentences
will
generated
program
invite
explore
strategies
implementing
storage
rules
grammar
class
instead
store
rules
arraylist
keep
sorted
alphabetical
order
variable
name
look
rule
particular
variable
use
binary
search
instead
linear
search
find
tradeoff
work
time
will
spent
building
grammar
initially
though
will
need
happen
meanwhile
might
hundreds
sentences
generated
can
generated
quickly
computer
science
commonly
need
data
structure
stores
collection
data
indexed
unique
key
case
rules
grammar
indexed
uniquely
names
variables
since
one
rule
permitted
variable
oft
used
map
data
structure
exactly
right
tool
job
map
stores
collection
associations
contains
unique
key
associated
value
case
keys
variable
names
values
rules
couple
well
known
implementations
maps
learn
ics
23
cse
23
may
implement
one
project
wish
binary
search
tree
hash
table
imported
alex
thornton's
ics
22
eric
hennigan
winter
2011originally
written
alex
thornton
heavy
influence
worst
joke
ever
alex
thornton
winter
2007original
concept
mike
cleron
stanford
university
modified
adapted
allison
hansen
julie
zelinski
others
