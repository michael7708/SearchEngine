millennium 
operating system directions next millenium 
operating
system
directionsfor
next
millennium
william
bolosky
richard
draves
robert
fitzgerald
christopher
fraser
michael
jones
todd
knoblock
rick
rashid
microsoft
researchone
microsoft
wayredmond
wa
98052http
research
microsoft
com
abstract
believe
time
reexamine
operating
system
role
computing
operating
systems
exist
create
environment
compelling
applications
come
life
providing
abstractions
built
services
provided
hardware
argue
advances
hardware
networking
technology
enable
new
kind
operating
system
support
tomorrow
applications
operating
system
raise
level
abstraction
developers
users
individual
computers
file
systems
networks
become
unimportant
computations
way
processor
registers
disk
sectors
physical
pages
today
introduction
users
operators
programmers
distributed
systems
face
many
problems
users
world
wide
web
subjected
random
performance
service
disruptions
replacing
upgrading
personal
computer
workstation
server
difficult
even
moderate
size
computer
network
requires
significant
expertise
configure
maintain
principal
programming
abstractions
available
today
processes
threads
files
sockets
adequately
address
problems
managing
locality
availability
fault
tolerance
believe
distributed
operating
system
based
principles
pervasively
applied
address
problems
system
enforce
extreme
location
transparency
code
fragment
might
run
anywhere
data
object
might
live
anywhere
system
manage
locality
replication
migration
computations
data
system
self
configuring
self
monitoring
self
tuning
course
scalable
secure
part
millennium
project
microsoft
research
attempting
design
build
system
harbor
conceit
will
possible
fully
successful
endeavor
feel
time
right
radical
experimentation
position
paper
describes
goals
system
principles
support
goals
discuss
relevant
technology
trends
consider
examples
system
like
finally
discuss
related
research
efforts
conclude
goals
goal
dramatically
improve
users
computational
experience
end
system
least
following
properties
seamless
distribution
system
determine
computations
execute
data
resides
moving
dynamically
necessary
users
able
use
computing
device
part
distributed
system
naturally
productively
use
machine
desk
den
home
worldwide
scalability
logically
one
system
although
one
time
may
partitioned
many
pieces
example
disconnected
weakly
connected
operation
creates
temporary
network
partitions
fault
tolerance
system
transparently
handle
failures
removal
machines
network
links
resources
without
loss
data
functionality
hold
true
system
applications
self
tuning
system
able
reason
computations
resources
allocating
replicating
moving
computations
data
optimize
performance
resource
usage
fault
tolerance
self
configuration
new
machines
network
links
resources
automatically
assimilated
security
although
single
system
image
presented
data
computations
may
many
different
trust
domains
different
rights
capabilities
available
different
security
principals
like
internet
system
allow
non
hierarchical
trust
domains
central
authority
necessary
resource
controls
providers
consumers
may
explicitly
manage
use
resources
belonging
different
trust
domains
instance
people
might
content
allow
data
computations
use
resources
available
anywhere
companies
might
choose
instance
store
compute
year
end
financial
statement
competitor
machines
principles
achieve
goals
propose
distributed
operating
system
built
principles
aggressive
abstraction
storage
irrelevance
location
irrelevance
just
time
binding
introspection
aggressive
abstraction
level
abstraction
raised
point
application
programmers
freed
mechanics
distributed
programming
exigencies
physical
computing
components
allow
focus
application
concerns
actually
solving
problem
user
rather
system
concerns
communication
fault
tolerance
greatest
extent
possible
system
handle
difficult
issues
like
data
placement
resource
location
fault
tolerance
load
balancing
storage
irrelevance
storage
hierarchy
created
information
accessible
longer
needed
referenced
location
irrelevance
objects
allowed
reference
invoke
operations
without
regard
current
location
replication
state
system
seamless
appearance
despite
underlying
distributed
nature
just
time
binding
bindings
particular
computations
data
hardware
resources
made
actually
required
preventing
applications
creating
bindings
interfere
distribution
fault
tolerance
computations
data
arbitrarily
duplicated
bindings
made
one
instance
equivalent
bindings
instances
just
time
binding
enhance
resource
access
management
operating
system
redirect
access
resource
time
reason
equivalent
entity
introspection
system
possess
aspects
self
examination
reflection
pervasively
monitor
applications
reason
configuration
performance
issues
models
configuration
operation
suggest
opportunities
self
tuning
well
generate
suggestions
physical
configuration
changes
upgrades
improve
performance
aggressive
abstraction
addresses
number
goals
laid
system
provide
applications
highly
abstract
virtual
machine
semantics
defining
computations
software
terms
independent
particular
platform
configuration
allow
state
maintained
abstract
form
compiled
efficient
executable
form
last
possible
moment
operating
system
retain
ultimate
control
computation
typical
applications
even
able
express
access
low
level
system
resources
allow
operating
system
protect
computations
transparently
migrate
distribute
intercede
access
resources
storage
location
irrelevance
address
issue
seamless
interaction
information
independent
properties
interactive
users
walk
computer
anywhere
active
applications
personal
data
follow
programs
work
regardless
components
distributed
internet
provides
good
examples
today
kind
just
time
binding
extend
object
interactions
server
names
addresses
internet
often
refer
specific
resources
collections
systems
take
internet
identity
address
particular
collection
users
users
becoming
accustomed
can
best
described
binding
search
information
referenced
name
keyword
attributes
introspection
guarantees
system
take
responsibility
determining
computation
executes
data
resides
programmer
decide
whether
code
will
execute
client
server
instead
system
assessment
hardware
resources
usage
patterns
determine
placement
computations
data
allow
operating
system
provide
fault
tolerance
high
availability
self
tuning
behavior
applications
technology
trends
might
seem
extreme
pervasively
apply
principles
point
removing
programmers
many
decisions
currently
seen
important
application
development
approach
operating
system
design
really
just
extrapolation
current
trends
throughout
history
computer
science
advances
operating
system
programming
language
design
raised
level
abstraction
removed
control
application
programmers
trend
inevitable
driven
continuing
exponential
increase
performance
computing
hardware
software
project
tradeoff
amount
programming
effort
application
functionality
resulting
performance
better
hardware
means
performance
available
spent
increased
functionality
reduced
development
cost
furthermore
relationship
powerful
abstractions
development
cost
non
linear
hard
imagine
amount
engineering
effort
producing
system
like
today
world
wide
web
using
1950
software
technology
even
running
modern
hardware
admittedly
occasional
setbacks
trend
people
focus
bypassing
abstractions
improved
performance
many
advances
operating
systems
networking
demonstrate
trend
provide
technical
underpinnings
another
step
forward
distributed
file
systems
anderson
et
al
96
kistler
satya
92
succeeded
providing
efficient
location
transparent
access
data
recent
file
system
work
wilkes
et
al
96
neefe
et
al
96
focuses
auto
configuring
self
tuning
different
loads
network
auto
configuration
lan
level
rodeheffer
schroeder
91
thomson
narten
96
increasingly
possible
distributed
garbage
collection
remains
difficult
problem
progress
made
ferreira
shapiro
94
systems
distributing
parallel
work
now
exist
geist
et
al
94
livny
95
programming
languages
compilers
provide
evidence
similar
evolution
programmer
decisions
increasingly
automated
routine
write
assembly
language
now
cases
compiler
higher
level
language
like
almost
well
debugging
portability
maintainability
improved
compiler
better
able
analyze
myriad
details
optimize
instruction
selection
scheduling
register
allocation
spilling
etc
today
trend
continuing
popularity
easy
use
environments
like
java
visual
basic
delphi
emphasis
tools
industry
shifting
code
efficiency
rapid
application
development
wizards
automatically
generate
scaffolding
framework
code
virtual
machine
environments
just
time
compilation
adl
tabatabai
96
arnold
gosling
96
extend
programmer
insulation
processor
architecture
details
delaying
binding
run
time
system
like
given
distributed
system
properties
described
might
function
practice
section
present
several
scenarios
highlight
major
aspects
position
new
machine
user
purchases
installs
new
personal
computer
workstation
hardware
vendor
done
good
job
cables
connectors
plugging
system
together
easy
user
plugs
power
network
cables
wall
flips
power
switch
moment
boot
rom
perhaps
boot
loader
disk
downloads
code
network
new
machine
joins
millennium
system
user
full
access
millennium
human
managed
configuration
activities
required
millennium
evaluates
hardware
resources
new
computing
device
acquired
starts
shift
computations
data
response
new
network
administrator
sets
new
office
network
connecting
various
computers
links
routers
network
initially
quiescent
administrator
inserts
millennium
installation
dvd
disk
one
machines
system
propagates
across
network
evaluating
network
topology
hardware
resources
millennium
might
suggest
one
powerful
machines
server
moved
different
network
location
best
performance
point
administrator
connects
office
network
internet
office
instantiation
millennium
system
merges
worldwide
system
hardware
failure
office
computer
goes
perhaps
power
supply
burned
millennium
system
reconfigures
around
missing
machine
computer
still
ran
computations
data
stored
either
automatically
replicated
systems
logged
rerun
recomputed
time
failure
millennium
identifies
unique
state
replicated
must
reconstructed
initiates
computations
automatically
general
users
may
detect
hesitation
system
moves
recreates
data
attempt
access
otherwise
unaware
change
interactive
user
failed
machine
shifts
another
machine
resumes
work
immediately
simply
plugs
replacement
web
service
little
known
web
site
suddenly
achieves
popularity
perhaps
link
cool
site
daysm
mention
prominent
news
story
word
mouth
spreads
soon
web
site
servers
overwhelmed
rather
overwhelmed
except
heuristics
millennium
system
noticed
new
link
already
started
replicating
site
increased
availability
monitored
traffic
increases
confirm
situation
soon
site
data
pre
cached
across
internet
site
usage
drops
following
weeks
millennium
reallocates
resources
meet
new
demands
distributed
programming
consider
simple
fragment
pseudo
code
first
null
next
age
18
height
6
weight
180
count
executed
distributed
environment
efficient
strategy
code
like
unclear
code
data
replicated
moved
loop
iterations
executed
parallel
happens
error
handling
general
making
decisions
requires
knowledge
network
system
parameters
plus
knowledge
current
conditions
millennium
network
operations
intrinsically
carry
code
execute
remotely
programmer
deal
explicitly
instead
millennium
system
automatically
dynamically
exploits
locality
concurrency
opportunities
example
code
fragment
believe
feasible
compiler
techniques
identify
conditional
test
code
execute
object
location
circumstances
complicated
scenarios
variations
run
time
make
desirable
perform
optimizations
dynamically
just
time
related
work
several
current
projects
share
goals
directions
webos
project
vahdat
et
al
96
vahdat
et
al
97
addresses
goal
bringing
distributed
computing
world
wide
web
heart
webos
system
webfs
global
file
system
webfs
provides
secure
cache
coherent
access
data
webos
also
includes
remote
execution
service
webos
can
used
build
highly
available
self
tuning
web
services
inferno
system
lucent
96
integrates
operating
system
language
environment
goal
making
easier
create
distributed
services
like
java
arnold
gosling
96
inferno
creates
virtual
machine
environment
applications
however
inferno
also
includes
network
protocols
services
distributed
programming
stand
alone
implementation
suitable
minimal
hardware
environments
sun
moving
java
direction
development
javaos
mitchell
96
globe
project
steen
96
homburg
et
al
96
investigates
distributed
shared
objects
technique
building
large
scale
distributed
systems
local
object
representatives
hide
details
like
replication
mobility
local
objects
standard
internal
structure
makes
easier
reuse
code
components
one
globe
major
features
hierarchical
distributed
location
service
adapts
dynamically
different
usage
patterns
legion
grimshaw
et
al
97
proposes
using
extensible
object
model
provide
single
system
model
worldwide
network
computers
legion
emphasizes
high
performance
parallel
computing
supports
legacy
codes
encapsulating
legion
style
object
oriented
wrappers
legion
automatically
manages
object
replication
migration
supplies
single
persistent
global
name
space
conclusion
described
goals
new
distributed
operating
system
improvements
hardware
networking
technology
coupled
continuing
operating
system
programming
language
advances
enable
creation
operating
system
raises
level
abstraction
presented
applications
operating
system
provide
seamless
distribution
worldwide
scalability
fault
tolerance
self
tuning
self
configuration
security
resource
controls
references
adl
tabatabai
96
ali
reza
adl
tabatabai
geoff
lnagdale
steven
lucco
robert
wahbe
efficient
language
independent
mobile
programs
proceedings
acm
sigplan
96
conference
programming
language
design
implementation
pp
127
136
may
1996
anderson
et
al
96
anderson
dahlin
neefe
roselli
patterson
wang
serverless
network
file
systems
acm
transactions
computer
systems
14
1
february
1996
arnold
gosling
96
ken
arnold
james
gosling
java
programming
language
addison
wesley
1996
ferreira
shapiro
94
paulo
ferreira
marc
shapiro
garbage
collection
dsm
consistency
proceedings
first
symposium
operating
systems
design
implementation
monterey
california
november
1994
geist
et
al
94
geist
beguelin
dongarra
jiang
manchek
sunderam
pvm
parallel
virtual
machine
users'
guide
tutorial
networked
parallel
computing
scientific
engineering
series
mit
press
1994
grimshaw
et
al
97
grimshaw
wulf
legion
team
legion
vision
worldwide
virtual
computer
communications
acm
40
1
january
1997
homburg
et
al
96
philip
homburg
maarten
van
steen
andrew
tanenbaum
architecture
wide
area
distributed
system
proceedings
seventh
acm
sigops
european
workshop
connemara
ireland
september
1996
kistler
satya
92
kistler
satyanarayanan
disconnected
operation
coda
file
system
acm
transactions
computer
systems
10
1
3
25
february
1992
livny
95
livny
condor
distributed
processing
system
dr
dobbs
journal
pp
40
58
february
1995
lucent
96
lucent
technologies
inferno
la
commedia
interattiva
http
inferno
lucent
com
inferno
infernosum
html
1996
mitchell
96
jim
mitchell
javaos
back
future
invited
talk
second
symposium
operating
systems
design
implementation
seattle
washington
october
1996
neefe
et
al
96
neefe
roselli
wang
anderson
dahlin
improving
performance
log
structured
file
systems
http
http
cs
berkeley
edu
neefe
papers
osdi
submit
ps
1996
rodeheffer
schroeder
91
thomas
rodeheffer
michael
schroeder
automatic
reconfiguration
autonet
proceedings
thirteenth
acm
symposium
operating
systems
principles
pacific
grove
california
pp
183
197
october
1991
steen
96
maarten
van
steen
globe
project
http
www
cs
vu
nl
steen
globe
1996
tennenhouse
wetherall
96
tennenhouse
wetherall
towards
active
network
architecture
acm
sigcomm
computer
communication
review
pp
5
18
april
1996
thomson
narten
96
thomson
narten
ipv6
stateless
address
autoconfiguration
ietf
request
comments
1971
august
1996
vahdat
et
al
96
amin
vahdat
michael
dahlin
thomas
anderson
turning
web
computer
http
now
cs
berkeley
edu
webos
webos
ps
1996
vahdat
et
al
97
amin
vahdat
paul
eastham
chad
yoshikawa
michael
dahlin
thomas
anderson
webos
software
support
scalable
web
services
submitted
sixth
workshop
hot
topics
operating
systems
chatham
massachussetts
may
1997
wilkes
et
al
96
wilkes
golding
staelin
sullivan
hp
autoraid
hierarchical
storage
system
acm
transactions
computer
systems
14
1
108
136
february
1996
back
top
home
research
areas
people
msr
search
downloads
sitemap
