ics 32 winter 2013 code example exceptional control flow 
exceptional control flow python applied opening reading text files 
ics
32
winter
2013
news
course
reference
schedule
project
guide
code
examples
alex
ics
32
winter
2013
code
example
exceptional
control
flow
background
understanding
difference
success
failure
function
called
python
function
asked
kind
job
function
job
returns
result
always
object
type
though
object
might
special
object
none
function's
role
generate
kind
side
effect
printing
output
rather
calculating
giving
back
result
seen
many
functions
accept
parameters
allow
function
slightly
different
job
time
called
example
function
downloads
image
internet
probably
take
least
one
parameter
address
image
downloaded
function
potentially
used
download
image
instead
just
particular
image
interaction
function
caller
python
least
similarity
certain
kinds
interactions
people
think
happens
ask
friend
something
like
5
can
drive
starbucks
buy
latte
conceptually
lot
like
calling
function
python
5
starbucks
latte
parameters
even
assuming
friend
understands
instructions
perfectly
willing
guaranteed
get
result
asked
case
latte
circumstances
get
take
much
thought
realize
failure
possibility
friend's
car
might
working
order
might
use
someone
else
friend
might
even
one
starbucks
might
closed
might
run
coffee
latte
might
cost
5
now
think
python
function
downloads
image
internet
even
assuming
function
perfectly
written
can
anything
go
wrong
sure
internet
connection
might
working
web
site
trying
download
image
might
might
contain
image
asked
might
exist
result
function
return
case
going
back
previous
example
send
someone
starbucks
turns
starbucks
closed
get
result
instead
handing
coffee
friend
might
instead
inform
job
done
sorry
friend
might
say
get
coffee
starbucks
closed
right
away
friend
might
say
crazy
car
remember
either
way
getting
coffee
wanted
python
function
called
asked
job
broadly
speaking
just
like
case
sending
friend
coffee
two
possible
outcomes
even
assuming
function
bugs
function
will
complete
job
successfully
return
object
type
expect
function
will
fail
complete
job
functions
fail
differently
succeed
python
rather
just
returning
object
indicates
failure
return
object
instead
raise
exception
despite
name
nothing
exceptional
exceptions
rare
necessarily
indicative
bugs
cause
well
written
programs
crash
exception
just
means
function
failed
complete
job
finesse
required
deciding
done
happens
exception
raised
exception
handled
anywhere
program
will
cause
crash
see
traceback
specifies
information
unhandled
exception
program
execution
time
exception
raised
example
consider
nonsensical
python
module
oops
py
def
3
def
print
len
name
'
main
'
run
module
idle
see
result
offers
insight
happens
exception
called
python
traceback
recent
call
last
file
example
oops
py
line
11
file
example
oops
py
line
3
file
example
oops
py
line
7
print
len
typeerror
object
type
'int'
len
reading
traceback
bottom
provides
lot
useful
information
type
exception
exceptions
objects
python
just
like
everything
else
typeerror
descriptive
account
problem
object
type
'int'
len
hint
trying
get
length
integer
integers
length
exception
actually
raised
line
7
oops
py
code
function
traceback
even
tells
us
code
line
7
function
called
function
line
3
oops
py
function
called
main
statement
line
11
oops
py
given
information
take
long
figure
happened
called
initialized
local
variable
integer
value
3
type
int
called
passed
's
parameter
within
also
type
int
attempted
get
length
int
ints
length
exception
raised
exception
raised
within
function
contain
code
handles
exceptions
will
cause
function
fail
control
proceeds
whatever
function
called
function
option
either
handle
step
aside
one
handles
exception
eventually
functions
fail
point
see
traceback
case
raised
exception
handle
handle
either
main
statement
handle
either
saw
traceback
catching
exception
specify
happen
function
exceptions
raised
writing
try
statement
try
statement
built
clauses
structured
like
try
statements
will
attempted
exception
raised
control
leaves
try
clause
immediately
except
statements
will
execute
statement
try
clause
raises
exception
else
statements
will
execute
leaving
try
exception
raised
finally
statements
will
always
execute
leaving
try
whether
exception
raised
two
combinations
clauses
legal
combinations
illegal
nonsensical
think
cases
clauses
must
listed
order
try
finally
nothing
elsea
try
least
one
except
optionally
else
optionally
finally
except
clauses
can
optionally
often
specify
type
exception
handle
python
executes
except
clauses
type
exception
matches
type
except
clause
can
handle
except
clauses
type
listed
can
handle
kind
exception
handling
exceptions
appropriately
understand
mechanics
construct
python
behaves
next
task
understanding
appropriate
ways
use
part
programming
language
right
every
circumstance
now
seen
can
handle
exceptions
nuanced
problem
understand
handle
handle
guidelines
consider
writing
function
calls
another
function
one
thing
want
thinking
whether
raises
exceptions
whether
can
fail
complete
job
need
consider
whether
failure
also
implies
failure
whether
reasonably
carry
way
fails
whenever
fails
want
catch
exception
reasonably
continue
catch
exception
continue
work
experience
common
function
catch
exception
catch
especially
true
tend
write
relatively
short
simple
functions
break
larger
complex
functions
smaller
ones
likely
failure
one
will
cause
cascading
failure
several
others
smaller
slice
something
bigger
finally
clause
primarily
used
might
call
cleanup
especially
true
function
acquires
kind
external
resource
like
file
connection
across
network
functions
calls
will
use
case
file
example
finally
clause
provides
obvious
place
close
file
opened
want
catch
exception
want
ensure
cleanup
done
exception
raised
try
finally
except
else
appropriate
way
code
try
statement
completes
successfully
exception
raised
function
fails
cleanup
finally
will
always
done
code
mind
code
example
previous
lecture
well
alternative
example
chance
cover
one
example
shows
scenario
might
consider
catching
exception
raised
reasonable
way
handle
still
function
complete
work
another
example
shows
scenario
catching
exception
raised
clearly
wrong
way
function
complete
work
without
dramatically
contorting
purpose
example
presented
single
commented
python
module
linked
print
lines
modulethe
line
count
module
