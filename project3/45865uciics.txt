ics 32 winter 2013 code example the statement context managers 
the statement context managers 
ics
32
winter
2013
news
course
reference
schedule
project
guide
code
examples
alex
ics
32
winter
2013
code
example
statement
context
managers
background
spent
time
quarter
reiterating
something
probably
seen
previous
coursework
vital
external
resources
files
sockets
released
way
done
many
times
resources
like
special
methods
can
call
often
though
always
called
close
used
release
two
issues
need
overcome
remember
call
appropriate
method
release
resources
easy
thing
forget
yet
always
immediately
apparent
penalty
forgetting
slow
resource
leak
problematic
especially
long
running
program
though
always
immediately
data
flushed
saved
program
ends
gets
lost
important
sure
resources
released
normal
cases
exceptions
raised
making
techniques
like
try
finally
vital
even
functions
intend
catch
exceptions
seen
previous
code
examples
used
try
finally
solve
problem
releasing
resources
lead
fairly
convoluted
looking
code
like
function
def
print
file
contents
file
path
none
try
open
file
path
'r'
print
lines
file
leaving
newline
character
end
line
line
print
line
1
finally
ensure
file
closed
successfully
opened
none
close
takes
relatively
simple
function
one
opens
file
prints
contents
console
one
line
time
complicates
otherwise
unnecessary
try
finally
statement
initializing
variable
none
checking
later
variable
set
something
none
want
write
code
less
noise
signal
code
actually
noisier
like
half
code
function
ensure
file
closed
properly
fortunately
python
provides
solution
problem
requires
us
learn
new
kind
statement
statement
python
statement
used
automate
release
resources
files
sockets
http
response
object
returned
urllib
request
urlopen
creating
one
objects
statement
will
released
file
object
close
method
will
called
automatically
soon
exit
scope
statement
release
will
happen
automatically
regardless
whether
exit
statement
normally
exception
raised
creating
object
fails
attempt
will
made
release
words
right
thing
happens
automatically
without
us
handle
various
cases
carefully
foo
function
wrote
dramatically
simplified
using
statement
logic
handling
closing
file
will
become
automatic
function
rewritten
using
look
like
def
foo
file
path
open
file
path
'r'
print
lines
file
leaving
newline
character
end
line
line
print
line
1
statement
function
means
open
file
reading
naming
resulting
object
means
opening
file
succeeds
automatically
close
file
soon
fall
statement's
scope
matter
fell
scope
whether
loop
concluded
normally
exception
raised
notice
much
shorter
simpler
function
became
code
used
ensure
file
closed
properly
including
special
care
took
make
sure
try
close
unless
opened
melted
away
handled
automatically
statement
function
now
entirely
signal
noise
python's
statement
example
often
called
syntactic
sugar
programming
language
term
sounds
disparaging
really
syntactic
sugar
introduce
new
abilities
achieved
ways
can
choose
manually
handle
closing
files
carefully
using
try
finally
technique
seen
allows
us
express
succinctly
prevents
us
making
mistakes
giving
us
simpler
way
solve
complex
problem
write
python
programs
use
whenever
can
always
prefer
automating
task
might
screw
programming
long
enough
know
every
chunk
code
write
opportunity
make
mistake
matter
careful
reducing
set
possible
mistakes
might
make
pays
enormously
making
objects
context
managers
recall
manipulating
sockets
reading
writing
text
ended
three
objects
part
work
socket
object
two
pseudo
file
objects
one
reading
text
writing
stored
three
objects
together
namedtuple
represented
connection
one
object
store
one
object
pass
parameter
seen
though
namedtuples
know
store
things
know
things
write
class
make
new
kind
object
stored
three
objects
socket
two
pseudo
file
objects
needed
text
based
conversation
across
socket
teach
things
us
one
thing
teach
managed
automatically
statement
socket
two
pseudo
file
objects
closed
automatically
exit
scope
statement
handy
classes
built
python
standard
library
can
used
statement
even
handy
make
classes
indeed
can
learn
python's
requirements
making
class
support
statement
follow
requirements
classes
class
whose
objects
needed
release
resources
close
files
close
sockets
write
code
class
automate
process
python
can
allow
objects
class
used
statement
making
objects
something
called
context
manager
conceptually
object
context
manager
two
special
things
knows
knows
entered
done
enter
statement
object
created
code
statement
executes
knows
exited
done
automatically
scope
statement
exited
either
normally
exception
raised
object
told
whether
exit
normal
exceptional
reasons
two
operations
can
added
class
implementing
two
special
methods
notice
names
methods
like
init
begin
end
two
underscores
common
way
python
specify
names
methods
implement
special
functionality
built
language
enter
self
called
just
statement
entered
returns
object
used
within
statement
quite
often
just
self
possible
return
another
object
necessary
exit
self
type
value
traceback
called
statement
exited
exit
normal
finished
code
inside
without
exception
raised
type
value
traceback
will
value
none
exit
exception
raised
caught
inside
type
will
specify
type
exception
value
will
specify
error
message
associated
exception
traceback
will
specify
exception's
traceback
writing
two
methods
class
makes
possible
use
objects
class
statement
simple
example
consider
class
prints
output
various
things
happen
way
visualize
enter
exit
called
statement
class
boo
def
init
self
print
'initializing
boo
object'
def
enter
self
print
'entering
context
boo'
return
self
def
exit
self
type
value
traceback
print
'exiting
context
boo'
end
''
type
none
print
'
exception
type
'
format
type
else
print
'
normally'
given
class
now
consider
two
functions
def
one
boo
print
'inside
statement'
def
two
boo
print
'inside
statement'
raise
valueerror
'this
cool'
print
'still
inside
statement'
call
one
see
output
console
initializing
boo
object
entering
context
boo
inside
statement
exiting
context
boo
normally
whereas
call
two
see
output
instead
initializing
boo
object
entering
context
boo
inside
statement
exiting
context
boo
exception
type
class
'valueerror'
cases
creating
boo
object
causes
init
method
called
initialize
see
ouptut
initializing
boo
object
object
created
statement
calls
enter
boo
object
whatever
enter
returns
assigned
code
inside
statement
executed
two
functions
differ
case
one
function
see
body
statement
print
inside
statement
statement
exited
normally
exception
exit
called
boo
object
type
value
traceback
equal
none
case
two
function
body
statement
begins
printing
inside
statement
see
console
exception
raised
caught
within
statement
statement
exited
immediately
exit
called
boo
object
type
class
valueerror
type
exception
raised
value
error
message
'this
cool'
traceback
exception's
traceback
since
exception
also
caught
within
two
function
exception
will
raised
two
's
caller
mechanics
statement
works
code
example
linked
explores
use
solve
actual
problem
managing
socket
two
pseudo
file
objects
implemented
i32tfsp
protocol
earlier
code
examples
code
code
example
consists
class
implements
quick
dirty
http
requester
gives
us
ability
issue
http
request
web
browsers
http
response
printed
console
class
made
context
manager
objects
can
used
statements
allowing
socket
pseudo
file
objects
closed
automatically
like
many
built
types
python
standard
library
manage
external
resources
http
requester
py
