
element cpp 
id
element
cpp
1106
2007
04
16
23
20
29z
chenli
element
cpp
copyright
2003
2007
regents
university
california
redistribution
file
permitted
terms
gnu
public
license
gpl
date
march
2002
authors
michael
ortega
binderberger
miki
ics
uci
edu
liang
jin
liangj
ics
uci
edu
chen
li
chenli
ics
uci
edu
include
include
include
include
element
uses
struct
rect
index
distancefunction
distancefunction
constructor
initialize
weights
makedefaultfunction
void
distancefunction
makedefaultfunction
int
0
numdims
dimension
weights
1
0
query
point
queue
erase
query
point
queue
begin
query
point
queue
end
total
point
wt
sum
0
0
normalizeweights
void
distancefunction
normalizeweights
make
internal
weights
add
numdims
float
wt
sum
0
0
int
0
numdims
wt
sum
dimension
weights
0
numdims
dimension
weights
dimension
weights
float
numdims
wt
sum
float
total
0
0
multimap
iterator
query
point
queue
begin
query
point
queue
end
add
wt
points
total
first
total
point
wt
sum
total
bool
distancefunction
add
query
point
struct
rect
query
point
float
point
wt
add
query
point
query
point
queue
insert
pair
point
wt
query
point
total
point
wt
sum
point
wt
accumulate
key
return
true
chenli
distance
functions
float
distancefunction
compute
distance
aux
struct
rect
query
struct
rect
item
assumes
points
assert
null
query
assert
null
item
float
distance
0
int
0
iboundary
item
boundary
query
boundary
item
boundary
distance
sqrt
distance
return
distance
want
independently
configurable
function
can
also
manipulate
feedback
later
func
needs
work
multipoint
joinable
float
distancefunction
compute
distance
struct
rect
query
struct
rect
item
null
query
use
query
points
queue
else
use
query
float
distance
0
0
0
since
assume
dealing
points
using
first
numdims
dimensions
others
repetitions
null
query
fixed
multipoint
query
assert
total
point
wt
sum
0
0
used
normalize
0
iterate
points
multimap
iterator
query
point
queue
begin
query
point
queue
end
add
point
compute
distance
aux
second
item
distance
first
total
point
wt
sum
wsum
normalized
total
else
simple
joinable
query
distance
compute
distance
aux
query
item
return
distance
rectangle
mindist
functions
float
distancefunction
rectangle
mindist
struct
rect
r1
struct
rect
r2
compares
2
mbrs
mindist
asume
rectangle
assert
null
r1
assert
null
r2
float
distance
0
choice
0
0
int
0
iboundary
r2
boundary
numdims
choice
r1
boundary
r2
boundary
numdims
else
r2
boundary
r1
boundary
numdims
choice
r2
boundary
r1
boundary
numdims
else
choice
0
0
distance
dimension
weights
choice
choice
distance
sqrt
distance
return
distance
mindist
functions
float
distancefunction
compute
mindist
aux
struct
rect
query
struct
rect
item
asume
query
point
item
rectangle
assert
null
query
assert
null
item
float
distance
0
choice
0
0
int
0
iboundary
item
boundary
choice
item
boundary
small
point
iboundary
item
boundary
numdims
choice
item
boundary
numdims
big
point
big
else
choice
query
boundary
else
point
results
dist
0
distance
dimension
weights
query
boundary
choice
query
boundary
choice
distance
sqrt
distance
return
distance
float
distancefunction
compute
mindist
struct
rect
query
struct
rect
item
see
also
function
compute
distance
compute
mindist
watch
case
multipoint
queries
item
always
treated
rectangle
float
distance
0
0
0
null
query
fixed
multipoint
query
use
list
assert
total
point
wt
sum
0
0
used
normalize
0
iterate
points
multimap
iterator
query
point
queue
begin
query
point
queue
end
add
point
compute
mindist
aux
second
item
sort
assuming
1
point
distance
first
total
point
wt
sum
wsum
normalized
total
else
simple
joinable
query
assume
query
single
point
item
rectangle
distance
compute
mindist
aux
query
item
return
distance
bool
distancefunction
feedback
start
reset
single
iteration
feedback
data
feedback
join
data
erase
feedback
join
data
begin
feedback
join
data
end
feedback
nn
data
erase
feedback
nn
data
begin
feedback
nn
data
end
return
true
int
distancefunction
feedback
add
tuple
float
relevance
struct
rect
query
struct
rect
item
assert
null
item
item
exist
null
query
dealing
nn
use
points
query
point
queue
base
points
feedback
nn
data
insert
pair
relevance
item
else
dealing
join
accumulate
one
go
issue
update
dimension
weights
join
pair
result
item
appdataitem
di1
di2
di1
id
di2
id
0
di1
rect
query
di2
rect
item
item
first
di1
item
second
di2
item
distance
relevance
feedback
join
data
insert
pair
relevance
item
return
1
alpha
beta
restrain
speed
convergence
define
alfa
0
5
define
beta
0
5
bool
distancefunction
feedback
take
info
collected
perform
function
update
prepare
double
sum
numdims
sumsq
numdims
mean
numdims
stddev
numdims
int
count
0
int
0
0
nn
type
may
modify
query
points
query
point
movement
standard
deviation
along
dimension
throw
relevant
points
multimap
iterator
feedback
nn
data
begin
feedback
nn
data
end
0
0
ok
int
0
1
0
rect
else
feedback
join
data
size
0
join
type
just
concentrate
getting
standard
deviation
along
dimension
iterate
relevant
pairs
join
pair
result
list
iterator
feedback
join
data
begin
feedback
join
data
end
ensure
use
difference
dimensions
float
relevance
first
second
distance
also
relevance
int
0
1
ok
far
mean
first
float
min
stddev
flt
max
case
0
0
0
min
stddev
stddev
record
smallest
nonzero
deviation
min
stddev
stddev
got
stats
minimum
stddev
use
half
minimum
zero
stddev
way
protect
divide
zero
get
nice
big
weight
int
0
