ics 142 winter 2004 assignment 6 
assignment 6 
ics
142
winter
2004
news
course
reference
schedule
lab
manual
ics
142
newsgroup
alex
ics
142
winter
2004
assignment
6
due
date
time
friday
march
19
11
59pm
introduction
ultimately
job
compiler
take
program
source
language
generate
equivalent
program
target
language
generally
target
language
executable
program
platform
meaning
assembly
code
must
generated
stage
many
abstractions
provided
high
level
programming
languages
procedures
scopes
arrays
structures
support
variety
built
data
types
including
automatic
conversions
name
exist
assembly
level
overall
job
back
end
compiler
map
higher
level
abstractions
lower
level
ones
choosing
assembly
level
implementation
high
level
language
constructs
naturally
implementations
language
constructs
better
others
better
situations
worse
others
context
plays
large
role
selecting
good
implementation
complexities
generating
good
intermediate
code
complicated
attempting
analyze
context
fly
makes
good
software
engineering
sense
generate
intermediate
code
makes
best
guess
good
implementation
allow
optimizer
find
better
implementations
whenever
possible
based
complex
analysis
context
job
optimizer
take
intermediate
code
program
rewrite
better
program
equivalent
effect
better
course
can
mean
many
things
faster
less
memory
usage
less
power
consumption
example
optimizers
can
employ
many
forms
analysis
improve
program
typically
arranged
passes
pass
uses
one
technique
attempt
improve
code
net
effect
passes
may
repeated
significant
improvement
original
program
assignment
explore
issues
arise
optimization
substantial
subset
intermediate
language
iloc
discussed
lecture
discussed
textbook
write
program
takes
fragment
iloc
code
performs
one
optimization
passes
outputs
optimized
fragment
entire
structure
program
will
provided
including
scanner
parser
iloc
representations
iloc
instructions
module
pretty
print
output
job
will
write
three
optimization
modules
framework
extensible
welcome
implement
additional
optimization
modules
like
though
offering
extra
credit
subset
iloc
assignment
assignment
substantial
subset
iloc
presented
lecture
textbook
supported
optimized
following
iloc
instructions
supported
assignment
opcodesource
operandstarget
operandsdescriptionaddreg1
reg2reg3adds
value
reg1
reg2
storing
result
reg3
addireg1
int2reg3adds
value
reg1
constant
integer
int2
storing
result
reg3
subreg1
reg2reg3subtracts
value
reg2
reg1
storing
result
reg3
subireg1
int2reg3subtracts
constant
integer
int2
reg1
storing
result
reg3
rsubireg1
int2reg3subtracts
value
reg1
constant
integer
int2
storing
result
reg3
multreg1
reg2reg3multiplies
values
reg1
reg2
storing
result
reg3
multireg1
int2reg3multiplies
value
reg1
integer
constant
int2
storing
result
reg3
divreg1
reg2reg3divides
value
reg1
value
reg2
storing
result
reg3
reg2's
value
zero
assumed
processor
exception
raised
divireg1
int2reg3divides
value
reg1
integer
constant
int2
storing
result
reg3
int2
zero
assumed
processor
exception
raised
rdivireg1
int2reg3divides
value
integer
constant
int2
value
reg1
storing
result
reg3
value
reg1
zero
assumed
processor
exception
raised
lshiftreg1
reg2reg3left
shifts
value
reg1
reg2
bits
storing
result
reg3
lshiftireg1
int2reg3left
shifts
value
reg1
number
bits
specified
integer
constant
int2
storing
result
reg3
rshiftreg1
reg2reg3right
shifts
value
reg1
reg2
bits
storing
result
reg3
rshiftireg1
int2reg3right
shifts
value
reg1
number
bits
specified
integer
constant
int2
storing
result
reg3
andreg1
reg2reg3and's
together
presumably
boolean
values
stored
reg1
reg2
storing
result
reg3
andireg1
bool2reg3and's
together
presumably
boolean
value
stored
reg1
boolean
constant
bool2
storing
result
reg3
orreg1
reg2reg3or's
together
presumably
boolean
values
stored
reg1
reg2
storing
result
reg3
orireg1
bool2reg3or's
together
presumably
boolean
value
stored
reg1
boolean
constant
bool2
storing
result
reg3
xorreg1
reg2reg3xor's
together
presumably
boolean
values
stored
reg1
reg2
storing
result
reg3
xorireg1
bool2reg3xor's
together
presumably
boolean
value
stored
reg1
boolean
constant
bool2
storing
result
reg3
notreg1reg2not's
presumably
boolean
value
stored
reg1
storing
result
reg2
loadreg1reg2loads
value
stored
memory
address
stored
reg1
register
reg2
loadiconst1reg1places
value
constant
const1
reg1
const1
may
either
integer
boolean
constant
loadaireg1
int2reg3loads
value
stored
memory
address
calculated
adding
integer
constant
int2
value
stored
reg1
loaded
value
placed
reg3
loadaoreg1
reg2reg3loads
value
stored
memory
address
calculated
adding
values
stored
reg1
reg2
loaded
value
placed
reg3
storereg1reg2stores
value
reg1
memory
address
indicated
reg2
storeaireg1reg2
int3stores
value
reg1
memory
address
calculated
adding
integer
constant
int3
value
reg2
storeaoreg1reg2
reg3stores
value
reg1
memory
address
calculated
adding
values
reg2
reg3
i2ireg1reg2copies
value
stored
reg1
reg2
cmp
ltcmp
lecmp
eq
cmp
necmp
gecmp
gtreg1
reg2reg3compares
values
stored
reg1
reg2
storing
boolean
result
comparison
reg3
instructions
uses
different
form
comparison
cmp
lt
uses
cmp
le
uses
cbrreg1label1
label2if
presumably
boolean
value
stored
reg1
true
jump
label1
otherwise
jump
label2
jumpinonelabel1jump
label1
nopnonenonehas
effect
sometimes
necessary
placeholder
optimizations
remove
placed
automatically
needed
iloc
code
written
input
file
subject
following
restrictions
instructions
terminated
semicolons
notation
used
textbook
lecture
simplified
parser
implementation
names
registers
must
begin
lowercase
followed
non
negative
integer
example
register
names
r3
r999
names
labels
must
begin
uppercase
followed
non
negative
integer
example
label
names
l3
l999
instruction
may
either
zero
one
labels
associated
instruction
may
two
labels
jumps
must
existent
labels
numbers
types
operands
must
correct
attempt
read
instruction
input
file
wrong
number
types
operands
attempt
create
instruction
programmatically
optimizer
will
result
exception
thrown
code
will
crash
program
example
input
file
pointed
sake
readability
spaced
input
file
somewhat
though
whitespace
considered
relevant
except
necessary
separate
tokens
loadi
50
r1
loadi
100
r2
cmp
lt
r1
r2
r3
cbr
r3
l1
l2
l1
add
r4
r5
r6
jumpi
l3
l2
add
r7
r8
r6
jumpi
l3
l3
cmp
lt
r6
r7
r8
cbr
r8
l4
l1
l4
cmp
gt
r6
r7
r8
cbr
r8
l5
l6
l5
loadi
true
r9
jumpi
l7
l6
loadi
false
r9
jumpi
l7
l7
nop
cbr
jumpi
instructions
use
symbol
separate
source
operands
target
operands
nop
instruction
operands
instructions
use
symbol
separate
source
operands
target
operands
comments
may
placed
input
files
anything
following
two
slashes
end
line
considered
comment
much
like
java
basic
blocks
control
flow
graphs
many
optimization
techniques
involve
form
compile
time
simulation
run
time
behavior
program
presence
control
flow
structures
else
statements
loops
introduce
conditional
branches
intermediate
code
simulation
becomes
increasingly
difficult
precisely
simplify
matters
divide
intermediate
code
program
straight
line
chunks
code
must
always
executed
sequence
beginning
end
chunk
called
basic
block
brief
example
iloc
program
loadi
1
r1
loadi
10
r2
loadi
0
r3
cmp
gt
r1
r2
r4
cbr
r4
l2
l1
l1
add
r3
r1
r3
addi
r1
1
r1
cmp
le
r1
r2
r4
cbr
r4
l1
l2
l2
store
r3
r0
program
uses
loop
calculate
sum
integers
1
10
store
memory
address
stored
register
r0
three
basic
blocks
program
first
five
instructions
must
always
run
sequence
beginning
end
constitute
first
basic
block
call
block
0
next
four
instructions
must
always
run
sequence
beginning
end
constitute
second
basic
block
call
block
1
last
instruction
running
finally
jumped
constitutes
third
basic
block
call
block
2
example
see
jump
instruction
cbr
jumpi
always
constitutes
end
basic
block
label
must
always
constitute
beginning
since
possible
jump
labels
longer
basic
blocks
program
better
basic
blocks
indicate
sequences
code
likely
pipeline
well
also
significantly
easier
perform
optimizations
single
basic
block
try
perform
one
block
due
complexities
introduced
control
flow
basic
blocks
said
connected
together
control
flow
graph
context
often
refer
blocks
nodes
example
following
edges
exist
nodes
control
flow
graph
edge
node
0
node
2
since
possible
last
instruction
node
0
jump
l2
first
instruction
node
2
edge
node
0
node
1
since
possible
last
instruction
node
0
jump
l1
first
instruction
node
1
similar
reasons
edges
node
1
node
2
also
node
1
node
1
node
2
outgoing
edges
since
end
code
fragment
viewing
basic
blocks
graph
like
handy
since
allows
variety
well
known
graph
algorithms
useful
performing
optimization
use
one
algorithm
part
3
good
news
provided
portion
program
reads
input
file
finds
basic
blocks
builds
control
flow
graph
guiding
assumptions
profitability
optimizations
different
architectures
radically
different
performance
characteristics
reason
optimizers
different
architectures
will
need
make
different
decisions
point
optimization
make
code
prettier
make
code
perform
better
compiler
writer
must
pay
careful
attention
optimizations
chooses
perform
ensure
really
constitute
improvement
program
will
execute
target
architecture
optimizer
use
following
assumptions
performance
underlying
architecture
guide
choices
list
may
may
compare
favorably
list
actual
architecture
made
decisions
make
problem
interesting
one
solve
immediate
form
arithmetic
shifting
logical
instructions
preferred
regular
form
example
addi
preferred
add
rshifti
preferred
rshift
xori
preferred
xor
single
add
subtract
operation
preferred
single
multiplication
division
single
left
right
shift
preferred
single
addition
subtraction
multiplication
division
applies
case
operations
question
non
immediate
operations
immediate
multi
considered
better
add
though
addi
considered
better
multi
instruction
preferred
boolean
operator
register
register
copy
i2i
preferred
instruction
performs
computation
loadi
operation
loads
immediate
value
register
preferred
instruction
performs
computation
words
time
can
work
one
instructions
compile
time
replace
loadi
operation
will
considered
profitable
loadi
operation
also
preferred
register
register
copy
i2i
operation
address
immediate
forms
load
store
loadai
storeai
preferred
address
offset
forms
loadao
storeao
immediate
jump
jumpi
preferred
conditional
branch
cbr
motivation
desire
keep
pipeline
full
conditional
branch
operation
always
runs
risk
causing
pipeline
flushed
though
realistically
branch
prediction
can
reduce
risk
immediate
jump
course
noted
possible
replace
one
instruction
another
case
effect
example
given
brief
sequence
instructions
loadi
100
r1
load
r2
r3
addi
r1
50
r4
addi
r3
50
r5
since
r1
known
constant
value
100
can
replace
first
addi
instruction
loadi
second
addi
however
replaced
since
run
time
value
based
value
memory
location
whose
value
unknown
us
compile
time
correctly
rewritten
sequence
might
look
like
loadi
100
r1
load
r2
r3
loadi
150
r4
considered
better
addi
addi
r3
50
r5
replaced
since
know
r3's
value
compile
time
part
1
local
algebraic
simplification
30
points
apply
following
algebraic
transformations
code
within
basic
block
handle
basic
block
separately
term
local
used
describe
optimization
technique
indicates
optimization
works
separately
within
basic
block
transformation
actually
makes
little
difference
since
can
make
substitutions
without
understanding
context
addition
subtraction
constant
0
replaced
register
register
copy
addi
r1
0
r2
replaced
i2i
r1
r2
subtraction
register
replaced
immediate
load
0
sub
r1
r1
r2
replaced
loadi
0
r2
multiplication
constant
0
replaced
immediate
load
0
multi
r1
0
r2
replaced
loadi
0
r2
multiplication
division
constant
1
replaced
register
register
copy
multi
r1
1
r2
replaced
i2i
r1
r2
reverse
immediate
division
constant
0
register
replaced
immediate
load
0
rdivi
r1
0
r2
replaced
loadi
0
r2
multiplication
division
immediate
powers
2
replaced
appropriate
left
right
shift
operation
multi
r1
64
r2
replaced
lshifti
r1
6
r2
division
register
replaced
immediate
load
1
div
r1
r1
r2
replaced
loadi
1
r2
left
right
shift
constant
0
replaced
register
register
copy
lshifti
r1
0
r2
replaced
i2i
r1
r2
immediate
andi
ori
xor
xori
constants
true
false
replaced
appropriate
boolean
identity
andi
r1
false
r2
replaced
loadi
false
r2
register
replaced
register
register
copy
r1
r1
r2
replaced
i2i
r1
r2
xor
register
replaced
immediate
load
false
xor
r1
r1
r2
replaced
loadi
false
r2
part
2
local
constant
propagation
folding
50
points
whenever
can
proven
register
must
known
constant
value
fact
can
used
simplify
instructions
use
value
register
example
consider
following
pair
instructions
loadi
40
r1
addi
r1
40
r2
since
clear
value
r1
must
40
first
instruction
executes
second
instruction
really
addition
40
40
replacing
register
known
constant
value
called
constant
propagation
since
operands
known
constants
might
well
perform
addition
compile
time
replace
addi
instruction
immediate
load
combining
constants
together
compile
time
known
constant
folding
combination
constant
propagation
constant
folding
yields
pair
instructions
lieu
original
two
loadi
40
r1
loadi
80
r2
optimization
two
benefits
first
replaces
add
instruction
immediate
load
according
guidelines
earlier
write
considered
improvement
second
perhaps
importantly
r2
now
known
constant
value
enables
us
propagate
value
future
instructions
proving
whether
register
constant
value
can
tricky
general
case
though
limit
one
basic
block
time
much
simpler
algorithm
can
used
start
processing
basic
block
consider
registers
non
constants
instruction
block
top
bottom
order
one
operands
instruction
known
constants
propagate
constant
values
fold
constants
replace
instruction
possible
regardless
whether
made
change
instruction
instruction
now
stores
constant
value
register
add
register
constant
value
pair
collection
registers
known
constant
values
else
instruction
now
stores
non
constant
value
register
remove
register
collection
registers
known
constant
values
algorithm
boils
simulation
basic
block's
execution
compile
time
make
conservative
assumption
start
none
registers
known
constants
anytime
register
assigned
constant
value
loadi
instruction
add
value
collection
registers
known
constant
values
anytime
register
assigned
non
constant
value
load
instruction
remove
collection
registers
known
constant
values
collection
turns
really
map
data
structure
sense
word
might
efficiently
implemented
using
hash
table
hashmap
java
library
surprisingly
algorithm
maintaining
collection
known
constant
values
becomes
great
deal
complicated
can
run
many
basic
blocks
technique
known
global
constant
propagation
folding
term
global
applied
optimization
technique
mean
program
wide
optimization
means
optimization
made
basic
blocks
one
procedure
considered
together
covering
global
optimizations
course
though
plenty
reading
material
subject
chapters
9
10
textbook
interested
leave
exercise
figure
instructions
can
replaced
replaced
based
set
guiding
assumptions
earlier
write
forget
update
set
registers
known
constant
values
whenever
changes
part
3
unreachable
block
elimination
20
points
either
result
poorly
written
input
file
likely
result
one
optimizations
previous
parts
one
entire
basic
blocks
control
flow
graph
may
become
unreachable
case
eliminate
unreachable
nodes
control
flow
graph
iloc
program
entirely
since
serve
purpose
analysis
required
relatively
straightforward
depth
first
graph
traversal
algorithm
marking
consider
nodes
cfg
unmarked
let
currentnode
node
0
start
node
loop
mark
currentnode
exists
unvisited
successor
currentnode
currentnode
else
backtrack
illustrated
algorithm
using
pseudo
loop
actually
implemented
recursive
algorithm
backtracking
since
cfgnode
class
provided
marking
feature
suggest
implementing
marks
storing
separate
one
dimensional
boolean
array
finished
traversal
phase
iterate
nodes
remove
ones
never
marked
nodes
can
removed
calling
removenode
method
controlflowgraph
beware
start
node
node
0
always
considered
reachable
hence
may
removed
step
step
example
suppose
began
following
iloc
input
file
running
three
optimizer
passes
local
algebraic
simplification
local
constant
propagation
folding
unreachable
block
elimination
sequence
loadi
1
r1
multi
r1
64
r2
addi
r2
50
r3
cmp
lt
r2
r3
r4
cbr
r4
l3
l1
l1
loadi
1
r5
loadi
10
r6
loadi
0
r7
cmp
gt
r5
r6
r8
cbr
r8
l4
l2
l2
add
r7
r5
r7
addi
r5
1
r5
cmp
le
r5
r6
r8
cbr
r8
l2
l4
l3
loadi
1024
r7
l4
addi
r7
100
r9
store
r9
r0
results
local
algebraic
simplification
loadi
1
r1
lshifti
r1
6
r2
multiplication
power
2
simplified
addi
r2
50
r3
cmp
lt
r2
r3
r4
cbr
r4
l3
l1
l1
loadi
1
r5
loadi
10
r6
loadi
0
r7
cmp
gt
r5
r6
r8
cbr
r8
l4
l2
l2
add
r7
r5
r7
addi
r5
1
r5
cmp
le
r5
r6
r8
cbr
r8
l2
l4
l3
loadi
1024
r7
l4
addi
r7
100
r9
store
r9
r0
results
local
constant
propagation
folding
loadi
1
r1
loadi
64
r2
loadi
114
r3
loadi
true
r4
jumpi
l3
l1
loadi
1
r5
loadi
10
r6
loadi
0
r7
loadi
false
r8
jumpi
l2
l2
add
r7
r5
r7
addi
r5
1
r5
cmp
le
r5
r6
r8
cbr
r8
l2
l4
l3
loadi
1024
r7
l4
addi
r7
100
r9
store
r9
r0
several
instructions
replaced
loadi
instructions
pass
since
several
times
registers
used
whose
values
known
constants
also
two
three
conditional
branches
replaced
immediate
jumps
since
result
comparisons
preceded
became
constants
couple
things
pointed
first
last
instruction
label
l2
immediate
jump
l2
problem
will
solved
optimizations
though
real
compiler
obviously
want
solve
one
way
solve
use
peephole
optimizer
walks
intermediate
code
optimizations
looks
short
bizarre
instruction
sequences
like
one
instructions
i2i
r1
r1
immediate
jump
l3
fifth
instruction
none
code
labels
l1
l3
reachable
third
pass
will
eliminate
code
results
unreachable
block
elimination
loadi
1
r1
loadi
64
r2
loadi
114
r3
loadi
true
r4
jumpi
l3
l3
loadi
1024
r7
l4
addi
r7
100
r9
store
r9
r0
code
l1
l3
removed
code
expect
working
version
program
output
example
pointed
code
perfect
stretch
marked
improvement
started
additional
passes
performed
kinds
analyses
capable
making
additional
improvements
example
two
instructions
l3
loadi
1024
r7
l4
addi
r7
100
r9
ideally
subject
constant
propagation
changing
instead
l3
loadi
1024
r7
l4
loadi
1124
r9
presence
label
l4
separates
two
instructions
different
basic
blocks
constant
propagation
algorithm
works
within
basic
block
rendering
incapable
making
change
furthermore
values
registers
r1
r2
r3
r4
r7
never
used
fragment
case
ideal
optimizer
detect
fact
longer
live
remove
corresponding
loadi
instructions
entirely
peephole
optimizer
might
remove
jump
l3
longer
serving
purpose
labels
removed
leaving
us
code
rewrite
entire
original
code
fragment
loadi
1124
r9
store
r9
r0
properly
designed
implemented
optimization
beautiful
thing
starting
point
entire
framework
program
provided
zip
archive
code
available
compiled
form
class
files
java
files
will
relevant
work
provided
zip
archive
deliverables
place
java
files
comprise
program
zip
archive
also
include
file
called
readme
txt
archive
briefly
explains
portion
program
believe
working
aspects
partially
working
aspects
work
need
include
provided
class
files
starting
point
follow
link
discussion
submit
assignment
remember
accept
paper
submissions
assignments
accept
via
email
circumstances
order
keep
grading
process
relatively
simple
require
keep
program
designed
way
can
compiled
executed
following
set
commands
javac
java
java
driver
example
iloc
1
2
may
list
least
one
valid
optimizer
pass
number
may
include
duplicates
will
test
optimization
passes
isolation
concert
originally
written
alex
thornton
winter
2004
