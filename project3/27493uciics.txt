program 4 
program 4 
program
4
programming
classes
introduction
computer
science
ics
21
introduction
please
print
copy
assignment
read
carefully
highlight
material
think
will
useful
working
program
submitting
programming
assignment
designed
ensure
know
write
programs
use
constructors
methods
fields
although
rarely
classes
course
will
continue
gaining
experience
standard
control
structures
java
blocks
ifs
fors
breaks
try
catch
well
basic
java
features
declarations
expression
statements
using
arithmetic
state
change
relational
logical
operators
will
write
four
programs
assignment
always
can
check
behavior
programs
mine
downloading
unzipping
running
file
program
4
executables
help
understand
specification
problem
observe
programmer
user
interaction
implement
see
program
1
details
run
executables
pcs
eclipse
pcs
macs
remember
can
run
programs
examine
source
java
code
copy
input
output
form
executable
programs
programs
write
use
exactly
prompts
messages
information
listing
number
lines
solution
programs
programs
formated
standard
way
counting
lines
code
even
code
line
brace
closes
block
counting
blank
lines
norlines
filled
comments
big
collatz
program
24
lines
dice
ewar
program
72
lines
phone
database
program
37
lines
heart
monitor
program
67
lines
programs
might
smaller
might
larger
program
starts
going
2
3
times
size
mine
might
want
rethink
come
get
help
please
follow
instructions
program
finish
enhancement
continuing
next
one
including
printing
whatever
messages
displays
console
copied
exactly
class
examples
program
illustrates
use
many
classes
including
ones
will
need
use
assignment
last
two
programs
require
writing
nested
loops
one
loop
inside
another
used
multiple
break
statements
inside
loops
work
assignment
create
one
java
project
call
program4
create
four
new
java
classes
class
will
contain
program
will
write
solve
one
problem
name
classes
bigcollatz
dicewar
phonedatabase
icd
write
run
debug
class
program
program
3
finish
part
submit
java
file
one
programmer
pair
dropoff
programs
one
part
matter
pair
submits
person
submit
parts
course
program
contain
student
names
comment
one
cut
pasted
ane
filled
top
program
program
1
collatz
biginteger
start
project
new
project
folder
instead
download
program4
project
folder
unzip
start
new
project
eclipse
using
project
folder
contains
collatz
java
program
works
int
values
create
dicewar
phonedatabase
classes
compiled
run
collatz
java
class
prompts
user
int
value
performs
collatz
process
read
comments
details
number
reduced
1
seen
program
working
eclipse
debugger
program
requires
use
objects
constructed
biginteger
class
remember
import
programming
assignment
enhance
program
use
variables
refer
biginteger
objects
rather
store
int
primitives
way
almost
limit
size
number
can
apply
collatz
process
checking
whether
values
ultimately
reduced
1
happens
examples
tried
happens
quickly
fundamentally
program
translating
use
primitive
types
values
use
reference
types
objects
good
starting
point
switching
object
oriented
programming
will
involve
importing
biginteger
class
see
javadoc
full
name
including
package
addition
use
constructors
biginteger
objects
initialize
variables
constants
instead
using
int
literals
biginteger
literals
also
note
biginteger
class
declares
public
final
constants
find
useful
use
methods
like
divide
multiply
add
perform
arithmetic
biginteger
values
instead
using
arithmetic
operators
work
biginteger
values
note
state
change
operators
biginteger
objects
like
string
immutable
class
use
methods
like
equals
compareto
compare
biginteger
values
instead
using
relational
operators
remember
probably
want
done
check
prompt
class
useful
input
method
also
make
good
use
cascaded
method
calls
solution
taking
place
subexpressions
operator
precendence
submit
final
program
test
small
numbers
big
numbers
numbers
tens
hundreds
digits
finally
remember
update
description
comment
describe
changes
added
program
ps
perfect
understanding
biginteger
converting
program
take
5
minutes
guess
will
take
longer
will
learn
lot
biginteger
class
specifically
understanding
use
objects
generally
dice
war
program
requires
use
objects
constructed
diceensemble
timer
classes
remember
import
write
program
simulates
playing
games
dice
war
program
also
collect
certain
statistics
playing
games
report
required
number
games
played
game
dice
war
player
starts
dice
ensemble
consisting
2
6
sided
dice
number
entered
user
chips
player
roles
dice
one
player's
pip
sum
higher
player
gets
chip
player
whenever
one
player
chips
left
game
player
lost
player
won
many
plays
throws
dice
game
program
must
prompt
user
number
games
play
number
chips
players
start
game
also
prompts
user
determine
program's
behavior
traced
use
tracing
debugging
technique
playing
games
program
simulates
many
games
dice
war
using
objects
constructed
diceensemble
class
one
pair
dice
player
keeps
track
number
times
player
wins
length
number
dice
rolls
shortest
longest
games
total
number
dice
rolls
games
also
uses
timer
keep
track
long
clock
time
takes
play
games
try
use
diceensemble
objects
keep
track
required
information
declare
extra
variables
ultimately
program
prints
often
player
won
fair
game
numbers
equal
length
shortest
longest
games
total
number
rolls
games
average
number
rolls
per
game
amount
time
took
simulate
games
simulation
speed
number
games
per
second
finally
program
also
capable
tracing
events
facility
used
long
simulations
instead
useful
short
debugging
runs
tracing
every
important
event
simulation
can
display
information
useful
spotting
bugs
build
program
trace
following
events
user
requests
trace
starting
new
game
playing
one
roll
indicate
player
rolled
many
chips
player
left
roll
redistribution
chips
winning
game
run
executable
tracing
small
number
games
person
starting
3
5
chips
without
tracing
large
number
games
increasing
number
starting
chips
observe
behavior
assignment
try
work
enhancements
starting
point
writing
program
play
one
game
user
supplying
number
starting
chips
add
tracing
add
playing
multiple
games
user
supplying
number
add
code
keeping
statistics
add
timing
game
explore
javadoc
diceensemble
timer
classes
use
effectively
minimize
variables
code
must
write
found
integer
max
value
check
static
final
field
integer
wrapper
class
javadoc
useful
initialization
computing
smallest
length
game
although
many
ways
compute
value
correctly
phone
database
program
requires
use
objects
constructed
typedbufferreader
stringtokenizer
classes
well
use
eofexception
class
remember
import
write
program
reads
database
names
associated
phone
numbers
file
catenating
one
huge
string
debugging
check
leave
program
executable
ask
user
wants
print
database
see
read
correctly
print
string
repeatedly
prompts
user
name
string
look
print
associated
phone
number
print
name
found
database
user
enter
name
quit
whether
upper
lower
mixed
case
program
instead
terminate
program
must
prompt
user
input
file
see
file
phoneinput
txt
provided
executable
read
names
phone
numbers
file
read
string
file
catenating
one
large
database
string
space
every
name
phone
number
program
repeatedly
prompt
user
name
terminate
user
enters
quit
user
enters
name
use
loop
process
stringtokenizer
object
initialized
database
process
tokens
name
found
use
case
insensitive
equality
comparison
next
token
phone
number
tokens
name
database
note
class
examples
program
illustrates
read
values
file
process
tokens
string
study
code
adapt
program
resulting
program
pretty
small
requires
file
reading
see
ensures
understand
use
stringtokenizer
class
constructor
useful
methods
must
learn
use
implantable
cardiac
defibrillators
write
program
simulates
working
implantable
cardiac
defibrillator
icd
icd
small
electronic
device
placed
chest
cavity
patient
suffering
arrhythmias
heartbeat
irregularities
device
constantly
monitors
electrical
output
beating
heart
detects
bradycardia
heart
beating
slowly
acts
pacemaker
importantly
detects
tachycardia
heart
beating
fast
pump
blood
effectively
extreme
cases
results
ventricular
fibrillation
point
acts
defibrillator
supplying
large
shock
heart
attempt
restore
normal
rhythm
shock
described
patients
feeling
like
kick
chest
although
many
patients
unconscious
time
action
taken
detected
arrhythmia
interested
can
read
detailed
information
icds
basic
algorithm
inside
icd
computes
zero
crossing
count
zcc
electical
signals
samples
monitoring
heart
signal
value
100
100
inclusive
icd
receiving
faulty
signals
shut
interval
typically
lasting
seconds
whenever
signal
value
goes
positive
negative
negative
positive
icd
increments
zcc
purposes
assignment
will
treat
0
positive
number
end
interval
icd
checks
see
whether
zcc
within
normal
range
bradycardia
zcc
low
equals
falls
threshold
tachycardia
zcc
high
equals
exceeds
threshold
icd
detects
either
conditions
takes
necessary
action
resets
zcc
samples
heart
signals
another
interval
course
real
icds
evolved
exhibit
much
sophisticated
behaviors
simple
model
good
enough
programming
assignment
example
icd
using
interval
length
10
following
table
labels
sample
shows
signal
value
sample
current
zcc
sample
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
signal
0
5
10
5
5
5
10
5
5
5
5
10
5
5
5
5
10
5
5
5
5
10
zcc
0
0
0
0
1
2
2
2
3
3
1
1
1
2
3
4
5
5
6
7
0
0
zcc
reset
0
example
sample
4
5
signal
goes
5
5
zcc
incremented
zcc
sample
10
end
first
interval
3
reset
0
immediately
incremented
1
sample
10
11
signal
goes
5
5
end
second
interval
risen
7
program
will
simulate
simple
icd
algorithmg
allowing
us
test
various
data
files
represent
samples
taken
actual
electrical
signals
monitored
heart
operate
follows
prompt
user
name
icd's
configuration
data
file
input
file
name
simulated
heart
data
file
monitor
input
file
configuration
file
specifies
three
int
values
example
look
like
100
15
25
interval
length
many
signals
read
data
file
computing
zcc
many
signals
icd
decides
heart
arrythmic
resets
zcc
continues
reading
signals
deciding
whether
heart
arrythmic
every
interval
length
bradycardia
threshold
zccs
interval
equals
falls
threshold
heart
beating
slowly
tachycardia
threshold
zccs
interval
equlas
exceeds
threshold
heart
beating
quickly
simulated
heart
file
contains
sequence
electical
signals
icd
process
display
console
information
extracted
configuration
file
three
values
read
correctly
see
simplebad1
config
txt
simplebad2
config
txt
files
program
terminate
simulate
action
icd
read
signals
simulated
heart
file
compute
zcc
interval
display
zcc
interval
along
action
take
zcc
indicates
abnormally
beating
heart
continue
process
data
simulated
heart
file
bad
signal
value
read
smaller
100
greater
100
starting
write
program
run
exectable
different
data
files
supplied
see
executable
download
familiarize
youself
operations
output
messages
etc
follow
iterative
enhancement
approach
writing
program
excellent
idea
add
comments
writing
code
help
understand
enhancing
initially
test
enhancements
simple
config
txt
simple
heart
txt
data
files
use
data
illustrated
eventually
test
enhancements
using
regular
config
txt
regular
input
files
write
kernel
program
prompts
user
name
configuration
file
reads
data
contains
displays
console
place
code
one
large
try
catch
statement
successfully
read
required
values
catch
exception
print
error
message
terminate
program
test
good
file
simple
config
txt
two
bad
ones
simplebad1
config
txt
simplebad2
config
txt
enhance
program
also
prompts
user
name
heart
data
file
reads
displays
every
value
file
prefaced
sample
number
1
first
signal
2
next
etc
terminating
program
unsuccessfully
tries
read
data
value
file
tries
read
non
integer
value
tries
read
another
value
none
hint
loop
program
needs
include
another
try
catch
statement
handles
thrown
exception
printing
message
terminating
loop
program
test
using
simple
config
txt
one
good
file
simple
heart
txt
bad
one
simplebad1
heart
txt
enhance
program
also
terminates
loop
signal
value
100
100
inclusive
displaying
appropriate
message
test
using
simple
config
txt
two
bad
files
simplebad2
heart
txt
simplebad3
heart
txt
enhance
program
displays
console
message
make
decision
reading
enough
sample
signals
fill
interval
example
interval
10
samples
icd
read
display
first
10
signals
numbered
1
10
display
make
decision
read
display
second
10
signals
numbered
11
20
display
make
decision
etc
test
using
simple
config
txt
simple
heart
txt
enhance
program
computes
displays
zcc
reads
value
heart
data
file
change
will
require
two
variables
one
storing
value
previous
signal
one
storing
value
current
signal
current
value
becomes
previous
one
end
loop
iteration
initially
loop
even
starts
set
previous
value
0
iteration
loop
reads
new
value
current
heart
input
file
also
change
make
decision
message
display
current
zcc
whose
value
will
actually
use
check
bradycardia
tachycardia
important
decision
made
icd
reset
zcc
0
begins
computing
zcc
next
interval
signals
test
using
simple
config
txt
simple
heart
txt
compare
results
table
values
verified
right
zcc
values
appear
messages
remove
comment
code
displays
signal
zcc
new
signal
read
enhance
program
display
bradycardia
detected
zcc
equals
falls
threshold
read
configuration
file
display
tachycardia
detected
zcc
equals
exceeds
threshold
read
configuration
file
test
final
program
using
regular
config
txt
regular
input
files
extra
credit
dice
war
problem
1
point
extra
credit
earn
bottom
main
comment
dicewar
class
include
section
labelled
extra
credit
section
estimate
average
number
dice
rolls
game
player
starts
1
000
000
chips
explain
details
arrived
estimate
discuss
estimate
anyone
student
pairing
