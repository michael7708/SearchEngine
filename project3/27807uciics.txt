ics 65 fall 2012 project 1 letter never sent 
project 1 
ics
65
fall
2012
news
course
reference
schedule
project
guide
code
examples
alex
ics
65
fall
2012
project
1
letter
never
sent
due
date
time
wednesday
october
24
11
59pm
introduction
years
teaching
become
quite
fond
grading
scale
jokingly
refer
whatever
want
scale
course
quite
open
ended
glib
joke
fair
scale
sense
two
students
perform
particular
level
will
receive
grade
though
neither
straight
scale
curve
requiring
instead
decide
end
quarter
set
cutpoints
divide
students
receive
one
grade
students
receive
another
grading
scale
employ
end
quarter
course
project
asks
write
utility
program
given
input
via
console
describing
set
graded
artifacts
course
students
enrolled
course
scores
various
artifacts
additionally
given
sequence
cutpoint
sets
describing
cutpoints
number
total
points
necessary
dividing
various
grade
levels
program's
output
twofold
total
score
received
student
course
cutpoint
set
final
course
grades
student
surprisingly
will
need
write
program
though
fairly
heavy
restrictions
parts
permitted
use
still
early
process
learning
like
gain
experience
lower
level
abstractions
notably
arrays
new
delete
delete
layer
less
error
prone
abstractions
top
goal
early
part
course
develop
understanding
happening
behind
scenes
program
impossible
develop
understanding
sit
high
level
abstraction
getting
started
bad
idea
start
reading
visual
studio
2012
tutorial
already
use
pre
built
ics
65
visual
studio
2012
solution
starting
point
projects
set
accommodate
properly
configured
console
application
compatible
work
quarter
input
program's
input
read
console
cin
separated
four
sections
description
course's
graded
artifacts
defining
number
points
possible
relative
weight
description
students
course
listing
student
id
name
list
raw
scores
received
graded
artifact
students
course
list
cutpoint
sets
describing
total
score
required
receive
respectively
project
assumes
modifiers
grades
kinds
grades
pass
notpass
incomplete
etc
section
described
detail
graded
artifacts
section
describing
graded
artifacts
begins
positive
integer
alone
line
specifying
number
graded
artifacts
followed
another
line
sequence
integers
separated
spaces
indicating
total
points
possible
graded
artifact
finally
one
line
will
sequence
integers
separated
spaces
indicating
relative
weight
graded
artifact
example
section
7
15
15
15
15
15
50
50
12
12
12
12
12
15
25
example
describes
seven
graded
artifacts
first
five
15
points
possible
relative
weights
12
sixth
50
points
possible
relative
weight
15
last
50
points
possible
relative
weight
25
students
next
section
input
describes
students
enrolled
course
begins
positive
integer
alone
line
specifying
number
students
enrolled
given
positive
integer
will
additional
lines
consisting
non
negative
integer
student
id
followed
space
followed
student's
name
every
character
line
student
id
space
considered
part
student's
name
example
section
5
123
alex
thornton
234
boo
thornton
345
jane
student
456
joe
student
567
many
courses
student
ids
necessarily
three
digits
necessarily
number
digits
raw
scores
next
section
input
describes
raw
scores
earned
students
graded
artifact
section
begins
positive
integer
alone
line
specifying
number
students
raw
scores
listed
given
positive
integer
will
additional
lines
consisting
sequence
non
negative
integers
separated
spaces
first
student
id
rest
raw
scores
graded
artifact
graded
artifacts
can
assume
lines
will
contain
1
integers
one
student
id
followed
raw
scores
scores
correspond
order
graded
artifacts
listed
first
section
example
5
345
14
14
14
14
14
45
45
123
13
10
8
14
12
50
37
456
12
9
15
13
11
38
26
234
15
15
15
15
15
50
50
567
8
4
0
10
0
24
12
possible
student
listed
previous
section
listed
section
case
assume
student's
raw
scores
0
also
possible
student
listed
section
appear
previous
section
case
ignore
student's
raw
scores
student
assumed
dropped
course
also
possible
raw
scores
higher
number
points
possible
graded
artifact
interpreted
extra
credit
fits
formula
cutpoint
sets
last
section
input
cutpoint
sets
section
begins
positive
integer
alone
line
specifying
number
cutpoint
sets
given
positive
integer
next
lines
will
consist
four
non
negative
numeric
values
possibly
including
decimal
point
additional
digits
specify
respectively
total
points
required
course
example
3
90
0
80
0
70
0
60
0
85
0
75
0
65
0
55
0
80
0
70
0
60
0
50
0
may
assume
cutpoint
values
can
safely
read
variable
type
double
complete
example
input
complete
example
input
program
follows
possible
copy
paste
console
window
save
file
use
redirection
send
file's
contents
program
input
7
15
15
15
15
15
50
50
12
12
12
12
12
15
25
5
123
alex
thornton
234
boo
thornton
345
jane
student
456
joe
student
567
many
courses
5
345
14
14
14
14
14
45
45
123
13
10
8
14
12
50
37
456
12
9
15
13
11
38
26
234
15
15
15
15
15
50
50
567
8
4
0
10
0
24
12
3
90
0
80
0
70
0
60
0
85
0
75
0
65
0
55
0
80
0
70
0
60
0
50
0
note
nothing
explicitly
separates
one
section
input
next
though
will
always
able
tell
context
number
graded
artifacts
number
students
etc
one
section
ends
next
begins
requirements
input
program
must
print
prompts
enter
number
students
output
except
specified
section
titled
output
reasonable
program
assume
program's
input
will
always
structured
specified
fine
program
misbehave
even
crash
given
input
conform
specifications
safe
assume
integers
will
small
enough
will
fit
unsigned
int
int
variable
visual
studio
2012's
definition
largest
value
fit
kinds
variables
2
147
483
647
calculating
total
points
program's
output
largely
determined
total
score
earned
student
course
order
complete
program
need
understand
correct
formula
use
example
input
seven
graded
artifacts
defined
15
points
possible
relative
weight
1215
points
possible
relative
weight
1215
points
possible
relative
weight
1215
points
possible
relative
weight
1215
points
possible
relative
weight
1250
points
possible
relative
weight
1550
points
possible
relative
weight
25
example
can
see
simply
adding
together
raw
scores
various
graded
artifacts
work
example
artifact
6
graded
50
point
scale
worth
slightly
overall
aritfact
5
wihch
graded
15
point
scale
summing
scores
give
much
weight
artifact
6
need
scale
raw
scores
add
scaled
scores
together
total
relative
weight
graded
artifacts
example
100
means
total
score
student
will
range
0
0
100
0
calculate
multiplying
percentage
points
earned
graded
artifact
relative
weight
summing
results
example
suppose
student
received
scores
14131512104045
calculations
proceed
follows
14
15
12
11
2
13
15
12
10
4
15
15
12
12
0
12
15
12
9
6
10
15
12
8
0
40
50
15
12
0
45
50
25
22
5
summing
together
yield
total
11
2
10
4
12
0
9
6
8
0
12
0
22
5
85
7
student's
total
score
85
7
possible
100
scores
include
extra
credit
raw
score
higher
number
points
possible
graded
artifact
need
treated
differently
plugged
formula
way
determining
final
course
grades
final
course
grade
student
determined
comparing
total
score
earned
student
cutpoints
student's
total
score
greater
equal
cutpoint
student's
final
course
grade
aotherwise
student's
total
score
greater
equal
cutpoint
student's
final
course
grade
botherwise
student's
total
score
greater
equal
cutpoint
student's
final
course
grade
cotherwise
student's
total
score
greater
equal
cutpoint
student's
final
course
grade
dotherwise
student's
final
course
grade
output
reading
input
specified
points
output
will
generated
printed
console
cout
specified
along
format
output
student
roster
reading
raw
scores
graded
artifacts
total
scores
printed
students
format
output
follows
words
total
scores
alone
linefor
student
enrolled
course
student
id
followed
space
followed
student's
name
followed
space
followed
student's
total
score
example
total
scores
123
alex
thornton
79
1
234
boo
thornton
100
345
jane
student
92
456
joe
student
72
4
567
many
courses
30
8
necessary
format
total
score
particular
number
decimal
places
though
truncate
round
integer
however
iostream
library
formats
double
value
default
fine
course
grades
reading
cutpoint
set
final
course
grades
cutpoint
set
printed
purposes
output
cutpoint
sets
numbered
consecutively
starting
1
format
output
follows
words
cutpoint
set
alone
line
replaced
cutpoint
set
number
1
first
cutpoint
set
2
second
student
enrolled
course
student
id
followed
space
followed
student's
name
followed
space
followed
student's
grade
example
cutpoint
set
1
123
alex
thornton
234
boo
thornton
345
jane
student
456
joe
student
567
many
courses
output
timing
store
output
memory
print
console
end
program
instead
will
required
write
output
console
points
time
specified
complete
example
program
execution
following
complete
example
program
execution
demonstrating
input
output
interleaved
input
shown
regular
font
weight
output
shown
bold
7
15
15
15
15
15
50
50
12
12
12
12
12
15
25
5
123
alex
thornton
234
boo
thornton
345
jane
student
456
joe
student
567
many
courses
5
345
14
14
14
14
14
45
45
123
13
10
8
14
12
50
37
456
12
9
15
13
11
38
26
234
15
15
15
15
15
50
50
567
8
4
0
10
0
24
12
total
scores
123
alex
thornton
79
1
234
boo
thornton
100
345
jane
student
92
456
joe
student
72
4
567
many
courses
30
8
3
90
0
80
0
70
0
60
0
cutpoint
set
1
123
alex
thornton
234
boo
thornton
345
jane
student
456
joe
student
567
many
courses
85
0
75
0
65
0
55
0
cutpoint
set
2
123
alex
thornton
234
boo
thornton
345
jane
student
456
joe
student
567
many
courses
80
0
70
0
60
0
50
0
cutpoint
set
3
123
alex
thornton
234
boo
thornton
345
jane
student
456
joe
student
567
many
courses
rules
limitations
beginning
exploration
building
knowledge
lowest
level
abstractions
fairly
strict
limitations
features
language
permitted
use
project
limitations
will
lift
quickly
move
forward
quarter
concerned
always
put
tiny
box
project
particular
goals
rules
limitations
governing
work
project
iostream
string
permitted
include
standard
library
headers
program
aside
console
input
output
using
example
cin
cout
endl
std
string
class
standard
library
limits
use
collections
like
std
vector
use
arrays
store
manipulate
data
within
program
note
know
correct
sizes
arrays
compile
time
sizes
specified
program's
input
will
find
need
use
dynamically
allocated
arrays
extensively
permitted
use
structs
sense
implicitly
public
member
variables
member
functions
constructors
destructors
etc
classes
limits
next
project
exploration
object
oriented
techniques
still
ahead
us
even
though
might
call
batch
mode
program
reads
input
processes
generates
output
ends
still
required
explicitly
delete
memory
dynamically
allocate
using
new
habit
vital
build
will
always
requirement
course
necessary
break
program
multiple
source
files
though
certainly
welcome
sure
use
techniques
discussed
lecture
managing
separate
compilation
including
creation
header
files
share
declarations
modules
ifndef
define
endif
idiom
avoiding
multiple
inclusion
header
file
even
write
entire
program
one
source
file
write
one
giant
main
function
comprises
entire
program
program
plenty
large
enough
break
smaller
functions
programming
language
always
looking
opportunity
abstract
away
details
program
exception
testing
explicit
deliverable
demonstrating
tested
program
well
advised
run
program
test
inputs
example
since
will
run
range
tests
submission
will
partly
determine
overall
score
project
additional
test
inputs
expected
outputs
provided
will
sharing
test
inputs
outputs
important
part
developing
facility
program
develop
ability
construct
varied
set
tests
will
implicitly
requiring
note
permitted
share
code
one
another
can
feel
free
share
test
inputs
one
another
like
deliverables
submit
source
cpp
header
files
comprise
program
afterward
take
moment
sure
submitted
files
missed
one
able
compile
run
program
can
result
substantial
penalty
since
able
evaluate
program's
correctness
follow
link
discussion
submit
project
via
checkmate
aware
holding
rules
specified
document
including
one
says
responsible
submitting
version
project
want
graded
regrade
project
simply
accidentally
submitted
wrong
version
originally
written
alex
thornton
fall
2012
