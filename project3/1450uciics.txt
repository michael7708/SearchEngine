h23 homeworks 
homework details 
ics23
summer
homeworks
typically
homeworks
theoretical
portion
coding
portion
methods
classes
required
provide
notation
space
time
complexity
analysis
unless
space
time
1
warning
homework
next
assigment
guaranteed
correct
complete
look
assignment
early
ask
questions
understand
supposed
note
due
time
coding
assignments
due
need
deposited
noon
first
class
day
week
homework
due
another
handout
will
explain
done
work
handed
due
beginning
class
week
homework
due
late
homeworks
will
marked
20
day
late
general
questions
asked
code
answer
documentation
example
document
time
space
complexity
methods
1
regrades
regrade
must
resubmit
homework
within
1
week
receiving
score
also
must
explain
part
homework
needs
regraded
entire
assigment
will
regraded
possible
lower
score
regrade
note
submit
java
vep
files
class
files
large
see
visual
cafe
lab
guide
li
zhang's
web
site
homework
1
goal
notation
review
arrays
lists
unbalanced
trees
read
chapter
1
chapter
1
useful
program
examples
well
review
basic
mathematical
techniques
1
problem
5
14
part
6
code
fragments
analyze
solutions
problems
can
submittted
separate
file
txt
file
fairly
short
analysis
1
3
2
nlogn
3
100
etc
note
real
answers
name
analysis
txt
quiz
will
contain
problem
similar
read
chapter
3
4
3
chapter
3
lists
stacks
queues
4
3
covers
binary
trees
assignment
will
implement
cache
4
different
ways
namely
array
linked
list
binary
tree
tree
new
treeset
collection
package
java
util
goal
cache
store
best
values
teh
best
values
highest
values
stored
order
sometimes
convenient
program
will
single
input
integer
defines
seed
general
random
niumber
generator
random
new
random
seed
util
library
can
get
random
integers
view
nextint
implementation
give
notation
analysis
additional
compare
implementations
generating
10
000
random
integers
putting
cache
size
20
duplicated
integers
can
stored
choice
just
comment
implementation
cache
performs
best
can
say
memory
use
much
memory
technique
require
algorithm
print
final
state
cache
caches
identical
note
insure
cache
given
problem
reinitialize
random
number
generate
given
seed
cache
define
also
get
timing
results
function
system
currenttimemillis
returns
long
summary
input
single
integer
defines
seed
random
output
cache
algorithm
time
final
elements
cache
questions
answered
documentation
code
particular
give
analysis
cache
number
data
elements
examined
size
cache
answer
function
terms
may
use
cache
class
later
assignments
code
hints
treeset
allows
add
objects
hence
may
want
use
wrapper
integer
store
values
look
methods
treeset
store
many
elements
homework
2
goal
practice
creating
using
trees
huffman
trees
discussed
12
1
12
4
chapter
18
discusses
trees
key
sections
18
4
avl
trees
18
7
trees
assignment
will
create
optimal
codes
characters
generated
huffman
tree
may
use
classes
util
find
useful
input
program
name
text
file
text
file
will
used
evaluate
program
uppercase
letters
counted
lowercase
equivalent
numbers
punctuations
etc
counted
suggest
create
several
simple
text
files
check
program
working
correctly
output
program
26
lines
consisting
letter
frequency
letter
alphabetic
order
26
lines
consisting
letter
code
letters
may
order
entries
separated
tab
example
output
might
look
132
15
etc
001
10001
etc
summary
input
name
file
output
list
letters
frequence
list
letters
huffman
codes
coding
hints
main
two
activities
reading
file
counting
frequency
characters
building
huffman
tree
hence
expect
two
primary
classes
plan
need
follow
plan
monday
write
driver
program
hence
least
two
auxiliary
classes
countcharacters
string
filename
huffmantree
int
array
tuesday
write
countcharacter
class
test
note
br
bufferedreader
br
read
returns
1
end
file
using
char
ch
char
br
read
will
get
next
character
file
character
method
isletter
char
will
tell
letter
character
method
tolowercase
char
returns
lower
case
equivalent
letter
assume
ch
lower
case
letter
ch
'a'
will
0
ch
'a'
will
ith
character
alphabet
note
can
test
class
independent
creating
huffman
class
wed
thurs
write
huffman
class
generates
codes
character
since
huffman
codes
based
building
special
type
tree
expect
additional
classes
huffmannode
trees
built
bottom
usual
way
may
find
linkedlist
vector
class
useful
think
carefully
information
store
node
also
note
write
test
class
without
writing
countcharacters
inputting
simple
test
arrays
know
answer
int
test
2
2
2
2
running
huffmantree
test
find
make
logical
error
coding
difficult
find
day
hence
best
get
night's
sleep
retry
next
day
happened
coding
huffman
tree
homework
3
goals
processing
files
using
hashtables
cache
using
different
data
structures
different
goals
read
chapter
5
chapter
hashing
program
finds
interesting
kmers
kmer
contiguous
string
exactly
letters
example
string
actacta
4
4
mers
namely
acta
ctac
tact
acta
note
allow
overlaps
program
will
read
two
files
size
file
consists
characters
alphabet
first
file
will
call
family
second
file
will
call
background
create
filereader
masterhit
directory
use
new
file
masterhit
instructional
ics
23
files
nit
txt
may
think
background
dna
strings
normal
population
family
file
dna
people
genetic
disease
program
goal
find
unusual
really
statistically
significant
kmers
occur
suprisingly
often
family
respect
background
purposes
homework
define
unusualness
kmer
family
size
background
number
times
kmer
occurs
family
number
times
kmer
occurs
background
size
family
difference
actual
number
occurrences
expected
number
occurrences
normalized
integer
appropriate
statistical
well
founded
definitions
surprisingness
involve
work
arrive
nearly
results
value
defines
kmers
compared
size
background
length
string
fastareader
generates
size
family
count
number
times
every
kmer
family
occurs
use
hashtable
part
collections
package
java
util
computing
background
counts
count
kmers
occur
family
hashtable
suitable
define
properly
can
use
hashtable
example
entry
hashtable
consist
pair
integers
family
count
background
count
real
values
score
unusualness
first
step
make
schedule
write
driver
first
day
allocate
days
rest
write
driver
wednesday
think
far
behind
schedule
writing
driver
can
focus
questions
three
major
steps
task
plus
minor
ones
need
read
memory
two
files
store
strings
entirely
necessary
otherwise
will
worry
substrings
wrapping
around
end
one
line
beginning
next
line
files
masterhit
instructional
icsh23
files
family
file
nit
txt
file
standard
fasta
format
form
molecular
biologists
use
store
information
genes
surrounding
regions
process
file
need
skip
comment
lines
net
effect
read
file
form
single
long
string
3500
characters
second
file
complete
chromosome
yeast
16
chromosomes
called
chri
230203
txt
can
guess
many
characters
can
reading
file
single
long
string
can
define
reader
class
process
either
file
will
provide
little
bit
code
computing
number
times
kmer
occurs
family
use
hashtable
hashmap
need
define
class
call
entry
goes
hashtable
key
entry
kmer
string
since
strings
well
predefined
hashcodes
need
define
anything
special
class
entry
requires
least
two
fields
int
family
count
int
background
count
process
family
file
consider
kmer
turn
either
enter
hashtable
update
family
count
already
process
family
file
family
count
will
hold
number
occurrences
family
background
count
will
zero
complexity
linear
general
rule
also
avoid
processing
file
twice
file
many
entry
hashtable
might
fields
string
kmer
int
familycount
int
backgroundcount
long
score
note
java
hashtable
uses
rehashing
table
size
will
automatically
expanded
needed
however
since
may
many
3000
entries
use
new
hashtable
6000
initialize
hashtable
size
6000
computing
number
times
kmers
family
occur
background
use
hashtable
processing
file
little
different
kmer
file
check
see
occurs
hashtable
care
otherwise
update
background
count
computing
unusualness
sorting
kmers
value
luckily
hashtables
enumerators
hashmaps
iterators
associated
now
go
thru
hashtable
enter
best
scoring
kmers
cache
sorted
bounded
previous
assignment
necessary
use
cache
finally
print
console
top
20
kmers
cache
kmersize
6
minor
step
instead
using
cache
class
may
use
treeset
collections
package
actually
print
entry
associated
kmers
output
look
something
like
kmer
times
family
times
background
score
aaaaaa
13
121
real
answer
etc
code
follow
code
will
concatenate
upstream
regions
single
string
write
br
readline
will
huge
unacceptable
cost
overhead
instead
fact
better
just
read
process
upstream
region
code
worked
guarantees
errorfree
students
used
without
problems
complaints
improvements
welcomed
import
java
io
class
fastareader
string
data
fastareader
string
filename
try
file
file
new
file
filename
bufferedreader
bf
new
bufferedreader
new
filereader
file
stringbuffer
sbuf
new
stringbuffer
int
file
length
string
line
bf
readline
line
null
line
charat
0
'
'
sbuf
append
line
line
bf
readline
data
new
string
sbuf
bf
close
catch
ioexception
system
println
bad
file
something
string
getdata
return
data
homework
4
comparison
sorting
routines
last
homework
note
always
form
work
plan
implement
one
sorting
routine
driver
will
good
estimate
thw
work
involved
use
random
new
random
0
constructing
random
number
generator
using
construct
4
test
arrays
size
1000
2000
4000
8000
filling
using
nextint
will
implement
four
sorting
algorithms
time
performance
array
four
sorting
algorithms
bubblesort
mergesort
heapsort
quicksort
however
text
code
arrays
objects
will
sorting
array
integers
text
code
provides
strong
outline
code
able
greatly
simplify
can
write
code
algorithms
verify
notation
formula
running
time
algorithm
creating
following
table
algorithm
number
data
items
use
data
estimate
constant
notation
running
time
instead
saying
2
say
23
5
2
bubblesort
time
1k
time
2k
time
4k
time
8k
meaning
running
time
sort
1k
2k
4k
8k
entries
divided
size
array
time
klogk
time
2klog
2k
time
4klog
4k
time
8klog
8k
time
2
time
4k
2
time
16k
2
time
64k
2
row
approximately
constant
value
can
hypothesize
running
time
constant
appropriate
polynomial
output
algorithm
table
performance
also
document
code
precise
polynomial
estimate
running
time
algorithm
besides
driver
program
programshould
obvious
4
classes
one
sorting
routine
may
convenient
additional
auxiliary
classes
sorting
routines
measuring
performance
