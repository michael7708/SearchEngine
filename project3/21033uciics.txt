aop home page uci 
aspect oreinted programmin 
aspect
oriented
programming
software
development
spotlight
mit's
top
10
java
world
cacm
special
go
sites
aosd
aspectj
read
ecoop'00
icse'00
ecoop'97
research
topics
program
understanding
measuring
complexity
visualizing
software
coping
fuzzyness
programming
models
kodak
moments
aspect
oriented
programming
aop
programming
model
tackles
specific
problem
capturing
consistent
units
software
system
traditional
programming
models
force
spread
among
several
modules
program
implementations
light
aspects
consistent
units
happen
crosscut
units
concrete
example
will
make
definitions
clear
take
telecom
system
customers
calls
connections
basic
operation
system
relates
calls
customers
make
including
conference
calls
merging
different
connections
call
basic
operation
timing
feature
tracks
connection
time
per
customer
may
billing
feature
charges
costumers
calls
make
according
amount
time
used
types
calls
made
think
moment
implement
using
say
object
oriented
programming
model
customers
calls
connections
natural
candidates
objects
whose
behavior
defined
class
implementations
timing
feature
also
implemented
group
classes
including
least
timer
even
though
may
able
isolate
functionality
timing
feature
group
classes
must
code
basic
classes
invokes
timing
feature
appropriate
points
operation
telecom
system
example
plausible
everytime
new
connection
must
start
timer
also
plausible
calls
made
certain
special
customers
timed
points
timing
feature
invoked
basic
objects
important
consistent
part
system
specification
can
change
independent
parts
using
language
supports
aop
can
capture
dependencies
implementation
modules
case
can
one
module
program
encapsulates
information
timing
feature
invoked
things
way
can
trace
changes
specification
timing
feature
one
consistent
unit
program
implementation
can
even
unplug
timing
feature
system
without
change
single
line
code
basic
classes
preserving
integrity
basic
operation
else
many
examples
thinking
terms
aspects
can
positive
impact
software
development
software
developers
already
embraced
ideas
especially
helping
develop
systems
aspects
tracing
profiling
testing
can
find
much
developers
using
aop
following
links
aop
related
sites
listed
left
quest
better
software
development
models
tools
end
current
state
aop
lot
can
done
field
project
ideas
general
information
please
contact
prof
crista
lopes
note
ideas
aop
patented
xerox
corporation
