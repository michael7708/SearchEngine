compsci 141 cse 141 informatics 101 fall 2009 midterm study guide 
midterm study guide 
compsci
141
cse
141
informatics
101
fall
2009
news
course
reference
schedule
lab
manual
code
examples
alex
compsci
141
cse
141
informatics
101
fall
2009
midterm
study
guide
introduction
study
guide
summary
material
covered
lecture
thusfar
midterm
will
concentrate
material
discussed
lecture
will
expect
write
short
amounts
code
makes
use
java
generics
also
short
amounts
haskell
though
exam
will
solely
focused
writing
code
also
need
understand
topics
covered
lecture
grammars
spectrum
compilation
vs
interpretation
etc
well
assignments
best
general
advice
can
give
preparing
exam
aim
understanding
memorization
fair
say
will
need
memorize
bit
new
syntax
able
apply
important
syntax
particular
able
answer
question
requires
take
additional
step
beyond
something
seen
class
appropriate
context
explained
combines
two
things
discussed
short
try
pay
attention
bigger
picture
focusing
also
point
study
guide
intended
replacement
lectures
possible
something
discussed
class
will
left
study
guide
still
fair
game
exam
trying
cheat
purpose
study
guide
guide
enjoy
study
guide
language
design
issues
among
issues
language
design
affected
problem
domain
intended
audience
intended
platform
efficiency
concerns
language
design
exercise
making
trade
offs
trade
offs
flexibility
vs
safety
reliability
vs
efficiency
influence
computer
architecture
language
design
widely
used
languages
built
chiefly
around
variables
assignment
statements
rather
another
approach
scheme's
functional
approach
even
sql's
declarative
approach
majority
widely
used
languages
today
imperative
languages
least
imperative
style
languages
even
java
thought
object
oriented
language
imperative
language
compilers
interpreters
hybrid
systems
understand
spectrum
possibilities
language
implementation
pure
compilation
pure
interpretation
either
end
many
hybrid
choices
lying
benefits
downsides
pure
compilation
pure
interpretation
benefits
downsides
techniques
discussed
just
time
compilers
add
languages
discussed
far
java
haskell
fit
spectrum
specifying
programming
languages
syntax
semantics
difference
syntax
form
language
construct
semantics
effect
executing
notations
describing
semantics
none
wide
use
none
discussed
course
syntax
can
cleanly
described
using
context
free
grammars
bnf
two
slightly
different
notations
work
way
collectively
referred
notations
lecture
grammars
describe
syntax
level
lexemes
smallest
building
blocks
language
examples
lexemes
java
program
include
getdata
public
alex
categorize
lexemes
groups
called
tokens
identifiers
operators
keywords
string
literals
grammar
collection
rules
specify
syntax
ex
whileloop
¡÷
expression
statement
rule
states
loop
keyword
followed
left
paren
arbitrary
expression
right
paren
arbitrary
statement
rules
explain
expressions
statements
look
like
rules
sequences
non
terminal
symbols
terminal
symbols
non
terminal
symbols
expression
refer
rules
terminal
symbols
tokens
language
definition
grammar
includes
start
symbol
non
terminal
symbol
represents
entire
program
language
specifying
list
statement
list
grammar
requires
use
recursion
blockstatement
¡÷
statementlist
statementlist
¡÷
statement
statement
statementlist
program
can
shown
language
described
grammar
drawing
parse
tree
described
textbook
showing
leftmost
derivation
consider
grammar
along
blockstatement
statementlist
rules
program
¡÷
program
blockstatement
endstatement
¡÷
assignment
assignment
¡÷
identifier
integerconstant
leftmost
derivation
demonstrates
program
3
end
language
described
grammar
program
program
blockstatement
end
program
statementlist
end
program
statement
end
program
assignment
end
program
identifier
integerconstant
endsince
identifier
3
integer
constant
program
3
end
language
described
grammar
leftmost
derivation
one
replace
leftmost
non
terminal
symbol
one
right
hand
sides
grammar
ambiguous
string
language
one
parse
tree
one
leftmost
derivation
operator
precedence
set
rules
describe
operators
expression
performed
others
operator
associativity
set
rules
describe
operators
expression
performed
others
cases
precedences
complete
example
textbook
one
assignment
adjusting
grammar
take
precedence
associaitivty
account
process
called
stratification
generic
classes
java
provided
couple
links
generics
related
reading
assignment
2
write
generics
introduction
java
5
0
documentation
generics
java
programminng
language
complete
tutorial
subject
first
five
sections
relevant
course
even
parts
beyond
scope
covered
intend
test
esoteric
details
generics
related
syntax
encourage
memorize
documents
good
reference
clear
use
generic
classes
want
aware
problem
generics
solve
basic
way
solve
particular
know
use
write
generic
classes
java
use
write
generic
methods
level
complexity
discussed
lecture
use
write
generic
classes
methods
include
wildcards
bounded
type
parameters
iteration
foreach
loop
java
5
0
standard
mechanism
java
iteration
called
iterator
iterators
return
element
collection
linked
list
binary
search
tree
one
time
introduction
generics
java
5
0
iterators
become
generic
iterating
arraylist
string
expect
iterator
return
strings
java
5
0
ask
arraylist
string
iterator
get
back
iterator
string
standard
way
declare
objects
class
can
iterators
created
class
implement
interface
called
iterable
iterable
generic
objects
class
can
iterator
string
created
class
implement
iterable
string
generic
classes
iterable
often
implement
iterable
interface
generically
public
class
mylinkedlist
implements
iterable
public
iterator
iterator
addition
providing
one
unifying
mechanism
creating
iterators
objects
iterable
interface
iterators
central
another
new
feature
java
5
0
enhanced
loop
class
implements
iterable
interface
can
iterators
created
old
fashioned
way
pattern
looks
something
like
arraylist
string
iterator
string
iterator
hasnext
string
next
system
println
pattern
pain
requires
create
manage
iterator
pattern
comes
deal
java
collections
enhanced
loop
substitute
common
use
iterator
creating
one
loop
iteration
getting
next
object
iterator
something
arraylist
string
string
system
println
java
creates
manages
iterator
automatically
common
case
want
get
next
element
every
loop
iteration
stop
loop
iterator
elements
need
anything
else
iterator
call
remove
since
enhanced
loop
shorthand
creation
iterator
objects
classes
implement
iterable
can
used
functional
programming
using
haskell
imperative
style
programming
languages
like
java
pascal
characterized
sequences
statements
effect
global
state
program
global
state
contained
within
set
variables
entire
program
can
potentially
access
part
global
state
meaning
subprograms
can
affect
behavior
intentionally
otherwise
subprograms
great
deal
effort
kind
programming
goes
isolating
subprograms
one
another
local
variables
abstract
data
types
classes
private
data
members
effect
programs
harder
undertstand
easily
understand
subprograms
outside
context
others
unless
define
carefully
enough
presence
concurrency
programs
execute
one
subprogram
simultaneously
multithreaded
java
programs
problem
magnified
considerably
one
way
simplify
programs
simplify
programming
model
functional
programming
one
simplification
functional
programs
built
differently
counterparts
imperative
style
object
oriented
languages
functional
program
one
expression
evaluated
generates
result
somewhat
like
mathematical
function
one
expression
can
call
functions
call
functions
call
still
functions
just
mathematical
functions
can
defined
terms
others
call
function
many
times
pass
arguments
time
guaranteed
get
back
result
every
time
just
like
mathematical
function
achieve
limitations
can
seem
severe
imperative
style
programmer
statements
expressions
words
limited
writing
kind
code
go
right
hand
side
assignment
statement
java
global
state
words
variables
carry
value
along
one
statement
next
course
sequences
statements
first
place
limiting
sounds
loops
loops
without
variables
control
side
effects
expression
given
particular
set
arguments
will
always
return
value
functions
first
class
meaning
can
passed
arguments
returned
results
stored
lists
just
like
values
types
lecture
assignment
3
briefly
explored
haskell
programming
language
haskell
strongly
typed
type
errors
affect
outcome
program
fact
haskell
type
errors
detected
statically
meaning
even
exist
run
time
specify
type
function
haskell
uses
type
inference
deduce
figuring
general
type
function
given
uses
arguments
builds
result
polymorphically
typed
functions
can
written
operate
many
kinds
values
opposed
just
one
lazy
expression
evaluated
unless
result
needed
part
expression
evaluated
unless
needed
useful
consequences
like
able
define
infinitely
recursive
functions
functions
take
potentially
infinite
lists
input
purely
functional
follows
rules
global
state
first
class
higher
order
functions
able
read
understand
write
haskell
functions
level
depth
greater
faced
assignment
particular
prepared
understand
apply
following
functions
concrete
type
declarations
int
int
functions
polymorphic
type
declarations
including
use
constraints
like
eq
ord
defining
functions
using
primitive
recursion
using
pattern
matching
select
function
body
basis
structure
value
function's
arguments
using
guards
define
functions
multiple
possible
behaviors
depending
arguments
manipulating
lists
higher
order
functions
map
filter
foldr
zipwith
discussed
lecture
infinite
recursion
infinite
lists
abstract
data
types
abstract
data
type
set
hidden
data
packaged
operations
cleanly
safely
manipulate
data
class
java
abstract
data
type
provided
fields
public
provided
operations
provided
public
methods
abstract
data
types
can
also
implemented
languages
support
object
oriented
programming
see
provided
code
example
