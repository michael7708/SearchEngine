sixth homework 
guis dvds bags symbol tables 
assignment
due
monday
february
24
take
button2
class
went
last
thursday
adapted
bruce
eckel's
thinking
java
third
edition
change
follows
make
text
field
display
counter
starts
zero
make
one
button
say
increment
click
counter
increased
one
make
button
say
decrement
click
counter
decreased
one
add
another
button
called
reset
sets
counter
zero
see
http
www
ics
uci
edu
kay
courses
h22
hw
button2
java
version
button2
code
used
class
extra
credit
absolutely
may
attempt
finish
rest
assignment
come
now
guis
fun
dessert
eat
vegetables
take
look
eckel's
text
try
catalog
swing
components
section
chapter
14
creating
windows
applets
get
idea
components
can
create
add
bells
whistles
counter
simple
possibilities
counting
twos
user
specified
increment
possibly
specified
slider
highlighting
particular
values
values
evenly
divisible
10
allowing
user
specify
starting
reset
values
design
implement
class
dvd
following
14
fields
title
studio
pending
release
date
status
released
discontinued
pending
sound
versions
price
rating
year
genre
aspect
ratio
upc
universal
product
code
release
date
id
number
file
http
www
ics
uci
edu
kay
courses
h22
hw
dvd
txt
contains
data
25
000
dvds
original
source
file
http
hometheaterinfo
com
dvdlist
htm
note
first
line
contains
field
names
1
dvd
class
conventional
getter
setter
methods
field
2
also
constructor
takes
single
string
line
information
dvd
format
input
file
listed
extracts
field
values
creating
new
dvd
object
appropriately
data
file
contains
single
line
dvd
can
read
line
string
call
constructor
parsing
strings
requires
little
bit
attention
string
14
fields
dvd
information
separated
one
another
commas
fields
null
values
represented
input
two
commas
nothing
comma
end
string
fields
strings
surrounded
double
quote
marks
double
quoted
string
contains
double
quote
mark
two
double
quote
marks
appear
row
store
string
values
course
store
surrounding
double
quote
marks
internal
double
quote
marks
doubled
stored
version
input
price
field
appears
dollar
sign
quotation
marks
store
integer
number
cents
pending
release
date
field
null
status
pending
field
release
date
field
null
contain
date
time
format
2
14
03
12
00
enclosed
quotation
marks
may
store
date
time
value
single
string
id
number
field
either
null
integer
store
field
integer
null
values
zero
3
also
tostring
method
produces
dvd
object
string
form
original
data
4
write
simple
driver
program
reads
lines
input
file
creates
dvd
objects
writes
lines
back
new
text
file
eventually
test
program
entire
input
file
course
can
use
just
small
portion
working
next
part
assignment
will
design
implement
bag
objects
bag
multiset
collection
objects
string
key
order
important
like
set
number
times
item
occurs
important
unlike
set
might
use
bag
example
automated
building
entry
system
look
entrant
keep
count
many
times
person
passed
door
might
also
use
one
support
web
site
counts
votes
favorite
song
book
bag
will
implement
interface
described
will
write
two
classes
implement
bag
interface
one
class
using
binary
search
tree
using
hash
table
hash
table
class
will
experiment
different
hash
functions
compare
results
will
also
write
one
simple
driver
programs
read
data
specified
insert
various
bags
hash
table
version
will
implement
five
alternative
hash
functions
will
hash
set
data
using
five
hash
functions
producing
statistics
effectiveness
combination
may
choose
parameterize
choice
hash
function
data
file
combining
tests
one
single
run
program
may
also
recompile
class
run
test
separately
hash
function
data
set
finally
will
write
brief
summary
findings
describing
functions
worked
best
worst
data
1
bag
interface
bag
operations
described
behavior
classes
implement
interface
also
described
constructor
creates
empty
bag
argument
specified
binary
search
tree
version
ignores
hash
table
version
uses
argument
table
size
little
extra
credit
make
hash
table
constructor
use
table
size
prime
number
greater
equal
argument
isempty
return
true
bag
contains
elements
implement
works
constant
time
makeempty
remove
items
stored
bag
insert
take
string
key
object
arguments
insert
object
bag
according
key
find
take
string
key
argument
return
reference
object
key
present
bag
null
present
delete
take
string
key
argument
remove
bag
one
object
key
present
insert
objects
keys
delete
table
will
contain
two
bs
totalelements
return
total
number
elements
currently
stored
bag
insert
totalelements
return
5
implement
works
constant
time
uniqueelements
return
number
unique
elements
currently
stored
bag
insert
uniqueelements
return
3
implement
works
constant
time
printstats
print
statistics
show
evenly
elements
distributed
bag
function
will
produce
different
results
implementation
binary
search
tree
version
print
indication
whether
well
tree
balanced
hash
table
version
print
one
line
index
bin
hash
table
line
index
total
number
items
bin
number
unique
items
bin
asterisk
unique
item
bin
example
suppose
hashtable
size
3
following
items
inserted
3
9
4
9
5
7
5
suppose
upper
case
letters
hash
bin
0
lower
case
letters
hash
bin
1
digits
hash
bin
2
output
printstats
table
might
look
like
0
5
4
1
2
2
2
7
5
2
binary
search
tree
details
binary
search
tree
simple
unbalanced
binary
search
tree
may
use
guide
scheme
code
http
www
ics
uci
edu
kay
courses
h22
hw
bst
scm
well
code
goodrich's
text
note
even
though
order
items
important
bag
class
will
need
compare
strings
internally
construct
binary
search
tree
3
hash
table
details
hash
table
resolve
collisions
linear
chaining
described
class
goodrich's
text
4
hash
functions
insert
find
operations
must
course
use
function
computes
hash
code
key
field
data
hash
function
critical
performance
hash
table
since
lose
performance
advantages
hashing
data
distributed
evenly
randomly
throughout
table
code
hash
functions
listed
function
speaks
character's
ascii
code
may
use
numeric
value
unique
every
character
sum
ascii
codes
character
key
mod
table
size
product
ascii
codes
character
key
mod
table
size
product
ascii
codes
first
fifth
ninth
thirteenth
seventeenth
twenty
third
characters
key
mod
table
size
hash
function
given
page
346
goodrich
text
least
one
hash
function
design
may
variation
one
functions
described
5
experimental
runs
input
data
write
simple
driver
programs
read
two
data
sets
insert
bag
observe
analyze
performance
dvd
objects
described
part
use
dvd's
title
key
40
titles
unique
bag
count
multiple
occurrences
dvd
object
extra
credit
can
create
title
main
title
field
notice
dvd
list
multiple
versions
work
distinguished
adding
title
extra
information
like
animated
live
action
can
create
main
title
finding
first
character
title
letter
upper
lower
case
digit
space
apostrophe
everything
start
string
point
main
title
use
main
title
key
will
produce
duplicate
keys
bag
count
list
least
2000
english
words
file
many
words
available
http
www
ics
uci
edu
kay
courses
h22
hw
wordlist
txt
ask
question
check
someone
know
answer
problem
two
input
files
testing
performance
bst
based
bag
hint
make
life
easier
provided
two
files
http
www
ics
uci
edu
kay
courses
h22
hw
dvd
random
txt
http
www
ics
uci
edu
kay
courses
h22
hw
wordlist
random
txt
6
extra
credit
little
extra
credit
try
one
run
tests
experiments
third
set
test
data
download
web
including
results
written
analysis
data
contain
least
5000
items
sure
supply
url
found
data
far
concerned
effective
hash
functions
evenly
distribute
data
throughout
table
part
will
concentrate
efficiency
function
long
takes
compute
hash
value
key
will
measure
long
hash
functions
takes
hash
10
000
data
items
including
description
results
written
analysis
write
separate
driver
task
just
reads
data
calls
hash
function
want
skew
results
including
time
takes
insert
data
table
produce
timing
results
different
hash
functions
different
sets
test
data
see
efficiency
differences
depend
characteristics
data
write
interpreter
programming
language
facile
2
0
like
original
version
facile
except
two
enhancements
long
variable
names
everywhere
single
letter
variable
occur
original
facile
program
facile
2
0
accepts
string
one
alphabetic
characters
need
build
symbol
table
either
binary
search
tree
hash
table
similar
bag
implementations
part
may
use
implementations
class
java
library
store
variable
value
retrieve
value
already
defined
variable
appears
code
statement
labels
perhaps
painful
part
programming
original
facile
count
statements
get
statement
numbers
correct
goto
gosub
statements
facile
2
0
programmer
may
include
statement
label
lines
statement
label
variable
name
followed
colon
shown
note
first
word
line
statement
keyword
known
facile
like
let
gosub
label
program
finds
label
adds
label
symbol
table
value
statement
line
number
label
occurred
label
occurs
goto
gosub
statement
interpreter
looks
label
symbol
table
substitutes
value
example
appears
let
5
let
1
gosub
fact
print
end
fact
1
keepgoing
return
keepgoing
mult
sub
1
gosub
fact
return
part
extra
credit
due
rest
assignment
will
due
couple
weeks
wanted
give
chance
start
thinking
now
either
individually
pairs
add
graphical
user
interface
one
programs
written
quarter
restaurant
database
program
restaurant
ordering
program
bank
accounts
facile
interpreter
think
design
start
coding
develop
incrementally
add
little
bit
time
time
implement
one
last
feature
least
previous
features
working
ready
turn
turn
turn
java
files
via
checkmate
parts
also
turn
prose
document
part
gives
analysis
hash
functions
tested
gui
counter
problem
written
david
kay
winter
2003
build
code
bruce
eckel's
thinking
java
third
edition
dvd
class
problem
written
david
kay
winter
2003
hash
table
implementation
assignment
written
david
kay
winter
1997
modified
david
kay
spring
1997
fall
1998
bags
binary
search
trees
included
david
kay
winter
1999
residual
revisions
david
kay
spring
1999
winter
2003
facile
enhancements
written
david
kay
winter
2003
build
facile
lab
assignment
alex
thornton
