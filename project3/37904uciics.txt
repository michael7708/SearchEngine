ics 180 february 4 1999 
horizon effect quiescence selective extensions null move pruning 
ics
180
winter
1999
strategy
board
game
programming
lecture
notes
february
4
1999
nodes
search
full
width
vs
selective
search
alpha
beta
tells
us
search
still
need
know
expand
node
search
children
just
stop
call
evaluation
function
horizon
effect
pseudo
code
shown
far
searches
every
move
given
fixed
depth
depth
also
known
horizon
although
can
quite
effective
seeing
tactical
threats
carried
within
horizon
obviously
detect
threats
take
effect
past
horizon
instance
depth
8
search
search
four
moves
deep
likely
much
information
forced
checkmate
five
moves
know
defend
simply
ignore
long
term
threats
sort
fixed
depth
search
can
behave
even
worse
position
contains
medium
depth
threats
bad
outcome
forced
occur
lines
outcome
within
search
horizon
case
program
can
play
horrible
pointless
moves
attempt
delay
bad
outcome
long
enough
seen
phenomenon
known
horizon
effect
example
following
position
black's
bishop
trapped
white
pawns
matter
black
bishop
will
taken
moves
instance
white
rook
maneuver
h2
h1
a1
a2
capture
bishop
sequence
8
plys
deep
suppose
black
program
searching
depth
8
plys
probably
best
move
black
actual
position
trade
bishop
pawns
bishop
pawn
pawn
bishop
remaining
endgame
black's
three
connected
passed
pawns
may
enough
win
draw
rook
program
searching
8
plys
will
likely
instead
move
black
pawn
forwards
checking
white
king
white
must
respond
taking
pawn
king
forced
response
delays
loss
bishop
long
enough
program
see
anymore
thinks
bishop
safe
fact
position
fixed
depth
program
can
continue
throwing
away
pawns
delaying
bishop
capture
moves
probably
causing
eventual
loss
game
one
way
counter
horizon
effect
add
knowledge
program
knows
evaluation
bishop
trapped
search
try
delay
capture
throwing
away
pawns
another
make
search
faster
deeper
levels
program
searches
less
likely
run
across
situation
like
possible
delay
loss
bishop
past
horizon
effective
general
solution
make
search
depth
flexible
program
searches
deeper
lines
pawn
given
away
less
deep
lines
need
depth
brute
force
selectivity
shannon's
original
paper
computer
chess
listed
two
possible
strategies
adjusting
search
depth
game
program
obvious
pseudo
code
shown
far
full
width
brute
force
search
fixed
depth
just
pass
depth
parameter
program
decrement
one
level
search
stop
hits
zero
advantage
seeing
even
wierd
looking
lines
play
long
remain
within
search
horizon
high
branching
factor
means
search
line
deeply
bachelor's
degree
knows
nothing
everything
even
worse
falls
prey
horizon
effect
suppose
chess
program
searching
seven
levels
deep
method
suggested
shannon
selective
pruning
search
fixed
depth
keep
branching
factor
search
children
node
avoiding
obviously
bad
moves
can
search
much
deeply
lines
completely
see
ph
knows
everything
nothing
shannon
thought
good
idea
closer
humans
think
turing
used
variant
idea
searching
capturing
moves
typically
one
might
evaluate
children
expand
best
parameter
less
true
branching
factor
unfortunately
obviously
bad
moves
often
bad
brilliant
sacrifices
win
game
find
one
made
work
harder
find
way
win
worse
see
opponent
spring
move
sequence
fall
trap
lose
nowadays
neither
ideas
used
pure
form
instead
use
synthesis
selective
extension
search
lines
fixed
depth
extend
extend
lines
deeper
horizon
sometimes
also
pruning
beyond
safe
pruning
done
alpha
beta
usually
extremely
conservative
hard
pick
good
moves
can
sometimes
pick
ignore
really
bad
moves
games
chess
higher
branching
factors
may
necessary
use
aggressive
pruning
techniques
extend
point
extending
get
better
accurate
evaluations
extend
current
evaluation
likely
inaccurate
current
line
play
particularly
important
part
overall
game
tree
search
combination
quiescence
search
chess
games
capturing
non
capturing
moves
checkers
go
fanorona
captures
made
evaluation
will
change
greatly
capture
quiescence
search
idea
reaching
main
search
horizon
running
turing
like
search
expand
capturing
moves
sometimes
capturing
checking
moves
games
chess
main
idea
include
moves
make
large
changes
evaluation
search
must
also
include
pass
moves
decide
stop
capturing
call
evaluation
function
main
alpha
beta
search
replaced
following
slimmed
version
alpha
beta
searches
capturing
moves
allows
search
stop
current
evaluation
already
good
enough
fail
high
quiescence
search
call
main
alphabeta
search
place
eval
quiesce
int
alpha
int
beta
int
score
eval
score
beta
return
score
capturing
move
make
move
score
quiesce
beta
alpha
unmake
move
score
alpha
alpha
score
score
beta
break
return
score
people
also
include
checks
king
inside
quiescence
search
careful
depth
parameter
quiescence
can
search
huge
number
nodes
captures
naturally
limited
can
perform
16
captures
run
pieces
capture
checks
can
go
forever
cause
infinite
recursion
selective
extensions
position
active
recent
past
may
evidence
tactics
coming
previous
moves
delaying
tactics
prevent
us
seeing
deeply
enough
get
good
evaluation
one
often
increases
search
depth
search
passes
interesting
move
capture
check
alpha
beta
pseudocode
accomplished
replacing
depth
1
parameter
recursive
call
search
routine
value
depth
1
extension
careful
often
though
end
hugely
expanded
even
possibly
infinite
search
tree
one
trick
helps
make
sure
extension
idea
terminate
extend
fraction
level
specifically
make
depth
counter
record
multiple
number
levels
really
want
search
say
depth
levels
24
recursive
calls
alpha
beta
search
pass
value
depth
24
extension
extension
always
strictly
less
24
method
guaranteed
terminate
can
choose
situations
result
larger
smaller
extensions
may
also
useful
include
within
evaluation
function
knowledge
difficult
position
evaluate
extend
search
positions
difficult
program
program
passes
current
depth
evaluation
function
position
complicated
depth
close
zero
evaluation
returns
special
value
telling
search
continue
depth
reaches
large
negative
number
evaluation
function
always
succeeds
search
will
eventually
terminate
combine
accuracy
importance
far
just
looked
trying
find
points
evaluation
may
inaccurate
maybe
care
inaccurate
unimportant
parts
tree
really
care
nodes
principal
variation
take
importance
account
performing
selective
extensions
let
alpha
beta
sort
importance
just
extend
based
accuracy
extend
lines
part
near
principal
variation
singular
extensions
used
deep
blue
predecessors
one
move
much
better
others
position
extend
search
move
moving
away
alpha
beta
conspiracy
number
search
minimum
number
positions
value
change
force
program
make
different
move
search
positions
deeper
null
move
search
idea
fits
general
theme
lecture
adjusting
search
depth
appropriate
circumstances
however
works
different
direction
instead
extending
search
hard
positions
reduce
search
easy
positions
idea
based
piece
knowledge
chess
rare
except
endgame
disadvantage
move
normally
turn
move
something
can
make
position
better
positions
possible
moves
make
position
worse
called
zugzwang
german
move
compulsion
normally
happen
endgames
games
go
moku
zugzwang
happen
changed
rules
chess
allow
pass
move
passing
usually
mistake
game
change
much
suppose
search
node
expect
fail
high
alphabeta
will
return
score
least
beta
idea
null
move
search
search
pass
move
first
even
though
usually
best
move
pass
move
fails
high
true
best
move
also
likely
fail
high
can
return
beta
right
away
rather
searching
make
even
faster
depth
passing
move
searched
shallower
usual
careful
heuristic
changes
result
search
may
cause
miss
important
lines
play
use
null
moves
twice
row
search
will
degenerate
just
returning
evaluation
careful
use
situations
unlikely
zugzwang
chess
means
positions
many
pieces
left
alpha
beta
search
null
move
heuristic
alphabeta
int
depth
int
alpha
int
beta
won
game
depth
beta
return
beta
possible
move
make
move
alpha
max
alpha
alphabeta
depth
1
beta
alpha
unmake
move
alpha
beta
break
return
alpha
david
eppstein
dept
information
computer
science
uc
irvine
monday
01
feb
1999
16
58
05
pst
