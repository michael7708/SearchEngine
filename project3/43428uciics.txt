r esearch 
r esearch 
luis
angel
bathen
danny
ome
bout
esearch
esume
ta
courses
research
section
dec
03
2010
danny
background
embedded
systems
academic
life
storage
systems
industrial
life
chance
collaborate
extremely
bright
minds
academia
various
universities
well
industry
primarily
fellow
ibmers
almaden
research
center
tucson
research
interests
virtualization
support
multi
many
core
platformsvariation
aware
softwareembedded
system
reliabilitylow
power
embedded
system
designembedded
system
security
multi
level
securitysoftware
hardware
application
mapping
scheduling
embedded
systemscompiler
optimizations
focus
parallelization
security
reliabilitycaching
algorithms
embedded
storage
systemsstorage
management
philosoftware
low
power
high
performance
reliable
secure
virtualization
layer
chip
software
controlled
memories
slides
thesis
download
framework
cope
computational
memory
requirements
emerging
mobile
software
stacks
designers
deploying
single
chip
multi
core
platforms
distributed
chip
memories
caches
scratchpad
memories
order
pack
cores
per
die
designers
relying
aggressive
technology
scaling
trading
power
performance
scalability
alarming
increase
process
variations
result
high
variations
power
consumption
operating
frequencies
well
higher
probabilities
failure
increase
system
performance
designers
opting
deploy
variety
communication
fabrics
buses
networks
chip
cost
variation
access
latencies
chip
memory
resources
finally
mitigate
growing
leakage
power
sram
based
memories
designers
deploying
emerging
memory
technologies
viable
alternatives
turn
different
characteristics
require
complex
memory
allocation
policies
context
exploration
design
implementation
memory
subsystem
platforms
faces
two
main
challenges
1
scalability
increasing
memory
demands
software
stack
requires
smart
memory
allocation
decisions
maximize
system
performance
minimize
power
consumption
2
physical
characteristic
variation
software
needs
address
opportunistically
exploit
inherent
process
technological
variations
underlying
system
maximize
system
performance
minimize
power
consumption
project
introduces
philosoftware
low
power
high
performance
reliable
secure
virtualization
layer
chip
software
controlled
memories
philosoftware
allows
designers
build
memory
allocation
policies
efficiently
manage
distributed
chip
memory
resources
high
level
key
technical
contributions
project
1
introduce
virtualization
layer
transparently
manage
available
memory
resources
abstracting
physical
characteristics
device
programmer
minimizing
changes
programming
model
2
exploit
memory
virtualization
trusted
environment
generation
security
aware
scheduling
memory
allocation
3
introduce
notion
embedded
raids
chip
allow
programmers
define
high
level
variation
aware
policies
manage
data
enforced
run
time
variation
aware
virtual
memory
manager
4
define
new
metric
emph
volatility
analysis
derive
efficient
dynamic
memory
allocation
decisions
hybrid
memory
space
support
hybrid
memory
aware
virtual
memory
manager
5
propose
concept
spmcloud
highly
scalable
memory
subsystem
built
notion
distributed
virtualized
memory
resources
support
future
generations
single
chip
cloud
computers
6
propose
concept
virtual
memory
address
spaces
different
guarantees
characteristics
low
power
fault
tolerant
secure
etc
novelty
approach
lies
deployment
light
weight
memory
virtualization
layer
distributed
chip
memories
allow
programmers
compilers
build
power
performance
reliability
security
aware
memory
allocation
policies
opportunistically
exploit
device
characteristics
communication
fabric
memory
technology
etc
process
variations
access
latencies
low
power
underlying
platform
system
level
virtualized
address
spaces
cam
constraint
aware
application
mapping
multiprocessor
systems
slides
dec
03
2010
danny
increasing
demand
low
power
high
performance
reliable
secure
multimedia
embedded
systems
motivated
need
effective
solutions
satisfy
application
bandwidth
latency
requirements
tight
power
budget
technology
scales
new
techniques
aggressive
voltage
scaling
utilized
design
embedded
systems
imperative
applications
optimized
take
full
advantage
underlying
resources
meet
power
performance
reliability
requirements
moreover
devices
become
complex
connectivity
world
wide
web
constantly
increasing
vulnerabilities
malicious
software
increase
cam
framework
constraint
aware
application
mapping
embedded
systems
figure
1
shows
cam
block
diagram
given
series
constraints
mixture
power
performance
security
reliability
temperature
cam
will
take
application
try
map
onto
desired
embedded
system
currently
cam
supports
wide
spectrum
platforms
ranging
simple
chip
multiprocessors
dedicated
hardware
models
cam
consists
four
main
parts
first
front
end
extracts
necessary
information
application
generates
input
models
framework
second
part
transformations
analysis
engine
responsible
applying
different
source
code
level
optimizations
increase
application
parallelism
determine
data
reuse
opportunities
well
generate
augmented
task
graph
annotated
different
application
information
will
used
scheduler
next
part
mapping
scheduling
heuristics
will
take
augmented
task
graph
given
set
constraints
will
optimize
scheduling
mapping
given
platform
finally
back
end
consists
model
generation
will
take
application
code
generate
performance
models
plugged
cam
systemc
modeling
engine
reliable
secure
memory
systems
future
data
center
chip
platforms
dec
03
2010
danny
dual
effects
larger
die
sizes
technology
scaling
combined
aggressive
voltage
scaling
power
reduction
increase
error
rates
chip
memories
traditional
chip
memory
reliability
techniques
ecc
incur
significant
power
performance
overheads
paper
propose
low
power
performance
overhead
embedded
raid
raid
strategy
present
embedded
raids
chip
roc
distributed
dynamically
managed
reliable
memory
subsystem
bus
based
chip
multiprocessors
roc
achieves
reliability
redundancy
optimizing
raid
like
policies
tuned
chip
distributed
memories
achieve
chip
reliability
memories
use
distributed
dynamic
scratchpad
allocatable
memories
dspams
allocation
policies
exploit
aggressive
voltage
scaling
reduce
power
consumption
overheads
due
parallel
dspam
accesses
rely
roc
manager
automatically
handle
resulting
voltage
scaling
induced
errors
demonstrate
raids
can
enhance
fault
tolerance
traditional
memory
reliability
approaches
designing
raid
levels
exploit
ecc
finally
show
power
flexibility
roc
concept
showing
benefits
heterogeneous
raid
levels
fit
application's
needs
fault
tolerance
power
energy
performance
experimental
results
chstone
mediabench
ii
benchmarks
show
raid
levels
converge
100
yield
much
faster
traditional
ecc
approaches
moreover
raid
levels
exploit
ecc
can
guarantee
99
9
yield
ultra
low
vdd
average
traditional
ecc
approaches
able
attain
99
1
yield
observe
average
22
dynamic
power
consumption
increase
using
traditional
ecc
approaches
raid
schemes
able
save
power
consumption
average
27
incurring
worst
case
2
higher
performance
overheads
traditional
ecc
approaches
voltage
scaling
memories
see
traditional
ecc
approaches
able
save
static
energy
6
4
average
raid
approaches
achieve
23
4
static
energy
savings
average
finally
observe
mixing
raid
levels
allows
us
reduce
dynamic
power
consumption
150
cost
average
5
increase
execution
time
traditional
approaches
current
efforts
providing
reliable
memory
systems
led
us
invention
embedded
raids
chip
roc
technology
taken
roc
technology
step
applied
concepts
highly
scalable
noc
platforms
leading
us
developing
massively
scalable
highly
reliable
chip
memory
subsystem
manager
currently
filed
disclosure
also
ongoing
efforts
deal
concept
critical
data
mapping
onto
hetereogeneous
memory
subsystems
chip
memory
virtualization
dec
03
2010
danny
emerging
multicore
platforms
increasingly
deploying
dis
tributed
scratchpad
memories
achieve
lower
energy
area
together
higher
predictability
requires
transparent
efficient
software
management
criti
cal
resources
paper
introduce
spmvisor
hard
ware
software
layer
virtualizes
scratchpad
mem
ory
space
order
facilitate
use
distributed
spms
efficient
transparent
secure
manner
intro
duce
notion
virtual
scratchpad
memories
vspms
can
dynamically
created
managed
regu
lar
spms
protect
chip
memory
space
sp
mvisor
supports
vspm
level
block
level
access
control
lists
order
efficiently
manage
chip
real
estate
spmvisor
supports
policy
driven
allocation
strategies
based
privilege
levels
experimental
results
diabench
chstone
benchmarks
running
various
chip
multiprocessor
configurations
software
stacks
rtos
virtualization
secure
execution
show
spmvisor
en
hances
performance
71
average
reduces
power
consumption
79
average
trusted
environment
generation
slides
dec
03
2010
danny
secure
software
execution
chip
multiprocessor
platforms
compromised
threats
software
based
side
channel
attacks
expose
information
shared
memory
increasing
amount
shared
memory
computational
resources
emerging
chip
multiprocessors
exacerbates
security
threats
highlighting
need
secure
policies
manage
chip
resources
present
polimake
methodology
enables
exploration
generation
customized
policies
guarantee
secure
software
execution
chip
multiprocessor
system
presence
software
based
side
channel
attacks
polimake
analyzes
application's
security
needs
generates
series
custom
policies
dictate
safely
execute
tasks
efficiently
manage
computational
communication
memory
resources
experimental
results
drm
jpeg
well
synthetic
applications
show
polimake
enables
secure
software
execution
minimal
performance
overhead
reducing
power
consumption
since
policies
customized
efficiently
utilize
available
chip
resources
case
study
running
drm
secure
mode
concurrently
jpeg
encoding
able
observe
61
performance
improvement
compared
standard
approaches
policy
generation
engine
able
generate
policies
matter
minutes
secure
applications
hundreds
tasks
unsecure
applications
observed
resume
execution
99
faster
traditional
halt
approach
icostale
adaptive
cost
optimization
storage
clouds
ibm
storage
dec
03
2010
danny
unprecedented
volume
data
generated
contemporary
business
users
consumers
created
enor
mous
data
storage
management
challenges
order
control
data
storage
cost
many
users
moving
data
online
storage
clouds
applying
capacity
usage
reducing
data
transformation
techniques
like
de
duplication
compression
transcoding
give
rise
several
challenges
cloud
choose
data
transformation
techniques
apply
optimizing
cost
paper
presents
integrated
storage
service
called
icostale
reduces
overall
cost
data
storage
automatic
selection
placement
users
data
one
many
storage
clouds
intelligently
transforms
data
based
type
access
frequency
transformation
overhead
cost
model
storage
cloud
providers
demonstrate
efficacy
icostale
series
micro
application
level
benchmarks
experimental
results
show
intelligent
data
placement
transformation
icostale
can
reduce
overall
cost
data
storage
50
paradise
parallel
discovery
engine
enterprise
datacenters
ibm
storage
dec
03
2010
danny
automatic
discovery
monitoring
resources
critical
part
enterprise
systems
management
addition
ascertaining
internal
device
configurations
discovery
process
may
also
need
capture
capabilities
usage
connectivity
availability
information
related
various
components
systems
resource
management
srm
tools
typically
implement
discovery
process
using
device
specific
apis
custom
agents
standard
based
solution
like
wbem
cim
discovery
actions
need
systematically
planned
inefficient
implementation
scheduling
may
easily
take
minutes
several
hours
complete
large
heterogeneous
enterprise
datacenter
paper
discusses
various
challenges
associated
discovering
datacenter
environment
presents
autonomic
monitoring
framework
called
'paradise'
builds
upon
well
known
industry
standards
reduces
overall
discovery
time
50
optimal
prefetching
ibm
storage
dec
03
2010
danny
prefetching
widely
used
technique
modern
data
storage
systems
study
widely
used
class
prefetching
algorithms
known
sequential
prefetching
two
problems
plague
state
art
sequential
prefetching
algorithms
cache
pollution
occurs
prefetched
data
replaces
useful
prefetched
demand
paged
data
ii
prefetch
wastage
happens
prefetched
data
evicted
cache
can
used
sequential
prefetching
algorithm
can
fixed
adaptive
degree
prefetch
can
either
synchronous
can
prefetch
miss
asynchronous
can
also
prefetch
hit
capture
distinctions
define
four
classes
prefetching
algorithms
fixed
synchronous
fs
fixed
asynchronous
fa
adaptive
synchronous
adaptive
asynchronous
asyncha
find
relatively
unexplored
class
asyncha
algorithms
fact
promising
sequential
prefetching
provide
first
formal
analysis
criteria
necessary
optimal
throughput
using
asyncha
algorithm
cache
shared
multiple
steady
sequential
streams
provide
simple
implementation
called
amp
adaptive
multi
stream
prefetching
adapts
accordingly
leading
near
optimal
performance
kind
sequential
workload
cache
size
site
simple
design
hope
useful
helps
find
whatever
looking
links
find
useful
school
related
uciicscecs
language
tutorials
javaverilogc
posix
useful
tools
systemcsimplescalarcactiopencores
misc
answer
windows
problems
personal
homeabout
career
researchresume
school
ta
courses
2006
website
com
valid
css
xhtml
template
design
arcsin
