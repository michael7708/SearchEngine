thomas latoza 
research 
thomas
latoza
home
research
teaching
personal
active
code
completion
allows
library
developers
introduce
interactive
highly
specialized
code
generation
interfaces
called
palettes
directly
editor
code
completion
menus
using
several
empirical
methods
examine
contexts
system
useful
describe
design
constraints
governing
system
architecture
well
particular
code
completion
interfaces
design
one
system
named
graphite
icse
2012
reacher
lets
developers
search
along
call
graphs
find
matching
statements
interactive
call
graph
encodes
causality
ordering
type
membership
repetition
choice
helps
developers
remain
oriented
navigating
code
reacher
uses
novel
fast
feasible
path
analysis
eliminate
common
types
infeasible
paths
controlled
experiment
developers
reacher
5
6
times
successful
answering
reachability
questions
significantly
less
time
reported
reacher
helped
think
visually
vl
hcc
2011
static
analyses
simulate
behavior
program
across
possible
executions
approximate
set
exeuctions
consider
following
infeasible
paths
never
execute
existing
approaches
eliminating
infeasible
paths
designed
precisely
determine
error
path
may
execute
use
models
execution
constraints
take
hours
analyze
even
small
programs
designed
analysis
suitable
use
interactive
tools
quickly
eliminates
common
infeasible
paths
found
caused
constant
controlled
conditionals
conditionals
constants
propagated
along
alternative
paths
conditional
reached
common
examples
include
flags
case
selects
enums
dynamic
dispatch
messages
sent
buses
analysis
partially
path
sensitively
propagates
constants
across
demand
driven
interprocedural
paths
using
precomputed
summaries
intraproceudral
paths
methods
less
second
analysis
time
able
eliminate
many
common
infeasible
paths
developers
reported
asking
94
hard
answer
questions
code
spanning
24
software
engineering
topics
questions
addressed
existing
research
tools
suggesting
tools
help
commercially
developed
tools
solve
important
problems
developers
face
questions
revealed
situations
despite
trying
solve
problem
existing
research
tools
just
applicable
example
research
clone
detectors
tried
detect
functionality
code
refactored
clone
detectors
help
several
situations
developers
reported
detecting
redundant
data
equally
accessible
structures
questions
reveal
entirely
new
areas
tools
wasn
done
way
policy
plateau
2010
reachability
question
search
along
paths
code
developers
ask
reachability
questions
reasoning
causality
ordering
type
membership
repetition
choice
example
debug
deadlock
developer
searched
downstream
calls
acquiring
resources
reconstruct
resources
acquired
existing
tools
make
questions
challenging
answer
forcing
developers
guess
paths
call
graph
lead
re
looking
paths
feasible
execute
challenges
cause
bugs
waste
time
one
study
half
inserted
bugs
caused
challenges
answering
reachability
questions
developers
simply
gave
observations
professional
developers
work
nine
ten
longest
debugging
investigation
activities
involved
answering
single
reachability
question
requiring
tens
minutes
developers
time
icse
2010
developers
ask
questions
object
structure
mapping
functionality
packages
determining
put
functionality
access
object
understanding
cardinality
relationships
questions
specifically
object
structure
rather
class
structure
example
instances
handle
event
demonstrating
depicting
object
structure
important
observing
developers
use
object
visualization
tool
found
tools
need
flexibility
able
easily
organize
objects
abstractions
make
sense
chase
2010
shark
2010
decomposing
activities
sets
strategies
designing
studies
understand
strategies
rather
measure
task
time
bugs
understanding
coding
activities
will
improved
evaluations
will
informative
realizing
goal
requires
better
understanding
strategies
exist
factors
influence
strategies
developers
choose
effectiveness
strategies
chase
2010
developers
reason
code
see
code
list
statements
network
design
decisions
developers
seek
learn
critique
explain
propose
implement
design
decisions
information
design
decisions
helps
suggest
changes
constrain
changes
predict
much
investigation
necessary
make
planned
change
lacking
ability
see
higher
level
decisions
dependencies
decisions
developers
less
professional
experience
unable
propose
better
solutions
experienced
developers
fse
2007
activity
dominates
developers
time
developers
report
spending
nearly
equal
time
understanding
discussing
writing
editing
code
developers
report
serious
problems
1
understanding
rationale
behind
design
decisions
2
interruptions
teammates
also
gathered
bunch
data
tools
developers
use
various
activities
developers
report
code
duplication
serious
problem
frequent
prob
lematic
causes
code
duplication
addressed
existing
research
multiple
developers
implementing
similar
functionality
copying
entire
codebases
maintaining
old
versions
icse
2006
proponents
object
oriented
design
argue
oo
designs
better
match
developers'
mental
model
domain
supporting
easier
use
domain
knowledge
working
code
test
claim
conducted
experiment
developers
edited
either
oo
procedural
implementation
without
knowledge
implementing
bowling
scoring
algorithm
surprisingly
developers
working
procedural
implementation
benefitted
domain
knowledge
oo
implementation
undergrad
thesis
flow
state
complete
immersement
task
hand
believed
happiest
moments
people
experience
test
claim
interrupted
people
work
asked
report
felt
surprisingly
activities
people
happiest
engaged
people
likely
flow
easy
activities
optimally
challenging
activities
contradicting
existing
theory
people
engaged
activities
intinscially
motiviated
inspire
curiosity
feel
important
motivation
class
paper
