informatics 122 winter 2013 project 2 who's gonna ride your wild horses implementation 
project 2 
informatics
122
winter
2013
news
course
reference
schedule
project
guide
code
examples
alex
informatics
122
winter
2013
project
2
gonna
ride
wild
horses
implementation
due
dates
times
wednesday
february
6
11
59pm
project
done
individually
introduction
previous
project
focused
learning
communicate
details
software
design
others
gave
chance
share
design
others
receive
feedback
may
first
time
peers
review
work
lower
risk
way
graded
tas
instructors
may
also
first
time
confronted
head
experience
watching
someone
else
respond
work
right
front
accustomed
insulated
world
working
projects
safety
mind
can
jarring
get
kind
feedback
especially
person
can
also
hugely
instructive
sometimes
hard
see
around
biases
big
focus
writing
diagramming
design
previous
project
finding
understandable
way
communicate
details
peer
reviews
given
early
indication
well
probably
found
ways
improve
next
time
important
note
just
classroom
technique
kind
interpersonal
feedback
process
actually
quite
common
software
industry
open
source
projects
design
reviews
code
reviews
done
many
different
stages
design
implementation
real
software
critical
develop
skills
communicating
technical
details
others
offering
feedback
tactfully
technically
accepting
well
intentioned
feedback
without
taking
personally
end
asked
previous
project
evaluate
designs
belonging
three
students
write
findings
also
asked
rank
order
three
designs
ultimately
forcing
choose
favorite
project
asks
decision
requiring
implement
design
three
thought
best
will
also
ask
reflect
decision
fact
consider
whether
believe
made
right
one
live
favorite
design
still
think
will
favorite
implementing
design
java
one
key
takeaways
peer
design
reviews
decision
three
students'
designs
thought
given
various
factors
considered
implementable
ranked
design
1st
2nd
3rd
now
like
put
money
mouth
speak
implementing
design
ranked
others
clear
specifically
disallowing
implementing
design
instead
implementing
design
ranked
1st
goal
implement
favorite
students'
designs
java
must
implement
faithfully
possible
even
think
another
approach
better
one
student
chose
changes
permitted
make
designs
design
simply
implemented
specified
still
meet
requirements
cases
will
required
justify
decision
writing
will
exercise
scrutiny
grading
process
whether
think
decisions
correct
course
make
part
project
interesting
end
result
will
complete
program
primitive
console
mode
user
interface
think
test
harness
will
allow
exercise
engine
save
significant
amount
time
user
interface
provided
project
2
user
interface
need
hook
design
implemented
user
interface
whole
program
runs
though
rely
details
design
implementing
since
everyone
potentially
implementing
different
one
left
seams
user
interface
will
allow
integrate
chosen
design
rather
provide
exhaustive
list
details
need
left
comments
containing
word
inf122tbd
strategically
located
places
user
interface
integration
work
provided
code
order
fifty
java
classes
six
packages
find
nearly
overwhelming
sounds
classes
short
many
never
look
detail
one
skills
need
begin
developing
already
ability
take
someone
else's
code
understand
enough
design
implementation
can
integrate
code
project
might
foray
user
interface
commands
complete
program
console
mode
user
interface
supports
following
set
commands
command
information
take
sets
take
racetrack
particular
whole
numbered
percentage
0
100
take
takepct
examples
take
15
sets
racetrack's
take
15
pools
race
creates
race
run
including
list
horse
numbers
horses
will
run
race
race
race
horse
horse
examples
race
1
1
2
3
4
5
creates
race
number
1
horses
numbered
1
2
3
4
5race
4
1
2
3
7
10
creates
race
number
4
horses
numbers
1
2
3
7
10
post
specifies
post
time
particular
race
reached
subsequently
bets
will
accepted
race
post
race
examples
post
3
post
time
reached
race
3
bets
race
will
accepted
results
specifies
results
race
run
relevant
results
top
three
finishers
ones
specify
parameters
command
results
race
firsthorse
secondhorse
thirdhorse
examples
results
5
7
3
8
race
5
horse
7
finished
first
horse
3
finished
second
horse
8
finished
third
win
places
bet
one
horses
win
particular
race
displays
ticket
id
total
amount
bet
win
race
amountperhorse
horse
horse
examples
win
3
20
8
bet
20
horse
8
win
race
3win
4
100
3
9
7
bet
100
horses
3
9
7
win
race
4
show
places
bet
one
horses
show
particular
race
format
behavior
command
spirit
win
command
place
places
bet
one
horses
place
particular
race
format
behavior
command
spirit
win
command
claim
registers
claim
ticket
displays
payout
ticket
allowed
race
run
results
registered
results
command
claim
ticketid
examples
claim
1234567
registers
claim
ticket
id
1234567
cancel
cancels
ticket
removing
bets
pool
allowed
post
time
race
cancel
ticketid
examples
cancel
1234567
cancels
ticket
id
1234567
pool
displays
amounts
money
horse
combination
particular
pool
given
race
pool
bettype
race
bettype
parameter
one
following
win
place
show
examples
pool
win
3
displays
much
money
bet
horse
win
race
3pool
show
8
displays
much
money
bet
horse
show
race
8
stop
stops
program
using
git
version
control
system
one
requirements
part
use
git
egit
using
eclipse
plug
provides
functionality
git
graphical
form
integrates
nicely
eclipse's
user
interface
work
implementation
reasons
talked
lecture
version
control
hugely
important
part
development
process
git
great
example
modern
tool
development
shapes
sizes
small
individual
projects
like
way
large
geographically
distributed
team
based
development
especially
used
version
control
great
chance
become
accustomed
relatively
forgiving
environment
rather
submitting
code
us
submitting
git
repository
git
directory
us
along
entire
commit
history
time
started
implementation
warts
planning
look
commit
histories
fine
tooth
comb
expect
see
using
git
throughout
implementation
process
expect
see
many
commits
relatively
granular
least
brief
comments
comments
focus
just
committed
important
issue
imagine
will
things
tried
worked
things
fine
nobody
writes
code
exactly
way
want
first
time
may
feel
creative
process
exposed
way
perhaps
makes
feel
uncomfortable
exactly
happens
professional
open
source
projects
source
code
repository
everything
better
worse
even
mistakes
regrettable
decisions
things
everyone
can
learn
part
score
project
completeness
repository
best
way
address
embrace
git
use
along
way
almost
attempt
fake
already
done
committing
code
haphazardly
make
look
good
going
quite
obvious
look
repository
can
expect
lose
credit
project
case
post
mortem
documentation
along
git
repository
also
asking
submit
post
mortem
document
details
things
experience
focus
issues
design
changes
forced
make
implementation
design
change
made
explain
changed
well
choice
change
order
meet
requirements
fine
changes
accommodate
integration
design
user
interface
entirely
uncommon
designs
adjusted
comes
time
integrate
others
especially
two
designs
arrived
independently
like
change
big
small
include
though
obviously
say
less
quick
dirty
changes
missing
field
class
something
radical
completed
implementation
take
fresh
look
two
designs
reviewed
project
1
choose
favorite
still
agree
decision
factors
design
make
feel
way
learned
designs
make
believe
wrong
using
egit
eclipse
installing
egit
eclipse
can
feel
free
use
command
line
git
tool
prefer
will
comfortable
using
eclipse
will
make
lot
sense
use
egit
instead
following
instructions
will
explain
get
egit
plug
installed
eclipse
installation
turns
little
bit
tricky
took
handful
tries
get
right
mainly
different
versions
egit
sensitive
versions
eclipse
compatible
wanted
sure
waste
much
time
first
assume
using
eclipse
classic
4
2
1
feel
free
use
another
installation
prefer
far
getting
egit
working
follow
steps
get
egit
installed
eclipse
classic
4
2
1
help
menu
select
install
new
software
will
bring
dialog
titled
available
software
available
software
dialog
work
field
type
http
download
eclipse
org
egit
updates
large
sized
list
populate
couple
choices
kinds
plug
ins
might
like
install
expand
section
titled
eclipse
git
team
provider
check
checkbox
next
eclipse
egit
expand
section
titled
jgit
check
checkbox
next
eclipse
jgit
note
egit
plug
integrates
git
style
functionality
eclipse
user
interface
jgit
pure
java
implementation
git
protocol
product
actually
manipulates
repositories
egit
depends
jgit
order
work
need
design
perspective
makes
lot
sense
separate
jgit
engine
top
lots
tools
can
built
integration
ides
like
eclipse
netbeans
stand
alone
graphical
tools
analysis
tools
click
next
button
near
bottom
dialog
shown
install
details
list
version
2
2
0
201212191850
eclipse
egit
eclipse
jgit
click
next
indicate
really
want
install
next
asked
accept
license
agreement
feel
free
read
like
click
accept
terms
license
agreement
radio
button
click
finish
egit
jgit
will
installed
asked
restart
eclipse
changes
take
effect
click
restart
now
eclipse
comes
back
egit
will
ready
use
note
eclipse
plug
ins
like
egit
modify
eclipse
installation
workspace
egit
will
available
every
workspace
use
uninstall
getting
started
egit
one
things
noticed
egit
documentation
least
documentation
easily
able
find
quite
date
example
egit
user
guide
screenshots
advice
appear
match
current
version
reason
providing
quick
primer
getting
started
egit
leave
details
figure
one
things
face
whenever
use
new
tools
want
take
experience
least
like
sure
get
right
foot
first
important
understand
underneath
covers
egit
things
command
line
version
git
still
commits
hashes
associated
changes
can
still
staged
unstaged
branches
merges
supported
can
place
tags
individual
commits
difference
commands
might
normally
type
command
prompt
inside
executed
via
user
interface
things
may
read
already
pro
git
still
apply
occasionally
find
want
something
esoteric
supported
egit
can
always
drop
back
using
command
line
tool
instead
follow
steps
create
new
git
repository
using
egit
set
eclipse
project
use
repository
commit
empty
eclipse
project
start
eclipse
opening
workspace
like
use
create
new
java
project
like
normally
right
click
package
explorer
select
new
java
project
sure
choose
setting
maintains
separate
directory
bin
src
can
easily
exclude
compiled
versions
code
class
files
source
control
repository
now
time
set
project
use
source
control
right
click
project
package
explorer
select
team
share
project
share
project
dialog
will
displayed
will
ask
repository
type
choose
git
cvs
others
see
displayed
click
next
stage
especially
running
windows
may
see
warning
setting
home
environment
variable
unless
specific
want
default
git
configuration
stored
warning
can
safely
ignored
configure
git
repository
dialog
will
now
displayed
leave
use
create
repository
parent
folder
project
uncheckednext
repository
field
click
create
button
will
now
see
create
git
repository
dialog
choose
parent
directory
directory
git
repository
will
reside
can
anywhere
except
within
eclipse
workspace
directory
give
repository
name
click
finish
now
created
git
repository
click
finish
configure
git
repository
dialog
now
project
configured
ready
use
egit
associated
repository
next
step
housekeeping
chores
can
easily
control
gets
stored
repository
top
package
explorer
toolbar
buttons
one
small
triangle
pointing
downward
click
triangle
will
reveal
pop
menu
menu
select
filters
dialog
will
pop
uncheck
checkbox
next
resources
click
ok
will
make
hidden
files
like
classpath
project
visible
can
store
git
repository
now
want
create
gitignore
file
ensure
bin
directory
compiled
class
files
reside
will
included
source
control
repository
right
click
project
package
explorer
select
new
untitled
text
file
editor
type
bin
note
two
slashes
save
file
save
dialog
wlil
pop
select
project
folders
within
set
file
name
field
gitignore
click
ok
now
ready
make
first
commit
commit
empty
eclipse
project
repository
right
click
project
package
explorer
select
team
add
index
equivalent
git
command
git
add
stages
changed
files
makes
ready
commit
right
click
project
package
explorer
select
team
commit
dialog
will
pop
showing
committing
ensure
files
really
ones
want
commit
case
will
write
commit
message
click
commit
now
see
files
package
explorer
little
yellow
repository
symbol
top
icons
indicating
stored
repository
changed
since
look
closely
may
notice
src
folder
still
little
question
mark
instead
files
directory
committed
repository
yet
gotten
far
good
go
feel
free
check
egit
user
guide
somewhat
date
will
give
reasonably
good
overview
kinds
things
can
deliverables
will
submit
three
deliverables
satisfy
part
assignment
due
wednesday
february
6
11
59pm
zip
file
containing
git
repository
git
directory
repository
least
master
branch
points
commit
consider
complete
code
want
us
grade
along
entire
commit
history
time
started
implementation
ideally
point
head
repository
master
branch
submitting
used
eclipse
egit
git
repository
ideally
include
eclipse
project
project
classpath
files
project
directory
entire
workspace
follow
steps
section
titled
getting
started
egit
repository
contain
just
right
stuff
zip
file
containing
java
source
code
comprises
implemented
design
along
code
provided
arranged
directory
structure
mirrors
package
hierarchy
please
include
java
files
src
directory
using
eclipse
use
reference
case
issues
git
repository
post
mortem
document
document
can
either
microsoft
word
doc
docx
pdf
pdf
format
reworked
split
separate
projects
alex
thornton
winter
2013originally
written
alex
thornton
winter
2012
influence
taken
long
retired
pair
projects
titled
another
horsedreamer's
blues
written
alex
thornton
ics
22
winter
2002
