program 2 
program 2 implementing collections linked lists 
program
2
implementing
ordered
collections
linked
lists
real
iterators
fundamental
data
structures
ics
23
introduction
programming
assignment
designed
ensure
know
implement
two
ordered
collection
classes
queue
priority
queue
one
collection
class
set
linked
lists
implementations
will
include
fully
functional
iterators
implementing
hasnext
next
remove
methods
first
two
collection
classes
share
subinterface
orderedcollection
third
uses
collection
subinterface
special
sub
subinterface
queue
priorityqueue
set
priorityqueue
includes
new
methods
implementation
extends
one
abstract
classes
extends
abstractorderedcollection
abstractcollection
primarily
implementation
specifies
actual
data
structure
linked
list
methods
implement
collection's
operations
methods
must
appear
concrete
class
appear
improve
speed
inherited
methods
note
iterable
interface
orderedcollection
collection
interfaces
extend
specifies
just
method
named
iterator
defined
return
iterator
important
written
implementations
collections
using
arrays
although
assignment
uses
linked
lists
still
many
strong
similarities
implementations
encourage
examine
implementations
closely
writing
linked
list
implementations
array
implementations
included
collections
jar
file
build
path
assignment
must
write
implementations
using
linked
lists
linear
linked
list
queue
header
linked
list
priorityqueue
trailer
linked
list
set
constuctors
priorityqueue
class
must
passed
object
constructed
class
implements
comparator
interface
specifying
prioritize
values
added
tostring
method
class
include
name
class
followed
brackets
size
order
values
list
example
add
add
add
queue
tostring
show
linkedqueue
3
null
header
list
skip
showing
value
first
header
node
node
really
collection
represented
list
likewise
trailer
list
skip
showing
value
last
trailer
node
reason
tostring
method
tested
junit
test
useful
debugging
running
driverfororderedcollection
written
classes
will
run
junit
tests
verify
bit
strong
word
correct
will
find
useful
begin
testing
classes
driverfororderedcollection
driverforcollection
can
run
collection
jar
build
path
library
project
drivers
can
individually
test
methods
classes
interactively
see
results
returned
values
state
changes
frequently
using
tostring
menu
item
following
programming
assignments
quarter
will
require
perform
similar
task
implement
collection
class
via
advanced
data
structure
studied
will
junit
test
driver
speed
test
similar
one
assignment
will
also
allow
learn
get
used
method
testing
classes
download
unzip
following
eclipse
project
start
use
start
working
program
part
assignmnment
will
update
submit
single
java
file
project
see
checkmate
submission
assignment
details
work
assignment
pairs
someone
lab
section
try
find
someone
lives
near
similar
work
schedule
talk
whether
like
work
morning
nights
weekends
one
student
submit
assignment
student's
names
appear
comments
top
submitted
program
please
turn
program
finish
can
accurately
assess
progress
class
whole
assignment
print
document
carefully
read
marking
parts
contain
important
detailed
information
find
review
work
assignment
turn
files
queues
queues
implemented
simple
fifo
data
structures
adhering
fast
first
order
property
can
implement
queues
efficiently
using
two
instance
variables
refer
linked
list
whose
first
value
node
front
queue
whose
last
value
node
rear
queue
nodes
removed
front
added
rear
two
hot
spots
although
can
easily
compute
number
values
linked
list
traversing
instead
will
declare
update
extra
instance
variable
named
objectcount
cache
size
incrementing
decrementing
values
successfully
added
removed
queue
traverse
list
compute
value
class
linkedqueue
declares
required
instance
variables
declares
stubs
needed
methods
just
fill
stubs
note
class
compiles
correctly
fails
junit
tests
method
bodies
empty
finally
fill
complexity
class
information
top
class
file
comments
based
implementation
see
common
sections
pertaining
iterators
testing
priority
queues
priority
queues
can
implemented
variety
data
structures
highest
priority
value
always
removed
first
specific
priority
queue
determine
value
highest
priority
constructed
supply
priority
queue
object
constructed
class
implements
comparator
interface
ask
priority
value
can
ask
two
values
higher
priority
using
comparator
example
ask
priority
string
value
can
ask
two
string
values
higher
priority
can
implement
priority
queues
naively
although
efficiently
one
instance
variable
refers
linked
list
whose
first
value
highest
priority
value
whose
remaining
values
occur
decreasing
priority
adding
value
priority
queue
insert
right
spot
keeping
list
ordered
highest
lowest
priority
removing
highest
priority
value
priority
queue
remove
front
instead
plain
linked
list
must
implement
priority
queue
queue
using
header
node
first
linked
list
simplify
writing
complicated
method
adding
value
priority
queue
write
method
simply
although
can
easily
compute
number
values
linked
list
traversing
instead
will
declare
update
extra
instance
variable
named
objectcount
cache
size
incrementing
decrementing
values
successfully
added
removed
priority
queue
traverse
list
compute
value
class
headerlinkedpriorityqueue
declares
required
instance
variables
declares
stubs
needed
methods
just
fill
stubs
note
class
compiles
correctly
fails
junit
tests
method
bodies
empty
finally
fill
complexity
class
information
top
class
file
comments
based
implementation
see
common
sections
pertaining
iterators
testing
sets
sets
can
implemented
variety
data
structures
can
implement
sets
naively
although
efficiently
one
instance
variable
refers
linked
list
values
set
order
important
instead
plain
linked
list
must
implement
set
using
trailer
node
last
linked
list
simplify
removing
value
set
class
iterator
remove
methods
using
standard
code
covered
discussion
trailer
lists
although
can
easily
compute
number
values
linked
list
traversing
instead
will
declare
update
extra
instance
variable
named
objectcount
cache
size
incrementing
decrementing
values
successfully
added
removed
priority
queue
traverse
list
compute
value
class
trailerlinkedset
declares
required
instance
variables
declares
stubs
needed
methods
just
fill
stubs
note
class
compiles
correctly
fails
junit
tests
method
bodies
empty
finally
fill
complexity
class
information
top
class
file
comments
based
implementation
see
common
sections
pertaining
iterators
testing
iterators
java
file
implementing
collection
class
start
folder
included
enough
iterator
class
hasnext
next
methods
work
correctly
remove
work
correctly
never
called
methods
use
iterators
call
remove
declared
abstract
class
overridden
concrete
class
will
work
correctly
toarray
important
methods
used
extensively
junit
tests
iterator
fails
work
simple
cases
almost
every
junit
test
will
fail
iterator
work
correctly
change
code
next
method
carefully
suggest
leave
code
alone
gotten
parts
class
working
correctly
note
iterators
orderedcollection
classes
return
values
order
removed
collection
fifo
queue
priority
ordering
priority
queue
sets
ordered
iterators
can
return
set
values
order
given
linked
lists
represent
collections
queue
front
rear
priority
queue
highest
lowest
priority
set
order
order
iterating
collections
order
traversing
linked
list
implementation
beginning
end
makes
hasnext
next
methods
straightforward
implement
pass
special
junit
tests
focus
iterators
must
write
code
next
remove
methods
complete
end
supplied
declaration
intialization
extra
instance
variables
variables
used
code
supplied
write
code
uses
correctly
can
observe
expectedmodcount
removedalready
instance
variables
used
array
implementations
classes
used
equivalently
can
use
whatever
references
supply
previous
seen
next
remove
values
carefully
list
iterator
generally
instance
variables
supplied
refer
node
whose
value
next
method
will
return
next
node
whose
value
next
method
just
returned
seen
node
whose
come
seen
one
linked
list
previous
needed
trailerlinkedset
special
removal
property
generally
next
method
called
three
values
refer
consecutive
values
linked
list
iterated
case
previous
next
seen
seen
next
next
relationship
hold
just
start
iterating
seen
value
value
previous
seen
call
remove
removes
seen
value
case
previous
next
next
just
remove
first
value
linked
list
special
case
recall
iterator
remove
value
next
method
recently
returned
thus
remove
throws
exception
either
either
value
ever
returned
next
yet
recent
value
returned
next
already
removed
removed
twice
also
next
remove
must
throw
exception
collection
modified
via
command
mutator
methods
since
iterator
constructed
note
ok
iterator
mutate
data
structure
via
remove
continue
iterating
although
iterators
will
fail
carefully
manipulate
next
seen
previous
present
instance
variables
meet
requirements
hasnext
next
remove
methods
note
hand
simulate
debug
code
following
cases
may
require
special
code
recognize
process
cases
removing
values
front
list
several
times
row
calling
next
previously
seen
value
removed
calling
next
previously
seen
value
removed
remove
value
already
seen
appropriate
make
next
link
previous
listnode
refer
node
instance
variable
next
refers
bypassing
node
referred
seen
update
required
instance
variables
will
work
correctly
future
calls
three
iterator
methods
delicate
operation
subtltities
beyond
brief
description
definitely
draw
pictures
help
understand
possible
values
three
variables
update
can
see
constraints
accomplished
array
implementations
classes
simpler
accomplished
linked
lists
can
easily
access
array
indices
like
1
linked
list
implementations
implementing
remove
bit
complicated
implement
efficient
values
arrays
must
shifted
causing
complexity
class
remove
arrays
testing
various
ways
test
classes
writing
programming
assignment
easiest
way
start
debugging
using
driverfororderedcollection
driverforcollection
programs
programs
start
prompts
enter
name
collection
class
want
test
debug
set
libraries
correctly
allows
perform
method
call
supported
collection
classes
check
results
typically
calling
tostring
method
show
state
collection
class
view
debugger
course
must
get
tostring
method
work
calling
debug
methods
although
override
tostring
method
implementation
class
will
inherit
simpler
tostring
method
one
abstract
collections
using
iterator
hasnext
next
methods
produce
string
includes
values
collection
wrong
format
debug
code
driver
try
running
appropciate
junit
test
form
testing
useful
approach
finished
solution
will
use
junit
test
visual
inspection
grade
assignment
important
note
can
put
system
print
statements
junit
code
accidentally
remove
assertions
otherwise
fully
checking
code
way
will
debugging
classes
run
junit
tests
choose
default
values
first
third
fourth
questions
second
question
enter
index
collection
class
want
test
besides
indication
tests
pass
fail
console
window
will
show
speed
speed
test
will
vary
depending
fast
machine
run
code
worry
can
also
examine
execution
classes
using
debugger
inserting
system
print
statements
code
junit
test
code
