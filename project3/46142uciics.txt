
array 
id
array
5151
2010
03
24
23
58
00z
abehm
copyright
2010
regents
university
california
redistribution
file
permitted
terms
bsd
license
array
dynamically
grows
reasons
write
1
stl
vector
doubles
array
size
every
time
need
realloc
causes
much
storage
overhead
2
boost
array
static
size
warning
since
internally
use
malloc
realloc
allocate
memory
works
basic
types
int
unsigned
float
bool
address
pointer
use
class
classes
string
classes
use
stl
vector
date
05
16
2007
author
chen
li
ifndef
array
define
array
include
include
include
include
include
include
include
using
namespace
std
using
namespace
tr1
typedef
enum
realloc
add
realloc
mult
reallocpolicy
template
class
array
private
data
unsigned
capacity
unsigned
elementnum
float
incrementalsize
reallocpolicy
reallocpolicy
unordered
set
elementset
template
friend
ostream
operator
array
public
typedef
iterator
typedef
elementtype
array
capacity
10
elementnum
0
incrementalsize
10
reallocpolicy
realloc
add
elementset
null
init
array
unsigned
initcapacity
float
incrementalsize
10
0f
reallocpolicy
reallocpolicy
realloc
add
capacity
initcapacity
elementnum
0
incrementalsize
incrementalsize
reallocpolicy
reallocpolicy
elementset
null
init
array
bool
usehashset
unsigned
initcapacity
float
incrementalsize
reallocpolicy
reallocpolicy
realloc
add
capacity
initcapacity
elementnum
0
incrementalsize
incrementalsize
reallocpolicy
reallocpolicy
init
usehashset
elementset
new
unordered
set
else
elementset
null
helper
constructor
void
init
capacity
0
capacity
10
data
malloc
sizeof
capacity
assert
data
null
destructor
array
data
null
free
data
elementset
null
delete
elementset
iterator
begin
return
data
iterator
end
return
data
elementnum
unsigned
size
const
return
elementnum
static
size
elementsize
return
sizeof
unsigned
compressedsize
const
return
0
added
shengyue
manipulate
size
array
directly
boost
speed
void
setsize
unsigned
size
capacity
size
data
realloc
data
sizeof
capacity
assert
data
null
elementnum
size
unsigned
getcapacity
const
return
capacity
void
extendcapacity
calculate
new
capacity
switch
reallocpolicy
case
realloc
add
capacity
capacity
unsigned
incrementalsize
break
case
realloc
mult
capacity
ceil
capacity
incrementalsize
break
default
capacity
capacity
unsigned
incrementalsize
break
data
realloc
data
sizeof
capacity
assert
data
null
void
append
const
element
elementnum
capacity
extendcapacity
store
element
data
elementnum
element
elementnum
many
elements
willing
build
hashset
array
order
improve
performance
lookups
elementnum
10000
elementnum
50000
elementset
null
rand
10
unsigned
0
elementnum
1
elementset
insert
data
store
latest
one
hashset
elementset
null
coutinsert
element
end
delete
element
given
position
starting
0
void
erase
const
unsigned
position
check
corner
cases
elementnum
0
position
elementnum
return
shift
elements
left
careful
usage
unsigned
type
make
sure
elementnum
1
never
negative
register
unsigned
position
1
elementnum
ok
insert
last
position
1
return
allocate
space
elementnum
capacity
extendcapacity
shift
elements
right
changed
unsigned
int
fix
bug
position
0
shengyue
register
int
elementnum
1
int
position
data
1
data
insert
lement
data
position
element
elementnum
added
alex
save
memory
final
size
array
known
void
finalize
data
realloc
data
sizeof
elementnum
assert
data
null
added
jiaheng
delete
last
element
void
removelastelement
elementnum
0
elementnum
front
const
ifdef
array
compression
return
0
else
return
data
0
endif
back
const
ifdef
array
compression
return
elementnum
1
else
return
data
elementnum
1
endif
bool
empty
const
return
elementnum
0
unsigned
pos
const
return
data
pos
const
operator
unsigned
pos
const
return
data
pos
operator
unsigned
pos
return
data
pos
returns
position
element
first
last
smallest
among
given
element
element
exists
array
returns
position
key
greater
elements
array
returns
current
element
number
1
warning
assume
array
already
sorted
ascending
order
caller's
responsibility
keep
order
http
www
fredosaurus
com
notes
cpp
algorithms
searching
binarysearch
html
unsigned
binarysearch
key
unsigned
first
const
assert
capacity
0
unsigned
last
elementnum
1
first
data
mid
first
mid
1
repeat
search
top
half
else
key
data
mid
mid
0
return
first
avoid
last
1
last
mid
1
repeat
search
bottom
half
else
return
mid
found
return
position
return
first
failed
find
key
unsigned
binarysearch
key
const
return
binarysearch
key
0
default
starting
0
returns
position
first
element
equal
smaller
key
assumes
array
sorted
ascending
order
search
done
form
end
start
algorithm
used
variant
jump
search
http
www
nist
gov
dads
html
jumpsearch
html
jump
step
initially
1
incremented
1
jump
starts
search
element
pos
1
maximum
value
pos
length
array
unsigned
jumpincrevsearch
key
unsigned
pos
const
unsigned
1
designates
jump
step
jump
step
incremented
one
every
time
pos
data
pos
key
pos
pos
0
pos
designates
end
position
end
position
end
current
block
end
array
pos
pos
0
pos
data
pos
key
pos
return
pos
bool
const
key
const
elementset
null
return
elementset
find
key
elementset
end
hash
set
available
binary
search
unsigned
pos
binarysearch
key
0
pos
size
pos
key
return
true
return
false
template
ostream
operator
array
'
'
unsigned
0
array
elementnum
0
array
data
'
'
return
template
bool
operator
const
array
const
array
return
true
size
size
return
false
unsigned
0
size
return
false
return
true
following
functions
array
operations
intersection
union
difference
add
wang
bin
dec
13
2007
array
union
operation
input
sorted
array
void
arrayunion
array
srcarray
array
otherarray
array
resultarray
array
intersection
operation
two
sorted
array
void
arrayintersection
array
array1
array
array2
array
res
array
difference
operation
'srcarray'
minus
'subarray'
void
arraydifference
array
srcarray
array
subarray
array
difference
oepration
outputs
stored
'resultarray'
'srcarray'
minus
'subarray'
void
arraydifference
array
srcarray
array
subarray
array
resultarray
void
intersect
array
srcarray
array
otherarray
endif
