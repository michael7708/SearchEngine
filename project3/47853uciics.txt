distributed object domains corba based platform 
facilidade de dominios em um ambiente de gerencia corba 
distributed
object
domains
corba
based
platform
roberto
silveira
silva
filho
jo
augusto
de
queiroz
edmundo
madeira
ic
institute
computing
unicamp
university
campinas
13081
970
campinas
sp
brazil
robsilfi
aqueiroz
edmundo
dcc
unicamp
br
abstract
paper
describes
analysis
specification
main
issues
involved
domain
facility
implementation
facility
implemented
multiware
management
architecture
context
distributed
open
management
architecture
based
corba
motivation
facility
definition
arises
needs
structuring
partitioning
managed
resources
offering
extensible
integrated
infrastructure
responsibility
authorization
limits
establishment
amongst
different
managers
hiding
complexity
scale
managed
environment
key
words
distributed
system
management
domains
distributed
objects
corba
rm
odp
multiware
platform
1
introduction
figure
1
corba
management
environment
object
oriented
paradigm
useful
tool
distributed
systems
development
besides
use
many
areas
software
component
development
widely
used
tested
concept
already
used
many
engineering
areas
idea
modeling
distributed
systems
collection
interacting
objects
appropriated
integrating
resources
heterogeneous
distributed
environments
objects
can
intercommunicate
using
well
defined
interface
offers
natural
model
used
open
distributed
systems
satisfying
requirements
interoperability
decoupleness
context
one
way
assure
interoperability
amongst
distributed
objects
use
jury
patterns
described
odp
open
distributed
processing
reference
model
itu
iso
1995a
iso
international
standards
organization
itu
international
telecommunications
union
de
facto
described
corba
common
object
request
broker
architecture
omg
1997d
international
consortium
object
management
group
omg
last
standard
kernel
multiware
project
developed
electrical
engineering
faculty
institute
computing
university
campinas
loyola
1994
information
model
offered
corba
idl
comparable
gdmo
guidelines
definition
management
objects
osi
cmip
model
better
snmp
mib
management
information
base
definition
allowing
clear
separation
interface
declaration
implementation
corba
offers
object
oriented
paradigm
way
osi
cmip
tmn
models
higher
abstraction
degree
way
gdmo
offers
separation
characteristic
corba
offers
simpler
solution
doesn
requires
knowledge
abstract
syntax
codification
decodification
schemas
developers
idl
pure
declarative
language
used
describe
corba
object
interfaces
communication
viewpoint
corba
offers
transparency
elegant
architecture
giop
general
inter
orb
protocol
without
need
intermediate
agent
used
snmp
cmip
models
use
corba
management
platform
results
simpler
architecture
management
entities
managed
objects
idl
interfaces
continue
performing
role
agent
presence
necessary
anymore
figure
1
ior
interoperable
object
reference
uniquely
identifies
corba
object
particularities
information
communication
models
allow
corba
defined
standard
communication
management
bus
heterogeneous
software
components
interact
using
access
location
transparencies
open
proprietary
environment
well
appropriated
new
management
requirements
general
main
aspects
motivates
corba
usage
can
described
need
substitute
snmp
protocol
created
age
management
specification
restrict
memory
processing
resources
scarcity
protocol
shown
appropriated
new
distributed
application
management
corba
allows
concepts
techniques
tools
used
specification
project
implementation
distributed
systems
also
used
management
mib
definition
idl
language
allows
accessed
transparently
corba
manager
open
distributed
management
environment
corba
managers
able
uniform
view
managed
resources
management
interface
described
idl
managers
can
network
components
support
systems
distributed
applications
important
step
integrated
management
direction
corba
distributed
object
model
extends
agent
manager
cmip
snmp
model
without
mediation
need
also
allows
managed
objects
directly
call
manager
entity
need
reporting
significant
event
arises
besides
offering
dynamic
invocation
interface
facility
require
programmers
change
original
style
programming
allowing
use
favorite
programming
language
familiar
concepts
exceptions
example
instead
protocol
errors
andthe
corba
implementations
using
java
vogel
1997
iiop
internet
inter
orb
protocol
already
embedded
last
versions
netscape
communicator
will
promote
easier
integration
management
tools
www
world
wide
web
technology
next
section
presents
integrated
management
architecture
based
open
distributed
management
architecture
odma
itu
iso
1995b
corba
omg
1997c
common
object
services
specification
corbaservices
omg
1997b
common
facilities
architecture
corbafacilities
omg
1997a
adopted
multiware
project
section
3
describes
analysis
domain
facility
whereas
section
4
project
presented
section
5
implementation
issues
addressed
results
presented
related
work
described
section
6
remarks
conclusions
presented
section
7
2
integrated
management
architecture
adopted
integrated
management
architecture
based
odma
uses
corba
corbaservices
corbafacilities
providing
least
much
functionality
osi
iso
management
model
also
influenced
concepts
described
sloman
1993
sloman
1995
bauer
1994
architecture
must
address
application
domain
integrated
underlying
systems
networks
must
amenable
monitoring
performing
configuration
actions
controlling
managed
resources
must
provide
common
consistent
user
interface
simplifies
interaction
must
keep
associated
overhead
management
low
possible
avoiding
expensive
use
processing
memory
must
support
interoperabilty
scalability
requirements
common
distributed
systems
architecture
illustrated
figure
2
single
monolithic
application
platform
centered
perform
issues
management
process
set
cooperative
applications
common
user
interface
handle
performance
accounting
configuration
fault
security
management
enable
logical
centered
view
managed
domain
independent
physical
distribution
components
also
set
facilities
monitoring
control
configuration
policies
domain
used
small
pieces
lego
developing
management
applications
support
level
composed
multiware
architecture
orb
corbaservices
corbafacilities
helps
development
implementation
applications
facilities
moreover
level
enables
managing
managed
objects
compiled
different
languages
since
corresponded
idl
mapping
use
corbaservices
guarantees
portability
reusability
code
allow
developers
handle
objects
largely
independent
behavior
inherit
classes
figure2
integrated
management
architecture
monitoring
facility
defined
dynamic
process
acquisition
collection
presentation
managed
resources
information
essential
decision
process
supports
synchronous
mode
using
orb
directly
asynchronous
mode
extending
corba
event
service
control
facility
generates
actions
avoid
distributed
system
degeneration
controlling
managed
objects
behavior
situations
determinate
analyzing
component
state
information
requiring
reactive
preventive
proactive
actions
configuration
facility
able
determinate
initial
configuration
managed
resources
follow
changes
execute
modifications
necessary
facility
derived
life
cycle
facility
allowing
creation
destruction
copy
move
managed
objects
policy
facility
allows
manipulation
permission
policies
obligations
prohibitions
guiding
manager
decision
making
process
odp
environment
many
management
viewpoints
different
responsibilities
boundaries
yemini
1993
hence
domain
facility
paper
theme
allows
managed
resources
grouped
structuring
responsibilities
authorizations
amongst
managers
sloman
1995
support
level
composed
orb
platform
corbaservices
allows
development
management
applications
simplifying
implementation
certifying
interoperability
management
investigate
presently
use
following
services
naming
service
used
resolve
names
management
context
event
service
created
decouple
communications
amongst
producer
objects
generate
events
consumers
receive
events
event
channel
life
cycle
service
used
allow
object
creation
destruction
move
operations
3
domain
facility
analysis
domain
collection
managed
objects
explicitly
grouped
management
purposes
sloman
1995
odp
environment
many
management
viewpoints
many
responsibility
limits
hence
management
must
structured
domains
share
responsibilities
authorizations
amongst
different
managers
structure
can
reflect
physical
connectivity
network
one
platform
domain
administrative
structure
domains
encapsulate
members
passive
entities
keep
references
members
explicitly
inserted
domain
grouped
according
criteria
domain
management
system
allow
manipulation
query
group
actions
group
managed
resources
uniform
consistent
way
many
reasons
grouping
objects
domains
1991
cccult
scalability
complexity
inherent
managed
resources
specify
object
hierarchy
management
policy
applied
group
functions
services
attributes
related
objects
specify
responsibility
authority
management
limits
andto
promote
naming
context
allowing
locating
referring
group
objects
domains
managed
objects
can
inserted
domains
property
allows
creation
hierarchical
structure
similar
unix
file
system
domains
encapsulate
members
external
objects
can
directly
communicate
object
domain
domains
system
must
means
manipulating
structure
managed
objects
domains
relations
elements
domain
object
reference
object
named
direct
member
domain
domain
named
father
members
domain
object
can
belong
domains
happens
domain
named
subdomain
father
domain
also
called
superdomain
membership
relation
established
object
explicitly
inserted
domain
becoming
member
ancestors
object
direct
indirect
superdomains
domain
hierarchy
composed
domains
members
common
father
figure
3
domain
structure
example
example
figure3
domain
hierarchy
composed
domains
d1
d4
members
m1
m6
d4
domain
direct
father
d1
d2
domains
m3
m4
direct
members
d2
domain
m5
m6
direct
members
d3
member
objects
m1
m6
indirect
members
d4
two
domains
called
superposed
one
commons
objects
ever
happens
object
direct
member
one
domain
d1
d2
domains
superposed
domains
m5
m6
m3
common
superposition
may
exist
whenever
sharing
resources
gateway
link
two
lans
situation
resources
two
domains
networks
can
shared
examples
enterprises
employees
working
one
department
managed
object
one
associated
reference
reference
must
unique
domain
system
order
allow
consistent
management
make
human
management
easier
managed
object
name
associated
objects
domain
must
unique
different
names
object
path
ordered
concatenation
ancestor
names
object
name
figure
3
m5
object
path
given
sequence
d4
d1
d3
m5
objects
can
belong
different
domains
simultaneously
one
object
can
one
path
one
main
reasons
concerning
creation
distributed
domain
system
need
group
objects
management
policies
delegation
hence
objects
management
system
must
belong
domain
order
accessible
management
actions
superposition
can
also
used
apply
different
policies
specific
object
can
object
inserted
many
management
domains
security
configuration
domains
example
hand
manager
may
want
insert
member
one
domain
without
subject
policies
order
avoid
propagation
policy
members
domain
created
alias
concept
aliases
references
inherit
policies
father
domains
can
used
join
different
domains
domain
creating
convenient
name
hierarchy
inherit
properties
domains
main
function
domain
facility
allow
distributed
system
managers
group
objects
convenient
way
idl
specified
apis
application
programming
interfaces
shared
many
management
applications
usually
operate
determinate
managed
object
subset
objects
can
grouped
domains
satisfy
application
needs
service
invocations
directly
occur
object
interface
domain
service
must
simple
possible
order
reliable
fast
domain
facility
clients
must
implement
additional
functionality
domain
facility
must
following
functionality
attribute
storing
management
membership
relations
among
domains
creation
exclusion
managed
objects
domains
restructuring
facility
move
copy
rename
others
andname
reference
translation
domain
facility
must
provide
following
basic
operations
set
sloman
1994
creation
deletion
domains
inclusion
exclusion
members
member
listing
member
father
listing
reading
writing
object
attributes
domain
facility
must
cover
basic
concepts
described
also
additional
functionality
union
intersection
difference
members
operations
amongst
distinct
domains
hence
domain
facility
offers
framework
allowing
partitioning
responsibilities
among
object
groups
order
facilitate
object
management
occulting
complexity
scale
figure
4
odp
static
schema
domain
facility
figure
4
shows
static
schema
odp
information
viewpoint
used
specify
domain
facility
represents
class
hierarchy
according
rambaugh
1991
technical
model
objects
type
described
figure
3
implements
member
interface
type
objects
implements
domain
interface
inheritance
methods
attributes
mo
identification
class
offers
means
identification
managed
objects
target
environment
member
class
implements
get
domains
method
returns
domain
structure
references
domains
belongs
besides
offering
remove
domain
function
allowing
member
removed
domain
belongs
domain
class
specialization
member
inheriting
behavior
adding
new
member
domain
manipulation
methods
since
domain
specialization
member
domain
instance
can
belong
domains
referenced
member
object
methods
inserting
removing
members
verification
number
members
listing
members
verifying
intersection
union
difference
selecting
members
according
specified
attribute
objects
implements
domain
interface
must
keep
reference
lists
members
represented
domain
moreover
members
must
keep
references
father
domains
application
class
describes
callback
interface
methods
register
unregister
implemented
prototype
application
order
receive
new
member
requests
registration
exclusion
requests
deactivating
members
4
project
implementation
domain
facility
domain
facility
creates
hierarchy
corba
servers
implementing
members
domains
interfaces
server
instances
organized
distributed
way
creating
graph
like
hierarchic
structure
corba
environment
communication
structuring
activation
location
issues
concerned
distributed
hierarchy
transparent
user
apis
described
using
corba
idl
application
can
easily
integrated
used
management
application
facilities
previously
described
domain
facility
functionality
described
domains
module
corba
transparent
execution
model
domains
module
can
implemented
corba
idl
mapping
languages
currently
available
java
language
used
implementation
order
managed
domain
facility
corba
objects
must
inherit
member
interface
characteristics
entire
interface
described
de
annex
figure
5
distributed
hierarchic
structure
corba
environment
facility
generates
distributed
data
structure
composed
corba
objects
nodes
references
edges
composing
distributed
graph
figure
5
circles
represents
domains
members
objects
bidirectional
doted
arrows
represent
references
domains
members
respective
members
domains
structure
reached
radix
reference
d5
kept
client
application
service
order
verify
described
functionality
implementation
graphical
application
javadom
implemented
allows
visualization
structuring
manipulation
storage
several
domains
hierarchies
evolving
managed
objects
corba
environment
application
makes
clear
accessible
easier
structure
objects
according
user
defined
parameters
analog
gui
graphical
user
interface
based
file
manager
application
allows
move
copy
deletion
domains
objects
moreover
using
set
theory
concepts
system
allows
intersection
union
difference
determination
amongst
domains
important
note
differently
conventional
file
system
managed
objects
can
belong
one
domain
simultaneously
using
unix
link
concept
copies
one
specific
object
application
also
allows
definition
new
customized
hierarchical
structures
structures
can
saved
reused
application
figure
6
describes
main
structure
javadom
prototype
main
components
application
gui
user
interface
used
manipulate
domain
structure
managed
application
application
event
handing
system
kernel
javadom
responsible
intercepting
gui
events
interpret
user
actions
use
domain
facility
interfaces
propagate
appropriate
changes
distributed
domain
structure
changing
gui
objects
reflecting
changes
callback
interface
corba
object
responsible
receiving
new
member
registration
finalizing
member
unregistration
calls
calling
appropriate
update
procedures
application
4
1
implementation
issues
multiware
platform
developed
ibm
rs
6000
sun
sparc
stations
running
aix
sunos
solaris
operating
systems
connected
ethernet
fast
ethernet
fddi
fiber
distributed
data
interface
networks
environment
spread
two
laboratories
connected
10
mb
link
uses
orbix
2
0
iona
1995
orbixweb
2
0
1
iona
1997
corba
implementations
respective
mappings
idl
java
figure
6
application
general
structure
figure
7
hierarchical
structure
corba
implementation
environment
supporting
iiop
protocol
standard
corba
2
0
specification
adopted
orbixweb
implementation
corba
work
simultaneously
developed
two
distinct
environments
windows
nt
machines
solaris
workstations
running
orbixweb
version
distributed
hierarchic
structure
described
previous
section
implemented
using
orb
resources
nodes
circles
corresponds
corba
servers
edges
doted
lines
ior
object
references
see
figure
7
nodes
can
active
hosts
executing
orbixd
daemons
keep
lists
ior
references
local
executing
objects
unidirectional
full
arrows
graphic
management
application
javadom
can
launched
active
hosts
application
callback
object
responsible
runtime
registration
new
member
servers
started
system
also
unregistration
servers
finalized
order
managed
domain
facility
corba
servers
must
implement
member
interface
previously
described
facility
creates
initial
structure
domains
members
represents
initial
condition
managed
environment
structure
can
modified
saved
manager
can
create
new
management
domains
customizable
structure
4
1
1
initialization
procedure
application
started
creates
connections
active
hosts
application
queries
daemons
retrieving
local
member
object
iors
interoperable
object
references
collecting
references
application
starts
domain
servers
active
hosts
inserting
local
members
corresponding
domains
finally
new
domain
instantiated
application
local
host
domain
d5
figure
7
will
reference
previously
created
domains
initialization
procedure
takes
place
time
application
initiates
daemon
queries
application
collects
ior
references
active
objects
management
environment
domain
facility
operates
order
know
active
hosts
user
must
provide
text
file
called
javadomhosts
complete
dns
domain
name
service
name
active
hosts
following
snippet
code
describes
daemon
query
operation
import
ie
iona
orbix2
daemonref
import
ie
iona
orbix2
daemon
import
ie
iona
orbix2
daemon
try
data
structure
creation
hostservers
new
serverdetailsseq
creates
daemon
connection
daemon
daemon
bind
host
retrieves
active
server
reference
list
daemon
listactiveservers
hostservers
catch
systemexception
ex
system
println
ex
tostring
daemon
query
preceded
remote
connection
bind
method
invocation
hosts
described
javadomhosts
file
next
daemon
listaciveservers
method
invocation
returns
serverdetailsseq
structure
active
server
data
host
4
1
2
domain
structure
storage
procedure
order
store
generated
domain
structure
tree
domains
point
members
conversely
object
serialization
api
java
io
objectoutputstream
java
io
objectinputstream
jdk
1
1
packages
used
java
development
kit
version
1
1
flanagan
1997
graph
initially
deep
first
searched
listing
objects
implementing
member
interface
current
level
first
followed
domain
objects
recursively
searched
result
stored
java
util
vector
structure
order
shown
generated
tree
seen
javadom
graphical
user
interface
also
important
remember
hierarchical
structure
kept
application
allow
cycles
domains
direct
indirect
members
references
application
member
objects
persistent
domain
structure
saved
process
hierarchical
structure
loaded
new
domain
object
created
one
read
keeping
original
names
save
load
operations
done
files
specified
user
files
composed
mo
idext
objects
extension
mo
id
structure
defined
mo
identification
see
annex
domain
interface
methods
determination
unions
intersections
amongst
domains
domain
member
difference
operations
process
combinatory
characteristic
considerations
concerned
efficiency
must
taken
following
algorithm
adopted
union
intersection
determinations
first
members
selected
domains
listed
members
sorted
using
quicksort
algorithm
log
complexity
union
determination
sorted
list
searched
repeated
elements
removed
resulting
list
returned
intersection
determination
list
searched
keeping
repeated
elements
number
domains
passed
method
parameters
difference
operation
allows
comparison
two
domains
elements
first
domain
compared
second
domain
elements
members
belong
first
domain
second
returned
answer
4
1
3
gui
description
graphical
interface
completely
developed
java
using
awt
abstract
windowing
toolkit
library
seen
figure
8
graphical
application
corba
client
makes
remote
invocations
using
language
syntax
masking
native
method
usage
socket
datagramsocket
classes
java
net
library
also
can
configured
applet
embedded
html
hypertext
markup
language
pages
disposed
www
servers
integrated
management
tools
browser
since
security
restrictions
imposed
java
interpreter
browser
observed
basically
reactive
system
since
domain
facility
functionality
invoked
result
events
initiated
operations
interface
elements
javadom
application
divided
windows
one
corresponds
class
implements
set
functions
described
graphical
interface
events
associated
interface
component
launches
remote
method
invocations
facility
keeps
basically
least
two
different
hierarchical
structures
initial
physical
domains
showing
hosts
respective
member
objects
user
defined
user
domains
organized
according
user
needs
initial
structure
changed
directly
user
reflects
physical
state
managed
objects
system
order
create
domain
structure
defining
new
domains
changing
hierarchical
structure
user
can
copy
entire
physical
tree
pressing
duplicate
button
individual
items
pressing
copy
memb
button
changes
physical
structure
shown
user
domains
tree
propagate
changes
checkbox
selected
hence
every
time
new
member
instantiated
system
appears
physical
tree
structure
automatically
copied
root
domain
user
tree
selecting
objects
trees
attribute
window
automatically
updated
showing
selected
object
attribute
current
object
attribute
can
changed
pressing
correspondent
modify
button
attribute
window
save
new
attribute
correspondent
set
button
pressed
select
objects
attribute
find
button
de
correspondent
domain
structure
may
pressed
activating
find
attribute
dialog
box
search
takes
place
objects
tree
corresponding
button
user
domains
structure
can
also
changed
using
copy
cut
paste
buttons
operate
selected
objects
user
domain
window
objects
selected
deselected
clicking
mouse
cursor
object
name
windows
newdom
creates
new
domain
present
one
deldom
button
deletes
current
selected
domain
rename
button
renames
selected
object
can
select
deselect
using
mouse
clicks
set
comparing
buttons
show
union
show
intersec
show
diff
allow
comparison
two
selected
user
subtrees
show
diff
operation
however
can
used
two
subtrees
save
open
buttons
used
store
retrieve
user
defined
structures
4
1
4
callback
interface
order
keep
domain
member
application
structures
date
must
way
new
members
started
application
launch
inform
application
presence
system
done
sending
object
reference
application
order
receive
new
member
object
references
main
application
start
launches
thread
implementing
application
interface
domain
facility
server
object
reference
ior
stored
well
known
system
file
called
application
ior
hence
instantiated
servers
implements
member
interface
search
file
read
content
converts
read
string
object
reference
string
object
corba
method
invocation
callback
interface
reference
hand
member
servers
register
application
using
register
memberimpl
method
argument
reference
calling
member
server
receiving
register
requests
application
responsible
insert
new
member
respective
hostname
represented
domain
registering
process
application
makes
many
calls
member
interface
remote
method
invocations
blocking
calls
deadlocks
may
occur
solve
problem
register
unregister
methods
defined
one
way
non
blocking
calls
avoiding
dependence
cycle
another
adopted
policy
introduction
100
ms
wait
callback
application
register
operation
order
wait
member
instantiation
making
calls
interface
4
1
5
application
finalization
procedure
domain
exclusion
procedure
also
necessary
order
remove
domain
servers
created
application
work
orbixd
interface
method
killserver
invoked
domain
server
killing
procedure
shown
import
ie
iona
orbix2
daemonref
import
ie
iona
orbix2
daemon
import
ie
iona
orbix2
daemon
try
daemon
daemon
bind
serverhost
connects
daemon
daemon
killserver
servername
servermarker
kills
specified
server
catch
systemexception
ex
system
println
ex
tostring
5
related
work
sloman
1993
suggested
dme
distributed
management
environment
autrata
1994
architecture
running
dce
distributed
computing
environment
proposing
incorporation
distributed
applications
managed
resources
emphasizing
use
domains
group
managed
objects
manipulation
specification
policy
service
guide
de
manager
decision
process
paper
mentioned
osi
cmip
domain
specifications
complicating
confusing
osi
cmip
domain
composition
defined
grouping
criteria
resulting
existence
active
objects
search
managed
resources
satisfying
determinate
criteria
osi
cmip
domain
service
also
supports
policy
concepts
specification
contradicting
modularity
flexibility
requirements
fact
comes
need
ripening
subject
submitted
standardization
also
commented
available
dme
implementation
necessary
adoption
adapters
translate
dme
invocations
snmp
cmip
dme
usage
purpose
dropped
rpc
remote
procedure
call
supported
object
oriented
paradigm
incorporate
orb
corba
services
environment
needs
dynamic
static
mapping
dce
idl
corba
idl
introducing
additional
unnecessary
costs
however
paper
suggestions
incorporated
extended
domain
facility
development
response
manifested
interest
system
management
common
facility
open
company
limited
consortium
leaded
tivoli
systems
presented
rfc
request
comments
open
1995
proposing
set
management
apis
rfc
proposes
eight
idl
modules
one
managedsets
idl
defines
basic
methods
grouping
sets
objects
similar
domain
concept
however
open
admits
document
offers
subset
necessary
facilities
management
applications
development
previews
need
incorporating
facilities
original
specification
procedure
accomplished
purpose
accepted
incorporated
corba
facilities
omg
1997a
main
rfc
restrictions
incorporate
event
service
asynchronous
monitoring
managed
objects
done
previously
need
extending
service
filtering
mechanisms
events
persistence
requirements
correlation
detected
specify
mechanisms
used
corba
object
order
management
interface
besides
normal
interface
specified
corba
object
instrumentation
previewed
corba
adapters
need
translate
corba
invocations
snmp
cmip
first
three
observations
due
previously
work
scopes
concentrate
specification
implementation
corba
environment
monitoring
facility
define
management
interfaces
implement
object
specifications
extend
event
service
last
one
arises
need
desirable
certain
coexistence
corba
present
management
models
extending
original
scope
recently
network
management
forum
nmf
adopted
corba
management
framework
management
application
development
framework
interoperability
solution
among
management
systems
similar
approach
joint
work
nmf
open
resulted
syntax
mapping
osi
snmp
standards
corba
idl
allowing
gateways
implementation
soukoti
1997
others
paradigms
recently
howard
et
1997
incorporated
described
architecture
domain
service
repository
define
position
remove
domains
policy
event
service
also
previewing
adoption
common
management
facility
omg
present
implementation
detail
conceptual
approach
hence
present
work
differs
others
presenting
analyzing
modeling
implementing
domain
facility
integrated
management
environment
context
adopts
corba
corbaservices
corbafacilities
investigating
suitability
standards
purposed
framework
implemented
orb
service
can
easily
integrated
management
facilities
multiware
platform
general
context
domain
facility
compounds
framework
supports
operation
example
policy
management
facility
platform
6
conclusion
paper
presents
main
issues
related
odp
domain
facility
implementation
using
main
resources
orb
besides
offering
graphical
interface
manager
developed
java
environment
using
orbixweb
visualize
structure
manipulate
store
many
domain
hierarchies
evolving
managed
objects
aims
offering
distributed
system
managers
easy
way
grouping
objects
suitable
management
structure
using
idl
domain
facility
interface
api
can
shared
among
many
management
applications
need
way
managing
keeping
large
sets
objects
using
domain
facility
can
grouped
domains
concerned
application
need
domain
facility
offers
simple
service
order
fast
reliable
objects
remote
invocations
grouped
domain
hierarchy
occur
directly
object
interfaces
without
intermediates
sophisticated
functions
evolving
structure
must
implemented
clients
management
facilities
policy
service
example
domain
facility
multiware
management
system
architecture
context
aiming
offer
framework
set
useful
services
management
corba
based
environment
suitable
way
reach
integration
among
three
areas
networks
systems
services
use
facilities
provided
corba
architecture
development
domain
facility
efficient
omg
corba
standard
allows
systems
implemented
relatively
fast
way
free
preoccupations
concerned
establishment
connections
serialization
data
types
conversion
besides
kinds
communication
support
high
level
binding
allows
easily
conversion
local
applications
method
calls
remote
method
invocations
distributed
system
requiring
adjusts
application
code
also
allows
development
large
small
scale
applications
development
showing
extensible
separation
implementation
interface
idl
usage
allows
functionality
like
domain
facility
easily
integrated
complex
applications
policy
configuration
control
facilities
idl
usage
also
makes
domain
facility
easily
extensible
besides
able
modified
without
changing
client
side
implementation
environment
characteristics
facility
interoperable
many
hardware
software
platforms
besides
interoperability
provided
corba
environment
servers
written
java
ones
implemented
orbixweb
corba
implementation
allow
servers
portable
among
many
platforms
facility
can
also
used
unix
workstations
network
connected
desktop
pcs
widows
nt
example
rm
odp
provides
distributed
application
framework
able
used
nowadays
management
integration
models
however
standardization
centered
development
distributed
systems
management
even
though
osi
cmip
standard
modeling
technique
adequate
distributed
systems
management
experience
may
used
odp
system
management
use
corba
management
integrator
model
widely
discussed
however
purpose
substitute
corba
existing
architectures
investigate
best
way
using
corba
together
frameworks
dittrich
1997
aspect
use
java
corba
complementary
technologies
can
attend
new
management
requirements
specifications
hand
author
corba
experience
shows
omg
standardization
efforts
also
considered
distributed
systems
management
however
approved
purpose
common
management
facility
incorporated
much
discussed
aspects
submission
period
hope
odma
standardization
efforts
computer
networks
tina
telecommunication
networks
adopt
rm
odp
corba
can
supply
deficiencies
acknowledgements
authors
wish
thank
fapesp
cnpq
brazilian
navy
partially
supported
work
7
references
autrata
strutt
1994
dme
framework
design
network
distributed
systems
management
ed
morris
sloman
chapter
23
addison
wesley
pp
605
627
bauer
et
al
1994
reference
architecture
distributed
systems
management
ibm
systems
journal
vol
33
3
pp
426
444
dittrich
rasmussen
sullivan
1997
co
existence
tmn
corba
service
management
proc
ieee
third
international
symposium
autonomous
decentralized
pp
35
42
april
domains
1991
esprit
project
5165
domains
basic
concepts
version
2
0
philips
gmbh
po
box
1980
5100
aachen
germany
november
flanagan
1997
java
nutshell
desktop
quick
reference
java
programmers
2nd
edition
reilly
associates
inc
howard
lutfiyya
katchabaw
bauer
1997
supporting
dynamic
policy
changes
using
corba
system
management
facilities
integrated
network
management
chapman
hall
pp
527
537
itu
rec
x901
2
3
iso
iec
10746
1
2
3
1995a
odp
reference
model
part
1
overview
guide
use
part
2
foundations
part
3
architecture
itu
iso
iec
1995b
open
distributed
management
architecture
working
draft
3
november
iona
technologies
ltd
1995
orbix
2
programming
reference
guide
release
2
0
iona
technologies
ltd
1997
orbixweb
programming
reference
guide
release
2
0
loyolla
madeira
cardozo
magalh
es
mendes
1994
multiware
platform
open
distributed
environment
multimedia
cooperative
applications
ieee
compsac
94
november
omg
1997a
interoperability
corba
telecommunications
management
systems
rfp
omg
telecom
97
06
13
omg
1997b
corbafacilities
specification
full
book
omg
formal
97
06
15
june
omg
1997c
corbaservices
specification
full
book
omg
formal
97
06
01
july
omg
1997d
corba
2
0
iiop
specification
omg
formal
97
02
25
february
rumbaugh
blaha
michael
premerlani
eddy
lorensen
1991
object
oriented
modelling
design
prentice
hall
sloman
magee
twidle
krammer
1993
architecture
managing
distributed
systems
proc
4th
ieee
workshop
future
trends
distributed
computing
systems
pp
40
46
sloman
twidle
1994
domains
framework
structuring
management
policy
network
distributed
systems
management
ed
morris
sloman
chapter
16
addison
wesley
pp
433
453
sloman
1995
management
issues
distributed
services
proc
ieee
2nd
international
workshop
services
distributed
networked
environment
pp
52
59
june
soukoti
hollberg
ulf
1997
joint
inter
domain
management
corba
cmip
snmp
integrated
network
management
chapman
hall
pp
153
163
vinoski
1997
corba
integrating
diverse
applications
within
distributed
heterogeneous
environments
ieee
communications
magazine
vol
14
2
february
vogel
duddy
1997
java
programming
corba
john
wiley
sons
inc
open
company
1995
system
management
common
management
facilities
volume
1
version
2
omg
95
12
05
december
yemini
1993
osi
network
management
model
ieee
communications
magazine
pp
20
29
31
5
may
annex
domains
module
include
orb
idl
orb
service
include
cosnaming
idl
name
service
module
domains
forward
interfaces
interface
member
interface
domain
definition
structured
types
typedef
sequence
domain
domainship
typedef
sequence
member
membership
typedef
sequence
mo
name
path
name
interface
mo
identification
typedef
cosnaming
namecomponent
mo
name
struct
mo
id
object
objref
string
hostname
mo
name
name
identification
structure
mo
name
get
name
void
set
name
mo
name
name
mo
id
read
id
interface
member
mo
identification
inheritance
member
mo
identification
atribute
string
atrib
member
attribute
void
get
domain
domainship
ship
returns
list
domains
object
belongs
void
remove
domain
domain
remove
object
domain
belongs
path
name
get
path
name
member
return
path
name
member
interface
domain
member
void
insert
members
membership
ship
inserts
object
member
domain
void
remove
members
membership
ship
removes
one
domain
long
get
number
members
returns
number
members
domain
void
list
membership
membership
ship
lists
membership
domain
void
verify
intersection
domainship
ship
membership
ship
verifies
members
common
within
domains
void
verify
union
domainship
ship
membership
ship
verifies
union
void
verify
difference
domain
dom1
domain
dom
2
membership
ship
verify
difference
void
select
attribute
string
attrib
membership
ship
select
members
domain
shares
common
attribute
interface
application
onewaway
void
register
member
objref
oneway
void
unregister
member
objref
