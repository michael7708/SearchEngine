summary contributions 
summary contributions 
next
future
work
conclusions
future
work
previous
conclusions
future
work
summary
contributions
dissertation
offers
following
contributions
defining
maxim
uncertainty
software
engineering
maxim
recognizes
abundance
software
uncertainties
relations
impacts
process
decisions
risk
management
also
corollary
suggested
software
development
include
search
identification
modeling
management
software
uncertainties
defining
approach
explicitly
model
uncertainty
using
software
belief
networks
approach
anchored
bayesian
interpretation
relationships
dependencies
among
software
artifacts
includes
notions
human
judgment
confidence
belief
evidence
often
ignored
software
modeling
techniques
implementing
softbayes
java
applet
applet
allows
software
systems
defined
graphs
related
artifacts
annotated
uncertainty
information
defined
software
belief
networks
subject
bayesian
updating
using
core
engine
provided
javabayes
conducting
case
study
substantiate
maxim
evaluate
applicability
bayesian
belief
networks
real
software
project
results
cequencer
study
indicate
explicit
modeling
software
uncertainties
improves
developers'
ability
identify
track
changes
levels
confidence
software
artifacts
relations
finally
several
confidence
factors
identified
influencing
expert's
beliefs
software
requirements
recording
confidence
factors
deemed
beneficial
future
similar
projects
requirements
uncertainty
captured
explicitly
several
impediments
limitations
approach
observed
including
initial
cost
obtaining
prior
belief
values
need
ensure
software
belief
networks
retain
causality
variable
independence
assumption
software
developers
domain
experts
related
project
information
available
accessible
experience
using
bayesian
networks
software
uncertainty
modeling
specifically
cequencer
system
indicates
conceptual
view
software
systems
bayesian
networks
interrelated
``webs''
nodes
links
seems
offer
convenient
metaphor
also
maps
well
subsequent
design
implementation
specifically
early
depictions
cequencer
artifact
webs
developed
java
applets
placed
world
wide
web
see
ziv97
applets
viewed
reviewed
beckman
developers
accuracy
relevancy
cequencer
system
like
software
proved
fraught
uncertainties
thereby
confirming
suspicions
least
one
real
life
system
specifically
cequencer
software
embodies
many
often
subtle
problem
domain
uncertainties
including
uncertainties
stemming
laws
physics
chemistry
software's
operational
environment
well
vaguely
defined
boundaries
software
versus
hardware
components
notion
software
uncertainties
well
received
beckman
developers
offering
convenient
means
describe
confidences
beliefs
regarding
cequencer
software
cequencer
requirements
analyst
recently
incorporated
confidence
levels
requirements
capture
process
questionnaire
session
beckman
revealed
given
set
questions
significant
difference
means
subjects'
scores
identified
suggests
subjects'
ability
answer
questions
increased
addition
confidence
level
information
confirms
statistically
significant
relationship
availability
confidence
level
information
developers'
ability
trace
track
software
artifacts
related
confidences
next
future
work
conclusions
future
work
previous
conclusions
future
work
hadar
ziv
fri
jun
20
16
25
19
pdt
1997
