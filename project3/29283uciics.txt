biconnnected components 
biconnected components 
biconnnected
components
deleting
vertex
graph
splits
graph
called
articulation
point
can
formalized
defining
articulation
point
graph
exists
vertices
distinct
every
path
contains
biconnected
articulation
points
requires
deletion
least
2
vertices
disconnect
maximal
subgraph
biconnected
called
biconnected
component
note
edges
cycle
will
biconnected
component
can
define
equivalence
relation
edges
e1
equivalent
e2
either
e1
e2
exists
cycle
including
e1
e2
equivalence
relation
partitions
set
edges
equivalence
classes
two
edges
belong
equivalence
class
equivalent
equivalence
class
edges
set
vertices
appearing
endpoints
edges
will
case
graph
biconnected
component
lemma
connected
graph
2
distinct
biconnected
components
one
vertex
common
articulation
point
common
one
biconnected
components
will
use
dfs
find
biconnected
components
graph
dfs
tree
cross
edges
neither
ancestor
descendent
edge
articulation
point
graph
removing
will
split
two
parts
one
parts
will
consist
son
together
s's
descendents
dfs
tree
summarized
next
lemma
lemma
articulation
point
either
1
root
one
son
2
root
exists
son
backedge
descendent
including
proper
ancestor
define
low
remote
ancestor
can
reached
allowed
go
tree
go
one
backedge
lemma
vertices
numbered
dfs
numbers
root
articulation
point
son
low
dfn
will
embed
dfs
algorithm
calculation
low
using
following
recurrence
low
minimum
either1
dfn
backedge
taken
or2
low
son
backedge
proper
descendent
or3
dfn
backedge
backedge
depth
first
search
low
computation
find
articulation
points
biconnected
components
count
0
stack
£f
forall
vertices
flag
new
searchb
1
searchb
flag
old
count
count
1
dfn
count
1
low
dfn
let
list
vertices
adjacent
¡Ú
£f
pop
yet
stack
already
stack
backedge
descendent
can
expressed
father
flag
old
dfn
dfn
put
stack
flag
new
union
father
searchb
low
dfn
articulation
point
next
biconnected
component
set
edges
popped
stack
including
2
low
min
low
low
else
¡Ú
father
3
low
min
low
dfn
time
complexity
changes
simple
dfs
low
computation
stack
manipulations
takes
time
one
can
prove
induction
number
biconnected
components
searchb
completed
low
dfn
set
edges
stack
constitutes
biconnected
component
containing
edge
dan
hirschberg
last
modified
mar
4
2004
