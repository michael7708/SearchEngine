ics 21 overview 

ics
21
overview
introduction
computer
science
ics
21
spring
2012
introduction
lecture
will
overview
four
topics
related
course
learning
material
will
cover
ics
21
computing
human
resources
resources
available
will
learn
use
perspectives
programming
short
discussion
programming
education
built
around
quotes
collected
web
page
hundreds
software
production
big
picture
material
lecture
introductory
programming
students
especially
interesting
table
software
project
metrics
lecture
like
ones
follow
problem
set
end
instead
problems
reading
first
day
class
will
spend
time
class
looking
solving
problems
mostly
concern
precise
use
natural
language
many
parallels
precise
use
programming
langauge
course
goals
first
course
programming
first
importantly
ics
21
assumes
knowledge
programming
assume
knowledge
using
computers
software
course
moves
quickly
never
used
windows
form
xp
windows
7
etc
mac
os
linux
operating
systems
will
briefly
discuss
everything
need
know
might
spend
extra
time
first
week
course
studying
learning
material
get
behind
count
ics
21
introduces
concepts
skills
needed
begin
serious
programming
taught
java
language
although
language
harder
learn
many
industrial
strength
language
large
library
can
spend
years
exploring
mastering
advanced
features
covered
ics
22
23
follow
courses
one
java
features
beyond
scope
even
advanced
courses
ics
21
will
cover
wide
variety
introductory
intermediate
java
language
features
tried
categorize
fundamentals
programming
java
think
covered
ics
21
includes
read
ebnf
descriptions
java's
syntax
parse
java
programs
tokens
identifiers
keywords
operators
delimiters
literals
comments
declare
picture
variables
primitive
references
meaning
final
variables
classify
understand
operators
terminology
arithmetic
relational
logical
textual
state
change
implicit
conversion
analyze
synthesize
expressions
precedence
associativity
short
circuit
evaluation
analyze
synthesize
statements
including
expression
statements
break
switch
basics
try
catch
exception
handling
analyze
statements
via
hand
simulation
debugger
read
javadoc
constructors
methods
fields
meaning
access
modifiers
final
static
public
private
use
pre
written
java
classes
math
prompt
diceensemble
biginteger
timer
modularcounter
stringtokenizer
typedbufferreader
typedbufferwriter
understanding
difference
local
variables
parameter
variables
instance
variables
write
classes
constructors
methods
fields
inside
declare
manipulate
java
arrays
one
dimension
including
use
write
classes
storing
simple
collections
use
java
interfaces
construct
test
debug
programs
systematically
basically
will
learn
core
programming
java
hope
need
learn
will
necessary
skills
learn
advanced
programming
java
whether
learn
take
courses
likewise
will
learn
use
eclipse
integrated
development
environment
ide
including
compiler
debugger
browser
finally
will
cover
variety
skill
programming
material
topics
program
composition
analysis
testing
debugging
simplification
style
students
will
work
six
programming
assignments
based
material
involves
writing
small
programs
exercising
combinations
material
covered
time
will
learn
program
test
code
incrementally
understand
debugging
leverage
get
well
formally
studying
eclipse
debugger
will
cover
material
rigorously
believe
even
students
background
java
will
learn
lots
little
details
maybe
big
ones
will
exploit
build
cover
new
material
later
quarter
get
behind
initial
phase
course
everything
builds
especially
terminology
know
early
material
make
sure
start
paying
attention
get
material
know
expectations
learning
members
course
working
together
teaching
learning
share
following
expectations
instructor
starts
stops
class
time
assigns
minimal
amount
homework
enough
students
learn
required
material
comfortable
ics
21
6
unit
course
full
time
student
typical
takes
15
units
quarter
assuming
40
hour
full
time
work
week
means
time
working
ics
21
occupy
16
hours
week
16
hours
7
hours
week
will
class
lecture
lab
time
leaving
9
hours
week
lecture
prepartion
programming
distributes
course
materials
timely
manner
returns
solutions
graded
homework
promptly
available
providing
individual
help
student
attends
class
punctual
participates
reading
asks
answer
questions
completes
homework
spending
requisite
time
learn
required
material
studies
course
materials
read
read
read
prepared
class
examines
solutions
graded
homework
improve
knowledge
rectify
misconceptions
course
material
promptly
reports
possible
grading
mistakes
seeks
individual
help
needed
biggest
source
problems
students
taking
ics
21
skipping
classes
readings
homework
fully
poor
time
management
programming
assignments
waiting
long
start
scheduled
spend
160
hours
ics
21
10
weeks
work
16
hours
week
please
allow
much
time
schedule
use
time
wisely
believe
right
attitude
work
ethic
uci
student
can
learn
demonstrate
learned
material
required
ics
21
pass
course
good
grade
take
desire
action
part
resources
computer
labsand
software
expect
students
will
using
computers
programming
assignments
encouraged
use
machine
aspects
course
capable
supporting
can
download
required
course
software
personal
computer
free
addition
using
machines
students
can
coursework
machines
ics
labs
main
upside
using
ics
labs
will
easy
get
ics
21
staff
help
main
downside
will
using
computer
unless
portable
bring
labs
get
best
worlds
labs
located
ics
building
rooms
180
189
192
364
ics
courses
often
schedule
lab
hours
complement
lecture
hours
students
can
learn
use
software
tools
work
programming
assignments
supervision
ics
21
staff
members
will
4
hours
lab
scheduled
week
machines
ics
labs
dell
optiplex
computers
running
windows
xp
necessary
course
software
browsers
eclipse
integrated
development
environment
ide
java
course
related
software
labs
provide
convenient
space
students
work
assignments
course
staff
available
answer
questions
immediately
debugging
help
will
also
available
via
instant
messaging
im
realvnc
screen
keyboard
mouse
mapping
software
students
will
able
locate
staff
online
describe
show
code
ask
questions
code
even
staff
manipulate
code
directly
student's
computer
run
tests
helping
correct
world
wide
web
www
will
place
materials
course
www
now
others
will
become
available
later
quarter
will
also
use
web
submitting
programs
grading
materials
organized
using
following
index
course
home
page
brief
description
main
entries
fact
sheet
short
page
providing
information
course
staff
getting
help
meeting
times
default
page
course
announcements
page
messages
students
updated
almost
daily
archived
current
message
top
email
archive
page
messages
mailed
email
discussion
group
class
syllabus
long
page
providing
detailed
information
course
run
print
copy
read
lecture
schedule
notes
page
indexing
lectures
labs
line
lecture
notes
associated
problem
sets
programming
assignments
page
indexing
programming
assignments
weekly
schedule
page
listing
readings
homework
assignments
due
dates
week
week
help
schedule
page
listing
times
help
available
students
inside
outside
class
handouts
general
page
indexing
variety
handouts
related
course
online
resources
page
indexing
various
useful
line
files
meant
viewed
meant
downloaded
sample
programs
page
indexing
various
programs
students
can
download
examine
run
javadoc
sun's
api
documentation
sun's
standard
java
classes
javadoc
junit
4
7
documentation
junit
classes
javadoc
courses
api
documentation
ics
21's
standard
java
classes
javadoc
collections
api
documentation
ics
23
collection
classes
java
language
reference
documentation
java
language
see
table
contents
details
meant
read
knowledgeable
programming
introduction
solutions
page
indexing
solutions
course
assignments
quizzes
exams
programs
updated
appropriate
grades
zipped
file
can
download
course
grades
typically
indexed
last
5
digits
uci
id
anonymous
email
page
students
can
use
send
instructor
anonymous
email
personal
email
might
awkward
homework
dropoff
page
students
use
drop
homework
mostly
weekly
programming
assignments
class
programming
exams
sometimes
programming
parts
quizzes
search
ics
21
google
search
course
web
pages
search
javadoc
1
6
api
google
search
java
api
course
will
constantly
reading
web
pages
sometimes
downloading
materials
onto
computer
generally
critical
become
expert
navigating
course
web
browser
specifically
become
familiar
pages
used
repeated
course
can
easily
find
materials
need
run
across
missing
links
please
drop
short
mail
can
correct
quickly
human
resources
students
start
ics
21
wide
variety
aptitudes
skills
times
even
best
students
run
problems
misconceptions
mental
roadblocks
etc
imperative
quickly
determine
problem
get
diagnosed
corrected
soon
possible
many
different
resources
can
elect
use
instructor
perspective
best
place
get
help
simple
problems
short
mail
phone
call
im
might
suffice
complicated
problems
office
hours
daily
open
office
hours
appointment
necessary
also
attend
labs
see
times
please
contact
mail
phone
schedule
special
appointment
tas
teaching
assistants
will
lecture
lab
daily
will
also
offer
consulting
sessions
online
via
im
realvnc
ics
labs
non
class
hours
afternoons
evenings
weekends
ta
responsible
grading
programs
first
person
see
questions
programming
assignments
graded
lab
tutors
lab
tutors
will
lab
daily
will
also
offer
consulting
sessions
online
via
im
realvnc
ics
labs
non
class
hours
students
encourage
students
courses
seek
questions
student
answering
question
will
benefit
much
student
asking
one
beneficial
reason
come
uci
interaction
outstanding
students
course
graded
materials
dos
don'ts
relating
academic
integrity
useful
online
mechanism
handing
questions
discussions
eee's
forums
messageboard
forums
allow
students
ask
questions
start
discussions
easily
well
supply
answers
participate
discsussion
initially
created
four
forums
ics
21
java
eclipse
lecture
material
programming
assignments
quizzes
exams
need
arises
forums
tell
think
another
useful
will
create
can
instruct
eee
email
links
active
discussions
forums
past
quarters
forums
seen
tremendous
amount
traffic
course
material
clarified
questions
asked
answered
many
interesting
side
discussions
ensued
efficacy
depends
participation
will
broadcast
information
students
staff
ics
21
using
ics
21
email
list
ics21
s12
classes
uci
edu
students
staff
course
will
automatically
receive
emails
sent
address
messages
sent
via
discussion
list
will
archived
email
archive
web
page
mostly
student
initialied
questions
discussions
use
forums
mentioned
sometimes
students
can
use
email
list
inform
instructor
staff
students
timely
issue
checkmate
responding
program
submissions
learning
seek
help
others
important
skill
acquire
one
will
use
continually
professional
career
example
encounter
programming
problem
solve
5
minutes
see
steps
toward
solution
able
explain
problem
concisely
using
programming
terminology
learned
someone
else
understand
apply
informed
answer
possibly
collaborating
reach
solution
instructors
tas
lab
tutors
experience
handling
questions
trained
help
students
learn
become
self
sufficient
still
answering
questions
example
might
tell
general
technique
solving
collection
similar
problems
instead
just
telling
answer
sometimes
process
bit
frustrating
students
seeking
help
especially
started
assignment
late
caught
time
bind
ultimately
approach
makes
better
programmers
appropriate
homily
give
person
fish
feed
day
teach
person
fish
feed
life
think
seriously
using
human
resources
uci
provides
includes
tas
lab
tutors
fellow
students
just
think
using
computational
resources
former
resources
even
important
latter
knowing
seek
help
strength
weakness
bit
hope
get
know
individually
quarter
information
grew
north
shore
chicago
town
wilmette
attended
new
trier
west
high
school
undergraduate
mathematics
major
carnegie
mellon
university
cmu
1972
1975
taught
introductory
programming
year
went
graduate
school
computer
science
stanford
wrote
book
karel
robot
gentle
introduction
art
programming
associated
software
since
updated
mark
stehlik
jim
roberts
cmu
years
book
revised
extended
joe
bergin
java
now
python
still
used
colleges
high
schools
around
world
1985
1995
taught
introductory
intermediate
programming
university
washington
seattle
sending
lots
students
work
microsoft
times
allowed
many
become
millionaires
1996
2007
returned
teach
cmu
last
two
years
served
freshman
advisor
incomming
freshman
computer
science
150
year
2007
joined
bren
school
information
computer
science
joint
appointment
computer
science
informatics
returning
teach
public
university
wife
heading
new
nursing
program
freshman
year
high
school
math
teacher
named
mr
lill
one
class
test
mechanical
pencil
broke
asked
mr
lill
borrow
one
pencils
said
asked
whether
borrow
friend's
pencil
said
told
always
come
prepared
class
sat
back
desk
failed
test
unable
write
answers
low
opinion
mr
lill
long
time
years
thought
incident
many
years
taught
important
lesson
stayed
much
longer
mathematics
taught
hope
anyone's
mr
lill
will
assume
roll
necessary
lots
lessons
taught
uci
concern
content
course
material
posted
story
course
web
pages
many
many
years
amazingly
2009
attending
reception
students
admitted
ics
uci
started
talking
student
parents
offhandedly
asked
father
grew
near
asked
high
school
went
mine
asked
year
started
year
started
point
exchanged
names
recognized
close
friends
high
school
seen
since
graduation
absolute
first
comment
made
remember
day
mr
lill's
class
let
borrow
pencil
totally
floored
obviously
lesson
learned
painfully
day
also
learned
many
others
lesser
cost
senior
high
school
wanted
take
ap
chemistry
ap
physics
scheduled
time
great
respect
enjoyed
classroom
chemistry
teacher
mr
kunz
signed
ap
chemistry
asked
ap
physics
teacher
list
problems
assigned
textbook
spent
year
reading
book
working
problems
book
answers
worked
solutions
many
problem
back
result
discovered
learn
now
considered
rudimentary
learning
materials
big
goal
college
teach
students
able
learn
student
feedback
interesting
short
comment
received
faculty
course
evaluation
form
fce
teach
biased
class
reflection
agree
student
100
almost
everything
class
highly
biased
choosing
programming
topics
teach
sequence
topics
ones
emphasize
ones
relegate
mere
details
deciding
programming
assignments
test
questions
award
credit
problems
etc
sitting
classroom
decided
obtain
uci
bias
learn
programming
read
book
written
mit
author
observed
everyone
majored
thing
mit
yes
learned
different
vocabulary
facts
practiced
reasoning
problem
solving
different
disciplines
everyone
really
learning
think
like
mit
graduate
along
lines
want
eventually
acquire
pattis
simulator
head
running
can
determine
approach
problem
critique
solution
etc
agree
results
produces
consult
interesting
long
comment
received
course
evaluation
form
labeled
relevant
allegory
order
teach
someone
boil
water
first
spend
day
giving
history
pots
including
size
shape
metals
work
best
next
day
lecture
chemical
properties
water
day
three
talk
boiled
water
ages
night
tell
people
go
home
use
boiled
water
make
spaghetti
carbonera
never
tell
put
water
pot
heat
programming
classes
like
completely
irrelevant
task
hand
like
comment
witty
well
written
true
although
maybe
extreme
author
states
teaching
students
boil
water
great
high
school
class
college
trying
achieve
something
deeper
might
instead
study
phase
transitions
matter
just
learn
particulars
drill
practice
learn
general
theories
spite
student
says
apply
particular
cases
want
teach
programming
way
students
exposed
new
novel
situations
will
able
use
general
knowledge
fall
back
analyze
problem
figure
know
need
learn
solve
problem
ultimately
synthesize
solution
acknowledge
learning
first
principles
tougher
memorization
sometimes
students
feel
material
covered
applied
believe
everything
teach
many
concrete
applications
learning
programming
language
learning
section
like
work
general
specific
education
programming
illustrated
various
quotes
collected
web
page
start
three
interesting
quotes
first
graduate
student
university
washington
second
jacob
bronowski
distinguished
philosopher
science
third
edward
teller
physicist
division
student
population
go
college
learn
go
college
earn
diploma
blau
letter
editor
chronicle
higher
education
may
24
2002
important
students
bring
certain
ragamuffin
barefoot
irreverance
studies
worship
known
question
bronowski
believe
excellence
basic
need
every
human
soul
us
can
excellent
fortunately
exceedingly
diverse
ambitions
talents
teller
decide
attending
uci
choice
will
lot
say
class
others
simple
question
makes
concrete
following
students
rather
student
1
attends
uci
graduation
day
informed
records
student's
performance
uci
lost
future
uci
will
acknowledge
student
attended
four
years
graduated
cs
degree
details
tell
student
2
attends
uci
graduation
day
hit
head
develops
amnesia
although
uci
shows
student
graduated
4
0
cs
student
remember
material
learned
four
years
enjoy
teaching
constantly
challenged
students
think
deeply
know
can
teach
teaching
best
can
job
challenging
hear
better
understand
question
knowledge
subject
challenges
make
rethink
revise
opinions
might
imagine
think
better
ways
presenting
explaining
complicated
material
everyone
can
excel
computer
science
uci
different
students
will
gravitate
torwards
different
parts
field
big
field
many
connections
applications
disciplines
room
everyone
excellent
something
many
will
excellent
programming
will
good
will
enough
everyone
acquire
basic
understanding
basic
skills
programming
just
question
huge
part
learning
requires
students
question
seen
well
learning
questions
answers
following
quotes
illustrate
good
teaching
giving
right
questions
giving
right
answers
albers
prudent
question
one
half
wisdom
bacon
questions
important
thing
answers
less
important
learning
ask
good
question
heart
intelligence
learning
answer
well
answers
students
questions
thinkers
schank
connosseur's
guide
mind
function
genius
give
new
answers
pose
new
questions
time
mediocrity
can
resolve
trevor
howard
physics
nobel
laureate
rabi
child
mother
always
ask
dinner
table
learned
classes
day
interesting
questions
asked
neil
postman
famous
education
technology
media
critic
tells
following
story
importance
asking
right
question
two
priests
arguing
whether
appropriate
pray
smoke
time
resolved
ask
bishop
guidance
met
claimed
bishop
supported
position
went
explore
interactions
bishop
bit
detail
first
said
asked
bishop
whether
appropriate
smoke
praying
said
praying
transcendant
activity
debased
smoking
second
said
asked
bishop
whether
appropriate
pray
smoking
said
praying
appropriate
time
know
students
enrolled
course
already
learned
programming
first
weeks
quarter
might
review
urge
use
time
attain
deeper
integrated
understanding
material
following
quote
illustrates
voyage
discovery
seeking
new
landscapes
new
eyes
proust
remember
teaching
learning
two
different
cooperative
activities
best
teach
need
best
learn
well
think
much
effective
methods
teaching
enough
effective
methods
learning
matter
good
teaching
may
student
must
take
responsibility
education
carolus
learning
results
student
thinks
student
thinks
teacher
can
advance
learning
influencing
student
learn
simon
truth
said
done
one
teach
subject
one
teaches
student
learn
teaching
may
look
like
administering
dose
even
dose
must
worked
body
cure
individual
must
cure
ignorance
barzun
begin
pp
35
learned
throughout
life
composer
chiefly
mistakes
pursuits
false
assumptions
exposure
founts
wisdom
knowledge
stravinsky
old
joke
illustrates
idea
one
day
mother
comes
home
work
asks
son
today
son
replied
taught
dog
play
piano
mother
incredulous
asked
dog
can
play
piano
son
laughed
replied
course
mom
said
taught
say
learned
finally
afraid
struggle
fail
learning
simple
effortless
lot
smarter
many
failures
learned
failing
lot
probably
creative
stretching
imagination
backus
primary
inventor
fortran
learning
never
done
without
errors
defeat
lenin
honor
failure
failure
just
negative
space
around
success
nelson
wired
06
2004
page
166
unfortunately
12
educational
world
live
encourages
students
try
really
hard
things
fail
everyone
wants
make
sure
never
fail
attitude
bad
many
dimensions
college
safe
place
try
hard
fail
succeed
eventually
language
leave
learning
behind
long
talk
bit
language
course
meta
lingual
will
use
language
english
learn
language
java
argue
illustrated
language
reality
certainly
education
primarily
independent
subject
material
thoughts
linguistic
concrete
example
will
learn
lots
technical
terms
first
weeks
course
use
repeated
levers
explore
describe
advanced
java
concepts
comes
time
ask
questions
material
questions
debugging
program
writing
knowing
ask
using
technical
terms
understand
answers
given
technical
terms
makes
process
precise
concise
important
sense
course
concerned
programming
just
much
talk
programs
programming
language
instrument
human
reason
merely
medium
expression
thought
truth
generally
admitted
boole
real
technology
behind
technologies
language
actually
creates
world
consciousness
lives
codrescu
wrong
think
task
physics
find
nature
physics
concerns
say
nature
bohr
precise
language
problem
clear
language
problem
feynman
think
medium
words
languages
true
analytical
methods
algebra
adapted
purpose
every
species
expression
simple
exact
best
manner
possible
time
language
analytical
method
art
reasoning
nothing
language
well
arranged
lavoisier
knowledge
subject
means
knowledge
language
subject
includes
words
mean
far
important
words
mean
one
learns
language
subject
one
also
learning
subject
said
often
enough
call
subject
consists
mostly
entirely
language
eliminate
words
subject
eliminated
subject
biology
plants
animals
language
plants
animals
history
events
language
describing
interpreting
events
astronomy
planets
stars
way
talking
planets
stars
postman
language
serves
express
thought
make
possible
thoughts
exist
without
russell
limits
language
limits
world
wittgenstein
programming
finally
talk
programming
programming
languages
quotes
lengthy
come
emminent
computer
scientists
just
fantastic
programmers
trying
communicate
programming
fascinating
programmer
like
poet
works
slightly
removed
pure
thought
stuff
builds
castles
air
air
creating
exertion
imagination
media
creation
flexible
easy
polish
rework
readily
capable
realizing
grand
conceptual
structures
yet
program
construct
unlike
poet's
words
real
sense
moves
works
producing
visible
outputs
separate
construct
prints
results
draws
pictures
produces
sounds
moves
arms
magic
myth
legend
come
true
time
one
types
correct
incantation
keyboard
display
screen
comes
life
showing
things
never
computer
resembles
magic
legend
respect
one
character
one
pause
incantation
strictly
proper
form
magic
work
human
beings
accustomed
perfect
areas
human
activity
demand
adjusting
requirement
perfection
think
difficult
part
learning
program
brooks
mythical
man
month
pages
7
8
programming
job
can
think
get
engineer
artist
incredible
rigorous
technical
element
like
precise
thinking
hand
wildly
creative
side
boundaries
imagination
real
limitation
hertzfeld
original
mac
programmer
speak
computer
programming
art
thinking
primarily
art
form
aesthetic
sense
chief
goal
work
educator
author
help
people
learn
write
beautiful
programs
feeling
prepare
program
experience
can
just
like
composing
poetry
music
programs
elegant
exquisite
sparkling
claim
possible
write
grand
programs
noble
programs
truly
magnificent
ones
computer
programming
art
applies
accumulated
knowledge
world
requires
skill
ingenuity
especially
produces
objects
beauty
programmers
subconsciously
view
artists
will
enjoy
will
better
knuth
computer
programming
art
turing
award
speech
1974
good
programming
language
conceptual
universe
thinking
programming
language
affect
way
think
programming
worth
knowing
perlis
programming
language
system
notation
describing
computations
useful
programming
language
must
therefore
suited
description
human
writers
readers
programs
computation
efficient
implementation
computers
human
beings
computers
different
difficult
find
notational
devices
well
suited
capabilities
tennant
principles
programming
languages
prentice
hall
1981
now
like
focus
aesthetics
level
root
learning
disciplines
learning
aesthetics
learning
separate
beautiful
ugly
central
discussion
dichotomy
complexity
simplicity
programming
illustrated
many
times
makes
programming
hard
complexity
tools
used
complexity
final
product
easy
create
overly
complicated
designs
implementations
inevitably
incorrect
must
strive
keep
everything
simple
creativity
programming
lies
programming
one
many
human
activities
simplicity
beauty
bound
tightly
competent
programmer
fully
aware
strictly
limited
size
skull
therefore
approaches
programming
task
full
humility
among
things
avoids
clever
tricks
like
plague
dijkstra
humble
programmer
1972
turing
award
lecture
beauty
important
computing
anywhere
else
technology
software
complicated
beauty
ultimate
defense
complexity
geniuses
computer
field
hand
people
keenest
aesthetic
senses
ones
capable
creating
beauty
beauty
decisive
every
level
important
interfaces
important
programming
languages
winning
algorithms
beautiful
ones
good
programmers
know
beautiful
bad
programmers
gelernter
machine
beauty
basic
books
1998
great
software
likewise
requires
fanatical
devotion
beauty
look
inside
good
software
find
parts
one
ever
supposed
see
beautiful
comes
code
behave
way
make
eligible
prescription
drugs
approached
everyday
life
way
drives
crazy
see
code
badly
indented
uses
ugly
variable
names
graham
hackers
painters
pg
29
controlling
complexity
essence
computer
programming
kernighan
creator
programming
language
fools
ignore
complexity
pragmatists
suffer
experts
avoid
geniuses
remove
simplicity
precede
complexity
follows
perlis
computer
science
first
engineering
discipline
complexity
objects
created
limited
solely
skill
creator
strength
raw
materials
reid
design
programming
human
activities
forget
lost
stroustrup
technical
skill
mastery
complexity
creativity
mastery
simplicity
zeeman
like
present
following
quote
last
will
provide
import
perpective
many
discussions
features
java
language
strictness
java
compiler
fully
recognizes
psychological
aspect
programming
directly
related
complexity
tools
use
build
complex
artifacts
millions
compilers
hardly
penny
understanding
human
programming
language
use
now
programming
languages
obviously
symmetrical
computer
one
side
human
appropriate
science
computer
languages
one
expect
half
effort
computer
side
understanding
translate
languages
executable
form
half
human
side
understanding
design
languages
easy
productive
use
yet
even
enumeration
psychologicial
functions
programing
languages
serve
user
course
lots
programming
language
design
comes
computer
scientists
though
technical
papers
languages
contain
mainly
appeals
ease
use
learning
patently
contain
almost
psychologicial
evidence
appeal
psychological
science
newell
card
software
system
costs
early
days
computers
built
hand
made
expensive
physcially
large
consumed
huge
amount
power
slow
memories
small
run
small
programs
result
cost
developing
working
computing
system
mostly
spent
hardware
present
computers
cheaply
mass
produced
small
consume
minimal
power
fast
large
memories
now
cost
developing
working
computing
system
mostly
spent
software
deliver
new
systems
cheaply
time
must
focus
improving
production
software
implementing
computer
system
5
improvement
developing
software
worth
much
50
improvement
developing
hardware
latter
costs
minimal
start
turing
award
lecture
humble
programmer
edgser
dijkstra
famous
computer
scientist
put
follows
long
machines
programming
problem
weak
computers
programming
became
mild
problem
now
1972
gigantic
computers
programming
become
gigantic
problem
power
available
machines
grew
factor
thousand
society's
ambition
apply
new
machines
grew
proportion
poor
programmer
found
job
exploded
field
tension
ends
means
increased
power
hardware
together
perhaps
dramatic
increase
reliability
made
solutions
feasible
programmer
dared
dream
years
now
years
later
dream
even
worse
transform
dreams
reality
wonder
found
software
crisis
fact
moore's
law
empirical
states
computer
communication
hardware
doubles
performance
speed
memory
halves
resources
size
cost
every
18
months
exponential
law
held
past
30
years
computing
seen
changes
computing
technology
factor
million
pcs
today
perform
billion
operations
per
second
moore's
law
continues
hold
another
40
years
pcs
will
performing
thousand
trillion
operations
per
second
many
human
brain
performs
many
logical
elements
operating
much
slower
electronic
speed
software
development
model
last
30
years
following
model
called
iterated
waterfall
model
proven
important
one
developing
large
software
systems
direclty
applying
smaller
projects
bit
cumbersome
often
applied
modified
way
higher
phase
must
finish
lower
phase
begins
like
water
falling
opportunities
return
earlier
phases
problem
later
phase
may
back
earlier
one
phases
can
reached
iterated
maintenance
recent
software
methodology
better
adapted
smaller
projects
require
fewer
programmers
called
extreme
programming
shares
idea
incremental
development
iterated
waterfall
model
reaches
objectives
bit
differently
fact
maintenance
curious
term
appply
software
unlike
cars
example
software
parts
wear
need
replaced
software
fluids
evaporate
need
replished
constitutes
software
maintenance
fixing
errors
improving
performance
increasing
functionality
writing
new
code
meet
new
specifications
redesigning
reimplementing
recoding
rewriting
old
code
simplify
future
anticipated
changes
software
organic
features
continues
grow
evolve
fact
reliably
working
software
continues
used
long
time
current
air
traffic
controller
system
decades
old
attempts
design
code
replacement
billions
dollars
little
progress
made
many
say
specification
keeps
changing
see
next
chart
relative
costs
fix
errors
review
iterated
waterfall
model
software
development
following
chart
shows
cost
fix
error
depending
error
discoved
process
notice
sooner
error
discovered
less
expensive
fix
write
java
programs
will
learn
language
features
allow
us
detect
errors
quickly
thus
fix
earlier
save
time
biggest
cost
taking
course
software
lifetime
costs
learned
reliably
working
software
continues
used
long
time
therefore
following
charts
come
surprise
although
typically
upshot
chart
software
must
built
initially
way
easy
maintain
lifetime
product
maintenance
costs
dominate
one
easy
way
remember
chart
maintenance
cost
looks
like
pac
man
icon
gobbling
initial
cost
build
software
project
sizes
although
will
write
small
software
systems
course
still
keep
construction
large
software
systems
mind
seen
industry
often
small
software
systems
grow
large
ones
software
project
sizes
roughly
categorized
follows
means
1
000
lines
code
means
1
million
lines
code
tiny
1ksmall
1k
10
kmedium
10k
100klarge
100k
1
mhuge
1m
writing
large
software
project
like
building
skyscraper
terms
workforce
cost
timetable
notoriously
difficult
predict
software
costs
schedules
compared
building
trades
construction
jobs
can
estimated
within
10
time
budget
software
jobs
lucky
estimated
300
something
like
60
software
projects
fail
completed
deployed
many
100
million
projects
abandoned
usable
product
produced
known
software
crisis
many
attribute
relative
newness
programming
discipline
area
software
engineering
young
quickly
growing
maturing
software
finds
way
everything
produce
software
project
metrics
although
software
projects
scale
many
magnitudes
sizes
ones
shown
medium
huge
worker
productivit
rates
fall
much
smaller
range
following
data
came
article
break
software
logjam
fortune
magazine
sept
25
1989
pages
100
112
companyproductlinesx1ktimeworker
yrscostx
1m
linelines
month
workerfordcontinental843
51
821200ibmcheckout
scanner9058
03
033129lotus1
2
3
spreadsheet400263
022
055127citibankatm
780150
013
217433nasaspace
shuttle25
60022
1001
2004797
citibank
atm
project
considered
successful
without
metrics
differ
factor
2
note
code
lines
month
bad
metric
measure
programmer
productivity
poor
programmer
may
quickly
produce
many
lines
simple
task
good
programmer
will
carefully
write
fewer
lines
code
accomplish
task
often
producing
simpler
easier
modify
code
reproducing
functionality
fewer
lines
code
two
relevant
quotes
homepage
lots
interesting
relevant
quotes
flew
weekly
meet
ibm
thought
way
measure
software
amount
code
wrote
really
better
software
fewer
lines
code
gates
discussing
writing
original
dos
operating
system
engineers
find
evaluated
many
lines
code
per
day
writing
revert
cut
past
programming
optimize
productivity
rating
repeat
code
logic
many
places
possible
effort
look
lazy
long
term
benefits
like
maintainability
portability
will
sacrificed
account
poorly
chosen
metric
blunden
cube
farm
page
140
code
lines
good
metric
measure
maintenance
cost
seen
overshadows
large
fact
original
cost
build
software
cost
maintaining
program
roughly
proportional
size
leads
interesting
anomoly
programmer
may
exhibit
appears
negative
productivity
working
shrink
size
program
result
reduced
maintanence
cost
lifetime
software
problem
set
mastering
programming
starts
mastering
syntax
form
semantics
meaning
programming
language
begin
study
computer
languages
can
investigate
topics
natural
language
although
questions
programming
answering
requires
thinking
like
programmer
interpret
following
real
headlines
two
ways
rewrite
longer
less
ambiguous
form
police
squad
helps
dog
bite
victim
milk
drinkers
turn
powder
kids
make
nutritious
snacks
stolen
painting
found
tree
red
tape
holds
new
bridge
old
school
pillars
replace
alumni
hospitals
sued
7
foot
doctors
earthquake
buildings
sway
san
francisco
la
tuna
biting
coast
washington
teacher
strikes
idle
kids
local
high
school
dropouts
cut
half
uci
graduates
blind
senior
citizen
white
house
ducks
report
pornography
sure
lots
available
online
one
url
headlines
1997
assume
state
originally
litter
laws
legal
litter
newspaper
reports
legaslature
voids
judge's
reversal
governer's
veto
anti
litter
law
now
legal
illegal
litter
man
looking
photograph
says
brothers
sisters
none
man's
father
father's
son
relationship
speaker
person
picture
simplest
convincing
arguments
answer
good
metric
assess
productivity
letter
carrier
working
us
post
office
think
simple
metric
like
letters
delivered
per
day
flaws
kinds
data
taken
account
assume
company
builds
software
system
comprises
250
000
lines
code
1
000
000
spent
extra
time
make
compact
easy
maintain
assume
company
builds
software
system
comprises
1
000
000
lines
code
250
000
wrote
quickly
cheaply
finally
assume
costs
20
cents
year
maintain
line
code
distinguish
well
poorly
written
code
just
code
size
10
year
cost
companies
build
maintain
software
product
important
issues
success
covered
simple
analysis
software
company
likely
thrive
assume
white
clothes
best
washed
hot
water
colored
clothes
must
washed
cold
water
colors
run
large
pile
laundry
will
fit
one
white
one
colored
load
want
everything
reasonably
clean
load
first
think
robustness
face
errors
washing
machine
dryer
take
30
minutes
run
10
piles
laundry
must
wash
dry
long
will
entire
process
take
disregard
time
load
unload
difference
precision
accuracy
look
words
dictionary
need
write
precise
statement
accurate
write
accurate
statement
precise
bottom
escalator
two
signs
shoes
must
worn
dogs
must
carried
although
signs
read
similarly
syntax
different
interpretations
semantics
native
english
speakers
give
second
thought
carefully
examine
two
sentences
explain
difference
possibly
restating
intent
signs
using
words
hint
shoes
must
worn
refer
shoes
old
worn
repunctuate
following
sentences
may
add
remove
punctuation
marks
reverse
meanings
republicans
say
democrats
will
win
woman
without
man
nothing
repunctuate
following
paragraph
may
add
remove
punctuation
marks
make
letter
one
loathing
admiration
dear
jack
want
man
knows
love
generous
kind
thoughtful
people
like
admit
useless
inferior
ruined
men
yearn
feelings
whatsoever
apart
can
forever
happy
will
let
jill
write
two
different
interpretations
statement
put
much
water
nuclear
reactor
write
three
different
interpretations
statement
saw
man
hill
telescope
