
index cpp 
id
index
cpp
1106
2007
04
16
23
20
29z
chenli
index
cpp
copyright
2003
2007
regents
university
california
redistribution
file
permitted
terms
gnu
public
license
gpl
date
march
2002
authors
michael
ortega
binderberger
miki
ics
uci
edu
liang
jin
liangj
ics
uci
edu
chen
li
chenli
ics
uci
edu
include
include
include
include
include
include
index
global
variable
root
define
defined
val
val
0
0
val
level
0
leaf
join
tree
null
join
dist
func
null
join
disk
acc1
null
join
disk
acc
length1
0
join
disk
acc2
null
join
disk
acc
length2
0
join
cpu
comp
null
join
cpu
comp
length
0
join
cpu
comp
total
null
join
active
query
false
join
pqueue
null
join
max
distance
null
rtree
rtree
int
rtree
rtreeload
char
dumpfile
int
loadcount
fp
fopen
dumpfile
loadcount
load
treeroot
cout
loadcount
nodes
loaded
endl
fclose
fp
createspheres
treeroot
will
fill
radii
spheres
exist
1
return
loadcount
int
rtree
load
struct
node
struct
node
newnode
struct
node
int
nodecount
0
int
fread
count
sizeof
int
1
fp
fread
level
sizeof
int
1
fp
level
0
internal
node
tree
0
icount
fread
branch
rect
sizeof
struct
rect
1
fp
0
count
branch
child
rtreenewnode
nodecount
nodecount
load
branch
child
1
cout
inner
node
level
level
endl
return
nodecount
else
leaf
node
0
icount
fread
branch
rect
sizeof
struct
rect
1
fp
0
icount
fread
branch
child
sizeof
struct
node
1
fp
cout
leaf
level
level
endl
return
0
bool
rtree
generatembrfromnode
struct
node
node
struct
rect
mbr
rect
true
ok
false
otherwise
like
node
boxes
assert
null
node
assert
null
mbr
rect
bool
res
false
float
min
dim
max
dim
int
dims
0
dims
numdims
dims
dimension
get
max
min
values
min
dim
node
branch
0
rect
boundary
dims
max
dim
node
branch
0
rect
boundary
dims
numdims
int
0
icount
go
branches
node
branch
rect
boundary
dims
min
dim
min
dim
node
branch
rect
boundary
dims
node
branch
rect
boundary
dims
numdims
max
dim
max
dim
node
branch
rect
boundary
dims
numdims
res
true
mbr
rect
boundary
dims
min
dim
mbr
rect
boundary
dims
numdims
max
dim
return
res
void
rtree
print
rect
ostream
os
struct
rect
rect
bool
add
endl
os
int
0
ilevel
1
high
level
nodes
0
icount
createspheres
branch
child
invoke
create
spheres
children
else
assert
level
1
0
icount
centroid
center
branch
rect
branch
radius
computeradius
centroid
branch
child
int
rtree
rtreedump
char
dumpfile
int
dumpcount
fp
fopen
dumpfile
dumpcount
dump
treeroot
fclose
fp
return
dumpcount
int
rtree
dump
struct
node
struct
node
int
nodecount
0
int
level
0
internal
node
tree
fwrite
count
sizeof
int
1
fp
fwrite
level
sizeof
int
1
fp
0
count
fwrite
branch
rect
sizeof
struct
rect
1
fp
0
count
nodecount
nodecount
dump
branch
child
1
rtreefreenode
return
nodecount
else
leaf
node
fwrite
count
sizeof
int
1
fp
fwrite
level
sizeof
int
1
fp
0
icount
fwrite
branch
rect
sizeof
struct
rect
1
fp
0
icount
fwrite
branch
child
sizeof
struct
node
1
fp
rtreefreenode
return
0
inserts
new
data
rectangle
index
structure
recursively
descends
tree
propagates
splits
back
returns
0
node
split
old
node
updated
node
split
returns
1
sets
pointer
pointed
new
node
point
new
node
old
node
updated
become
one
two
level
argument
specifies
number
steps
leaf
level
insert
data
rectangle
goes
level
0
static
int
rtreeinsertrect2
struct
rect
int
tid
struct
node
struct
node
new
node
int
level
register
struct
rect
register
int
tid
tid
register
struct
node
new
node
new
node
register
int
level
level
register
int
struct
branch
struct
node
n2
assert
new
node
assert
level
0
level
level
still
level
insertion
go
tree
recursively
level
level
rtreepickbranch
rtreeinsertrect2
tid
branch
child
n2
level
child
split
branch
rect
rtreecombinerect
branch
rect
return
0
else
child
split
branch
rect
rtreenodecover
branch
child
child
n2
rect
rtreenodecover
n2
return
rtreeaddbranch
new
node
else
level
level
reached
level
insertion
add
rect
split
necessary
rect
child
struct
node
tid
child
field
leaves
contains
tid
data
record
return
rtreeaddbranch
new
node
else
supposed
happen
assert
false
return
0
int
rtree
rtreeinsertrect
struct
rect
int
tid
struct
node
rootnode
rootnode
treeroot
return
rtreeinsertrect
tid
rootnode
0
insert
data
rectangle
index
structure
rtreeinsertrect
provides
splitting
root
returns
1
root
split
0
level
argument
specifies
number
steps
leaf
level
insert
data
rectangle
goes
level
0
rtreeinsertrect2
recursion
int
rtree
rtreeinsertrect
struct
rect
int
tid
struct
node
root
int
level
struct
rect
int
tid
tid
struct
node
root
root
int
level
level
int
struct
node
newroot
struct
node
newnode
struct
branch
int
result
level
0
int
yy
1
assert
root
assert
level
0
level
level
0
iboundary
assert
boundary
boundary
numdims
rtreeinsertrect2
tid
root
newnode
level
root
split
newroot
rtreenewnode
grow
new
root
tree
taller
treeroot
newroot
newroot
level
root
level
1
rect
rtreenodecover
root
child
root
rtreeaddbranch
newroot
null
rect
rtreenodecover
newnode
child
newnode
rtreeaddbranch
newroot
null
root
newroot
result
1
else
result
0
return
result
allocate
space
node
list
used
deletrect
store
nodes
empty
static
struct
listnode
rtreenewlistnode
return
struct
listnode
malloc
sizeof
struct
listnode
return
new
listnode
static
void
rtreefreelistnode
struct
listnode
free
delete
add
node
reinsertion
list
branches
will
later
reinserted
index
structure
static
void
rtreereinsert
struct
node
struct
listnode
ee
register
struct
listnode
rtreenewlistnode
node
next
ee
ee
delete
rectangle
non
root
part
index
structure
called
rtreedeleterect
descends
tree
recursively
merges
branches
way
back
static
int
rtreedeleterect2
struct
rect
int
tid
struct
node
struct
listnode
ee
register
struct
rect
register
int
tid
tid
register
struct
node
register
struct
listnode
ee
ee
register
int
assert
ee
assert
tid
0
assert
level
0
level
0
leaf
node
0
nodecard
branch
child
rtreeoverlap
branch
rect
rtreedeleterect2
tid
branch
child
ee
branch
child
count
minfill
branch
rect
rtreenodecover
branch
child
else
enough
entries
child
eliminate
child
node
rtreereinsert
branch
child
ee
rtreedisconnectbranch
return
0
return
1
else
leaf
node
0
nodecard
branch
child
branch
child
struct
node
tid
rtreedisconnectbranch
return
0
return
1
delete
data
rectangle
index
structure
pass
pointer
rect
tid
record
ptr
ptr
root
node
returns
1
record
found
0
success
rtreedeleterect
provides
eliminating
root
int
rtree
rtreedeleterect
struct
rect
int
tid
struct
node
nn
register
struct
rect
register
int
tid
tid
register
struct
node
nn
nn
register
int
register
struct
node
tmp
node
ptr
struct
listnode
reinsertlist
null
register
struct
listnode
assert
nn
assert
nn
assert
tid
0
rtreedeleterect2
tid
nn
reinsertlist
found
deleted
data
item
reinsert
branches
eliminated
nodes
reinsertlist
tmp
node
ptr
reinsertlist
node
0
nodecard
tmp
node
ptr
branch
child
rtreeinsertrect
tmp
node
ptr
branch
rect
int
tmp
node
ptr
branch
child
nn
tmp
node
ptr
level
reinsertlist
reinsertlist
reinsertlist
next
rtreefreenode
node
rtreefreelistnode
check
redundant
root
leaf
1
child
eliminate
nn
count
1
nn
level
0
0
nodecard
tmp
node
ptr
nn
branch
child
tmp
node
ptr
break
assert
tmp
node
ptr
rtreefreenode
nn
nn
tmp
node
ptr
return
0
else
return
1
searching
functions
generic
search
counts
accesses
int
rtree
rtreesearch
struct
rect
long
diskacc
vector
answers
int
rtree
rtreesearch
struct
rect
vector
answers
long
disk
acc
10
struct
node
rootnode
rootnode
treeroot
return
rtreesearch
rootnode
disk
acc
answers
search
index
tree
subtree
data
retangles
overlap
argument
rectangle
returns
number
qualifying
data
rects
int
rtree
rtreesearch
struct
node
struct
rect
long
diskacc
vector
answers
struct
node
struct
rect
int
hitcount
0
struct
point
querypoint
centroid
float
maxradius
0
0
assert
assert
level
0
assert
maxradius
boundary
numdims
boundary
0
rangefactor
0
iboundary
boundary
numdims
2
level
0
internal
node
tree
0
ilevel
1
use
conditions
branch
child
rtreeoverlap
querypoint
branch
rect
maxradius
dist
metric
centroid
center
branch
rect
distance
querypoint
centroid
dist
metric
branch
radius
maxradius
printf
accessing
node
level
level
diskacc
level
hitcount
rtreesearch
branch
child
diskacc
answers
else
branch
child
rtreeoverlap
querypoint
branch
rect
maxradius
dist
metric
printf
accessing
node
level
level
diskacc
level
hitcount
rtreesearch
branch
child
diskacc
answers
else
leaf
node
0
ibranch
child
rtreeoverlap
branch
rect
branch
child
rtreeoverlap
querypoint
branch
rect
maxradius
dist
metric
printf
accessing
node
level
level
diskacc
level
hitcount
answers
push
back
int
branch
child
added
chen
li
return
hitcount
join
search
int
rtree
searchjoinopen
rtree
rt
distancefunction
df
float
max
join
dist
long
diskacc1
long
disk
acc
length1
disk
tree
1
long
diskacc2
long
disk
acc
length2
disk
tree
2
long
cpu
computations
long
cpu
computations
length
per
level
long
cpu
comps
total
total
distance
computations
join
tree
rt
1
parner
tree
join
2
join
dist
func
df
retain
distance
function
join
max
distance
max
join
dist
init
variables
join
disk
acc
length1
disk
acc
length1
preserve
later
copy
join
disk
acc1
diskacc1
join
disk
acc
length2
disk
acc
length2
preserve
later
copy
join
disk
acc2
diskacc2
join
cpu
comp
cpu
computations
preserve
later
copy
join
cpu
comp
length
cpu
computations
length
join
cpu
comp
total
cpu
comps
total
int
0
itreeroot
r1
bounding
box
generatembrfromnode
join
tree
treeroot
r2
bounding
box
index
print
rect
cout
r1
print
rect
cout
r2
gonna
print
bboxes
bootstrap
priority
queue
first
pair
roots
joinelement
el
el
first
node
treeroot
el
first
mbr
r1
el
first
id
1
el
first
data
false
data
point
el
first
target
node
explored
false
looked
children
el
second
node
join
tree
treeroot
el
second
mbr
r2
el
second
id
1
el
second
data
false
data
point
el
second
target
node
explored
false
looked
children
el
dist
0
0
two
roots
forced
0
distance
first
get
queues
null
join
pqueue
delete
join
pqueue
old
nuke
null
join
already
returned
delete
join
already
returned
old
nuke
join
pqueue
new
joinpqueue
get
new
queue
join
already
returned
new
joinpqueue
get
new
queue
count
join
disk
acc1
el
first
node
level
join
disk
acc2
el
second
node
level
roots
join
cpu
comp
total
'computed
distance
roots'
join
pqueue
push
el
bootstrap
join
active
query
true
ok
set
mark
return
0
exploration
model
can
symmetric
explore
sides
2
symmetric
void
rtree
join
aux
point
point
joinelement
el
join
pair
result
item
int
exploration
model
handle
final
point
point
regardless
exploration
model
1
1
assert
el
first
data
el
second
data
points
assert
null
el
first
node
null
el
second
node
ensure
correctness
assert
el
first
target
node
explored
assert
el
second
target
node
explored
item
distance
el
dist
item
first
id
el
first
id
item
first
rect
el
first
mbr
item
second
id
el
second
id
item
second
rect
el
second
mbr
void
rtree
join
aux
node
node
joinelement
jointerm
first
joinelement
jointerm
second
joinelement
el
bool
swap
int
exploration
model
compares
internal
nodes
tree
assert
first
data
assert
second
data
none
point
assert
first
node
null
second
node
null
valid
assert
first
node
level
0
first
internal
node
assert
second
node
level
0
second
also
node
joinelement
el
aux
int
0
ithe
node
count
int
0
jthe
node
count
el
aux
first
node
first
node
branch
child
el
aux
first
mbr
first
node
branch
rect
el
aux
first
id
1
el
aux
first
data
false
another
node
el
aux
first
target
node
explored
false
el
aux
second
node
second
node
branch
child
el
aux
second
mbr
second
node
branch
rect
el
aux
second
id
1
el
aux
second
data
false
node
el
aux
second
target
node
explored
false
note
order
second
one
assumed
mbr
first
query
point
el
aux
dist
join
dist
func
rectangle
mindist
el
aux
first
mbr
el
aux
second
mbr
null
join
max
distance
el
aux
dist
join
max
distance
null
join
max
distance
join
pqueue
push
el
aux
join
cpu
comp
total
accounting
n1
n2
computations
misc
accounting
crap
1
io
per
node
join
disk
acc1
first
node
level
join
disk
acc2
second
node
level
remember
got
mark
explored
el
first
target
node
explored
el
second
target
node
explored
true
void
rtree
join
aux
node
leaf
joinelement
jointerm
first
joinelement
jointerm
second
joinelement
el
bool
swap
int
exploration
model
compares
internal
node
tree
leaf
assert
first
data
assert
second
data
none
point
assert
first
node
null
second
node
null
valid
assert
first
node
level
0
first
internal
node
assert
second
node
level
0
second
one
leaf
joinelement
el
aux
int
0
ithe
node
count
int
0
jthe
node
count
el
aux
first
node
first
node
branch
child
el
aux
first
mbr
first
node
branch
rect
el
aux
first
id
1
el
aux
first
data
false
el
aux
first
target
node
explored
false
el
aux
second
node
null
el
aux
second
mbr
second
node
branch
rect
el
aux
second
id
int
second
node
branch
child
el
aux
second
data
true
data
item
el
aux
second
target
node
explored
true
explore
note
order
second
one
assumed
mbr
first
point
el
aux
dist
join
dist
func
compute
mindist
el
aux
second
mbr
el
aux
first
mbr
null
join
max
distance
el
aux
dist
join
max
distance
null
join
max
distance
join
pqueue
push
el
aux
join
cpu
comp
total
accounting
n1
n2
computations
misc
accounting
crap
1
io
per
node
join
disk
acc1
first
node
level
join
disk
acc2
second
node
level
remember
got
mark
explored
el
first
target
node
explored
el
second
target
node
explored
true
void
rtree
join
aux
leaf
leaf
joinelement
jointerm
first
joinelement
jointerm
second
joinelement
el
bool
swap
int
exploration
model
compares
two
leaves
assert
first
data
assert
second
data
none
point
assert
first
node
null
second
node
null
valid
assert
first
node
level
0
first
one
leaf
assert
second
node
level
0
second
one
leaf
joinelement
el
aux
int
0
ithe
node
count
int
0
jthe
node
count
el
aux
first
node
null
el
aux
first
mbr
first
node
branch
rect
el
aux
first
id
int
first
node
branch
child
el
aux
first
data
true
data
item
el
aux
first
target
node
explored
true
explore
el
aux
second
node
null
el
aux
second
mbr
second
node
branch
rect
el
aux
second
id
int
second
node
branch
child
el
aux
second
data
true
data
item
el
aux
second
target
node
explored
true
explore
considered
points
el
aux
dist
join
dist
func
compute
distance
el
aux
second
mbr
el
aux
first
mbr
null
join
max
distance
el
aux
dist
join
max
distance
null
join
max
distance
join
pqueue
push
el
aux
join
cpu
comp
total
accounting
n1
n2
computations
misc
accounting
crap
1
io
per
node
join
disk
acc1
first
node
level
join
disk
acc2
second
node
level
remember
got
mark
explored
el
first
target
node
explored
el
second
target
node
explored
true
void
rtree
join
aux
leaf
point
joinelement
jointerm
first
joinelement
jointerm
second
joinelement
el
bool
swap
int
exploration
model
compares
leaf
point
first
leaf
second
point
assert
first
data
assert
second
data
second
point
assert
first
node
null
valid
assert
first
node
level
0
first
leaf
assert
second
node
null
second
one
point
joinelement
el
aux
int
0
ithe
node
count
el
aux
first
node
null
el
aux
first
mbr
first
node
branch
rect
el
aux
first
id
int
first
node
branch
child
el
aux
first
data
true
data
item
el
aux
first
target
node
explored
true
explore
el
aux
second
node
second
node
el
aux
second
mbr
second
mbr
el
aux
second
id
second
id
el
aux
second
data
second
data
el
aux
second
target
node
explored
second
target
node
explored
considered
points
el
aux
dist
join
dist
func
compute
distance
el
aux
second
mbr
el
aux
first
mbr
null
join
max
distance
el
aux
dist
join
max
distance
null
join
max
distance
join
pqueue
push
el
aux
join
cpu
comp
total
accounting
n1
n2
computations
misc
accounting
crap
1
io
per
node
join
disk
acc1
first
node
level
join
disk
acc2
second
node
level
just
copied
second
remember
got
mark
explored
el
first
target
node
explored
el
second
target
node
explored
true
void
rtree
join
aux
node
point
joinelement
jointerm
first
joinelement
jointerm
second
joinelement
el
bool
swap
int
exploration
model
compares
internal
node
point
first
node
second
point
assert
first
data
assert
second
data
second
point
assert
first
node
null
valid
assert
first
node
level
0
first
node
assert
second
node
null
second
one
point
joinelement
el
aux
int
0
ithe
node
count
el
aux
first
node
first
node
branch
child
el
aux
first
mbr
first
node
branch
rect
el
aux
first
id
1
el
aux
first
data
false
data
el
aux
first
target
node
explored
false
el
aux
second
node
second
node
el
aux
second
mbr
second
mbr
el
aux
second
id
second
id
el
aux
second
data
second
data
el
aux
second
target
node
explored
second
target
node
explored
note
order
second
one
assumed
mbr
first
point
el
aux
dist
join
dist
func
compute
mindist
el
aux
second
mbr
el
aux
first
mbr
null
join
max
distance
el
aux
dist
join
max
distance
null
join
max
distance
join
pqueue
push
el
aux
join
cpu
comp
total
accounting
n1
n2
computations
misc
accounting
crap
1
io
per
node
join
disk
acc1
first
node
level
join
disk
acc2
second
node
level
just
copied
second
io
remember
got
mark
explored
el
first
target
node
explored
el
second
target
node
explored
true
int
rtree
searchjoinnext
float
distance
join
pair
result
item
assert
join
active
query
assert
null
join
dist
func
assert
null
join
pqueue
assert
null
join
already
returned
joinelement
el
el
aux
joinelement
jointerm
first
null
second
null
term
null
bool
swap
false
needed
functions
can
called
exckanged
trees
int
em
1
explore
model
join
pqueue
size
0
still
stuff
el
join
pqueue
top
get
top
first
el
first
alias
second
el
second
alias
join
pqueue
pop
dispose
swap
false
first
data
second
data
points
assemble
return
join
aux
point
point
el
item
em
distance
item
distance
join
already
returned
push
el
ok
processed
already
return
1
else
null
first
node
null
second
node
leaf
node
assert
first
data
assert
second
data
none
point
first
node
level
0
second
node
level
0
join
aux
node
node
first
second
el
swap
em
internal
nodes
else
first
node
level
0
second
node
level
0
swap
true
join
aux
node
leaf
second
first
el
swap
em
first
leaf
second
internal
node
else
first
node
level
0
second
node
level
0
join
aux
node
leaf
first
second
el
swap
em
second
leaf
first
internal
node
else
first
node
level
0
second
node
level
0
join
aux
leaf
leaf
first
second
el
swap
em
second
leaf
first
internal
node
else
one
null
null
must
handled
elsewhere
bad
cout
first
first
node
endl
cout
second
second
node
endl
assert
first
data
second
data
must
allowed
assert
first
data
second
data
exactly
1
assert
null
first
node
null
second
node
null
first
node
null
second
node
1
null
first
node
null
second
node
swap
term
first
first
second
second
term
swap
true
else
nothing
swap
assert
null
first
node
null
second
node
assert
second
data
first
second
first
node
level
0
join
aux
node
point
first
second
el
swap
em
else
first
node
level
0
join
aux
leaf
point
first
second
el
swap
em
else
happen
assert
false
join
already
returned
push
el
ok
processed
already
return
0
queue
empty
int
rtree
searchjoinclose
assert
join
active
query
null
join
pqueue
delete
join
pqueue
old
nuke
join
pqueue
null
null
join
already
returned
delete
join
already
returned
old
nuke
join
already
returned
null
join
active
query
false
return
1
ok
int
rtree
searchjoinnewiteration
distancefunction
df
new
int
cpu
distance
comps
int
nodes
copied
int
reconstruct
model
assert
join
active
query
assert
null
join
dist
func
ensure
correct
state
return
1
ok
range
search
using
sphere
written
chen
li
int
rtree
rtreesearchsphere
struct
point
querypoint
float
radius
vector
answers
long
disk
acc
10
struct
node
rootnode
treeroot
return
rtreesearchsphere
rootnode
querypoint
radius
disk
acc
answers
search
index
tree
subtree
data
retangles
overlap
given
sphere
returns
number
qualifying
data
rects
int
rtree
rtreesearchsphere
struct
node
struct
point
querypoint
float
radius
long
diskacc
vector
answers
struct
node
int
hitcount
0
struct
rect
struct
point
querypoint
centroid
float
maxradius
0
0
assert
assert
level
0
assert
querypoint
maxradius
boundary
numdims
boundary
0
rangefactor
level
0
internal
node
tree
0
ilevel
1
use
conditions
branch
child
rtreeoverlapsphere
branch
rect
querypoint
radius
centroid
center
branch
rect
distance
querypoint
centroid
dist
metric
branch
radius
maxradius
printf
accessing
node
level
level
diskacc
level
hitcount
rtreesearchsphere
branch
child
querypoint
radius
diskacc
answers
else
branch
child
rtreeoverlapsphere
branch
rect
querypoint
radius
printf
accessing
node
level
level
diskacc
level
hitcount
rtreesearchsphere
branch
child
querypoint
radius
diskacc
answers
else
leaf
node
0
ibranch
child
rtreeoverlapsphere
branch
rect
branch
child
rtreeoverlapsphere
branch
rect
querypoint
radius
printf
accessing
node
level
level
diskacc
level
hitcount
answers
push
back
int
branch
child
added
chen
li
return
hitcount
