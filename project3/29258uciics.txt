notation growth rates 
notation growth rates 
notation
growth
rates
ics
23
cs
161
major
goal
design
analysis
efficient
solutions
problems
first
might
appear
hard
make
precise
statements
amount
time
used
solutions
without
knowing
details
machine
will
running
one
machine
problem
might
take
hour
solve
faster
machine
problem
might
take
minutes
although
may
able
say
exactly
long
algorithm
will
take
can
often
say
something
time
usage
will
depend
size
problem
example
procedure
traverse
list
might
take
amount
time
roughly
proportional
length
list
inefficient
sorting
procedure
might
take
time
proportional
square
number
elements
sorted
variety
notations
available
enable
us
make
precise
statements
rate
growth
function
even
know
exact
value
one
commonly
used
notations
growth
rate
notation
let
two
functions
discussion
assume
dealing
functions
whose
domain
nonnegative
integers
also
always
assume
assumes
nonnegative
values
formally
write
means
exists
positive
constant
exists
value
n0
n0
informally
means
gives
upper
bound
provided
ignore
constant
factors
us
ignore
finitely
many
values
n0
us
ignore
sign
function
absolute
value
signs
example
formal
use
notation
show
3n2
7n
n2
note
view
formal
definition
means
will
need
show
exist
values
0
n0
n0
3n2
7n
n2
note
hope
making
true
unless
pick
greater
3
try
4
need
show
large
3n2
7n
4n2
equivalent
7n
n2
certainly
true
7
putting
together
pick
4
0
n0
7
n0
3n2
7n
3n2
7n
3n2
n2
4n2
cn2
just
need
match
definition
certain
types
statements
might
like
make
difficult
make
notation
example
might
want
say
certain
type
sorting
algorithm
must
worst
case
use
amount
time
least
proportional
log
saying
worst
case
time
least
log
appropriate
since
notation
provides
upper
bound
£s
notation
provides
solution
problem
write
£s
means
exists
0
n0
n0
informally
means
gives
lower
bound
provided
ignore
constant
factors
ignore
small
values
note
notation
sign
matter
take
absolute
values
now
can
say
algorithm
uses
£s
log
time
worst
case
will
mean
worst
case
time
usage
grows
rate
least
proportional
log
finally
often
useful
able
make
statements
sort
described
least
proportional
proportional
write
£c
means
exists
c1
0
c2
0
n0
n0
c1
c2
example
use
notation
suppose
wanted
describe
growth
rate
1
i4
probably
obvious
obtain
exact
formula
will
satisified
correct
£c
notation
solution
relatively
easy
view
definition
£c
notation
need
find
c1
c2
n0
n0
c1
1
i4
c2
first
work
upper
bound
note
1
i4
1
n4
n5
just
let
c2
1
right
inequality
will
hold
0
let
n5
get
lower
bound
can
add
last
half
terms
note
1
i4
1
2
i4
1
2
1
2
4
1
2
5
n5
25
n5
32
thus
let
c1
1
32
lower
bound
will
hold
well
0
thus
can
let
c1
1
32
c2
1
n0
0
definition
obtain
1
i4
£c
n5
one
final
bit
notation
accurate
indicates
appropriate
value
proportionality
constant
large
write
limn
¡Û
1
review
definition
limit
will
see
assuming
0
beyond
point
equivalent
£`
0
exists
n0
n0
1
£`
1
£`
note
similar
£c
notation
makes
much
stronger
statement
since
let
£`
become
arbitrarily
small
note
notation
well
£s
can
conclude
clearly
work
dealing
notation
example
2n
9
obviously
true
2n
9
problem
common
use
equality
symbol
notation
really
correct
better
way
think
knuth
interpret
referring
set
functions
namely
satisfy
definition
thus
better
write
member
2n
9
member
now
see
problem
goes
away
just
saying
2n
9
set
unfortunately
many
books
articles
including
text
use
equality
notation
will
follow
convention
class
use
notations
varies
somewhat
book
book
definitions
using
based
knuth
acknowledgement
discussion
derived
handout
developed
professor
lueker
dan
hirschberg
last
modified
jan
29
2006
