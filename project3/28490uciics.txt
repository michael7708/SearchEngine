user account virtual collaboration portal 
register 
virtual
collaboration
portal
homegroupscollaborators
search
site
navigation
bibliographyauthorskeywordsreading
listsweb
linksgalleryrecent
postsacknowledgements
home
user
account
user
account
create
new
accountlog
inrequest
new
password
account
information
username
spaces
allowed
punctuation
allowed
except
periods
hyphens
underscores
mail
address
valid
mail
address
mails
system
will
sent
address
mail
address
made
public
will
used
wish
receive
new
password
wish
receive
certain
news
notifications
mail
webcam
chat
terms
conditionsas
member
virtual
collaboration
portal
may
granted
access
utilize
webcam
chat
services
provided
courtesy
camamba
continuing
registration
process
hereby
acknowledge
understand
accept
following
virtual
collaboration
portal
reserves
right
exclude
anyone
service
without
noticeyou
responsible
keeping
content
webcam
line
local
lawsyou
may
also
bound
terms
service
can
found
clicking
personal
safety
security
account
information
agree
terms
written
heretofore
membership
request
virtual
collaboration
portal
will
declined
agree
said
terms
agree
said
terms
entirety
groups
join
dvas
join
game
lab
join
isr
join
opensim
join
software
architecture
join
uci
dip
personal
information
full
name
affiliation
website
ough
practical
limitations
reality
run
time
stacks
pre
allocated
maximum
size
can
least
one
megabyte
practical
effect
program
can
carry
multiple
separate
tasks
simultaneously
simultaneity
achieved
literally
running
threads
separate
processors
least
many
processors
threads
timeslicing
rapidly
switching
one
processor
can
contribute
work
one
thread
threads
processors
first
confronted
notion
reasonable
question
ask
want
program
able
one
thing
time
variety
reasons
reasons
machine
multiple
processors
something
gradually
becoming
norm
personal
computers
already
much
norm
higher
powered
servers
one
processor
can
execute
parts
program
simultaneously
current
trends
lead
future
even
personal
computers
may
well
large
number
processors
want
programs
able
make
use
single
java
thread
can
keep
single
processor
busy
four
processors
machine
3
4
processing
power
sit
idle
even
theoretically
work
even
machine
single
processor
multiple
threads
used
judiciously
can
valuable
design
aid
allowing
us
take
disparate
tasks
separate
threads
code
task
interwined
code
one
place
need
arises
programs
graphical
user
interfaces
example
ui
related
code
java
based
graphical
user
interface
using
java's
swing
library
required
run
thread
long
running
tasks
must
run
separate
thread
allow
ui
remain
responsive
tasks
proceed
program
can
broken
completely
autonomous
tasks
communicate
passing
messages
back
forth
can
broken
separate
programs
run
together
distributed
system
separate
machines
messages
sent
network
instead
just
copied
one
memory
location
another
tremendous
scalability
benefits
1
000
machines
enough
work
keep
busy
time
can
get
work
done
1
000
times
faster
single
machine
course
never
really
achieve
1
000x
speedup
since
time
spent
creating
sending
receiving
messages
quite
possibly
time
spent
machine
waiting
another
machine
work
must
done
can
continue
speedup
can
still
dramatic
especially
can
get
lot
machines
work
together
problem
easily
divisible
individual
independent
units
work
machines
folding
home
example
asks
people
world
donate
spare
computing
resources
times
machines
anything
else
work
achieving
deeper
understanding
diseases
like
alzheimer's
mad
cow
parkinson's
seti
home
similar
project
devoted
finding
evidence
intelligent
extra
terrestrial
life
concurrency
achieved
java
using
threads
achieved
variety
mechanisms
programming
languages
will
central
theme
programming
language
design
software
engineering
coming
years
assignment
begins
exploration
topic
concurrency
asking
write
multi
threaded
java
program
particular
exploring
concepts
underlying
shared
state
concurrency
threads
share
objects
way
communicating
one
another
exploration
will
done
within
context
simulation
rudimentary
operating
system
booos
operating
system
one
primary
jobs
operating
system
manage
access
various
resources
typical
personal
computer
resources
include
display
input
devices
keyboard
mouse
memory
disk
drives
external
storage
speakers
network
adapters
access
must
managed
even
face
concurrent
attempts
multiple
programs
use
resources
one
program
writing
file
programs
may
prohibited
also
writing
file
one
program
attempting
play
sound
speakers
sounds
may
mixed
played
together
operating
system
assignment
called
booos
booos
manage
resources
personal
computer
little
instead
focuses
three
things
files
store
information
can
read
written
printers
print
information
hard
copy
form
programs
purposes
read
write
files
print
printers
booos
can
run
number
programs
simultaneously
sequence
operations
either
file
creations
file
reads
file
writes
line
prints
printing
one
line
output
printer
calculations
one
program
permitted
print
printer
time
similarly
two
programs
can
access
file
time
file
printer
operations
instantaneous
take
time
booos
job
making
sure
programs
attempt
access
file
suspended
another
program
already
accessing
fairness
considerations
booos
suppose
program
begins
accessing
file
access
proceeding
program
attempts
access
file
blocked
just
program
also
attempts
access
file
blocked
program
a's
access
completes
either
program
program
can
chosen
gain
access
file
next
rule
applies
printers
program
booos
simulator
assignment
asked
write
booos
simulator
capable
executing
multiple
simultaneous
programs
consist
sequences
five
operations
file
creations
file
reads
file
writes
line
prints
sleeps
periods
program
inactive
sleeps
simulate
calculations
program
might
performing
file
printer
accesses
simulator
though
concerned
calculations
values
produce
initially
simulator
reads
input
file
consists
set
programs
execute
programs
begin
immediately
simulator
finishes
reading
last
one
simulator
assume
booos
running
hardware
platform
following
characteristics
characteristics
slow
relative
realistic
computer
hardware
serve
slow
simulation
point
can
see
along
way
creating
file
already
exist
takes
300
milliseconds
already
exist
attempt
create
fails
silently
reading
file
program
gains
access
takes
150
milliseconds
writing
file
program
gains
access
takes
200
milliseconds
limitation
number
files
can
exist
given
time
files
sequences
characters
initially
filled
spaces
first
created
printing
line
output
printer
program
gains
access
takes
least
1000
milliseconds
actual
duration
determined
length
line
always
exactly
one
printer
connected
machine
simulator
will
store
files
memory
rather
disk
printer
output
will
written
text
file
rather
printed
actual
printer
simulator
required
print
output
console
might
find
useful
print
output
whenever
anything
interesting
happens
program
starts
program
ends
program
begins
read
operation
program
finishes
read
operation
aware
system
println
method
provides
synchronized
access
console
automatically
call
println
blocks
threads
printing
console
done
however
want
print
line
output
console
using
multiple
calls
system
print
may
find
output
one
thread
will
interleaved
output
another
reason
better
build
entire
line
output
string
print
string
using
one
single
call
system
println
input
file
format
example
input
file
simulator
follows
italicized
portions
example
considered
part
input
file
included
explain
file's
contents
2
number
programs
firstprogram
name
first
program
create
file1
100
create
file
called
file1
size
100
bytes
write
file1
0
write
character
'c'
byte
0
file
file1
read
file1
10
read
position
10
file1
sleep
200
sleep
200
milliseconds
write
file1
10
write
character
'f'
byte
10
file
file1
print
file1
print
contents
file1
printer
one
line
end
end
firstprogram
program2
name
second
program
create
file2
10
create
file
called
file2
size
10
bytes
write
file2
0
write
character
'x'
byte
0
file
file2
sleep
300
sleep
300
milliseconds
write
file2
1
write
character
'y'
byte
1
file
file2
print
file2
print
contents
file2
printer
one
line
sleep
500
sleep
500
milliseconds
print
file1
print
contents
file1
printer
one
line
end
end
secondprogram
general
format
input
file
follows
number
line
indicating
many
programs
will
running
program
single
word
line
indicating
name
program
can
assume
program
names
will
unique
sequence
commands
one
per
line
taken
following
set
create
filename
size
filename
single
word
size
positive
integerread
filename
offset
filename
single
word
offset
positive
integerwrite
filename
offset
character
filename
single
word
offset
positive
integer
character
single
characterprint
filename
filename
single
wordsleep
duration
duration
positive
integerend
program
ends
end
command
permitted
appear
end
program
may
assume
input
file
properly
formatted
according
rules
though
course
may
assume
input
files
testing
program
will
look
exactly
like
example
file
shown
precise
semantics
commands
semantics
command
follow
create
filename
size
creates
new
file
called
filename
whose
size
given
size
meaning
file
stores
size
characters
initially
file
consists
spaces
file
name
already
exists
least
big
size
bytes
command
nothing
file
name
already
exists
smaller
size
bytes
existing
file
resized
size
bytes
spaces
used
fill
new
area
creation
successful
either
new
file
created
existing
file
extended
block
currently
running
program
300
milliseconds
read
filename
offset
reads
character
given
offset
file
whose
name
filename
fails
silently
file
name
filename
exists
offset
within
bounds
file
file
exists
block
currently
running
program
150
milliseconds
write
filename
offset
character
writes
character
character
offset
offset
file
whose
name
filename
fails
silently
file
name
filename
exists
offset
within
bounds
file
file
exists
block
currently
running
program
200
milliseconds
print
filename
prints
contents
file
whose
name
filename
output
file
containing
printer's
output
output
print
command
line
output
file
fails
silently
file
exist
file
exists
block
currently
running
program
1000
milliseconds
plus
one
millisecond
per
byte
file
example
file
length
300
bytes
block
currently
running
program
1300
milliseconds
note
printing
file
requires
locking
printer
file
duration
print
operation
sleep
duration
blocks
currently
running
program
duration
milliseconds
used
simulate
program
calculations
involve
system
resources
like
files
printers
end
ends
program
may
wondering
read
command
seem
real
use
since
commands
take
character
read
anything
remember
though
intent
provide
programming
language
just
simulate
interaction
multiple
programs
wanting
perform
input
output
devices
simultaneously
context
less
important
operations
important
occur
relative
one
another
simultaneous
operations
affect
one
another
running
simulator
main
method
written
class
called
simulator
accept
two
command
line
parameters
name
input
file
containing
programs
execute
name
output
file
printer
output
written
able
run
program
command
line
using
following
command
java
simulator
input1
txt
output1
txt
course
free
replace
input1
txt
name
properly
formatted
input
file
like
test
simulator
output1
txt
name
output
file
like
design
requirements
exploration
concurrency
need
use
multiple
threads
solution
furthermore
exploration
shared
state
concurrency
also
need
shared
objects
requiring
following
basic
design
simulator
main
thread
simulator
starts
read
input
file
create
start
one
thread
program
needs
executed
fine
store
contents
program
arraylist
string
parse
execute
can
use
complex
solution
command
pattern
prefer
start
threads
one
another
start
read
programs
files
printer
represented
shared
objects
note
anything
special
java
share
objects
objects
shared
default
threads
share
heap
need
ensure
threads
accessing
object
file
object
printer
use
map
hashmap
treemap
store
mapping
filenames
file
objects
forget
use
generics
hashmap
string
boofile
java
synchronization
coordination
primitives
synchronized
keyword
wait
notify
used
coordinate
activities
programs
can
use
whichever
combination
primitives
think
appropriate
ensure
simulation's
threading
related
guarantees
met
sure
just
sprinkling
synchronized
keyword
throughout
program
use
right
thing
use
avoid
deliverables
need
submit
java
source
files
java
including
provided
submit
compiled
versions
program
files
generated
development
environment
follow
link
discussion
submit
assignment
remember
accept
paper
submissions
assignments
accept
via
email
circumstances
tweaks
additional
requirements
added
alex
thornton
summer
2009
originally
written
alex
thornton
fall
2007
based
idea
raymond
klefstad
