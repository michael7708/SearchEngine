avl splay trees 
dynamic binary search trees 
dynamic
binary
search
trees
rotations
rotating
right
left
binary
search
tree
illustrated
note
tree
maintains
characteristics
binary
search
tree
rotate
xy
3
1
rotate
xy
1
2
double
rotate
xzy
1
rotate
xz
2
rotate
yz
avl
trees
height
balanced
trees
avl
adelson
velskii
landis
tree
binary
search
tree
heights
right
left
subtrees
node
differ
1
height
leaf
children
defined
0
height
empty
tree
nodes
defined
1
can
shown
induction
height
avl
tree
nodes
satisfies
lg
1
1
1
44
lg
2
1
balance
factor
node
defined
height
rightsubtree
height
leftsubtree
thus
avl
tree
balance
factor
node
will
1
0
1
insertion
avl
tree
may
change
change
balance
factors
nodes
path
inserted
node
root
balance
factor
will
change
1
resulting
value
might
become
illegal
2
2
determining
deepest
node
illegal
one
single
one
double
rotation
suffices
fix
entire
tree
details
deletion
avl
tree
handled
similarly
lg
rotations
may
required
weight
balanced
trees
instead
height
weight
number
nodes
balanced
balance
can
maintained
using
rotations
similar
manner
splay
trees
splay
tree
binary
search
tree
explicit
balance
condition
special
operation
called
splay
done
search
insertion
operation
splaying
node
causes
node
become
root
binary
search
tree
specific
series
rotations
follows
three
cases
grandparent
zig
left
child
root
rotate
xy
else
right
child
root
rotate
yx
ll
rr
grandchild
zig
zig
left
child
left
child
rotate
grandfather
yz
rotate
father
xy
else
right
child
right
child
rotate
grandfather
yz
rotate
father
xy
become
root
continue
splaying
lr
rl
grandchild
zig
zag
right
child
left
child
rotate
father
yx
rotate
grandfather
xz
else
left
child
right
child
rotate
father
yx
rotate
grandfather
xz
become
root
continue
splaying
