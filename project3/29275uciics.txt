binary search trees 
binary search trees 
binary
search
trees
extended
binary
tree
obtained
normal
binary
tree
node
0
1
2
sons
depicted
circle
node
replacing
null
pointers
pointers
square
nodes
square
nodes
external
leaf
nodes
extended
binary
tree
original
cicrcle
nodes
internal
nodes
extended
binary
tree
internal
path
length
internal
node
length
path
root
keyi
total
number
key
comparisons
insertion
process
created
tree
nodes
equally
likely
looked
average
number
comparisons
successful
search
1
external
path
length
external
node
length
path
root
external
node
intervals
equally
likely
looked
average
number
comparisons
unsuccessful
search
1
theorem
2n
easy
proof
induction
left
reader
average
value
average
value
internal
path
length
worst
case
n2
best
case
log
let
xn
average
value
trees
nodes
assuming
permutations
input
values
create
tree
equally
likely
let
first
key
inserted
will
node
root
root
created
tree
will
two
subtrees
left
right
internal
paths
measured
sons
root
ileft
iright
ileft
iright
1
1
nodes
need
one
edge
measure
lengths
paths
root
average
value
ileft
xi
1
average
value
iright
xn
x0
0
1
xn
1
1
xi
1
1
xn
1
2
0
1
xi
1
recurrence
similar
quicksort
recurrence
solution
xn
2
1
hn
4n
2n
ln
result
average
value
2n
2
1
hn
2n
another
way
derive
formula
yet
another
way
see
knuth
vol
3
2nd
ed
427
standish
pp
104
5
let
dn
average
distance
leaf
avg
1
d0
0
add
new
key
various
ways
tree
replace
leaf
depth
len
two
leaves
depth
len
1
thereby
increasing
external
path
length
len
2
averaging
trees
1
internal
nodes
avg
en
avg
en
1
avg
len
2
avg
en
1
dn
1
2
dn
avg
en
1
ndn
1
dn
1
2
1
dn
1
2
1
dn
1
2
1
2
2
1
1
2hn
1
2
finally
avg
en
1
dn
2
1
hn
1
2
1
2
1
hn
2n
dan
hirschberg
last
modified
oct
28
2003
