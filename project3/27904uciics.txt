informatics 122 winter 2013 project 3 right middle design 
project 3 
informatics
122
winter
2013
news
course
reference
schedule
project
guide
code
examples
alex
informatics
122
winter
2013
project
3
right
middle
design
due
dates
times
thursday
february
14
5
00pm
project
done
individually
introduction
web
vast
collection
documents
information
piece
information
identified
uniform
resource
locator
url
urls
serve
multiple
purposes
identifying
unique
resource
somewhere
web
url
will
always
take
page
example
clicking
link
containing
url
will
take
resourceidentifying
machine
resource
can
found
well
identity
resource
machineserving
readable
perhaps
easy
remember
way
identify
resourcedescribing
resource
linked
human
reader
well
search
engines
descriptive
url
things
equal
can
often
result
link
appearing
higher
search
results
search
engines
like
googleare
easily
shareable
people
urls
serve
just
basic
purpose
providing
link
web
content
particular
url
like
http
www
ics
uci
edu
thornton
inf122
codeexamples
might
serve
purposes
well
others
depending
plan
use
url
might
design
differently
one
rather
extreme
use
urls
developed
recent
years
ability
include
short
messages
posted
twitter
sent
text
messages
length
url
becomes
major
factor
usability
many
urls
longer
140
characters
maximum
length
conventional
text
messages
messages
posted
via
twitter
urls
shorter
140
characters
still
long
write
meaningful
text
accompany
short
message
least
last
ten
years
url
shortener
services
available
url
shortener
acts
middleman
process
linking
resource
web
allowing
shortened
url
bit
ly
xqbwx2
refer
another
resource
already
longer
url
http
www
ics
uci
edu
thornton
inf122
codeexamples
url
shortener
service
redirects
shortened
urls
longer
counterparts
also
tracking
information
use
many
clicks
shortened
url
received
shortened
url
referred
etc
text
messaging
twitter
became
killer
app
url
shorteners
exploded
popularity
recent
years
project
asks
design
implement
small
program
uses
api
bit
ly
url
shortener
service
generate
popularity
metrics
implementation
sole
purpose
project
exploration
design
program
implementation
used
validate
design
provide
accomplished
feeling
finished
product
getting
started
bit
ly
creating
account
look
around
first
order
business
never
used
bit
ly
create
bit
ly
account
account
free
creating
straightforward
go
bit
ly
click
join
now
free
button
follow
screen
instructions
need
associate
account
valid
email
account
course
can
create
email
account
using
gmail
just
purposes
writing
project
like
created
bit
ly
account
look
around
bit
ly's
knowledge
base
gain
understanding
service
kinds
features
offers
necessarily
whenever
learning
new
service
library
will
end
needing
find
will
actually
need
know
order
solve
problem
however
kind
knowledge
building
endlessly
useful
throughout
career
find
quite
often
end
needing
knowledge
later
solve
new
problem
suggest
solution
someone
else
bit
ly
calls
shortened
urls
bitmarks
try
creating
bitmarks
via
web
interface
visit
bitmarks
directly
put
web
pages
click
links
even
share
others
take
look
kind
information
bit
ly
collections
presents
web
interface
using
bit
ly
api
acclimated
bit
ly
time
start
looking
bit
ly
api
bit
ly
api
described
dev
bitly
com
restful
api
essentially
means
api
can
use
visiting
urls
http
connections
way
browsers
visit
web
pages
downloading
results
one
different
formats
consequence
can
use
api
typing
urls
directly
web
browser
visiting
though
api's
operations
trickier
visit
way
others
particularly
implemented
http
post
requests
similarly
java
program
will
able
use
built
classes
java
library
url
urlconnection
make
api
calls
receive
results
can
use
bit
ly
api
need
register
application
bit
ly
will
provide
credentials
can
use
authentication
log
bit
ly
web
site
go
link
create
oauth
application
click
get
registration
code
button
will
send
email
registration
link
clicking
registration
link
will
allow
register
application
will
reveal
two
critical
pieces
information
needed
application
able
authenticate
bit
ly
client
id
client
secret
registered
application
make
note
two
pieces
information
need
later
authentication
oauth
recent
years
web
based
apis
converging
single
unified
standard
authentication
called
oauth
use
oauth
bit
ly
api
described
note
one
way
authentication
oauth
probably
interested
using
oauth
basic
authentication
flow
send
client
id
client
secret
registered
previously
along
username
password
returned
access
token
can
use
subsequent
calls
api
api
rate
limits
avoiding
running
bit
ly
api
will
allow
make
limited
number
calls
given
length
time
see
link
rate
limits
best
approach
avoid
running
limits
use
unit
testing
stubs
mocks
majority
implementation
work
using
actual
api
one
small
part
testing
effort
way
find
making
many
api
calls
will
prevent
ever
running
limits
note
libraries
wrap
bit
ly
api
basic
interface
bit
ly
via
http
web
calls
called
client
libraries
wrap
calls
easy
use
classes
methods
functions
variety
programming
languages
kinds
libraries
course
excellent
tools
practical
projects
save
time
energy
later
quarter
will
explore
use
third
party
libraries
make
good
choices
however
since
goal
explore
design
program
requires
use
external
resources
libraries
strictly
limits
project
use
download
look
considering
design
implementation
can
like
use
json
java
librari
plan
consume
bit
ly
results
json
format
keep
things
simple
feel
free
add
source
code
directly
git
repository
rather
worrying
jar
files
parsing
json
straightforward
well
beyond
scope
trying
accomplish
prefer
xml
fine
java
library
xml
processors
built
problem
project
will
design
program
applies
simple
popularity
metrics
set
bit
ly
links
project
2
program
will
console
mode
user
interface
though
welcome
implement
graphical
user
interface
time
prefer
go
console
route
commands
will
need
support
decide
build
graphical
user
interface
need
least
equivalent
functionality
program
will
provide
ability
small
handful
tasks
bit
ly
specify
username
passwordcreate
bitmark
create
shortened
version
url
expand
bitmark
retrieve
full
url
corresponding
shortened
one
generate
popularity
metrics
list
watched
bitmarks
console
user
interface
must
consist
following
commands
commanddescriptionlogin
username
passwordsets
username
password
used
connecting
bit
ly
api
set
connections
bit
ly
api
alloewd
note
possible
use
command
multiple
times
call
bit
ly
api
use
recent
username
password
username
password
combination
invalid
print
invalid
console
otherwise
print
welcome
logoutclears
username
password
used
connecting
bit
ly
api
cleared
longer
possible
connect
bit
ly
api
another
login
performed
bitmark
urlasks
bit
ly
create
bitmark
url
shortened
url
printed
console
upon
success
expand
shortened
urlasks
bit
ly
expand
shortened
url
prints
full
url
console
watch
shortened
urladds
shortened
url
watch
list
list
shortened
urls
metrics
generated
unwatch
shortened
urlremoves
shortened
url
watch
list
subsequent
commands
generate
metrics
will
include
hourshows
list
shortened
urls
watch
list
number
times
clicked
last
hour
sorted
descending
order
number
clicks
weekshows
list
shortened
urls
watch
list
number
times
clicked
last
week
sorted
descending
order
number
clicks
basic
design
goals
section
course
lectures
heavily
focused
implementation
level
design
concerns
decomposing
problem
classes
single
responsibilities
achieving
high
cohesion
low
coupling
finding
appropriate
uses
design
patterns
described
gang
four
seminal
work
subject
need
unit
testing
forms
testing
profoundly
affects
design
project
subsequent
one
will
ask
implement
design
explores
issues
detail
work
design
later
implementation
keep
following
basic
design
goals
mind
goals
will
minds
grade
work
class
single
responsibility
think
class
whether
objective
accurately
described
single
sentence
reasonable
length
make
possible
classes
exhibit
high
cohesion
strongly
related
functionality
grouped
together
less
related
unrelated
functionality
separated
classes
exhibit
low
coupling
significantly
make
changes
individual
classes
without
breaking
many
others
used
design
patterns
appropriate
design
patterns
discussed
core
goal
decoupling
classes
one
another
used
design
patterns
find
increased
level
decoupling
will
design
make
reasonably
straightforward
write
unit
tests
design
meets
kinds
goals
discussed
lecture
will
useful
side
effect
property
making
unit
testing
easier
thought
differently
desire
write
unit
tests
will
tendency
drive
toward
design
meets
goals
deliverables
create
object
oriented
design
program
expressed
uml
class
diagram
assume
implementation
language
java
design
use
features
find
java
multiple
inheritance
use
java
feature
feel
appropriate
uml
class
diagram
include
signatures
public
methods
constructors
along
types
names
private
fields
signatures
private
methods
think
need
class
project
1
can
use
tool
like
draw
uml
diagram
must
submit
us
single
pdf
file
accompanying
diagram
short
document
briefly
describes
design
patterns
used
design
thought
design
patterns
good
fit
submit
design
due
thursday
february
14
5
00pm
beginning
lecture
submit
following
lecture
pdf
file
containing
uml
class
diagrama
microsoft
word
doc
docx
pdf
file
containing
explanation
design
patterns
used
follow
link
discussion
submit
files
via
checkmate
aware
holding
rules
specified
document
including
one
says
responsible
submitting
version
files
want
graded
peer
design
review
lecture
thursday
february
14
will
devoted
peer
review
design
project
will
share
design
students
receive
feedback
perceptions
quality
review
somewhat
less
formal
last
one
sense
nothing
will
need
written
submitted
ot
us
however
everyone
required
participate
will
tracking
attends
participates
couple
ground
rules
apply
bring
three
printed
copies
uml
class
diagram
accompanying
documentation
arriving
sure
read
understood
section
titled
basic
design
goals
will
orient
thinking
looking
reviews
work
reviews
peer
design
review
session
feel
free
mark
copies
designs
reviewing
well
making
notes
issues
find
things
discuss
however
time
give
printed
copies
designs
documentation
along
notes
made
back
original
authors
leave
reworked
split
separate
projects
alex
thornton
winter
2013originally
written
alex
thornton
winter
2012
