vita nenad medvidovic 
vita 
curriculum
vitae
nenad
medvidovic
department
information
computer
science
university
california
irvine
irvine
ca
92697
3425
tel
1
714
824
3100
fax
1
714
824
1715
em
neno
ics
uci
edu
uri
http
www
ics
uci
edu
neno
education
doctor
philosophy
12
98
university
california
irvine
department
information
computer
science
software
research
group
advisor
dr
richard
taylor
dissertation
architecture
based
specification
time
software
evolution
master
science
6
95
cumulative
gpa
4
00
university
california
irvine
department
information
computer
science
major
emphasis
software
bachelor
science
summa
cum
laude
8
92
cumulative
gpa
4
00
arizona
state
university
major
computer
science
professional
experience
9
94
present
graduate
student
researcher
software
architecture
group
university
california
irvine
9
93
8
94
teaching
assistant
ics
52
systematic
software
construction
ics
121
introduction
software
engineering
ics
141
programming
languages
university
california
irvine
6
93
8
93
research
assistant
software
engineering
group
arizona
state
university
8
92
8
93
teaching
assistant
cse
460
598
software
project
management
development
arizona
state
university
publications
refereed
journal
articles
1
richard
taylor
nenad
medvidovic
kenneth
anderson
james
whitehead
jr
jason
robbins
kari
nies
peyman
oreizy
deborah
dubrow
component
message
based
architectural
style
gui
software
ieee
transactions
software
engineering
vol
22
6
pages
390
406
june
1996
significant
revision
extension
icse17
paper
2
nenad
medvidovic
richard
taylor
exploiting
architectural
style
develop
family
applications
iee
proceedings
software
engineering
vol
144
5
6
pages
237
248
october
december
1997
refereed
conference
publications
1
blevins
dubrow
eickelmann
grinter
medvidovic
reimer
shaw
turner
wong
report
software
project
management
technical
research
review
proceedings
california
software
symposium
css'95
pages
127
145
irvine
ca
march
30
1995
2
richard
taylor
nenad
medvidovic
kenneth
anderson
james
whitehead
jr
jason
robbins
component
message
based
architectural
style
gui
software
proceedings
seventeenth
international
conference
software
engineering
icse17
pages
295
304
seattle
wa
april
23
30
1995
3
nenad
medvidovic
richard
taylor
james
whitehead
jr
formal
modeling
software
architectures
multiple
levels
abstraction
proceedings
california
software
symposium
css'96
pages
28
40
los
angeles
ca
april
17
1996
4
nenad
medvidovic
peyman
oreizy
jason
robbins
richard
taylor
using
object
oriented
typing
support
architectural
design
c2
style
proceedings
fourth
acm
sigsoft
symposium
foundations
software
engineering
fse4
pages
24
32
san
francisco
ca
october
16
18
1996
also
available
technical
report
uci
ics
96
6
5
nenad
medvidovic
peyman
oreizy
richard
taylor
reuse
shelf
components
c2
style
architectures
proceedings
1997
symposium
software
reusability
ssr'97
pages
190
198
boston
ma
may
17
19
1997
also
proceedings
1997
international
conference
software
engineering
icse'97
pages
692
700
boston
ma
may
17
23
1997
6
nenad
medvidovic
richard
taylor
framework
classifying
comparing
architecture
description
languages
proceedings
sixth
european
software
engineering
conference
together
fifth
acm
sigsoft
symposium
foundations
software
engineering
pages
60
76
zurich
switzerland
september
22
25
1997
7
nenad
medvidovic
david
rosenblum
domains
concern
software
architectures
architecture
description
languages
proceedings
usenix
conference
domain
specific
languages
pages
199
212
santa
barbara
ca
october
15
17
1997
8
jason
robbins
nenad
medvidovic
david
redmiles
david
rosenblum
integrating
architecture
description
languages
standard
design
method
proceedings
20th
international
conference
software
engineering
icse'98
pages
209
218
kyoto
japan
april
19
25
1998
also
available
technical
report
uci
ics
97
35
9
peyman
oreizy
nenad
medvidovic
richard
taylor
architecture
based
runtime
software
evolution
proceedings
20th
international
conference
software
engineering
icse'98
pages
177
186
kyoto
japan
april
19
25
1998
also
available
technical
report
uci
ics
97
39
10
nenad
medvidovic
eric
dashofy
richard
taylor
employing
shelf
connector
technologies
c2
style
architectures
proceedings
california
software
symposium
css'98
pages
21
30
irvine
ca
october
23
1998
11
nenad
medvidovic
david
rosenblum
assessing
suitability
standard
design
method
modeling
software
architectures
appear
proceedings
first
working
ifip
conference
software
architecture
wicsa1
san
antonio
tx
february
22
24
1999
also
available
technical
report
uci
ics
98
02
12
nenad
medvidovic
david
rosenblum
richard
taylor
language
environment
architecture
based
software
development
evolution
appear
proceedings
21st
international
conference
software
engineering
icse'99
los
angeles
ca
may
16
22
1999
13
eric
dashofy
nenad
medvidovic
richard
taylor
using
shelf
middleware
implement
connectors
distributed
software
architectures
appear
proceedings
21st
international
conference
software
engineering
icse'99
los
angeles
ca
may
16
22
1999
refereed
workshop
publications
1
james
whitehead
jr
jason
robbins
nenad
medvidovic
richard
taylor
software
architecture
foundation
software
component
marketplace
david
garlan
ed
proceedings
first
international
workshop
architectures
software
systems
pages
276
282
seattle
wa
april
24
25
1995
2
nenad
medvidovic
adls
dynamic
architecture
changes
alexander
wolf
ed
proceedings
second
international
software
architecture
workshop
isaw
2
pages
24
27
san
francisco
ca
october
14
15
1996
3
nenad
medvidovic
richard
taylor
reusing
shelf
components
develop
family
applications
c2
architectural
style
proceedings
international
workshop
development
evolution
software
architectures
product
families
las
navas
del
marqu
vila
spain
november
18
19
1996
4
peyman
oreizy
nenad
medvidovic
richard
taylor
david
rosenblum
software
architecture
component
technologies
bridging
gap
proceedings
workshop
compositional
software
architectures
monterey
ca
january
6
8
1998
5
richard
taylor
nenad
medvidovic
peyman
oreizy
architectural
implications
common
operator
interfaces
proceedings
ground
systems
architectures
workshop
gsaw
98
el
segundo
ca
february
25
27
1998
6
nenad
medvidovic
richard
taylor
david
rosenblum
architecture
based
approach
software
evolution
proceedings
international
workshop
principles
software
evolution
pages
11
15
kyoto
japan
april
20
21
1998
7
nenad
medvidovic
richard
taylor
separating
fact
fiction
software
architecture
proceedings
third
international
software
architecture
workshop
isaw
3
pages
105
108
orlando
fl
november
1
2
1998
non
refereed
publications
1
jason
robbins
james
whitehead
jr
nenad
medvidovic
richard
taylor
software
architecture
design
environment
chiron
2
style
architectures
arcadia
technical
report
uci
95
01
university
california
irvine
january
1995
2
nenad
medvidovic
formal
definition
chiron
2
software
architectural
style
technical
report
uci
ics
95
24
department
information
computer
science
university
california
irvine
august
1995
3
nenad
medvidovic
richard
taylor
reuse
shelf
constraint
solvers
c2
style
architectures
technical
report
uci
ics
96
28
department
information
computer
science
university
california
irvine
july
1996
4
nenad
medvidovic
classification
comparison
framework
software
architecture
description
languages
technical
report
uci
ics
97
02
department
information
computer
science
university
california
irvine
february
1997
5
nenad
medvidovic
david
rosenblum
richard
taylor
type
theory
software
architectures
technical
report
uci
ics
98
14
department
information
computer
science
university
california
irvine
april
1998
6
peyman
oreizy
michael
gorlick
richard
taylor
dennis
heimbigner
gregory
johnson
nenad
medvidovic
alex
quilici
david
rosenblum
alexander
wolf
self
adaptive
software
technical
report
uci
ics
98
27
department
information
computer
science
university
california
irvine
august
1998
formal
presentations
1
component
message
based
architectural
style
gui
software
technology
presentation
track
17th
international
conference
software
engineering
icse17
seattle
wa
april
1995
2
chiron
2
component
message
based
architectural
style
gui
software
bay
area
roundtable
bart
palo
alto
ca
june
1995
3
chiron
2
component
message
based
architectural
style
gui
software
sun
microsystems
laboratories
palo
alto
ca
june
1995
4
formal
modeling
software
architectures
multiple
levels
abstraction
california
software
symposium
los
angeles
ca
april
1996
5
new
c2
arcadia
research
meeting
portland
august
1996
6
adls
dynamic
architecture
changes
second
international
software
architecture
workshop
isaw
2
san
francisco
ca
october
1996
7
using
object
oriented
typing
support
architectural
design
c2
style
fourth
acm
sigsoft
symposium
foundations
software
engineering
fse4
san
francisco
ca
october
1996
8
reusing
shelf
components
develop
family
applications
c2
architectural
style
international
workshop
development
evolution
software
architectures
product
families
las
navas
del
marqu
vila
spain
november
1996
9
classification
comparison
framework
software
architecture
description
languages
second
edcs
architecture
generation
workshop
santa
fe
nm
april
1997
10
reuse
shelf
components
c2
style
architectures
1997
symposium
software
reusability
ssr'97
1997
international
conference
software
engineering
icse'97
joint
session
software
reuse
boston
ma
may
1997
11
framework
classifying
comparing
architecture
description
languages
sixth
european
software
engineering
conference
together
fifth
acm
sigsoft
symposium
foundations
software
engineering
zurich
switzerland
september
1997
12
domains
concern
software
architectures
architecture
description
languages
usenix
conference
domain
specific
languages
santa
barbara
ca
october
1997
13
style
based
approach
design
evolution
adaptable
software
university
texas
austin
tx
november
1997
14
architecture
based
approach
software
evolution
international
workshop
principles
software
evolution
kyoto
japan
april
1998
15
employing
shelf
connector
technologies
c2
style
architectures
california
software
symposium
css'98
irvine
ca
october
23
1998
professional
activities
reviewer
1996
conference
user
interface
software
technology
uist'96
1997
international
conference
software
engineering
icse'97
ieee
transactions
software
engineering
1997
1998
iee
proceedings
software
engineering
1998
acm
transactions
software
engineering
methodology
1998
professional
associations
association
computing
machinery
acm
acm
special
interest
group
software
engineering
sigsoft
honors
awards
fellowships
1989
92
dean's
honor
list
1990
92
arizona
regents
international
student
scholarship
1990
93
golden
key
national
honor
society
1991
93
upe
national
honor
society
computing
sciences
1992
moeur
award
arizona
state
university
top
student
graduating
class
1993
94
ics
departmental
fellowship
research
interests
research
interests
field
software
engineering
common
theme
long
term
goal
research
development
evolution
adaptable
large
scale
software
systems
practitioners
traditionally
faced
many
problems
achieving
support
reuse
interchange
reconfiguration
extension
scaling
software
modules
systems
using
existing
development
approaches
problems
often
result
poor
understanding
system's
overall
architecture
unintended
dependencies
among
modules
decisions
made
early
development
process
forth
existing
techniques
intended
remedy
problems
separation
concerns
isolation
change
partially
adequate
case
development
pre
existing
large
multi
lingual
components
originate
multiple
sources
main
hypothesis
research
explicit
architectural
focus
can
remedy
many
difficulties
enable
flexible
construction
evolution
large
systems
therefore
centered
software
architectures
key
developing
techniques
tools
methodologies
engineering
flexible
large
scale
software
architectures
present
high
level
view
system
enabling
developers
abstract
away
unnecessary
details
focus
big
picture
another
key
explicit
treatment
software
connectors
separate
communication
issues
computation
system
however
existing
architecture
research
thus
far
largely
failed
take
advantage
potential
adaptability
two
reasons
connectors
often
treated
explicitly
rigid
accommodate
modification
attached
components
easily
architecture
community
date
chosen
focus
issues
flexible
design
evolution
formalism
analysis
system
generation
research
presents
architecture
based
approach
achieving
software
adaptability
expands
traditional
notions
evolution
modularity
typing
use
architectures
introduces
explicit
flexible
connectors
designed
architecture
description
language
adl
encompasses
concepts
currently
implementing
supporting
toolset
thus
far
exploited
benefits
particular
architectural
style
c2
intend
demonstrate
many
results
style
domain
independent
research
also
closely
related
two
areas
component
based
software
development
software
reuse
engineering
large
scale
software
systems
fundamentally
different
programming
small
programming
language
statement
becomes
inadequate
unit
development
instead
components
must
become
software
building
blocks
component
based
development
software
become
area
intense
research
resulting
several
component
interoperability
models
corba
activex
wide
adoption
certain
software
design
methodologies
object
oriented
oo
design
software
architecture
researchers
large
also
adopted
component
centered
view
software
development
evolution
context
c2
project
participated
development
oo
class
framework
used
prototyping
implementing
c2
components
connectors
well
number
example
applications
used
framework
experience
sensitized
fact
adopting
component
based
approach
enough
repeatedly
engineering
components
scratch
likely
become
prohibitively
expensive
also
fails
exploit
greatest
potential
benefit
component
based
development
reuse
architectural
styles
potential
controlling
scope
ots
reuse
providing
structure
styles
typically
reflect
leverage
key
properties
application
domain
recurring
patterns
application
design
within
domain
adequately
support
reuse
style
must
also
provide
balance
rules
strong
enough
make
reuse
tractable
broad
enough
enable
integration
legacy
components
thus
far
conducted
participated
series
exercises
intended
investigate
reuse
issues
context
c2
style
drawing
experience
intend
study
properties
likely
make
given
style
well
suited
supporting
ots
reuse
part
longer
term
research
plans
also
intend
continue
investigating
several
questions
remain
unanswered
subset
given
techniques
can
employed
effectively
refining
architecture
across
levels
abstraction
mapping
architecture
implementation
role
adls
architecture
based
runtime
software
evolution
adl
primitives
needed
support
evolution
issues
runtime
insertion
removal
replacement
connectors
problem
compounded
potentially
complex
mappings
architecture
implementation
single
connector
architectural
level
may
distributed
across
several
implemented
modules
extracting
connector
implementation
removing
replacing
difficult
still
open
research
problem
role
architectures
adls
construction
application
families
can
explicit
architectural
models
aid
component
discovery
extraction
construction
component
adaptors
wrappers
finally
intend
pursue
work
begun
understanding
nature
software
architectures
adls
clarifying
roles
software
engineering
lifecycle
despite
much
ongoing
research
architectures
adls
consensus
lacking
several
fundamental
issues
including
problems
can
software
architectures
adequately
address
can
problems
resolved
effectively
role
adls
play
addressing
problems
relationship
requirements
problem
domain
architecture
solution
domain
related
question
exact
relationship
architecture
design
nenad
medvidovic
neno
ics
uci
edu
last
modified
01
dec
1997
