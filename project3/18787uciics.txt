searching better way assignment 4 
lab assignment 4 searching better way 
searching
better
way
assignment
4
searching
data
frequent
necessity
data
processing
finding
want
quickly
typically
goal
yet
even
fast
machine
algorithm
employed
major
determiner
data
retrieval
speed
project
will
give
practice
using
two
searching
techniques
proxmapsearch
chainsearch
helps
give
feel
practical
meaning
notation
improvement
constant
factor
ll
practice
code
optimization
commonly
used
abused
programming
activity
lab
also
demonstrates
programs
can
used
test
vehicles
answer
design
questions
larger
programs
also
provides
practice
preparing
reports
based
upon
program
generated
data
background
imagine
ve
hired
data
jockey
national
chain
retail
stores
due
open
shortly
boss
briefs
first
assignment
marketing
thinks
brilliant
approach
notifying
people
new
stores
addition
standard
print
web
advertising
telemarketers
going
telephone
text
homes
within
ten
mile
radius
new
store
personally
invite
consumers
come
grand
openings
marketing
research
branch
prepared
list
5
digit
zip
codes
correspond
invitation
areas
obtained
file
lists
every
phone
group
corresponding
zip
code
phone
group
consists
three
digit
area
code
followed
three
digit
phone
prefix
first
three
digits
phone
number
since
one
phone
group
might
found
several
zip
code
areas
may
several
entries
file
phone
group
different
zips
clearly
several
different
phone
groups
zip
code
marketing
calls
list
zip
codes
phone
groups
master
file
details
structure
marketing
also
procured
list
telephone
customers'
names
phone
numbers
phone
number
order
phone
list
marketing
wants
look
program
will
print
screen
easy
read
format
phone
groups
chosen
zip
code
telemarketing
coordinator
will
use
program
assign
zip's
phone
groups
telemarketers
will
use
phone
list
make
calls
texts
potential
customers
federal
call
list
always
time
pressured
marketing
wants
request
zip
codes
146
phone
groups
filled
quickly
possible
one
time
program
calls
texts
zip
code
list
completed
another
set
numbers
will
needed
new
stores
open
marketing
will
need
additional
zip
codes
phone
groups
requirements
constraints
known
time
prior
study
narrowed
choices
searching
algorithm
proxmapsearch
chainsearch
ones
will
investigate
proxmapsearch
1
best
average
cases
occurs
map
key
chosen
subarrays
roughly
equal
size
short
compared
total
number
items
searched
proxmapsearch
degrades
worst
case
occurs
keys
end
one
subarray
happens
key
poorly
chosen
holds
inserting
item
subarray
just
search
locate
insert
item
followed
constant
time
opertion
add
subarray
description
proxmapsort
proxmapsearch
algorithms
provided
chainsearch
also
1
map
key
chosen
chains
roughly
length
reasonably
short
adding
new
item
chain
also
typically
1
chains
reasonably
short
chainsearch
can
degrade
performance
searching
inserting
items
map
key
results
one
long
chains
instead
bunch
short
ones
choosing
good
map
key
crucial
diagram
chain
structure
provided
since
searches
general
performance
one
faster
will
highly
depend
upon
implementation
used
properties
java
operating
system
instance
whether
finding
something
via
cell
reference
arraylist
faster
slower
finding
something
following
reference
pointer
program
will
started
start
day
time
master
file
information
placed
proxmap
chain
list
searches
made
using
memory
structure
program
remains
running
day
shut
end
workday
course
possible
system
crash
malfunction
program
may
need
shut
restarted
day
master
file
will
sequential
text
file
physical
line
3
digit
area
code
space
3
digit
prefix
space
5
digit
zip
code
end
line
mark
area
codes
prefixes
never
start
0
always
three
digits
zip
codes
can
start
leading
zeroes
master
file
leading
zeroes
included
zip
code
languages
like
java
take
leading
zero
mean
integer
octal
base
8
rather
base
10
reading
zip
say
00010
will
interpreted
8
lack
leading
zeroes
zips
problem
since
know
zips
really
five
digits
right
number
leading
zeroes
needed
can
included
printing
can
assume
master
file
always
correct
format
duplicate
records
file
will
cleaned
provided
use
program
master
file
will
always
least
hundred
lines
may
several
hundreds
thousands
lines
lines
file
particular
order
assignment
boss
tells
task
perhaps
surprisingly
write
program
rather
investigate
report
data
structure
used
make
search
zip
code
returning
list
phone
groups
associated
fast
feasible
program
requirements
team
will
use
results
determining
requirements
search
algortihm
give
design
programming
teams
boss
also
admonishes
time
always
essence
focus
efforts
comparing
proxmapsearch
chainsearch
particular
go
looking
search
approaches
report
results
company
standard
format
title
pagetable
contents
page
numbers
can
form
like
long
reader
can
get
page
quickly
problem
statement
discussion
investigating
results
hope
achieve
method
tried
working
toward
solution
problem
results
discovered
completely
clearly
presented
conclusions
recommendations
conclude
investigation
recommend
done
appendices
supportive
material
detailed
technical
included
main
body
text
including
references
programs
output
requirements
hints
suggestions
requirements
given
section
stated
explicitly
phrases
require
hints
suggestions
just
requirements
long
meets
requirements
may
name
things
differently
even
use
completely
different
approach
require
code
classes
proxmap
chain
list
structures
provided
skeletons
proxmap
chainlist
classes
get
started
searchforabetterway
project
zip
file
may
change
remove
private
items
add
private
items
see
fit
sure
use
good
style
don
change
public
signatures
particular
avoid
using
java
features
aren
really
needed
get
job
done
cleanly
quickly
may
unnecessarily
add
running
time
memory
usage
instance
use
java
linkedlist
class
chains
chain
list
linkedlists
doubly
linked
need
singly
linked
lists
using
singly
linked
list
saves
space
used
previous
pointers
linkedlist
thereby
dropping
memory
requirements
chain
one
third
significant
savings
also
project
file
sample
master
file
testzip
txt
97
000
lines
encourage
use
portions
larger
files
based
appropriate
testing
timing
routines
course
use
small
files
first
tests
things
look
like
working
move
larger
test
files
exception
arraylist
allowed
use
predefined
java
collection
classes
java
util
treemap
solution
collection
classes
ones
store
collection
data
include
classes
linkedlist
hashmap
vector
hashtable
treemap
among
things
classes
overblown
needs
unnecesarily
increase
memory
usage
time
complete
searches
need
methods
add
data
master
file
proxmap
chain
list
search
structures
write
four
methods
accomplish
task
call
proxmap
buildlist
proxmap
lookup
build
search
sorted
array
chainlist
buildlist
chainlist
lookup
build
search
chain
list
signatures
methods
provided
skeleton
classes
ve
provided
test
proxmapsearch
write
method
called
testproxmapsearch
takes
parameters
name
master
file
name
text
file
list
zip
codes
search
testproxmapsearch
builds
proxmap
using
master
file
data
reports
long
took
testproxmapsearch
records
time
takes
search
passed
zip
codes
including
time
takes
return
list
phone
groups
throw
exception
zip
code
found
divided
number
searches
done
reports
average
search
time
exits
testing
chain
searching
ll
need
try
several
different
map
key
functions
easiest
way
extend
provided
abstract
class
abstractmapkey
concrete
class
represents
map
key
map
key
want
try
test
program
construct
map
key
want
use
pass
turn
proxmap
constructor
details
approach
given
comments
abstractmapkey
class
test
chainsearch
proxmap
search
write
method
called
testchainsearch
takes
parameters
name
master
file
name
text
file
list
zip
codes
search
make
sure
file
format
one
used
testproxmapsearch
comparison
fair
build
chain
list
using
master
file
data
report
long
took
testproxmapsearch
testchainsearch
reports
average
time
takes
search
zip
code
list
passed
zips
exits
proxmap
search
ll
need
try
several
different
map
key
functions
see
produces
best
results
note
map
key
produces
best
proxmap
search
may
different
one
produces
best
chain
search
require
write
driver
program
causes
testing
methods
called
various
sizes
master
files
master
files
containing
various
distributions
keys
several
map
key
methods
various
sizes
distributions
zip
codes
file
lists
zips
search
driver
call
test
routines
repeatedly
well
chosen
combinations
choices
can
produce
file
containing
results
format
file
well
data
can
pasted
directly
spreadsheet
analysis
approach
will
save
significant
time
entering
choices
via
keyboard
one
set
time
copying
results
screen
hand
spreadsheet
report
choosing
test
cases
illuminate
distinct
behaviors
rather
just
repeatedly
looking
sort
behavior
can
save
numerous
tests
lots
work
example
number
items
proxmap
chain
list
determined
number
lines
master
file
easily
affect
performance
search
one
good
set
sizes
master
file
100
500
1000
10
000
100
000
250
000
records
sizes
cover
sizes
boss
said
possible
allow
safety
margin
specs
change
somewhat
code
still
work
require
test
code
master
files
aforelisted
sizes
include
whatever
additional
sizes
think
needed
gauge
relative
performance
proxmapsearch
chainsearch
program
runs
memory
lists
beyond
certain
size
sure
report
finding
must
say
good
implementation
algortihms
run
memory
sizes
least
250
000
searches
will
done
business
day
three
scenarios
come
mind
might
think
others
first
telemarketer
will
focus
one
store
opening
another
another
one
imply
zip
codes
used
search
groups
numerically
near
zip
codes
roughly
assigned
ascending
order
one
moves
east
west
across
run
tests
group
zip
codes
numerically
close
followed
different
group
close
close
first
group
another
group
another
scenario
unplanned
search
one
zip
code
needed
nothing
happens
another
zip
code
checked
lead
test
file
number
zip
codes
one
may
may
numerically
close
one
preceding
run
test
using
group
codes
third
situation
mixture
first
two
coordinator
looks
bunch
zips
store
one
zip
query
come
perhaps
another
zip
code
perhaps
another
store
group
run
least
one
test
file
zip
codes
represents
situation
map
key
try
least
two
approaches
1
mapkey
key
key
use
zip
code
2
mapkey
int
key
100
first
three
digits
zip
code
try
others
think
appropriate
produce
fast
approach
feasible
run
test
program
good
test
data
analyze
results
write
required
report
report
clear
well
written
can
make
encourage
use
features
microsoft
office
productivity
tools
help
presentation
must
include
tables
times
used
various
approaches
along
appropriate
data
discussion
support
conclusions
also
require
present
results
graphically
much
easier
discern
patterns
data
looking
graphs
tables
appendix
include
names
files
programs
results
can
found
course
turn
files
report
part
project
finally
importantly
don
get
wrapped
experimentation
leave
time
write
report
timing
search
routine
java
different
library
classes
can
help
time
long
takes
particular
search
suggestedin
assignment
2
using
system
currenttimemillis
provides
easy
way
task
begins
long
starttime
system
currenttimemillis
ends
long
endtime
system
currenttimemillis
subtract
start
time
end
time
get
elapsed
time
remember
following
timings
sure
build
routines
work
properly
search
routines
actually
search
correctly
timings
incorrect
algorithms
useless
best
potentially
damaging
imagine
occur
company
put
production
worse
two
searches
version
search
didn
work
errors
made
code
analysis
particular
first
try
routines
small
master
file
small
list
searches
programs
run
quickly
structures
small
easy
check
compared
test
run
say
hundred
thousand
record
master
file
100
searches
routines
work
small
files
can
test
using
larger
ones
count
actual
time
takes
build
list
time
search
don
include
setup
time
time
write
timing
results
easy
way
remove
overhead
time
actual
routine
compute
time
call
fake
routine
passes
parameters
immediately
returns
without
actual
work
subtract
time
routine
took
time
real
routine
left
just
actual
build
search
time
small
number
searches
time
needed
complete
search
much
less
one
millisecond
program
shares
resources
programs
always
immediately
given
access
system
clock
requests
current
time
result
elapsed
time
can
somewhat
greater
actual
time
taken
might
take
milliseconds
search
ends
program
gets
access
system
clock
records
time
long
algorithms
choppy
time
measurement
doesn
matter
adding
milliseconds
large
time
fast
algorithms
can
look
task
taking
much
longer
really
millisecond
lot
time
modern
computer
can
also
happen
algorithm
completes
fast
clock
registers
0
millisecs
elapsed
obviously
incorrect
result
happens
clock
immediately
available
algorithm
starts
stops
algorithm
takes
much
less
1
millisecond
complete
time
fast
algorithms
accurately
run
algorithm
many
times
placing
inside
loop
divide
time
took
number
times
algorithm
executed
loop
repeated
many
sometimes
many
times
get
accurate
measurements
shorter
time
measurements
required
compute
accurate
time
fast
search
code
look
something
like
double
searchtime
computesearchtime
double
overheadtime
computeoverheadtime
double
actualsearchtime
searchtime
overheadtime
computesearchtime
long
starttime
system
currenttimemillis
int
1
number
repetitions
dothissearch
parameters
long
endtime
system
currenttimemillis
long
elapsedtime
endtime
starttime
return
double
elapsedtime
number
repetitions
computeoverheadtime
long
starttime
system
currenttimemillis
int
1
number
repetitions
dofakesearch
parameters
long
endtime
system
currenttimemillis
long
elapsedtime
endtime
starttime
return
double
elapsedtime
number
repetitions
timings
agree
theory
something
wrong
algorithm
timings
theory
instance
graph
times
chainsearch
various
sizes
master
file
see
n2
curve
know
something
wrong
optional
work
marketing
informs
firm
master
file
obtained
sends
update
file
containing
25
500
new
phone
groups
every
three
months
format
master
file
new
information
must
placed
master
file
enhance
program
function
read
master
file
proxmap
chain
list
adds
new
items
update
file
writes
new
master
file
report
whether
adds
done
quickly
using
proxmap
chain
list
whether
difference
changes
recommendation
structure
used
remember
update
done
every
three
months
similarly
marketing
also
gets
update
file
every
three
months
contains
zip
codes
retired
longer
exist
text
file
retired
zip
code
line
enhance
program
process
deletions
removing
proxmap
chain
list
writing
new
master
file
report
whether
faster
accomplish
chain
list
proxmap
report
whether
results
changes
recommendation
structure
use
also
marketing
gets
another
update
file
every
three
months
contains
area
code
changes
text
file
change
one
line
first
appears
old
area
code
blank
new
area
code
enhance
program
update
area
codes
updating
entries
proxmap
chain
list
writing
new
master
file
report
relative
speed
operation
two
kinds
list
whether
changes
overall
recommendation
structure
use
deliverables
turn
project
file
zip
file
checkmate
sure
includes
following
pdf
file
microsoft
word
doc
document
containing
report
findings
conclusions
format
containing
information
described
submit
report
word
file
sure
submit
report
doc
file
docx
version
word
can
guarantee
graders
can
access
read
docx
files
using
newer
version
word
will
need
use
save
command
save
docment
doc
rather
docx
file
put
report
main
project
folder
subfolder
java
programs
used
create
results
presented
report
output
src
folder
inside
project
completed
optional
work
readme
file
main
project
folder
explains
features
implemented
approach
es
used
algorithms
employed
actualize
grading
grade
assignment
based
programs
correctness
style
especially
report
quality
conclusions
well
recommendations
supported
quality
composition
presentation
higher
weight
report
programs
just
investigative
tool
matters
report
conclusions
well
conclusions
supported
allocate
1
point
proxmapsearch
working
run
required
tests
performance
1
point
chainsearch
working
run
required
tests
performance
2
points
report
always
can
earn
1
extra
point
well
done
optional
work
amazing
job
assignment
even
optional
work
undertaken
written
norman
jacobson
ics23
spring
2006
march
2006
minor
revisions
clarify
passages
norman
jacobson
november
2006
inspiried
march
1997
version
ics23
lab
exercise
searching
better
way
used
trees
hashing
written
norman
jacobson
consultation
george
lueker
spring
1988
timing
reporting
prose
adapted
september
2004
version
23
exercise
quick
simple
written
norman
jacobson
george
lueker
added
inspiration
thomas
standish
spring
1988
discussion
skip
lists
includes
prose
23
exercise
project
3
always
changing
probably
alex
thornton
summer
2005
version
skiplist
java
class
skeleton
written
alex
thornton
july
2005
chainlist
java
class
skeleton
written
norman
jacobson
based
thornton
skiplist
class
march
2006
minor
revision
introduce
term
phone
group
distinguish
prefix
area
code
prefix
group
norman
jacobson
november
2006
minor
edits
clarity
ics23
winter
2007
norman
jacobson
january
2007
ics23
winter
2008
december
2008
added
readme
file
document
optional
work
norman
jacobson
january
2009
minor
edit
require
word
report
submitted
doc
file
norman
jacobson
february
2009
minor
typos
fixed
scenarios
slightly
reworded
clarity
made
explicit
via
indicating
points
awarded
report
important
compared
just
getting
programs
working
norman
jacobson
march
2009
revised
include
hint
using
seed
random
number
generation
debugging
skip
list
norman
jacobson
may
2009
make
clear
turned
results
zipped
one
file
fix
typos
norman
jacobson
june
2009
replaced
skip
list
search
proxmapsearch
thus
class
skeleton
skiplist
one
proxmapsearch
updated
reflect
use
eclipse
project
file
norman
jacobson
march
2010
added
direct
links
proxmap
chain
structure
handouts
fixed
couple
typos
norman
jacobson
may
2010
edits
clarity
norman
jacobson
june
2010
march
2011
april
2011
updated
allow
report
pdf
format
related
minor
edits
norman
jacobson
may
2011
