writing next killer peer to peer p2p application 
building testing next killer p2p app 
writing
next
killer
p2p
app
home
research
software
publications
industry
resume
flashback
introduction
idea
next
killer
p2p
app
go
building
testing
chronicle
sorts
explore
one
might
go
building
testing
p2p
app
path
took
may
best
way
needs
least
serve
guide
difficulties
tradeoffs
involved
reverse
chronological
first
describe
one
can
test
get
concrete
numbers
app
might
behave
real
world
next
simplify
building
process
using
middleware
course
important
question
programming
language
use
`side'
issues
will
discussed
appropriate
note
just
started
writing
it'll
continually
updated
time
hopefully
page
cliched
`under
construction
indefinitely'
tag
testing
app
nothing
important
getting
warm
fuzzy
feeling
app
will
run
perfectly
internet
scale
short
recruiting
zombie
machines
one
test
distributed
app
spending
couple
thousand
green
bucks
will
get
required
hardware
set
fairly
decent
wan
wide
area
network
emulator
setup
allows
run
hundreds
application
instances
`virtual
nodes'
data
traffic
shaped
underneath
emulator
real
time
change
required
part
application
run
emulator
describe
one
emulator
modelnet
detail
modelnet
will
need
one
beefy
machine
many
smaller
machines
can
afford
plus
gigabit
switch
decent
16
port
one
costs
around
200
current
setup
one
dell
2
cpu
2
6ghz
machine
4
dell
poweredge
machines
running
2
8ghz
four
powerdge
machines
cost
less
1
200
together
also
worthwhile
beef
ram
main
emulator
machine
2
4gb
neat
make
sure
machines
gigabit
nic
cards
much
hardware
important
point
deciding
much
hardware
need
good
wamm
fuzzy
feeling
deciding
target
machines
final
p2p
will
run
desktop
machines
lan
pcs
dsl
cable
pcs
dial
multiple
constraints
network
bandwidth
one
machine
router
cpu
usage
ram
dictate
many
virtual
nodes
can
run
one
physical
machine
many
virtual
nodes
can
run
total
plus
nature
appplication
plays
role
well
application
bound
cpu
bound
easy
answer
example
may
provide
rules
thumb
example
tradeoffs
suppose
wanted
emulate
nodes
sit
10mbps
interfaces
machine
gigabit
interface
will
able
run
100
instances
application
one
machine
theoretically
nic
bandwidth
becomes
bottleneck
likely
situation
running
100
instances
application
one
machine
will
invoke
os
scheduler
pretty
often
likely
impact
final
results
moreover
depending
upon
application
ram
space
os
may
actually
place
apps
swap
space
disastrous
timing
results
run
many
instances
app
node
first
thing
want
check
swap
hit
now
figure
can
run
25
processes
node
hit
swap
space
means
total
data
generated
virtual
nodes
now
250mbps
still
750mbps
leftover
next
step
obvious
get
three
machines
run
25
apps
now
still
bandwidth
bottlneck
individual
nic
cards
router
plus
hitting
swap
space
next
check
cpu
usage
individual
pcs
ideally
like
stay
10
cpu
usage
machine
apps
cpu
intensive
cpu
usage
high
run
25
instances
know
run
less
number
instances
machine
buy
machines
cases
p2p
apps
bound
cpu
bound
network
bandwidth
usual
bottleneck
easily
able
run
40
application
instances
without
significantly
using
cpu
additionally
tcp
ip
stacks
improved
considerably
scalability
performance
can
large
amounts
data
transfers
little
cpu
help
links
wan
emulator
java
python
rpc
middleware
html
css
508
