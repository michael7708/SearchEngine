ics 32 winter 2013 code example sockets part 1 
sockets part 1 an example socket server 
ics
32
winter
2013
news
course
reference
schedule
project
guide
code
examples
alex
ics
32
winter
2013
code
example
sockets
part
1
background
previous
coursework
earlier
quarter
seen
one
way
programs
can
read
external
input
opening
reading
files
compared
programs
use
every
day
web
browsers
email
clients
mobile
applications
multiplayer
games
like
interact
file
system
computers
people
limited
use
files
can
feel
though
put
unrealistic
box
fortunately
python
standard
library
includes
number
tools
can
use
help
us
write
python
programs
can
many
things
favorite
internet
connected
programs
sockets
first
step
start
tool
atop
others
built
sockets
python
sockets
objects
encapsulate
hide
many
underlying
details
program
can
connect
directly
another
program
usually
connection
made
via
network
internet
though
pointed
can
also
use
sockets
send
data
back
forth
programs
running
machine
story
begins
sockets
provide
abstraction
connection
program
program
sockets
can
used
represent
many
different
kinds
network
connections
behave
quite
differently
one
another
using
particular
way
variations
described
assumptions
will
serve
us
well
two
programs
connected
via
sockets
program
socket
representing
end
connection
socket
two
streams
available
input
stream
receives
data
sent
program
order
program
sent
output
stream
takes
data
written
sends
program
order
written
sockets
guarantee
data
makes
across
network
successfully
note
always
make
variety
reasons
wil
placed
receiver's
input
stream
order
placed
sender's
output
stream
example
machine
one
side
sends
three
messages
m1
m2
m3
machine
side
will
receive
messages
order
m1
fails
make
across
network
neither
m2
m3
will
ever
seen
either
code
underlying
python's
sockets
variety
things
like
attempting
re
send
lost
information
periodically
holding
information
received
order
information
preceding
received
worry
kinds
details
can
just
think
two
streams
leave
details
implementation
one
reason
seeing
network
connection
two
streams
handy
us
feels
quite
lot
like
used
files
far
read
files
sequentially
written
sequentially
able
sockets
main
difference
networks
less
reliable
files
many
things
can
go
wrong
connection
computer
irvine
one
faraway
place
like
korea
cognizant
ways
things
can
fail
failures
python
programs
failures
will
usually
arise
exceptions
number
issues
aware
want
write
robust
program
communicates
using
sockets
code
example
ignores
issues
interest
simplicitly
future
examples
will
begin
explore
details
clients
servers
context
socket
based
conversation
two
programs
can
think
two
programs
playing
role
one
program
waiting
another
program
connect
responded
request
initiated
connection
can
think
relationship
relationship
two
people
midst
phone
call
someone
initiated
call
someone
else
answered
purposes
scenario
say
program
initiated
conversation
client
program
responded
initiation
server
sometimes
example
program
plays
one
role
never
plays
instances
programs
play
different
roles
different
times
technical
information
internet
writing
programs
can
communicate
via
internet
requires
knowledge
internet
works
internet
complex
many
layered
combination
hardware
software
actually
need
know
surprisingly
little
underlying
technology
order
write
programs
use
still
issues
will
need
aware
especially
want
work
computer
loads
useful
information
available
online
topics
summarized
problems
discuss
insurmountable
course
challenge
always
separate
useful
information
noise
issues
will
least
effect
whether
can
get
programs
connect
students'
programs
even
programs
completely
correct
best
aware
issues
get
started
ip
addresses
general
every
machine
connected
internet
ip
address
ip
address
akin
telephone
number
specifying
message
sent
particular
ip
address
network
will
able
determine
receive
message
message
get
hiding
details
machines
either
end
ip
address
generally
displayed
sequence
four
numbers
separated
dots
numbers
value
range
0
255
range
chosen
values
range
can
stored
eight
bits
one
byte
example
writing
ip
address
one
machines
act
server
ics
web
site
address
128
195
1
76
want
program
connect
another
student's
program
know
ip
address
student's
machine
ways
find
ip
address
one
simplest
google
phrase
ip
want
find
someone
else's
ip
address
always
simple
probably
find
best
move
work
course
simply
ask
person
address
note
many
machines
different
ip
address
often
every
time
connect
internet
kind
information
can
necessarily
bookmark
reuse
forever
loopback
address
special
range
ip
addresses
can
always
used
connect
computer
regardless
ip
address
called
loopback
addresses
common
127
0
0
1
want
test
connecting
two
programs
machine
can
use
127
0
0
1
also
explains
shirts
bumper
stickers
may
seen
say
place
like
127
0
0
1
ports
want
connect
program
another
program
running
another
machine
enough
know
ip
address
machine
multiple
programs
machine
likely
connected
internet
given
time
needs
ot
way
identify
machine
like
connect
also
program
machine
like
connect
mechanism
used
internet
called
port
program
acting
server
will
register
interest
particular
port
binding
operating
system
will
generally
allow
one
program
bound
particular
port
time
ports
numbers
range
0
65535
range
chosen
values
range
can
stored
sixteen
bits
two
bytes
generally
good
idea
use
ports
numbers
1024
becuase
tend
reserved
common
uses
web
traffic
ftp
traffic
email
traffic
beyond
may
discover
ports
1024
use
depending
programs
running
machine
available
important
thing
realize
order
client
initiate
connection
server
client
will
need
use
ip
address
machine
server
running
also
port
server
listening
domain
name
system
dns
lookups
though
every
machine
connected
internet
ip
address
users
typically
use
ip
addresses
everyday
basis
just
ip
addresses
akin
telephone
numbers
internet
service
called
domain
name
system
dns
acts
kind
phone
book
given
name
computer
dns
can
tell
ip
address
long
name
registered
dns
previously
example
brought
web
page
browser
browser
first
know
address
www
ics
uci
edu
found
dns
lookup
sending
message
domain
name
server
asking
ip
address
www
ics
uci
edu
return
browser
received
message
said
128
195
1
76
time
browser
connect
address
port
80
since
port
used
web
traffic
otherwise
specified
download
web
page
dns
unlikely
affect
connections
students'
programs
significantly
course
since
students
course
will
registered
name
generally
best
using
ip
addresses
certainly
use
later
quarter
note
loopback
address
name
localhost
name
localhost
always
resolves
loopback
address
firewalls
machines
ics
labs
set
specifically
allow
access
one
another
though
machines
outside
ics
network
may
able
connect
means
able
connect
programs
students'
programs
ics
labs
difficulty
however
outside
lab
may
run
difficulty
getting
connected
just
aspects
programs
incorrect
open
environment
provided
ics
labs
longer
norm
internet
offers
certain
amount
anonymity
hard
know
contacting
motives
can
see
ip
address
port
connecting
kind
anonymity
benefits
though
also
serious
downsides
know
contacting
know
trying
accomplish
always
trust
operating
system
software
provide
outsiders
access
information
wise
solution
restrict
incoming
traffic
theory
one
can
connect
one
can
take
advantage
without
asked
sense
connecting
theory
behind
firewalls
software
hardware
restrict
computers'
access
computers
behind
case
firewalls
mostly
used
businesses
primary
targets
online
crime
mischief
nowadays
though
computers
come
kind
firewall
software
built
may
make
difficult
students'
programs
connect
want
computer
may
configured
disallow
incoming
connections
firewall
software
also
allows
disallow
certain
kinds
outgoing
connections
might
also
affect
ability
connect
programs
running
machines
usually
ways
open
port
means
told
firewall
allow
traffic
bound
certain
port
move
machine
traffic
ports
will
still
forbidden
details
vary
one
context
another
fair
amount
documentation
online
want
learn
open
ports
using
particular
combination
hardware
software
firewalls
point
also
internet
service
provides
firewalls
traffic
limitations
plcae
working
home
experience
especially
terms
able
others
connect
may
vary
considerably
depending
provider
routers
network
address
translation
nat
general
every
machine
connected
internet
ip
address
however
many
us
connected
directly
internet
example
several
computers
home
one
internet
connection
cable
modem
order
use
one
computers
time
online
necessary
way
sharing
connection
order
people
situation
use
device
called
router
router
connected
one
internet
connection
whenever
connected
ip
address
home
internet
users
included
get
ip
address
every
time
connect
though
one
reason
often
hard
run
server
home
computers
connect
directly
internet
instead
connect
router
router's
job
forward
outgoing
traffic
computer
single
internet
connection
take
incoming
traffic
route
appropriate
computer
router
computers
form
local
area
network
lan
router
assigns
fake
ip
address
computers
using
range
addresses
never
assigned
computers
internet
traffic
flows
router
performs
task
called
network
address
translation
nat
means
converts
internal
fake
ip
addresses
used
computers
ip
address
traffic
going
converts
ip
address
back
fake
ip
addresses
way
back
far
outside
world
concerned
many
computers
just
one
router
many
routers
also
act
firewalls
disallowing
incoming
traffic
cases
unless
specifically
configure
allow
home
computer
users
ever
initiate
connections
safe
relatively
painless
restriction
people
will
affect
work
home
router
will
make
much
difficult
students'
programs
connect
need
router's
ip
address
computer's
ip
address
hard
give
since
googling
ip
address
will
show
router's
ip
address
since
address
outside
world
ever
sees
also
need
configure
router
allow
incoming
traffic
least
one
port
send
incoming
traffic
ports
particular
one
computers
details
set
vary
considerably
one
router
another
generally
available
online
know
model
router
wait
getting
overwhelmed
details
new
might
feeling
overwhelmed
present
details
useful
background
information
though
focus
work
details
worth
learning
want
technology
field
fine
acquire
gradually
use
ip
addresses
ports
none
details
likely
afect
work
much
working
machines
ics
labs
need
aware
issues
want
use
machine
simple
python
server
program
lecture
wrote
simple
python
server
program
whose
role
accept
one
connection
particular
port
read
print
whatever
data
sent
end
connection
closed
data
read
example
recounts
example
fleshes
slightly
socket
module
python
standard
library
includes
module
called
socket
good
entry
point
world
internet
connected
python
programs
explore
module
will
continue
see
new
functionality
module
time
goes
first
thing
know
socket
module
includes
type
called
socket
kind
object
need
interact
recall
background
section
socket
object
represents
endpoint
connection
python
program
another
program
program
need
running
computer
though
can
need
written
python
though
can
can
proceed
need
know
get
one
socket
objects
simple
call
constructor
special
function
constructs
socket
object
us
first
need
import
socket
module
include
line
module
import
socket
can
say
create
socket
object
assign
local
variable
socket
socket
sockets
can
used
fundamentally
two
things
listening
connecting
listening
means
want
wait
another
program
contact
us
connecting
means
want
connect
another
program
example
since
writing
server
listen
listening
requires
bind
socket
address
port
listening
address
address
127
0
0
1
port
choice
say
19999
socket
module
represents
ip
address
port
combinations
two
element
python
tuples
first
element
tuple
string
containing
ip
address
'127
0
0
1'
machine
name
www
ics
uci
edu
second
element
tuple
integer
specifying
port
number
19999
address
port
tuple
can
bind
socket
asks
operating
system
route
traffic
incoming
port
program
listen
address
'127
0
0
1'
19999
bind
listen
address
can
state
intent
listen
socket
calling
listen
method
socket
wait
program
connect
calling
socket's
accept
method
method
will
block
will
wait
indefinitely
program
making
progress
another
program
connects
another
program
accept
will
return
two
element
tuple
containing
another
socket
one
can
conversation
program
address
computer
connected
us
two
element
tuple
ip
address
port
number
stream
socket
address
accept
point
stream
socket
one
can
use
receive
data
machine
send
data
back
one
tricky
part
data
sent
received
made
called
bytes
represented
python
object
type
bytes
intend
send
back
forth
actually
text
need
perform
conversion
bytes
str
types
might
wondering
accept
returns
another
socket
program
listen
another
connection
listen
socket
even
conversation
computer
stream
socket
make
use
feature
now
required
want
write
program
can
conduct
multiple
conversations
receiving
bytes
computer
done
calling
recv
method
socket
passing
number
bytes
want
program
wlil
block
get
one
two
results
empty
bytes
object
program
specified
will
send
bytes
closed
connection
bytes
object
containing
somewhere
one
byte
number
bytes
asked
general
never
guaranteed
get
many
asked
always
get
back
something
unless
program
done
sending
permanently
python
documentation
suggests
somewhat
small
power
two
number
bytes
go
4
096
bytes
incoming
bytes
stream
socket
recv
4096
use
len
function
check
many
bytes
got
back
act
accordingly
finally
done
stream
socket
close
calling
close
method
code
final
code
example
lecture
example
server
module
trying
example
server
even
though
yet
write
client
program
can
stil
try
example
server
wrote
connecting
another
program
one
simple
example
web
browser
ever
wondered
text
sent
web
browser
web
server
looks
like
try
download
web
page
try
running
example
server
navigating
browser
http
127
0
0
1
19999
note
19999
way
specify
port
