dynamic programming 
dynamic programming 
dynamic
programming
theorem
can
see
recursive
algorithm
likely
polynomial
sum
sizes
subproblems
bounded
kn
using
variables
theorem
however
obvious
division
paroblem
size
results
problems
size
1
recursive
algorithm
likely
exponential
growth
dynamic
programming
can
thought
reverse
recursion
recursion
top
mechanism
take
problem
split
solve
smaller
problems
created
dynamic
programming
bottom
mechanism
solve
possible
small
problems
combine
obtain
solutions
bigger
problems
reason
may
better
using
recursion
possible
may
solve
small
subproblem
many
times
using
dynamic
programming
solve
evaluation
product
matrices
wish
determine
value
product
1
mi
mi
ri
1
rows
ri
columns
order
matrices
multiplied
together
first
can
significantly
affect
time
required
multiply
m¡Ñn
matrix
p¡Ñq
matrix
q¡Ñr
takes
pqr
operations
use
normal
matrix
multiplication
algorithm
note
matrices
common
dimension
value
makes
matrices
property
compatibility
without
possible
multiplied
also
note
matrix
multiplication
associative
matrix
multiplication
commutative
n¡Ñm
might
equal
m¡Ñn
fact
n¡Ñm
might
even
defined
lack
compatibility
example
calculate
m1
¡Ñ
m2
¡Ñ
m3
¡Ñ
m4
dimensions
matrices
m1
10
20
m2
20
50
m3
50
1
m4
1
100
calculating
m1
¡Ñ
m2
¡Ñ
m3
¡Ñ
m4
requires
125000
operations
calculating
m1
¡Ñ
m2
¡Ñ
m3
¡Ñ
m4
requires
2200
operations
figure
many
operations
possible
order
will
take
use
one
minimum
number
operations
exponential
number
orderings
1
multiplications
first
remaining
2
multiplications
next
leading
total
1
orderings
can
find
best
order
time
n3
using
dynamic
programming
mi
minimum
cost
evaluating
product
mi
¡Ñ
¡Ñ
mj
mi
0
mi
mini
mi
mk
1
ri
1rkrj
algorithm
1
mi
0
length
1
1
1
length
length
mi
mini
mi
mk
1
ri
1rkrj
listing
length
refers
number
matrix
multiplications
subproblem
alternative
approach
use
size
equal
length
1
number
matrices
subproblem
example
given
calculate
m1
1
0
m2
2
0
m3
3
0
m4
4
0
m1
2
10000
m2
3
1000
m3
4
5000
m1
3
1200
m2
4
3000
m1
4
2200
longest
common
substring
problem
given
two
sequences
letters
hello
aloha
find
longest
contiguous
sequence
appearing
one
solution
assume
strings
lengths
starting
points
check
longest
common
string
starting
starting
points
checks
average
£c
time
¡÷
total
£c
m2n
time
dynamic
programming
solution
let
li
maximum
length
common
strings
end
¡÷
li
1
li
1
1
¡Ú
¡÷
li
0
longest
common
substring
0
li
0
0
0
l0
0
len
0
answer
0
0
1
1
ai
¡Ú
bj
li
0
else
li
1
li
1
1
li
len
len
li
answer
example
0
0
0
1
0
0
0
0
0
0
0
1
0
0
0
0
1
0
0
0
0
0
2
0
0
longest
common
subsequence
string
subsequence
string
string
can
obtained
deleting
0
symbols
string
example
houseboat
houseboat
ousbo
subsequence
houseboat
string
common
subsequence
strings
subsequence
also
subsequence
example
houseboat
computer
houseboat
computer
common
subsequence
houseboat
computer
string
longest
common
subsequence
lcs
strings
common
subsequence
common
subsequence
greater
length
let
li
length
lcs
1
1
prefixes
strings
lengths
li
li
1
1
1
ai
bj
li
max
li
1
li
1
ai
¡Ú
bj
longest
common
subsequence
0
li
0
0
0
l0
0
1
1
ai
bj
li
1
li
1
1
else
li
max
li
1
li
1
length
lm
dan
hirschberg
last
modified
oct
14
2005
