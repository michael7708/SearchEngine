ics 32 winter 2013 project 4 the width circle part 1 
project 4 
ics
32
winter
2013
news
course
reference
schedule
project
guide
code
examples
alex
ics
32
winter
2013
project
4
width
circle
part
1
due
date
time
monday
march
4
11
59pm
project
done
individually
background
first
exposure
computers
kid
school
context
computer
games
educational
games
school
though
many
first
time
remember
sitting
behind
computer
radio
shack
trs
80
model
played
game
called
fastmath
pitted
two
players
one
another
trying
alternately
solve
arithemtic
problems
type
answers
quickly
possible
sure
just
boring
educational
game
one
ridiculously
simple
today's
standards
time
captivated
still
remember
day
especially
loved
winning
though
always
win
thanks
wisdom
parents
long
computer
home
commodore
64
complete
collection
games
none
games
played
computer
classified
educational
direct
sense
though
games
sneaky
taught
surprising
collection
lessons
motivated
ask
many
interesting
questions
computing
endeavored
first
win
outright
modify
cheat
change
game
played
make
fun
finally
write
scratch
games
days
course
photorealistic
three
dimensional
surround
sound
appeal
today
nonetheless
fun
exciting
simplicity
made
writing
one's
game
seem
possible
limited
skills
today
era
tremendously
complex
games
built
gigantic
teams
programmers
designers
artists
truth
easier
build
simple
games
now
computers
become
much
powerful
tools
gotten
better
just
harder
compete
large
scale
professionally
developed
games
unfortunately
skills
develop
quickly
enough
always
aimed
high
relative
knew
tougher
internet
search
got
stuck
something
never
realized
goal
writing
games
became
interested
things
though
certainly
learned
lot
trying
project
first
two
part
sequence
offers
opportunity
build
game
first
two
projects
focuses
developing
clean
set
game
logic
console
mode
outer
shell
second
pivots
building
graphical
user
interface
atop
game
logic
focusing
drawing
graphics
handling
variety
user
input
along
way
focus
finding
design
serves
purposes
finding
ways
simplify
code
eliminating
duplication
boilerplate
continuing
journey
understanding
mechanics
benefits
classes
object
oriented
programming
python
games
may
seem
frivolous
know
everyone
likes
play
provide
fascinating
combination
problems
solved
software
engineering
human
computer
interface
computer
networks
psychology
cognition
even
multiplayer
online
games
economics
sociology
game
developers
push
envelope
cases
just
kind
software
developers
many
lessons
can
applied
seemingly
serious
contexts
even
interested
games
surprised
building
games
can
teach
software
game
othello
project
subsequent
one
will
ask
implement
game
called
othello
othello
also
known
reversi
well
known
two
player
strategy
game
game
played
square
board
divided
grid
usually
8x8
though
size
grid
can
vary
players
alternately
place
discs
game
board
one
player's
discs
black
player's
white
discs
placed
game
board
discs
already
board
flipped
black
disc
becomes
white
disc
vice
versa
game
concludes
every
square
grid
contains
disc
neither
player
able
make
legal
move
winning
player
generally
one
discs
board
end
game
though
alternate
ways
determine
winner
rules
game
along
notion
strategy
described
wikipedia
entry
reversi
played
othello
seen
previously
remember
works
least
read
sections
wikipedia
entry
cover
rules
game
knowing
game
played
proceeding
project
vital
want
try
playing
game
web
based
version
available
program
project
asks
build
console
mode
two
player
version
othello
capable
playing
single
game
othello
single
computer
handful
options
allow
users
decide
game
will
played
begins
program
begins
asking
users
choose
options
game
played
asking
users
enter
moves
directly
console
continuing
game
complete
point
program
ends
detailed
look
program
behave
users
will
interact
program
following
way
program
asks
user
specify
following
options
order
specified
previous
projects
users
enter
erroneous
input
number
rows
fractional
part
invalid
move
program
inform
user
input
erroneous
ask
user
input
number
rows
board
must
even
integer
4
16
number
columns
board
must
even
integer
4
16
number
rows
players
will
move
first
black
white
generally
black
player
moves
first
othello
though
allow
user
specify
white
player
move
first
preferred
according
rules
game
begins
four
discs
board
two
white
two
black
arranged
four
center
cells
grid
two
white
discs
separated
diagonally
two
black
discs
separated
diagonally
user
can
choose
color
disc
will
top
left
position
four
center
cells
white
traditional
default
black
finally
user
can
select
means
win
game
two
choices
player
discs
board
end
game
winner
player
fewest
discs
board
end
game
winner
makes
interesting
different
flavor
game
game
following
sequence
events
repeated
display
score
many
discs
color
board
board
whose
turn
black
white
move
user
asked
make
move
specifying
cell
board
like
place
disc
user
selects
cell
though
make
clear
user
interface
user
required
move
invalid
see
rules
curious
makes
move
invalid
inform
user
ask
another
one
move
made
discs
placed
flipped
done
move
proceeding
next
one
game
display
score
board
winner
sure
handle
case
winner
number
discs
board
players
equal
end
game
point
program
can
end
prefer
can
begin
asking
user
specify
options
etc
give
user
opportunity
exit
program
another
game
desired
couple
gotchas
aware
game
logic
part
othello
games
proceed
players
moving
alternately
continue
cells
grid
contain
disc
however
couple
wrinkles
need
sure
handle
sometimes
player
will
make
move
result
opposite
player
will
valid
moves
available
cell
grid
opposite
player
can
move
afterward
case
turn
reverts
back
player
just
moved
occasionally
neither
player
will
valid
move
board
even
though
still
empty
cells
grid
case
game
immediately
ends
winner
determined
based
number
discs
player
board
thinking
design
module
design
required
keep
code
implements
game
logic
entirely
separate
code
implements
console
mode
user
interface
end
will
required
submit
least
two
modules
one
implements
game
logic
another
implements
user
interface
welcome
break
two
modules
find
beneficial
requirement
keep
two
parts
program
logic
user
interface
separate
note
motivated
partly
desire
build
good
design
habits
also
practical
reality
maintaining
separation
properly
will
give
much
better
chance
able
reuse
game
logic
without
modification
next
project
least
one
modules
executable
contain
name
'
main
'
block
namely
one
execute
wanted
launch
user
interface
play
game
using
classes
exceptions
implement
game
logic
game
logic
must
consist
least
one
class
whose
objects
represent
current
state
othello
game
methods
manipulate
state
can
feel
free
implement
additional
classes
like
note
stark
contrast
approach
used
connectfour
py
project
2
used
namedtuple
set
functions
returned
new
states
classes
offer
us
ability
mix
data
together
operations
safely
manipulate
data
allow
us
create
kinds
objects
just
know
store
things
also
things
methods
found
useful
implementation
othello
game
state
listed
exhaustive
list
probably
find
need
additional
methods
beyond
get
number
rows
columns
board
find
whose
turn
determine
whether
game
determine
whether
disc
cell
grid
determine
color
make
move
even
console
user
interface
error
checking
game
logic
assume
presence
particular
user
interface
must
check
parameters
given
raise
exception
parameters
problematic
non
existent
row
column
attempt
make
invalid
move
attempt
make
move
game
create
exception
class
es
represent
error
conditions
testing
one
issue
comes
implementation
program
like
one
difficult
test
corner
cases
come
game
logic
playing
game
using
console
interface
can
difficult
duplicate
games
end
tie
situations
turn
skips
back
player
just
moved
situations
game
ends
empty
cells
still
board
yet
need
sure
issues
others
like
handled
correctly
game
logic
best
way
handle
problems
like
test
interesting
small
picture
scenarios
separately
one
way
load
game
logic
python
interpreter
type
python
expressions
statements
interpreter
manually
verify
behavior
expect
already
missing
one
valuable
tools
python
offers
testing
understanding
programs
write
better
approach
however
write
test
module
separate
executable
module
contains
code
asserts
behavior
want
verify
going
type
tests
interpreter
anyway
might
well
write
module
instead
can
run
repeatedly
number
tests
written
begins
increase
increasing
value
re
running
tests
every
time
make
change
program
re
run
test
module
see
whether
something
working
previously
now
broken
powerful
technique
indeed
order
kind
testing
whether
run
tests
manually
interpreter
write
explicitly
test
module
may
find
needing
include
functions
modules
methods
classes
might
otherwise
need
like
able
manually
manipulate
cells
game
board
without
making
moves
can
set
particular
board
scenario
without
figure
sequence
moves
generates
idea
writing
code
appear
need
seems
wasteful
consider
flip
side
argument
spending
little
bit
time
implementing
additional
functions
might
well
save
lot
time
debugging
program
line
automating
testing
something
talk
later
quarter
well
worth
effort
experience
quite
often
save
lot
time
spend
writing
tests
project
focus
kind
testing
game
logic
opposed
user
interface
great
way
ensure
user
interface
built
solid
foundation
even
allows
write
game
logic
without
writing
user
interface
initially
will
almost
surely
reduce
amount
time
spend
debugging
program
decide
write
tests
asserts
sure
write
separate
module
modules
mix
asserts
program
thinking
future
addition
present
next
project
will
revisit
othello
game
building
will
ask
instead
build
graphical
user
interface
game
using
tkinter
library
talking
lot
tkinter
event
based
programming
lecture
learn
sure
consider
design
project
particularly
game
logic
can
done
way
allows
reuse
code
subsequent
project
will
want
start
scratch
means
need
cognizant
can
separate
code
handles
console
input
output
code
implements
underlying
game
logic
also
means
want
start
thinking
graphical
user
interface
might
need
interface
game
logic
learn
graphical
user
interfaces
event
based
programming
lecture
next
week
word
use
outside
resources
aware
existing
versions
othello
written
python
available
online
go
without
saying
permitted
download
submit
whole
part
permitted
use
kind
basis
work
prior
experience
taught
otherwise
generally
like
keep
pretty
open
policy
outside
resources
pedagogically
wise
implementations
othello
strictly
limits
work
project
aware
variety
existing
implementations
found
online
will
included
plagiarism
detection
work
submitted
deliverables
put
name
student
id
comment
top
py
files
submit
files
checkmate
take
moment
sure
submitted
files
follow
link
discussion
submit
project
via
checkmate
aware
holding
rules
specified
document
including
one
says
responsible
submitting
version
project
want
greaded
regrade
project
simply
submitted
wrong
version
accidentally
can
submit
deadline
yes
possible
subject
late
work
policy
course
described
section
titled
late
work
link
originally
written
alex
thornton
winter
2013
influence
games
without
frontiers
black
white
also
written
alex
thornton
