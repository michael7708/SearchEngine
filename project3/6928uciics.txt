cs 154 lab 6 controller complete mips cpu 
lab 6 
complete
mips
cpu
lab
6
objective
lab
assignment
design
implement
cpu
cpu
consists
data
path
control
unit
design
task
lab
additional
logic
needed
pc
update
alu
control
controller
work
data
path
implemented
lab
5
can
use
one
reference
specification
lab
will
complete
design
mips
cpu
adding
controller
unit
lab
5
control
unit
consists
moore
state
machine
fsm
registered
output
combination
logic
generates
alu
opcode
control
unit
correspond
multi
cycle
implementation
multi
cycle
implementation
step
takes
1
clock
cycle
following
figure
gives
summary
steps
taken
execute
instruction
class
note
empty
entries
indicate
particular
instruction
takes
fewer
5
cycles
execute
also
need
implement
jal
type
instructions
shown
table
please
turn
bubble
diagram
fsm
memory
unit
description
memory
byte
addressable
32
words
lower
half
stores
instruction
upper
half
stores
data
even
though
lw
sw
access
memory
possibility
multiple
memory
requests
clock
cycle
example
memory
shown
please
note
cell
immediately
field
final
code
shows
bit
number
instruction
bit
careful
memory
write
instructions
overwrite
instructions
design
task
first
design
controller
control
vhd
incorporate
data
path
built
previous
labs
make
cpu
inside
entity
lab6
need
connect
controller
lab5
datapath
simulate
design
using
modelsim
final
top
level
entity
lab6
will
2
inputs
clk
reset
template
vhdl
files
provided
interface
ports
already
defined
need
add
code
functionality
files
make
work
timing
imporant
lab
basic
idea
start
operation
beginning
cycle
commit
result
various
registers
rising
edge
ends
cycle
example
fetch
stage
start
memory
access
beginning
cycle
generating
pulse
memread
signal
also
start
calculating
pc
4
alu
time
memory
operation
alu
calculation
delay
result
ready
end
cycle
therefore
end
cycle
rising
edge
clock
new
pc
pc
4
committed
pc
register
new
instruction
committed
ir
register
another
example
decode
stage
2
things
happen
register
access
branch
target
calculation
beginning
cycle
use
rs
rt
read
register
file
time
calculate
branch
target
pc
sign
extend
immediate
00
operations
will
delay
result
ready
end
cycle
rising
edge
terminates
cycle
register
values
committed
rega
regb
time
branch
target
committed
aluout
order
achieve
control
signals
stable
clock
edge
especially
write
enable
signals
pcupdate
irwrite
regwrite
may
need
use
1
ns
signal
assignments
verification
start
use
program
segment
given
test
design
develop
program
segment
rigorous
testing
test
design
step
step
fashion
make
sure
cpu
executes
format
instructions
correctly
addresses
others
program
segment
used
demo
will
different
one
need
test
following
memory
access
instruction
lw
5
steps
sw
4
steps
alu
computation
type
instruction
4
steps
branch
equal
equal
3
steps
jump
jal
3
steps
minimal
requirement
lab
fully
functionally
correct
design
modelsim
project
test
bench
showing
design
satisfies
previous
requirements
correct
execution
given
code
fragment
execution
instruction
specified
number
steps
defined
time
interval
two
consecutive
rising
edges
40
ns
please
name
folders
files
according
given
submission
guidelines
