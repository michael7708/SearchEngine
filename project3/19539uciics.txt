ramesh jain blog ? blog archive ? sue generis class 
sue generis class 
search
index
homepage
bren
school
uci
living
past
dangerous
present
future
multimedia
information
retrieval
nus
1
sue
generis
class
break
session
academic
researchers
funded
agency
people
asked
program
manager
identify
class
research
falls
theory
technology
applications
may
appear
obvious
interesting
discussion
started
multiple
people
felt
research
really
innovative
classification
capture
project
asked
add
class
identify
characteristics
class
make
different
three
discussion
continued
program
manager
believe
got
bit
frustrated
insisted
project
belong
one
classes
appear
one
goals
research
community
prove
research
class
sue
generis
desire
takes
us
deeper
classification
tree
can
make
research
leaf
learnt
something
important
aspects
research
culture
posted
ramesh
saturday
august
1st
2009
7
27
one
response
sue
generis
class
nice
read
post
can
understand
situation
must
like
thing
everyone
wanted
prove
project
different
category
actually
tells
us
lot
things
passion
sense
involvement
p0int
prove
etc
etc
look
forward
posts
left
web
development
services
august
3rd
2009
something
say
name
required
mail
will
published
required
website
color
orange
required
march
2013mtwtfss
feb
12345678910111213141516171819202122232425262728293031
side
rameshentrepreneurial
activitiesinterviewsphotographspresentationsprofessional
affiliationspublications
list
publications
media
vision
column
ieee
multimedia
recent
papersresearch
areas
computer
vision
experiential
environments
multimedia
information
systemsteachingwhite
papers
contact
ramesh
phone
949
824
0133fax
949
824
4056office
3419
calit2
buildinge
mail
jain
ics
uci
eduoffice
hours
appointment
recent
comments
ramesh
thanks
arnab
appreciate
arnab
sen
prof
ramesh
jain
loved
going
tvstreaming
proves
need
make
tv
streaming
knowledge
power
sandra
barker
feel
sorry
happened
recent
entries
creating
health
personacreating
persona
using
data
streamsrip
four
legged
sonobjective
selfsocial
systems
big
data
archives
march
2013february
2013october
2012september
2012august
2012june
2012may
2012april
2012march
2012february
2012january
2012august
2011july
2011june
2011may
2011april
2011march
2011february
2011january
2011december
2010november
2010october
2010september
2010august
2010july
2010june
2010may
2010april
2010march
2010february
2010january
2010december
2009november
2009october
2009september
2009august
2009july
2009june
2009may
2009april
2009march
2009february
2009january
2009december
2008november
2008october
2008september
2008august
2008july
2008june
2008may
2008april
2008march
2008february
2008january
2008december
2007november
2007october
2007september
2007august
2007july
2007june
2007may
2007april
2007march
2007february
2007january
2007december
2006november
2006october
2006september
2006august
2006july
2006june
2006may
2006april
2006march
2006february
2006january
2006december
2005november
2005october
2005september
2005august
2005july
2005june
2005may
2005april
2005march
2005february
2005january
2005december
2004november
2004october
2004september
2004august
2004july
2004june
2004may
2004april
2004march
2004february
2004
categories
entrepreneurism
121
experiential
computing
285
general
updates
416
personal
86
prospecting
information
70
technical
thoughts
386
meta
log
invalid
xhtmlxfnwordpress
entries
rss
comments
rss
ramesh
jain
blog
proudly
powered
wordpress
entries
rss
comments
rss
intensity
0
sort
time
order
decreasing
time
recently
surveyed
items
appear
first
within
time
sorted
ascending
row
order
row
ascending
column
order
unsurveyed
cells
appear
file
appear
bottom
list
sort
row
order
ascending
row
number
within
row
ascending
column
order
sort
column
order
ascending
column
number
within
column
ascending
row
order
view
another
survey
user
just
enters
new
file
name
presses
view
exit
user
clicks
window
close
box
technical
issues
requirements
ics
23
eclipse
workspace
previously
discussed
use
eclipse
programming
environment
eclipse
keeps
program
project
projects
kept
workspace
also
keeps
track
environment
settings
including
compile
runtime
options
eclipse
provides
large
set
options
unfortunately
default
settings
aren
entirely
appropriate
us
course
keep
things
straightforward
ll
use
workspace
one
already
set
appropriate
settings
course
settings
will
used
grading
work
workspace
zip
file
available
ics
23
eclipse
workspace
good
place
put
workspace
working
ics
labs
drive
will
available
regardless
machine
logged
well
permanently
stored
remember
files
stored
drive
can
erased
example
might
put
workspace
folder
named
23workspace
might
also
want
store
usb
memory
stick
portable
media
thus
backup
case
lose
original
note
mac
users
intend
use
eclipse
machines
zip
archive
may
appear
empty
contains
folder
called
metadata
files
folders
whose
names
begin
character
hidden
mac
os
default
go
ahead
unzip
archive
discussed
will
well
unearthingthepast
project
file
code
makes
program
included
unearthingthepast
project
file
ve
already
included
project
workspace
download
complete
assignment
add
code
appropriate
java
source
files
source
folder
inside
project
provided
code
code
write
ve
provided
code
class
files
handles
graphic
display
map
report
ll
find
files
project
lib
folder
supply
code
reads
information
gpr
data
file
prepares
grid
grid
contains
information
file
form
appropriate
use
graphics
routines
control
grid
map
also
write
code
takes
information
grid
massages
gpr
report
report
long
string
picked
graphics
routines
appropriate
displayed
report
window
help
write
code
write
according
specification
provide
project
source
folder
four
java
source
files
one
class
main
method
get
things
going
three
interfaces
help
ensure
code
meets
required
specifications
files
left
unchanged
specifically
files
gpr
java
main
progam
also
gives
brief
description
programcellinfointerface
java
interface
describes
enforces
requirements
cell
class
contains
information
one
cell
grid
write
cell
class
gprgridinterface
java
interface
describes
enforces
requirements
grid
class
write
grid
class
surveyreportinterface
java
interface
describes
enforces
requirements
report
write
report
class
java
files
well
commented
contains
information
need
properly
implement
cell
grid
report
classes
format
gpr
data
file
pay
attention
additional
requirements
exact
format
report
must
1
contain
data
gpr
data
file
2
formatted
site
name
number
rows
columns
appear
top
report
followed
cell
information
cell
information
one
line
3
formatted
easy
read
locate
specfic
information
user
able
find
information
particular
cell
quickly
will
lose
points
report
hard
read
understand
program
run
within
eclipse's
default
memory
allocations
particular
means
increase
size
heap
runtime
stack
restriction
simulate
real
world
situation
work
middle
nowhere
real
world
constraint
needed
air
drops
middle
egyptian
desert
deliver
ram
beef
computer
just
doesn
happen
program
runs
memory
processing
provided
test
files
see
implementation
needs
improvement
sort
cells
given
order
report
must
use
priority
queue
based
singly
linked
list
pq
add
operation
1
delete
operation
recall
value
function
upper
bound
can
make
operations
faster
indicated
slower
can
write
linked
list
class
adapt
linked
list
class
text
web
site
allows
adaptation
code
class
notes
another
course
adapt
list
code
another
source
sure
cite
source
comments
code
considered
plagarism
note
use
java
linkedlist
class
based
doubly
linked
list
must
write
priority
queue
class
course
uses
linked
list
class
objects
appropriate
use
priority
queue
defined
provides
essentially
sorting
data
via
selection
sort
data
sorted
one
four
ways
given
depending
upon
ordering
user
chooses
several
reasonable
approaches
computing
priority
hints
ideas
one
can
compute
four
priorities
store
priorities
part
information
placed
queue
time
cell
information
inserted
cell
inserted
way
priority
computed
alternative
approach
determine
node
priority
delete
operation
whenever
node
examined
needed
priority
computed
node
stored
information
since
nodes
may
queried
several
times
course
deleting
items
add
report
approach
coud
quite
bit
slower
one
discussed
paragraph
takes
much
less
storage
space
storage
space
somethig
concern
data
file
large
number
millions
squares
removing
items
repeatedly
priority
queue
produces
items
decreasing
order
one
wants
items
increasing
order
violate
rules
priority
queue
deletion
invert
priority
example
original
priority
number
multiply
1
subtract
number
larger
legal
value
produce
new
priority
new
priority
will
deliver
items
reverse
order
nice
trick
computing
priority
sort
key
composed
multiple
fields
concatentate
one
long
number
string
ordered
first
field
use
last
example
intensity
ordering
one
can
make
priority
computed
change
shiftfactorforrow
10
floor
log
numberofcolumns
1
shiftfactorforintensity
10
floor
log
numberofrows
1
shiftfactorforrow
computed
node's
priority
priority
intensity
shiftfactorforintensity
numberofrows
row
shiftfactorforrow
numberofcolumns
col
note
1
trick
will
work
approach
one
way
reorder
report
information
re
read
file
gpr
memory
structure
contains
data
placing
back
priority
queue
reading
data
disk
orders
magnitude
slower
reading
things
memory
better
re
read
file
time
report
reodered
re
reading
data
gpr
memory
structure
also
takes
time
though
much
reading
disk
time
actually
need
spend
use
little
trick
delete
node
priority
queue
actually
delete
instead
mark
node
deleted
priority
queue
leave
underlying
list
user
selects
diferent
ordering
information
just
go
linked
list
used
store
priority
queue
data
unmark
deleted
items
now
original
data
back
queue
without
read
file
project
file
contains
test
files
help
debug
program
end
txt
extension
example
file
simpletest
txt
produces
grid
patterns
files
produce
look
like
names
imply
files
ending
big
can
take
several
minutes
process
obviously
use
program
working
smaller
files
will
note
report
generated
files
poorly
formatted
purposely
give
idea
report
report
showing
data
test
files
much
nicer
described
hint
java
string
format
static
method
takes
pattern
string
produces
output
string
conforms
format
powerful
method
can
format
output
almost
way
possibly
want
can
find
details
format
introductory
java
book
tutorials
web
complete
documetation
available
java
platform
standard
edition
7
api
specification
web
page
check
string
formatter
classes
making
speedy
program
obviously
users
gpr
program
want
wait
necessary
see
map
report
view
button
clicked
results
need
display
quickly
feasible
main
determiner
speed
program
long
data
files
especially
big
files
take
process
depends
mainly
upon
priority
queue
implementation
java
string
classes
use
can
improve
speed
program
bit
using
means
focus
micro
efficiencies
speed
increase
minimal
example
milliseconds
faster
report
takes
minutes
generate
resulting
code
harder
understand
maintain
implement
change
just
worth
however
can
make
priority
queue
faster
making
small
easy
understand
variation
go
ahead
example
way
using
technique
discussed
class
construct
list
never
check
null
list
adding
node
saves
constant
time
insertion
across
many
insertions
noticeable
increase
speed
ll
learn
faster
implementations
priority
queues
later
course
even
exercise
priority
queue
structure
program
can
made
several
times
faster
using
right
java
string
class
turns
main
activity
slows
program
constructing
report
requires
concatenating
many
many
pieces
information
one
long
string
graphics
routine
prints
report
can
handle
single
string
input
use
standard
string
class
concatenations
takes
long
time
strings
immutable
change
assigned
value
time
concatenation
new
target
string
allocated
hold
result
large
concatenated
string
copied
new
string
object
time
consuming
task
however
java
also
provides
stringbuffer
class
produces
objects
hold
strings
can
modified
point
time
stringbuffer
object
contains
particular
sequence
characters
length
content
sequence
can
changed
principal
operations
stringbuffer
append
insert
methods
overloaded
accept
data
type
effectively
converts
given
datum
string
appends
inserts
characters
string
string
buffer
append
method
always
adds
characters
end
buffer
insert
method
adds
characters
specified
point
example
refers
string
buffer
object
whose
current
contents
start
method
call
append
le
cause
string
buffer
contain
startle
whereas
insert
4
le
alter
string
buffer
contain
starlet
java
stringbuffer
api
documentation
download
oracle
com
javase
7
docs
api
thus
append
works
like
concatenation
strings
except
current
string
extended
instead
new
string
allocated
much
much
faster
nicely
format
piece
report
append
report
string
append
string
format
pattern
string
add
report
will
nicely
formatted
appears
gpr
screen
potentially
even
better
stringbuilder
class
designed
use
drop
replacement
stringbuffer
places
string
buffer
used
single
thread
generally
case
possible
recommended
class
used
preference
stringbuffer
will
faster
implementations
java
stringbuilder
api
documentation
download
oracle
com
javase
7
docs
api
constructors
append
insert
stringbuilder
work
way
equivalent
stringbuffer
methods
gpr
program
uses
one
explicit
thread
try
stringbuilder
see
well
works
graphic
routines
sometimes
call
threads
might
interfere
stringbuilder
revert
back
stringbuffer
event
though
use
string
objects
build
report
use
stringbuilder
can
stringbuffer
must
documetation
string
stringbuffer
stringbuilder
java
platform
standard
edition
7
api
specification
web
page
deliverables
zip
project
folder
file
unearthingthepast
zip
turn
via
checkmate
turn
entire
workspace
quite
large
already
workspace
set
running
grading
program
written
norman
jacobson
august
2006
portions
based
sections
spring
2006
version
ics
23
assignment
dark
end
tunnel
alex
thornton
revised
norman
jacobson
revised
discuss
additional
test
files
norman
jacobson
october
2006
added
section
discuss
stringbuilder
stringbuffer
made
minor
edits
fix
typographical
errors
norman
jacobson
january
2007
minor
edits
clarity
emphasize
string
used
build
report
norman
jacobson
december
2008
made
clear
pq
1
insert
delete
added
hints
determining
priorities
indicated
data
file
data
squares
grid
norman
jacobson
april
2009
added
intro
material
provide
eclipse
workspace
assignments
reflect
use
eclipse
workspace
project
add
couple
hints
explanations
norman
jacobson
march
2010
added
discussion
avoid
re
reading
data
re
ordering
report
added
restriction
default
memory
allocations
can
used
norman
jacobson
april
2010
corrected
multiple
key
hint
formula
made
minor
edits
updated
documentation
links
norman
jacobson
march
april
2011
updated
documentation
links
norman
jacobson
march
2012
