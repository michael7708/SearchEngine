natural neighbor coordinates points surface 
natural neighbor coordinates points surface 
natural
neighbor
coordinates
points
surface
jean
daniel
boissonat
fr
ric
cazals
computational
geometry
theory
applications
19
2
3
155
173
jul
2001
http
www
sop
inria
fr
prisme
personnel
cazals
papers
cgta01
natneeighcoordsptssurf
ps
gz
cites
crust
beta
skeleton
combinatorial
curve
reconstruction
eppstein
publications
citation
database
documents
fano
experimental
web
server
eppstein
school
information
computer
science
uc
irvine
etc
novel
ones
hiding
information
hide
implementation
usually
know
data
structure
best
tree
list
array
y2k
problem
ignorance
tools
class
year
char
annum
year
int
annum
new
char
2
annum
0
character
fordigit
10
10
annum
1
character
fordigit
10
10
public
string
tostring
return
19
string
valueof
annum
hide
ignorance
user
unclear
preference
getting
information
many
objects
type
much
work
required
modify
method
routine
change
just
switched
metric
system
change
reporting
acquisition
forms
learning
programming
language
expert
programmer
knows
tricks
use
james
neighbors
construct
learn
syntax
define
test
compiler
accepts
semantics
really
happens
tests
explain
friend
expect
purpose
want
test
use
defining
class
simple
application
file
named
complextest
java
normally
one
puts
class
definition
separate
file
files
program
project
single
directory
follow
comment
style
given
explanatory
comments
learning
language
alternatively
can
view
bad
comments
sometimes
seen
will
provide
examples
good
commenting
style
class
complex
end
line
comment
private
double
private
accessible
outside
class
private
double
data
member
complex
double
double
constructor
passed
parameter
object
accesses
data
members
complex
double
convention
class
names
begin
capital
java
case
sensitive
0
refers
constructor
level
complex
functions
distinguished
parameters
0
0
double
getreal
accessor
get
values
data
members
conventions
methods
start
lower
case
letter
return
double
getimaginary
return
void
setreal
double
mutators
change
values
fields
void
setimaginary
double
complex
mult
complex
complex
new
complex
new
allocates
storage
returns
reference
setreal
getreal
getimaginary
accesses
member
functions
setimaginary
getimaginary
getreal
return
public
string
tostring
string
class
java
array
characters
tostring
useful
printing
debugging
overrides
object
tostring
note
overriding
requires
accessibility
changed
tostring
unusual
semantics
called
whenever
object
type
string
needed
return
concatenates
string
objects
public
class
complextest
note
class
corresponds
filename
public
static
void
main
string
args
line
required
applications
complex
c1
new
complex
3
2
complex
c2
new
complex
1
2
system
println
c1
tostring
system
println
c2
automatic
call
tostring
system
println
product
c1
c2
system
println
c1
mult
c2
complex
c3
new
complex
double
valueof
args
0
doublevalue
double
valueof
args
1
doublevalue
note
left
associative
system
println
c3
compile
unix
javac
complextest
java
will
generate
complextest
class
run
unix
java
complextest
will
run
main
routine
note
file
can
one
public
class
note
semantics
tostring
unusual
string
object
needed
say
println
object
string
method
tostring
will
called
automatically
java
class
vector
java
util
vector
holds
objects
allows
addition
deletion
objects
may
think
extensible
array
3
constructors
30
methods
vectors
contain
objects
references
need
vector
probably
constructor
vector
public
final
synchronized
void
addelement
object
public
final
synchronized
void
removeelement
object
public
final
boolean
contains
object
public
final
synchronized
enumeration
elements
notes
final
means
overridden
safety
feature
enumeration
permits
moving
items
data
structure
one
time
loop
enumeration
interface
two
methods
namely
hasmoreelements
nextelement
synchronized
provides
ability
control
updates
vector
example
prevent
multiple
simultaneous
deletions
bank
account
address
book
class
exercise
objects
book
address
name
last
name
behaviors
static
classes
static
methods
java
global
functions
globals
constants
global
functions
implemented
static
member
functions
ex
math
random
function
class
math
generates
random
number
global
constants
implemented
static
member
objects
convention
constants
caps
ex
math
pi
stands
constant
3
14
notice
create
instance
class
math
constants
functions
attached
class
example
return
complex
number
class
suppose
want
count
number
complex
numbers
program
generated
add
static
data
member
count
modify
constructors
static
functions
can
access
static
data
members
also
add
corresponding
print
function
public
class
complex
private
static
int
count
0
int
associated
class
private
double
associated
instance
class
private
double
complex
double
double
count
public
static
printcount
system
println
number
complex
numbers
used
count
output
goes
console
called
complex
printcount
notice
static
functions
passed
parameter
java
semantics
semantics
defined
operationally
procedural
ie
compiler
interpreter
recall
java
program
collection
classes
one
class
must
name
file
main
driver
class
class
bit
unusual
allows
command
line
interaction
however
derived
object
implicit
call
super
object
class
used
must
constructed
except
driver
class
classes
without
data
members
object's
lifetime
automatically
garbage
collected
removes
major
source
errors
languages
require
programmer
free
memory
memory
leaks
major
source
problems
code
order
classes
methods
class
unimportant
language
processor
will
sort
order
unlike
removes
annoyance
class
static
variables
static
expressions
initialize
executed
load
time
need
available
objects
class
order
loading
classes
determines
order
execution
static
expression
blocks
main
routine
driver
class
application
will
first
one
executed
driver
class
application
must
contain
definition
public
static
void
main
string
args
classes
may
main
routines
useful
debugging
applets
driver
class
must
extend
applet
will
discuss
interpretation
applets
later
design
rules
eiffel
school
eiffel
object
oriented
language
came
java
eiffel
rest
stressed
object
oriented
design
bottom
implementation
inheritance
programming
contract
use
assertions
preconditions
postconditions
goal
high
quality
software
succesful
language
classes
data
members
many
simple
functions
class
defines
behavior
object
repeat
code
design
wrong
code
complicated
design
probably
wrong
reuse
classes
inheritance
reuse
classes
creating
multiple
object
class
code
test
class
separately
always
possible
push
code
inheritance
hierarchy
novice
coders
use
grab
run
experienced
coders
use
guess
check
iterate
redesign
learn
process
object
oriented
design
review
classes
new
user
defined
types
classes
define
objects
hide
implementations
dependencies
define
relationships
among
classes
dependencies
allow
reuse
variation
static
type
checking
promotes
integration
correctness
efficiency
comprehensibility
bottom
design
yields
reuse
also
less
abstraction
top
design
yields
better
organization
less
reuses
proper
design
entails
mixing
top
design
bottom
design
maximize
information
hiding
parnas
class
object
summary
object
instance
class
object
data
members
corresponding
objects
knows
data
functions
corresponding
object
can
sure
can
distinguish
class
members
object
members
arrays
strings
objects
java
checklist
methods
constructors
accessors
mutators
java
destructors
uses
garbage
collection
can
called
scheduled
explicitly
class
user
defined
type
objects
help
bridge
gap
problem
code
decomposing
process
domain
classes
derived
domain
analysis
model
world
code
classes
built
primitive
types
increase
level
abstraction
code
beyond
minimality
add
useful
operations
class
expect
define
constructors
accessors
mutators
functions
can
return
objects
primitive
types
primitive
types
java
boolean
char
byte
short
int
long
float
double
primitive
types
objects
wrappers
convert
primitive
types
objects
integer
3
wrapper
constructs
integer
object
integer
3
useful
generic
functions
require
objects
example
vector
container
objects
primitive
types
absolutely
sure
define
access
classes
objects
class
static
methods
object
methods
class
static
variables
object
variables
