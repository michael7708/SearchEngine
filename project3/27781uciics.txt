ics 65 fall 2012 project 4 unwashed somewhat slightly dazed 
project 4 
ics
65
fall
2012
news
course
reference
schedule
project
guide
code
examples
alex
ics
65
fall
2012
project
4
unwashed
somewhat
slightly
dazed
due
date
time
monday
december
3
11
59pm
introduction
used
everything
video
games
predicting
weather
financial
markets
understanding
reactions
underlie
nuclear
weapons
simulation
technique
allows
computers
help
us
visualize
might
general
goal
find
simplified
model
reality
captures
essence
reality
without
expressing
every
detail
allow
model
play
often
accelerated
fashion
see
effects
depending
nearly
model
resembles
reality
simulation
can
effective
way
see
possible
future
weather
will
five
days
team
will
win
big
game
candidate
will
win
election
markets
will
next
week
create
worlds
inhabit
games
play
simulations
implemented
using
variety
techniques
project
explores
particular
kind
simulation
discrete
event
based
simulation
events
occur
according
schedule
determined
fly
simulation
plays
goal
focus
points
time
interesting
events
taking
place
skipping
dead
spots
simulations
sparse
meaning
relatively
events
happen
non
regular
intervals
event
based
simulations
can
quite
efficient
simulation
will
model
inner
workings
dry
cleaning
establishment
though
noted
technique
broader
use
may
find
useful
work
going
forward
delving
details
simulation
will
also
gain
experience
features
yet
explore
defining
template
functions
template
classes
random
number
generation
techniques
built
standard
library
overloading
operators
using
overloads
template
classes
model
dry
cleaning
establishment
almost
every
strip
mall
shopping
center
orange
county
houses
dry
cleaning
establishment
suppose
decided
open
one
also
decided
leverage
software
writing
abilities
search
efficiencies
might
help
compete
effectively
cleaners
already
business
particular
decided
design
implement
simulation
will
take
place
establishment
can
assess
staffing
levels
differing
workloads
will
affect
overall
throughput
business
like
simulation
need
begin
model
actual
dry
cleaning
establishment
physical
store
occupying
physical
space
complete
machinery
employees
customers
complexities
able
effectively
model
software
simulation
will
operate
according
simplified
model
still
captures
essence
will
go
business
opened
will
cleaned
keep
simulation
reasonably
simple
say
articles
clothing
call
garments
identical
size
weight
realistic
differences
say
dress
shirts
graduation
gowns
bother
model
expect
differences
will
even
course
time
will
make
certain
parameters
configurable
can
model
different
average
clothing
sizes
different
simulation
runs
machinery
used
business
will
consist
following
machinery
pre
treatment
stations
employee
inspects
garment
finding
specially
treating
stains
likelier
removed
cleaning
process
cleaning
machines
batches
pre
treated
garments
cleaned
using
dry
cleaning
products
employee
required
transfer
set
garments
cleaning
machine
employee
oversight
required
machine
running
finishing
stations
employee
takes
cleaned
garment
optionally
presses
packages
customer
pick
garments
will
follow
process
pass
three
stages
though
garments
will
spend
amount
time
stages
interactions
customers
whereby
garments
dropped
picked
also
part
business
will
model
simulation
expect
cleaning
process
labor
intensive
thus
limiting
factor
growth
employees
business
will
hiring
number
employees
course
real
people
differ
terms
skills
motivations
simulation
will
presume
interchangeable
though
certain
aspects
collective
behavior
quickly
process
garments
will
configurable
word
warning
resemblance
inner
workings
actual
dry
cleaning
business
purely
coincidental
reality
know
dry
cleaning
farming
might
also
make
interesting
simulation
zynga
certainly
thought
many
casual
gameplayers
agreed
overview
simulation
process
simulation
process
works
following
way
whenever
randomly
selected
intervals
random
amounts
set
numbers
set
amounts
discussed
intervals
amounts
configurable
configure
settings
specified
randomly
selected
interval
customer
arrives
business
random
number
garments
garments
immediately
automatically
placed
incoming
queue
will
await
pre
treatment
employees
necessary
handling
step
employee
available
garment
will
taken
incoming
queue
will
go
random
amount
pre
treatment
time
employee
will
available
additional
work
garment
finished
pre
treatment
placed
cleaning
queue
awaits
cleaning
cleaning
machine
can
clean
set
number
garments
time
employee
available
cleaning
machine
available
either
sufficient
number
garments
cleaning
queue
garments
cleaning
queue
garments
middle
pre
treatment
many
garments
can
moved
available
machine
moved
limit
machine
will
accept
moving
garments
machine
immediate
machine
takes
set
amount
time
complete
task
time
employee
free
something
else
general
needs
available
employee
moving
movement
instantaneous
cleaning
machine
finished
cleaning
set
garments
employee
available
garments
moved
finishing
queue
await
finishing
moving
garments
cleaning
machine
finishing
queue
immediate
though
need
employee
available
done
cleaning
machine
employee
available
employee
available
garment
will
taken
finishing
queue
will
go
random
amount
finishing
work
finished
garment
done
processed
ready
returned
customer
modeled
simulation
done
disappears
choice
jobs
whenever
employee
available
choice
job
finishing
garment
unloading
cleaning
machine
etc
jobs
later
process
always
chosen
ahead
jobs
earlier
process
words
employee
will
always
work
finishing
garment
pre
treating
garment
configuring
simulation
simulation
reads
set
input
parameters
cin
configure
behavior
example
input
explanation
following
12
6
4
2
4
75
20
600
10
60
15
420
180
4
2
configuration
parameters
positive
number
hours
simulation
run
number
limited
24
hours
implication
hours
dry
cleaning
establishment
open
modeled
hours
ignored
note
measurement
simulation
time
real
time
take
12
hours
run
simulation
12
hour
day
positive
number
employees
will
staff
given
time
simplicity
number
stays
constant
throughout
simulation
positive
number
pre
treatment
stations
can
used
simulation
positive
number
cleaning
machines
can
used
simulation
positive
number
finishing
stations
can
used
simulation
mean
standard
deviation
time
takes
perform
pre
treatment
garment
expressed
unsigned
integers
representing
numbers
seconds
positive
number
seconds
required
run
batch
garments
cleaning
machine
positive
number
garments
maximum
can
run
cleaning
machine
time
mean
standard
deviation
time
takes
perform
finishing
garment
expressed
unsigned
integers
representing
numbers
seconds
mean
standard
deviation
time
elapses
customer
arrivals
expressed
unsigned
integers
representing
numbers
seconds
mean
standard
deviation
number
garments
customer
will
drop
expressed
unsigned
integers
representing
numbers
garments
input
format
designed
easy
parse
possible
possible
read
input
using
operator
cin
program
can
freely
assume
input
format
will
followed
fine
program
misbehaves
crashes
given
input
follow
format
discrete
event
based
simulations
work
obvious
way
build
simulation
like
implement
time
based
simulation
means
center
implementation
around
simulation
loop
iteration
corresponds
one
clock
tick
minimum
meaningful
chunk
time
simulation
continues
appropriate
number
clock
ticks
elapsed
addition
simple
implement
nice
approach
simulation
dense
activity
many
events
taking
place
every
clock
tick
however
considering
nature
simulation
realize
actually
quite
sparse
simulation
runs
resolution
one
second
seconds
nothing
meaningful
will
happen
employees
will
middle
pre
treating
finishing
garments
will
garments
work
looping
every
second
majority
iterations
loop
will
nothing
tremendously
wasteful
simulation
runs
seconds
includes
events
like
run
much
closer
time
time
words
like
running
time
simulation
determined
densely
packed
activity
rather
length
simulation
since
much
less
case
dry
cleaning
simulation
prefer
implementation
involve
one
clock
tick
per
iteration
simulation
loop
better
solution
sparse
simulations
like
build
discrete
event
based
simulation
instead
looping
every
second
simulation
time
loop
sequence
events
will
allow
us
seamlessly
skip
boring
parts
nothing
meaningful
happening
focusing
attention
seconds
activity
actually
occurs
rough
pseudocode
form
simulation
loop
will
look
something
like
set
current
time
0
add
first
customer
arrival
event
schedule
event
schedule
empty
current
time
less
simulation
length
get
next
event
event
schedule
set
current
time
e's
time
skipping
meaningless
time
current
time
less
simulation
length
execute
event
schedule
subsequent
events
implied
execution
first
question
data
structure
use
store
event
schedule
initially
may
seem
like
queue
good
choice
however
closer
inspection
find
need
slightly
different
approach
consider
example
based
set
example
parameters
previous
section
initially
simulation
time
0
simulation
just
begun
starting
simulation
schedule
first
customer
arrival
picking
random
number
seconds
normal
distribution
mean
420
standard
deviation
180
see
section
titled
random
number
generation
information
say
random
number
505
schedule
first
customer
arrival
time
505
now
enter
simulation
loop
handle
first
event
schedule
event
currently
scheduled
customer
arrival
time
505
set
current
time
505
execute
event
executing
event
requires
choosing
random
number
garments
say
number
3
customer
leaves
3
garments
enter
incoming
queue
meanwhile
schedule
next
customer
arrival
choosing
another
random
number
seconds
random
mean
420
stdev
180
say
number
350
schedule
second
customer
arrival
505
350
855
since
six
employees
four
pre
treatment
stations
available
three
employees
pick
garment
begin
pre
treatment
time
still
505
choose
random
pre
treatment
time
say
numbers
65
75
85
schedule
pre
treatment
completion
events
505
65
570
505
75
580
505
85
590
respectively
processing
first
event
time
move
next
event
schedule
currently
four
events
schedule
customer
scheduled
arrive
time
855an
employee
will
finish
pre
treatment
garment
time
570an
employee
will
finish
pre
treatment
garment
time
580an
employee
will
finish
pre
treatment
garment
time
590
next
one
occur
employee
finishing
pre
treatment
time
570
skip
forward
time
570
process
event
processing
completion
pre
treatment
simply
means
place
garment
cleaning
queue
since
cleaning
queue
one
garment
cleaning
machine
can
hold
10
garments
start
cleaning
batch
yet
similarly
handle
completion
pre
treatments
times
580
590
placing
garments
cleaning
queue
point
time
590
garments
pre
treatment
employee
available
move
garments
cleaning
machine
start
cleaning
machines
take
600
seconds
run
schedule
event
completion
cleaning
batch
time
590
600
1190
simulation
proceeds
much
fashion
clear
example
need
data
structure
allows
us
schedule
events
order
yet
emerge
schedule
appropriate
order
ascending
order
terms
time
sounds
like
job
priority
queue
events
items
scheduled
times
priorities
item
lowest
priority
considered
important
requirements
priority
queue
implementation
outlined
next
section
thing
may
noticed
example
need
define
set
event
types
event
type
need
decide
information
needs
stored
actions
taken
event
executed
notice
customer
arrival
events
designed
example
customer
arrival
event
like
events
scheduled
particular
timea
customer
arrival
event
might
also
contain
number
garments
customer
will
drop
offwhen
executing
customer
arrival
event
garments
dropped
incoming
queue
result
employees
pre
treatment
stations
available
least
garments
begin
pre
treatment
regardless
whether
garments
begin
pre
treatment
immediately
remain
incoming
queue
next
customer
arrival
event
scheduled
see
general
schedule
event
know
sure
something
will
happen
particular
time
future
notice
schedule
events
garments
emerging
queues
something
else
pre
treatment
station
becoming
available
causes
garments
removed
queues
never
entirely
sure
exactly
will
especially
queues
get
longer
number
interdependencies
events
increases
need
decide
types
events
need
information
carry
will
mean
execute
one
concepts
heart
implementing
simulation
implementing
priority
queue
template
class
required
implement
priority
queue
template
class
minimum
template
class
take
one
type
parameter
specifying
type
items
may
assume
template
class
specified
type
operator
operator
defined
though
sure
document
assumption
well
others
making
type
parameter
priority
queues
can
implemented
straightforward
way
just
queues
can
though
resulting
implementation
priority
queue
inefficient
compared
similarly
implemented
queue
storing
items
sequential
data
structure
array
vector
linked
list
implementation
will
feature
either
enqueues
dequeues
worst
whether
keep
items
sorted
order
arrival
priority
option
implementing
priority
queue
fashion
simply
sorted
array
vector
elements
prefer
binary
heap
better
approach
yields
log
enqueues
dequeues
significant
improvement
especially
large
number
items
priority
queue
implementing
binary
heap
optional
usual
extra
credit
offered
using
polymorphism
advantage
overloaded
operators
polymorphism
work
especially
well
together
suggest
following
design
sketch
events
simulation
create
event
class
include
within
member
variable
event's
scheduled
time
overload
comparison
operators
priority
queue
can
compare
two
events
using
create
abstract
eventhandler
class
include
pure
virtual
execute
method
within
derive
class
eventhandler
kind
event
supported
simulation
implement
execute
method
appropriate
event
object
contain
eventhandler
pointing
handler
appropriate
type
event
example
customer
arrival
event
will
contained
event
object
eventhandler
pointing
event
handler
knows
handle
customer
arrivals
priority
queue
store
event
objects
follow
approach
simulation
loop
will
simple
needing
dequeue
event
call
execute
calls
execute
polymorphically
eventhandler
reason
event
eventhandler
best
separated
want
able
use
operators
like
compare
objects
within
priority
queue
also
want
priority
queue
store
events
can
handled
polymorphically
different
kinds
events
handled
differently
depending
run
time
type
one
way
attempt
store
event
's
priority
queue
instead
class
derived
event
kind
event
problem
approach
comparison
operators
pointers
compare
addresses
pointers
point
objects
design
suggest
provides
best
worlds
event
objects
can
compared
overloaded
operators
polymorphic
event
handlers
can
run
time
automatically
handle
appropriate
type
event
appropriate
way
value
working
incrementally
less
design
advice
given
project
previous
one
like
experience
freedom
design
process
almost
necessarily
means
will
take
missteps
makes
critical
work
incrementally
try
find
way
reach
stable
ground
part
program
working
tested
even
parts
missing
even
incorrect
whenever
feel
ground
relatively
stable
underneath
save
copy
work
next
iteration
feel
things
run
rails
can
revert
previous
stable
copy
try
output
simulation
simulation
program
generate
following
output
time
something
happens
simulation
garment
begins
pre
treatment
cleaning
machine
started
print
message
cout
specifying
current
simulation
time
happened
conclusion
simulation
show
following
overall
statistics
total
number
garments
completely
processed
completed
finishing
step
number
garments
still
unfinished
somewhere
simulation
including
incoming
queue
yet
started
number
completed
cleaning
machine
batchesthe
percentage
time
employees
spent
idle
overall
sum
total
number
seconds
spent
idle
employee
divided
number
seconds
simulation
times
number
employees
pseudorandom
number
generation
thorough
treatment
pseudorandom
number
generation
available
form
code
example
mirroring
extending
recent
conversation
lecture
feel
free
use
normalintdistribution
template
class
code
example
implementation
project
starting
point
project
starting
point
like
build
scratch
though
given
fair
amount
design
advice
along
way
always
feel
free
ask
questions
deliverables
submit
source
cpp
header
files
comprise
program
afterward
take
moment
sure
submitted
files
missed
one
able
compile
run
program
can
result
substantial
penalty
since
able
evaluate
program's
correctness
follow
link
discussion
submit
project
via
checkmate
aware
holding
rules
specified
document
including
one
says
responsible
submitting
version
project
want
graded
regrade
project
simply
accidentally
submitted
wrong
version
limitations
must
build
priorityqueue
template
class
opposed
priority
queue
adapter
template
standard
library
may
use
standard
library
std
vector
implementation
priorityqueue
may
feel
free
use
standard
library
anywhere
else
program
believe
will
help
originally
written
alex
thornton
fall
2012
portions
reworked
want
wait
alex
thornton
