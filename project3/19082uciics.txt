setting up fabflixs database allowing employee access 
phase 1 setting up fabflixs database allowing employee access 
setting
fabflixs
database
allowing
employee
access
phase
1
overview
phase
1
set
schema
related
metadata
fabflixs
database
populate
database
initial
information
gleaned
previous
system
testing
included
help
insure
database
built
populated
properly
references
postgresql
8
3
7
manual
psql
8
3
7
documentation
pgadmin
documentation
sample
jdbc
program
obtaining
metadata
table
contents
sample
jdbc
program
deleting
record
sample
jdbc
program
updating
record
jdbc
basics
tutorial
sun
official
jdbc
documentation
movie
information
websites
imdb
http
www
imdb
comkdd
archive
http
kdd
ics
uci
edu
databases
movies
movies
htmlregal
entertainment
groupofficial
web
sites
movies
ratatouille
turn
one
zip
file
labeled
team
name
folder
createtable
source
code
including
sql
commands
issued
create
database
populate
particular
create
turn
script
createtable
sql
includes
create
table
sql
statements
used
make
tables
database
postgresql
script
file
directly
executable
using
psql's
file
option
details
see
psql
documentation
referenced
also
include
files
assist
compilation
loading
running
code
ant
bat
make
files
readme
file
specifying
compile
run
code
use
conventions
database
construct
database
name
fabflixs
user
database
testuser
password
testpass
folder
employeeaccess
program
employeeaccess
java
supporting
programs
used
implement
employee
interface
fabflixs
along
files
assist
compilation
loading
running
code
readme
file
explaining
compile
load
otherwise
prepare
system
use
run
creating
fabflixs
database
creating
database
straightforward
start
postgresql
server
already
running
start
programs
postgresql
8
3
start
server
using
psql
pgadmin
similar
program
log
testuser
created
user
phase
0
create
database
enter
database
name
lower
case
database
name
entered
upper
case
letters
fabflixs
postgresql
still
creates
lower
case
name
psql
commands
postgres
create
database
fabflixs
create
database
postgres
fabflixs
database
now
exists
access
open
fabflixs
database
user
testuser
creating
database
tables
following
chart
gives
fabflixs
database
schema
given
table
name
attributes
constraints
attributes
varchar
field
data
field
contents
missing
unknown
empty
string
''
non
required
fields
data
null
required
fields
constraint
null
empty
consist
solely
whitespace
blanks
tabs
etc
attribute
group
attributes
designated
primary
key
implemented
see
postgresql
8
3
7
documentation
chapter
5
3
constraints
information
constraints
sql
statements
insert
information
previous
system
appropriate
tables
script
file
fabflixstestdata
txt
tables
data
came
sometimes
structure
corresponding
fabflixs
tables
fabflixs
major
upgrade
obviously
will
need
read
data
records
place
correct
fabflixs
fields
correct
format
affected
data
must
done
make
fabflixs
compatible
discussed
credit
card
data
ids
note
previous
system
stored
credit
card
numbers
numbers
credit
card
file
strings
customer
file
yet
another
good
reason
move
new
system
fabflixs
credit
cards
numbers
stored
strings
see
table
definitions
sure
convert
data
necessary
typical
though
perhaps
unexpected
credit
card
account
use
rules
affect
fabflixs
schema
include
following
card
number
can
associated
different
names
one
person
can
share
account
anyone
permission
can
use
anyone's
credit
card
customer's
name
need
names
account
someone
possession
account
number
considered
authorized
user
unless
credit
card
firm
otherwise
notified
credit
card
number
unqiue
identifier
card
number
card
holder's
name
security
reasons
avoid
update
customer
file
credit
card
info
changed
specifiy
use
numeric
automatically
generated
key
customer
file
references
foreign
key
credit
card
file
key
data
imported
fabflixs
database
previous
system
use
identifier
instead
used
credit
card
number
key
attempt
insert
existing
records
customer
table
will
credit
card
numbers
treated
keys
violation
requirements
attempt
insert
credit
card
record
result
data
populating
wrong
fields
yet
specs
must
still
met
issue
can
handled
ways
one
straight
ahead
solution
create
customer
table
given
schema
without
foreign
key
contraint
cc
id
field
table
populated
credit
card
id
will
placed
cc
id
field
create
credit
card
table
without
id
field
populate
table
add
credit
card
table
id
field
write
sql
scipt
program
starting
1
assigns
values
credit
card
id
file
id
assigned
use
record's
credit
card
number
locate
customer
record
number
will
cc
id
field
replace
credit
card
id
add
foreign
key
constraint
cc
id
customer
table
imported
data
may
errors
must
deal
credit
card
numbers
15
16
digits
invalid
store
invalid
credit
card
number
credit
card
record
credit
card
number
corespond
imported
customer
inport
credit
card
record
new
system
director
names
provided
data
director's
name
one
field
name
beginning
first
name
ending
last
thus
searching
sorting
director
required
later
phase
rather
problematic
required
director's
name
broken
last
name
rest
name
reasonable
approach
accomplish
create
movie
file
one
director
fields
director
last
name
populate
table
add
director
rest
name
field
table
go
movie
table
movie
extract
director's
name
break
last
name
rest
name
store
last
name
back
director
last
name
field
rest
name
director
rest
name
field
storing
'none'
rest
name
empty
use
best
efforts
extract
last
name
directors's
name
management
knows
impossible
perfectly
accurate
stars
genres
legal
movie
documentary
museum
affiliated
stars
new
fabflics
system
every
movie
will
least
one
genre
importing
data
discovered
genre
associated
movie
still
import
knowing
will
appear
genre
search
see
phase
2
however
can
find
movies
via
data
cleaning
report
see
phase
3
report
available
management's
intent
correct
database
movies
least
one
genre
sales
previous
sytem
track
number
items
sold
time
dvd
sold
entered
separate
line
item
single
customer
bought
four
copies
chicken
run
one
transaction
four
separate
records
added
sales
file
also
store
shipping
address
used
shipping
label
disgarded
test
data
quantity
shipping
address
values
new
tables
expect
one
way
solve
problem
create
sales
table
without
quantity
shipping
address
fields
populate
table
add
quantity
field
set
1
records
add
shipping
address
field
set
blanks
one
step
conversion
since
inserts
place
tables
one
file
grouped
easy
subdivision
modification
best
effect
table
changes
set
fabflixs
'temporary'
table
structures
discussed
needed
imported
data
inserted
correct
fields
run
script
insert
data
database
update
tables
discussed
converting
data
needed
may
find
use
bat
files
heplful
process
note
operator
allows
bat
files
accept
information
specified
input
file
sends
results
bat
processing
text
file
fabflixs
schema
table
name
attributes
notesmovies
id
integer
primary
key
title
varchar
100
year
integer
director
rest
name
varchar
50
director
last
name
varchar
50
banner
url
varchar
200
trailer
url
varchar
200
required
required
required
required
required
director
one
name
put
director
last
name
director
rest
name
'none'
url
movie's
poster
required
url
trailer
requiredstars
id
integer
primary
key
first
name
varchar
50
last
name
varchar
50
dob
date
photo
url
varchar
200
required
required
person
one
name
put
last
name
make
first
name
'none'
required
required
requiredstars
movies
star
id
integer
references
stars
id
movie
id
integer
references
movies
id
attributes
requiredgenres
id
integer
primary
key
name
varchar
32
attributes
requiredgenres
movies
genre
id
integer
references
genres
id
movie
id
integer
references
movies
id
attributes
required
movie
must
associated
least
1
genre
customers
id
integer
primary
key
first
name
varchar
50
last
name
varchar
50
cc
id
integer
references
creditcards
id
address
varchar
200
email
varchar
50
password
varchar
20
attributes
required
person
one
name
put
last
name
make
first
name
'none'sales
customer
id
integer
references
customers
id
movie
id
integer
references
movies
id
quantity
ordered
integer
shipping
address
varchar
200
time
timestamp
attributes
requiredcreditcards
id
integer
primary
key
credit
card
number
varchar
16
name
card
varchar
100
expiration
date
attributes
required
imported
credit
card
number
invalid
credit
card
number
set
invalid
may
add
additional
tables
database
needed
fabflixs
developed
may
change
tables'
attributes
company
departments'
software
rely
current
specification
sure
maintain
database
integrity
example
ensure
database
allow
movie
record
created
without
associated
stars
movie
genres
movie
records
also
created
orphan
records
credit
card
record
without
corresponding
customer
record
exist
imported
movie
data
cleaned
may
errors
phase
3
will
implement
data
cleaning
particular
database
may
records
appear
duplicates
almost
except
id
number
ok
will
cause
database
errors
ok
records
really
contain
duplicate
information
will
addressed
phase
3
populated
database
modify
add
records
ensure
types
legal
records
represented
instance
provided
set
records
people
one
name
add
records
need
robust
test
set
remaining
phases
ensure
specifications
met
legal
data
finally
database
populated
restrict
fields
feasible
prevent
errors
additional
error
checking
course
may
done
programs
accept
data
place
database
user
interactions
database's
tables
employee
access
program
make
sure
user
allowed
view
change
look
things
fields
appropriate
task
example
new
records
entered
database
ids
automatically
generated
need
force
user
come
id
duplicate
id
already
table
see
serial
data
type
section
8
3
7
postgresql
manual
good
way
generate
ids
auotmatically
yet
correcting
deleting
ani
item
star
movie
employee
can
often
quickly
entering
unique
id
first
searching
name
say
choosing
particular
item
list
though
program
might
also
allow
method
allowing
employee
access
database
authorized
employees
will
allowed
directly
access
fabflixs
database
provide
simple
interface
issue
common
commands
well
way
enter
arbitrary
sql
statement
allow
direct
access
psql
pgadmin
tools
contain
powerful
dangerous
features
fabflixs
employees
except
db
developers
require
phase
get
application
later
phase
add
appropriate
security
employees
can
access
functions
authorized
actual
development
effort
look
feel
requirements
functions
specified
every
particular
purposely
left
requirements
high
level
want
use
skills
experience
reasoned
judgment
refine
feel
free
ask
instructor
ta
advice
project
manager's
permission
can
also
enhance
specifications
potential
additional
credit
example
can
use
gui
web
based
user
interface
rather
console
interface
access
functions
via
secure
web
page
careful
including
additional
features
work
will
detract
score
write
java
program
using
jdbc
interface
postgresql
provides
following
lity
can
console
based
gui
web
based
discussed
may
use
different
language
odbc
library
provided
received
approval
project
manager
event
must
use
posegresql
program
run
user
asked
user
name
user
password
fabflixs
database
well
employee
granted
access
message
effect
appears
screen
access
allowed
says
database
present
password
wrong
allow
way
employee
exit
easily
note
incorrect
password
generates
sqlexception
catch
exception
deal
nicely
wrong
passwords
provide
menu
allows
employee
print
screen
movies
featuring
user
selected
star
star
can
chosen
via
first
name
last
name
id
movie
attributes
appear
labeled
neatly
arranged
print
screen
nice
neat
list
genres
movies
particular
star
appeared
star
can
chosen
via
first
name
last
name
id
insert
star
particular
movie
ask
id
see
insert
customer
database
ask
id
credit
card
number
entered
customer
exist
also
create
appropriate
credit
card
record
intent
customer
must
credit
card
file
insert
movie
database
ask
id
associate
existing
star
particular
movie
allow
searching
star
last
first
name
id
movie
name
id
user
scan
whole
database
appropriate
record
ids
instance
using
console
interface
enter
movie
title
program
return
list
movies
match
query
user
picks
one
star
use
selected
name
start
create
association
using
gui
create
drop
menus
entries
alphabetically
sorted
allow
selected
delete
star
database
deal
nicely
situation
star
record
deleted
associated
movie
delete
genre
database
deal
nicely
situation
genre
record
deleted
associated
movie
delete
movie
database
delete
customer
database
delete
associated
credit
card
data
possible
two
people
credit
card
also
want
maintain
credit
card
history
deletions
can
accomplished
entering
id
slecting
particular
item
list
resulted
one
implied
searches
instance
start
deleted
star's
name
entered
three
stars
name
may
appear
user
selects
one
three
stars
delete
provide
metadata
database
particular
print
name
table
table
attribute
type
enter
arbitrary
sql
command
exit
menu
return
get
database
user
password
state
exit
program
cases
requested
tasks
accomplished
handle
error
gracefully
just
pass
along
java
exception
whenever
feasible
allow
user
cancel
command
progress
case
made
error
example
selecting
star
delete
menu
three
choices
allow
user
simply
select
deleting
id
ask
confirmation
user
confirm
delete
item
functions
many
lines
print
display
lines
groups
20
employee
can
read
contents
scroll
top
screen
example
printing
20
lines
say
hit
key
continue
key
hit
display
next
20
lines
obviously
will
somewhat
different
use
gui
web
interface
nonetheless
nicely
handle
situation
data
will
fit
screen
upon
completion
command
except
exit
commands
user
returned
menu
demonstration
create
running
system
zip
file
quickly
show
correctness
completeness
lity
performance
database
demonstration
using
employee
interface
developed
task
convince
us
15
minutes
work
well
completely
done
fabflixs
project
ready
move
phase
2
particular
sure
demonstrate
us
system
works
specified
directors
stars
customers
one
name
written
ics185
spring
2005
norman
jacobson
march
2005
sections
adapted
ics185
winter
2005
exercises
project
1
project
2
written
chen
li
updated
include
employee
information
added
ics
185
winter
2006
documented
project
3
document
chen
li
shengyue
ji
reflect
newer
versions
software
cs122b
spring
2007
norman
jacobson
march
2007
revised
clean
customer
credit
card
relation
norman
jacobson
april
2007
revised
include
major
section
updating
inserted
data
fit
fabflixs'schema
including
instructions
generating
credit
card
ids
dealing
sales
quantity
shipping
address
breaking
director
names
last
first
name
ensuring
ids
automatically
generated
fields
properly
constrained
norman
jacobson
september
2007
revised
explain
meaning
required
schema
tables
fix
minor
typos
make
clear
movie
need
associated
stars
must
least
one
associated
genre
provided
instructions
dealing
imported
movies
genre
norman
jacobson
november
december
2007
revised
fully
describe
role
handling
id
numbers
employee
access
system
minor
editing
clarity
norman
jacobson
september
2008
minor
revisions
reflect
postgresql
8
3
4
make
clear
parts
directors'
stars'
names
required
norman
jacobson
october
2008
minor
revisions
clarify
credit
card
numbers
stored
strings
norman
jacobson
november
2008
minor
revisions
require
single
name
handling
demonstration
norman
jacobson
december
2008
minor
revisions
reflect
postgresql
8
3
7
typos
fixed
norman
jacobson
march
april
2009
