compsci 141 cse 141 informatics 101 fall 2009 assignment 1 
assignment 1 
compsci
141
cse
141
informatics
101
fall
2009
news
course
reference
schedule
lab
manual
code
examples
alex
compsci
141
cse
141
informatics
101
fall
2009
assignment
1
due
date
time
friday
october
9
9
00pm
introduction
begin
formulate
understanding
programming
languages
quarter
one
first
things
need
learn
languages
described
vital
skill
just
course
one
going
forward
well
whether
learning
new
language
becoming
proficient
language
already
familiar
designing
new
language
must
understand
programming
languages
described
can
read
write
clear
description
language
expressed
way
familiar
others
description
programming
language
generally
broken
two
main
parts
answers
important
question
language
syntax
constructs
language
look
like
semantics
constructs
language
broad
agreement
amongst
programming
language
designers
appropriate
tools
describing
syntax
bnf
backus
naur
form
context
free
grammars
often
used
two
notations
conceptually
identical
refer
collectively
grammars
lecture
semantics
hand
proven
much
difficult
describe
formally
formal
methods
describing
semantics
one
method
widely
used
semantics
commonly
explained
natural
language
english
downside
using
natural
language
imprecision
inherent
natural
languages
can
leave
room
specification
different
interpretations
can
lead
different
implementations
language
behaving
differently
different
assumptions
made
implementer
discussed
class
even
formal
notation
like
grammars
can
lead
imprecision
used
carefully
since
language
processors
compilers
interpreters
represent
two
extremes
various
kinds
hybrid
approaches
use
grammars
determine
whether
programs
syntactically
correct
also
infer
least
aspects
meaning
important
construct
grammars
carefully
particular
problem
ambiguity
best
avoided
whenever
possible
recall
ambiguous
grammar
one
least
one
sentence
language
grammar
allows
one
parse
tree
leftmost
derivation
constructed
since
meaning
program
partly
inferred
structure
parse
tree
derivation
worthwhile
ensure
grammar
unambiguous
program
multiple
possible
parse
trees
program
multiple
possible
meanings
like
case
given
program
programming
language
one
meaning
assignment
will
deepen
understanding
grammars
asking
construct
complete
grammar
relatively
simple
programming
language
along
way
explore
avoid
ambiguity
learn
precedence
associativity
rules
including
use
grammars
specify
funcymonkie
language
funcymonkie
program
made
one
functions
function
comprised
name
list
one
parameters
equals
sign
one
expression
function's
name
parameters
identifiers
sequences
one
upper
lowercase
letters
begin
lowercase
letter
function
called
values
passed
parameters
expression
evaluated
terms
values
result
expression
becomes
result
function
examples
functions
look
like
assignment
statements
java
actually
akin
method
declarations
function
inc
takes
one
parameter
returns
value
1
inc
1
function
takes
four
parameters
returns
one
two
results
depending
whether
result
calling
passing
true
false
true
result
adding
returned
otherwise
returned
notice
parentheses
commas
used
call
come
back
later
else
endif
function
square
takes
one
parameter
squares
returning
result
square
2
comments
denoted
two
dashes
two
dashes
remainder
line
considered
comment
offside
rule
one
difference
likely
notice
funcymonkie
syntax
syntax
languages
like
java
explicit
characters
separate
one
function
next
semicolons
curly
braces
characters
appear
may
wonder
funcymonkie
language
processor
able
tell
one
function
ends
another
begins
answer
problem
lies
rule
sometimes
called
offside
rule
first
character
function
definition
appears
particular
horizontal
position
line
next
line
whose
first
character
appears
position
earlier
position
considered
new
function
example
consider
unplesant
looking
nonetheless
syntactically
correct
layout
inc
square
functions
previous
code
example
inc
beginning
inc
function
inc
function
continues
1
still
inc
function
square
2
new
function
square
function
distinguished
inc
function
begins
line
whose
first
character
one
position
earlier
first
character
line
begins
inc
way
contrast
consider
layout
code
inc
1
beginning
inc
function
square
2
syntax
error
since
interpreted
part
inc
function
may
seem
like
strange
way
design
syntax
programming
language
advantages
well
known
programming
languages
python
haskell
use
form
rule
part
syntaxes
executing
funcymonkie
program
writing
executing
funcymonkie
programs
assignment
little
background
understanding
language
know
run
funcymonkie
programs
executed
interactive
interpreted
way
interpreter
accepting
sequence
expressions
user
evaluating
entered
printing
result
example
session
funcymonkie
interpreter
might
look
like
representing
prompt
interpreter
prints
ask
user
enter
expression
note
example
funcymonkie
program
example
session
user
interacting
funcymonkie
interpreter
inc
3
4
square
9
5
90
25
expressions
funcymonkie
two
kinds
expressions
funcymonkie
simple
expressions
compound
expressions
simple
expression
one
following
integer
literal
5
13
integer
literals
funcymonkie
non
negative
real
literal
5
5
456
789
like
integer
literals
real
literals
also
non
negative
boolean
literal
two
possible
values
boolean
literal
true
false
identifier
monkie
alex
compound
expression
one
following
relational
expression
compares
values
two
expressions
equality
ordering
six
relational
operators
examples
3
4
result
false
true
false
result
true
result
true
less
false
otherwise
mathematical
expression
combines
values
two
expressions
using
one
mathematical
operators
exponentiation
examples
3
4
result
7
7
2
result
3
5
2
3
result
8
conditional
expression
evaluates
test
expression
evaluates
one
two
expressions
based
value
test
examples
4
else
5
endif
result
less
result
4
otherwise
5
3
4
else
7
2
endif
result
3
5
arbitrary
expression
can
used
test
placed
clause
placed
else
clause
else
clauses
mandatory
endif
terminates
expression
function
application
calls
function
passing
result
one
expressions
arguments
syntactically
function
applications
funcymonkie
bit
different
method
calls
function
calls
might
accustomed
languages
function
name
identifier
comes
first
followed
arguments
separated
whitespace
mandatory
parentheses
commas
punctuation
examples
calls
function
passes
value
argument
3
4
calls
function
passes
3
4
arguments
simple
expressions
can
passed
arguments
examples
compound
expressions
can
passed
arguments
surrounded
parentheses
examples
3
4
calls
function
passes
7
argument
3
4
calls
function
passes
3
argument
4
added
result
function
latter
example
demonstrates
function
application
binds
tightly
operators
words
expression
assumed
primarily
addition
operation
3
left
operand
4
right
compound
expressions
can
combined
together
precedence
associativity
rules
used
determine
meaning
parentheses
can
used
override
precedence
associativity
rules
examples
3
4
2
higher
precedence
result
11
3
4
2
result
14
9
3
2
operator
left
associative
result
4
9
3
2
result
8
precedence
associativity
rules
operators
summarized
following
table
operators
listed
top
row
highest
precedence
operators
listed
second
row
next
highest
precedence
operatorsassociativity
right
associative
left
associative
left
associative
non
associative
function
application
higher
precedence
writing
grammar
funcymonkie
design
write
grammar
accepts
complete
funcymonkie
programs
described
grammar
must
unambiguous
must
specified
bnf
like
style
discussed
lecture
may
use
extended
bnf
shortcuts
described
textbook
grammar
must
respect
precedence
associativty
meaning
example
operators
higher
precedences
forced
appear
lower
parse
tree
operators
lower
precedences
may
assume
presence
scanner
takes
input
file
turns
sequence
tokens
need
matched
grammar
alphabet
grammar
set
possible
tokens
include
following
special
tokens
addition
literal
ones
parentheses
operators
intliteral
represents
integer
literal
realliteral
represents
real
literal
identifier
represents
identifier
true
false
represent
boolean
literals
offside
indicates
occurrence
offside
condition
described
example
consider
funcymonkie
program
inc
1
circlearea
radius
radius
2
3
14
scanned
turned
following
token
sequence
identifier
identifier
identifier
intliteral
offside
identifier
identifier
identifier
intliteral
realliteral
note
particular
presence
offside
token
separating
tokens
make
inc
function
comprising
circlearea
function
sure
clear
grammar
symbols
terminal
symbols
non
terminal
symbols
use
boldface
terminal
symbols
italics
non
terminal
symbols
format
prefer
please
specify
top
document
format
chosen
test
grammar
work
grammar
may
wonder
can
sure
whether
work
correct
suggest
working
grammar
stages
implementing
language
feature
time
developing
test
cases
write
code
try
test
cases
often
assessing
parse
tree
result
cases
legal
funcymonkie
checking
building
parse
tree
possible
get
results
expecting
got
problem
grammar
move
another
feature
implement
deliverables
include
solution
assignment
one
document
either
microsoft
word
doc
rich
text
format
rtf
adobe
acrobat
pdf
format
follow
link
discussion
submit
document
remember
accept
paper
submissions
assignments
accept
via
email
circumstances
test
section
added
alex
thornton
summer
2009
rules
funcymonkie
cleaned
fair
amount
additional
explanation
added
alex
thornton
fall
2007
originally
written
alex
thornton
portions
adapted
previous
ics
141
assignment
fall
2005
