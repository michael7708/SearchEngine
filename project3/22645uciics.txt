optimal point placement mesh smoothing 
citations 
optimal
point
placement
mesh
smoothing
annamaria
beatrice
amenta
marshall
wayne
bern
david
eppstein
algorithms
30
2
302
322
feb
1999
proc
8th
symp
discrete
algorithms
acm
siam
jan
1997
pp
528
537
acm
computing
research
repository
cs
cg
9809081
mathematical
reviews
99m
65028
http
www
ics
uci
edu
eppstein
pubs
ameberepp
soda
97
pdf
http
dx
doi
org
10
1006
jagm
1998
0984
cited
parallel
algorithm
mesh
smoothingon
combining
laplacian
optimization
based
mesh
smoothing
techniqueshigh
quality
quadrilateral
surface
meshing
without
template
restrictions
new
approach
based
network
flow
techniquesquadrilateral
mesh
generation
computer
aided
designtetrahedral
mesh
improvement
using
face
swapping
smoothinga
computational
study
effect
unstructured
mesh
quality
solution
efficiencymesh
generationan
approach
combined
laplacian
optimization
based
smoothing
triangular
quadrilateral
quad
dominant
meshestet
meshing
construction
optimization
adaptionimproved
laplacian
smoothing
noisy
surface
meshesthe
scalability
mesh
improvement
algorithmsa
cost
benefit
analysis
simplicial
mesh
improvement
techniques
measured
solution
efficiencyunstructured
mesh
generation
theory
practice
perspectiveslocal
optimization
based
simplicial
mesh
untangling
improvementforce
directed
methods
smoothing
unstructured
triangular
tetrahedral
meshesforce
directed
methods
mesh
improvementgeometry
based
triangulation
multiple
trimmed
nurbs
surfaceslocal
optimization
based
untangling
algorithms
quadrilateral
meshessample
shuffling
quality
hierarchic
surface
meshingquality
meshing
weighted
delaunay
refinementthree
dimensional
hybrid
mesh
generation
turbomachinery
airfoilstetrahedral
mesh
generation
optimization
based
centroidal
voronoi
tessellationsa
mesh
warping
algorithm
based
weighted
laplacian
smoothingan
optimal
randomized
algorithm
maximum
tukey
depthapproximation
geometric
processing
digital
images
adaptive
triangular
meshesuntangling
mapped
quadrilateral
meshes
concave
boundariesusers
manual
opt
ms
local
methods
simplicial
mesh
smoothing
untanglingimprovement
mesh
quality
using
statistical
approachcoverage
control
mobile
sensing
networksa
linear
weighted
laplacian
smoothing
framework
warping
tetrahedral
meshes
eppstein
publications
citation
database
documents
fano
experimental
web
server
eppstein
school
information
computer
science
uc
irvine
null
style
describes
system
distinguished
boundaries
components
starting
point
description
rest
5
1
2
client
server
first
constraints
added
hybrid
style
client
server
architectural
style
figure
5
2
described
section
3
4
1
separation
concerns
principle
behind
client
server
constraints
separating
user
interface
concerns
data
storage
concerns
improve
portability
user
interface
across
multiple
platforms
improve
scalability
simplifying
server
components
perhaps
significant
web
however
separation
allows
components
evolve
independently
thus
supporting
internet
scale
requirement
multiple
organizational
domains
5
1
3
stateless
next
add
constraint
client
server
interaction
communication
must
stateless
nature
client
stateless
server
css
style
section
3
4
3
figure
5
3
request
client
server
must
contain
information
necessary
understand
request
take
advantage
stored
context
server
session
state
therefore
kept
entirely
client
constraint
induces
properties
visibility
reliability
scalability
visibility
improved
monitoring
system
look
beyond
single
request
datum
order
determine
full
nature
request
reliability
improved
eases
task
recovering
partial
failures
133
scalability
improved
store
state
requests
allows
server
component
quickly
free
resources
simplifies
implementation
server
manage
resource
usage
across
requests
like
architectural
choices
stateless
constraint
reflects
design
trade
disadvantage
may
decrease
network
performance
increasing
repetitive
data
per
interaction
overhead
sent
series
requests
since
data
left
server
shared
context
addition
placing
application
state
client
side
reduces
server's
control
consistent
application
behavior
since
application
becomes
dependent
correct
implementation
semantics
across
multiple
client
versions
5
1
4
cache
order
improve
network
efficiency
add
cache
constraints
form
client
cache
stateless
server
style
section
3
4
4
figure
5
4
cache
constraints
require
data
within
response
request
implicitly
explicitly
labeled
cacheable
non
cacheable
response
cacheable
client
cache
given
right
reuse
response
data
later
equivalent
requests
advantage
adding
cache
constraints
potential
partially
completely
eliminate
interactions
improving
efficiency
scalability
user
perceived
performance
reducing
average
latency
series
interactions
trade
however
cache
can
decrease
reliability
stale
data
within
cache
differs
significantly
data
obtained
request
sent
directly
server
early
web
architecture
portrayed
diagram
figure
5
5
11
defined
client
cache
stateless
server
set
constraints
design
rationale
presented
web
architecture
prior
1994
focused
stateless
client
server
interaction
exchange
static
documents
internet
protocols
communicating
interactions
rudimentary
support
non
shared
caches
constrain
interface
consistent
set
semantics
resources
instead
web
relied
use
common
client
server
implementation
library
cern
libwww
maintain
consistency
across
web
applications
developers
web
implementations
already
exceeded
early
design
addition
static
documents
requests
identify
services
dynamically
generated
responses
image
maps
kevin
hughes
server
side
scripts
rob
mccool
work
also
begun
intermediary
components
form
proxies
79
shared
caches
59
extensions
protocols
needed
order
communicate
reliably
following
sections
describe
constraints
added
web's
architectural
style
order
guide
extensions
form
modern
web
architecture
5
1
5
uniform
interface
central
feature
distinguishes
rest
architectural
style
network
based
styles
emphasis
uniform
interface
components
figure
5
6
applying
software
engineering
principle
generality
component
interface
overall
system
architecture
simplified
visibility
interactions
improved
implementations
decoupled
services
provide
encourages
independent
evolvability
trade
though
uniform
interface
degrades
efficiency
since
information
transferred
standardized
form
rather
one
specific
application's
needs
rest
interface
designed
efficient
large
grain
hypermedia
data
transfer
optimizing
common
case
web
resulting
interface
optimal
forms
architectural
interaction
order
obtain
uniform
interface
multiple
architectural
constraints
needed
guide
behavior
components
rest
defined
four
interface
constraints
identification
resources
manipulation
resources
representations
self
descriptive
messages
hypermedia
engine
application
state
constraints
will
discussed
section
5
2
5
1
6
layered
system
order
improve
behavior
internet
scale
requirements
add
layered
system
constraints
figure
5
7
described
section
3
4
2
layered
system
style
allows
architecture
composed
hierarchical
layers
constraining
component
behavior
component
see
beyond
immediate
layer
interacting
restricting
knowledge
system
single
layer
place
bound
overall
system
complexity
promote
substrate
independence
layers
can
used
encapsulate
legacy
services
protect
new
services
legacy
clients
simplifying
components
moving
infrequently
used
functionality
shared
intermediary
intermediaries
can
also
used
improve
system
scalability
enabling
load
balancing
services
across
multiple
networks
processors
primary
disadvantage
layered
systems
add
overhead
latency
processing
data
reducing
user
perceived
performance
32
network
based
system
supports
cache
constraints
can
offset
benefits
shared
caching
intermediaries
placing
shared
caches
boundaries
organizational
domain
can
result
significant
performance
benefits
136
layers
also
allow
security
policies
enforced
data
crossing
organizational
boundary
required
firewalls
79
combination
layered
system
uniform
interface
constraints
induces
architectural
properties
similar
uniform
pipe
filter
style
section
3
2
2
although
rest
interaction
two
way
large
grain
data
flows
hypermedia
interaction
can
processed
like
data
flow
network
filter
components
selectively
applied
data
stream
order
transform
content
passes
26
within
rest
intermediary
components
can
actively
transform
content
messages
messages
self
descriptive
semantics
visible
intermediaries
5
1
7
code
demand
final
addition
constraint
set
rest
comes
code
demand
style
section
3
5
3
figure
5
8
rest
allows
client
functionality
extended
downloading
executing
code
form
applets
scripts
simplifies
clients
reducing
number
features
required
pre
implemented
allowing
features
downloaded
deployment
improves
system
extensibility
however
also
reduces
visibility
thus
optional
constraint
within
rest
notion
optional
constraint
may
seem
like
oxymoron
however
purpose
architectural
design
system
encompasses
multiple
organizational
boundaries
means
architecture
gains
benefit
suffers
disadvantages
optional
constraints
known
effect
realm
overall
system
example
client
software
within
organization
known
support
java
applets
45
services
within
organization
can
constructed
gain
benefit
enhanced
functionality
via
downloadable
java
classes
time
however
organization's
firewall
may
prevent
transfer
java
applets
external
sources
thus
rest
web
will
appear
clients
support
code
demand
optional
constraint
allows
us
design
architecture
supports
desired
behavior
general
case
understanding
may
disabled
within
contexts
5
1
8
style
derivation
summary
rest
consists
set
architectural
constraints
chosen
properties
induce
candidate
architectures
although
constraints
can
considered
isolation
describing
terms
derivation
common
architectural
styles
makes
easier
understand
rationale
behind
selection
figure
5
9
depicts
derivation
rest's
constraints
graphically
terms
network
based
architectural
styles
examined
chapter
3
5
2
rest
architectural
elements
representational
state
transfer
rest
style
abstraction
architectural
elements
within
distributed
hypermedia
system
rest
ignores
details
component
implementation
protocol
syntax
order
focus
roles
components
constraints
upon
interaction
components
interpretation
significant
data
elements
encompasses
fundamental
constraints
upon
components
connectors
data
define
basis
web
architecture
thus
essence
behavior
network
based
application
5
2
1
data
elements
unlike
distributed
object
style
31
data
encapsulated
within
hidden
processing
components
nature
state
architecture's
data
elements
key
aspect
rest
rationale
design
can
seen
nature
distributed
hypermedia
link
selected
information
needs
moved
location
stored
location
will
used
cases
human
reader
unlike
many
distributed
processing
paradigms
6
50
possible
usually
efficient
move
processing
agent
mobile
code
stored
procedure
search
expression
etc
data
rather
move
data
processor
distributed
hypermedia
architect
three
fundamental
options
1
render
data
located
send
fixed
format
image
recipient
2
encapsulate
data
rendering
engine
send
recipient
3
send
raw
data
recipient
along
metadata
describes
data
type
recipient
can
choose
rendering
engine
option
advantages
disadvantages
option
1
traditional
client
server
style
31
allows
information
true
nature
data
remain
hidden
within
sender
preventing
assumptions
made
data
structure
making
client
implementation
easier
however
also
severely
restricts
functionality
recipient
places
processing
load
sender
leading
scalability
problems
option
2
mobile
object
style
50
provides
information
hiding
enabling
specialized
processing
data
via
unique
rendering
engine
limits
functionality
recipient
anticipated
within
engine
may
vastly
increase
amount
data
transferred
option
3
allows
sender
remain
simple
scalable
minimizing
bytes
transferred
loses
advantages
information
hiding
requires
sender
recipient
understand
data
types
rest
provides
hybrid
three
options
focusing
shared
understanding
data
types
metadata
limiting
scope
revealed
standardized
interface
rest
components
communicate
transferring
representation
resource
format
matching
one
evolving
set
standard
data
types
selected
dynamically
based
capabilities
desires
recipient
nature
resource
whether
representation
format
raw
source
derived
source
remains
hidden
behind
interface
benefits
mobile
object
style
approximated
sending
representation
consists
instructions
standard
data
format
encapsulated
rendering
engine
java
45
rest
therefore
gains
separation
concerns
client
server
style
without
server
scalability
problem
allows
information
hiding
generic
interface
enable
encapsulation
evolution
services
provides
diverse
set
functionality
downloadable
feature
engines
rest's
data
elements
summarized
table
5
1
table
5
1
rest
data
elementsdata
elementmodern
web
examplesresourcethe
intended
conceptual
target
hypertext
referenceresource
identifierurl
urnrepresentationhtml
document
jpeg
imagerepresentation
metadatamedia
type
last
modified
timeresource
metadatasource
link
alternates
varycontrol
dataif
modified
since
cache
control
5
2
1
1
resources
resource
identifiers
key
abstraction
information
rest
resource
information
can
named
can
resource
document
image
temporal
service
today's
weather
los
angeles
collection
resources
non
virtual
object
person
words
concept
might
target
author's
hypertext
reference
must
fit
within
definition
resource
resource
conceptual
mapping
set
entities
entity
corresponds
mapping
particular
point
time
precisely
resource
temporally
varying
membership
function
mr
time
maps
set
entities
values
equivalent
values
set
may
resource
representations
resource
identifiers
resource
can
map
empty
set
allows
references
made
concept
realization
concept
exists
notion
foreign
hypertext
systems
prior
web
61
resources
static
sense
examined
time
creation
always
correspond
value
set
others
high
degree
variance
value
time
thing
required
static
resource
semantics
mapping
since
semantics
distinguishes
one
resource
another
example
authors'
preferred
version
academic
paper
mapping
whose
value
changes
time
whereas
mapping
paper
published
proceedings
conference
static
two
distinct
resources
even
map
value
point
time
distinction
necessary
resources
can
identified
referenced
independently
similar
example
software
engineering
separate
identification
version
controlled
source
code
file
referring
latest
revision
revision
number
1
2
7
revision
included
orange
release
abstract
definition
resource
enables
key
features
web
architecture
first
provides
generality
encompassing
many
sources
information
without
artificially
distinguishing
type
implementation
second
allows
late
binding
reference
representation
enabling
content
negotiation
take
place
based
characteristics
request
finally
allows
author
reference
concept
rather
singular
representation
concept
thus
removing
need
change
existing
links
whenever
representation
changes
assuming
author
used
right
identifier
rest
uses
resource
identifier
identify
particular
resource
involved
interaction
components
rest
connectors
provide
generic
interface
accessing
manipulating
value
set
resource
regardless
membership
function
defined
type
software
handling
request
naming
authority
assigned
resource
identifier
making
possible
reference
resource
responsible
maintaining
semantic
validity
mapping
time
ensuring
membership
function
change
traditional
hypertext
systems
61
typically
operate
closed
local
environment
use
unique
node
document
identifiers
change
every
time
information
changes
relying
link
servers
maintain
references
separately
content
135
since
centralized
link
servers
anathema
immense
scale
multi
organizational
domain
requirements
web
rest
relies
instead
author
choosing
resource
identifier
best
fits
nature
concept
identified
naturally
quality
identifier
often
proportional
amount
money
spent
retain
validity
leads
broken
links
ephemeral
poorly
supported
information
moves
disappears
time
5
2
1
2
representations
rest
components
perform
actions
resource
using
representation
capture
current
intended
state
resource
transferring
representation
components
representation
sequence
bytes
plus
representation
metadata
describe
bytes
commonly
used
less
precise
names
representation
include
document
file
http
message
entity
instance
variant
representation
consists
data
metadata
describing
data
occasion
metadata
describe
metadata
usually
purpose
verifying
message
integrity
metadata
form
name
value
pairs
name
corresponds
standard
defines
value's
structure
semantics
response
messages
may
include
representation
metadata
resource
metadata
information
resource
specific
supplied
representation
control
data
defines
purpose
message
components
action
requested
meaning
response
also
used
parameterize
requests
override
default
behavior
connecting
elements
example
cache
behavior
can
modified
control
data
included
request
response
message
depending
message
control
data
given
representation
may
indicate
current
state
requested
resource
desired
state
requested
resource
value
resource
representation
input
data
within
client's
query
form
representation
error
condition
response
example
remote
authoring
resource
requires
author
send
representation
server
thus
establishing
value
resource
can
retrieved
later
requests
value
set
resource
given
time
consists
multiple
representations
content
negotiation
may
used
select
best
representation
inclusion
given
message
data
format
representation
known
media
type
48
representation
can
included
message
processed
recipient
according
control
data
message
nature
media
type
media
types
intended
automated
processing
intended
rendered
viewing
user
capable
composite
media
types
can
used
enclose
multiple
representations
single
message
design
media
type
can
directly
impact
user
perceived
performance
distributed
hypermedia
system
data
must
received
recipient
can
begin
rendering
representation
adds
latency
interaction
data
format
places
important
rendering
information
front
initial
information
can
incrementally
rendered
rest
information
received
results
much
better
user
perceived
performance
data
format
must
entirely
received
rendering
can
begin
example
web
browser
can
incrementally
render
large
html
document
received
provides
significantly
better
user
perceived
performance
one
waits
entire
document
completely
received
prior
rendering
even
though
network
performance
note
rendering
ability
representation
can
also
impacted
choice
content
dimensions
dynamically
sized
tables
embedded
objects
must
determined
can
rendered
occurrence
within
viewing
area
hypermedia
page
will
increase
latency
5
2
2
connectors
rest
uses
various
connector
types
summarized
table
5
2
encapsulate
activities
accessing
resources
transferring
resource
representations
connectors
present
abstract
interface
component
communication
enhancing
simplicity
providing
clean
separation
concerns
hiding
underlying
implementation
resources
communication
mechanisms
generality
interface
also
enables
substitutability
users'
access
system
via
abstract
interface
implementation
can
replaced
without
impacting
users
since
connector
manages
network
communication
component
information
can
shared
across
multiple
interactions
order
improve
efficiency
responsiveness
table
5
2
rest
connectorsconnectormodern
web
examplesclientlibwww
libwww
perlserverlibwww
apache
api
nsapicachebrowser
cache
akamai
cache
networkresolverbind
dns
lookup
library
tunnelsocks
ssl
http
connect
rest
interactions
stateless
request
contains
information
necessary
connector
understand
request
independent
requests
may
preceded
restriction
accomplishes
four
functions
1
removes
need
connectors
retain
application
state
requests
thus
reducing
consumption
physical
resources
improving
scalability
2
allows
interactions
processed
parallel
without
requiring
processing
mechanism
understand
interaction
semantics
3
allows
intermediary
view
understand
request
isolation
may
necessary
services
dynamically
rearranged
4
forces
information
might
factor
reusability
cached
response
present
request
connector
interface
similar
procedural
invocation
important
differences
passing
parameters
results
parameters
consist
request
control
data
resource
identifier
indicating
target
request
optional
representation
parameters
consist
response
control
data
optional
resource
metadata
optional
representation
abstract
viewpoint
invocation
synchronous
parameters
can
passed
data
streams
words
processing
can
invoked
value
parameters
completely
known
thus
avoiding
latency
batch
processing
large
data
transfers
primary
connector
types
client
server
essential
difference
two
client
initiates
communication
making
request
whereas
server
listens
connections
responds
requests
order
supply
access
services
component
may
include
client
server
connectors
third
connector
type
cache
connector
can
located
interface
client
server
connector
order
save
cacheable
responses
current
interactions
can
reused
later
requested
interactions
cache
may
used
client
avoid
repetition
network
communication
server
avoid
repeating
process
generating
response
cases
serving
reduce
interaction
latency
cache
typically
implemented
within
address
space
connector
uses
cache
connectors
shared
meaning
cached
responses
may
used
answer
client
one
response
originally
obtained
shared
caching
can
effective
reducing
impact
flash
crowds
load
popular
server
particularly
caching
arranged
hierarchically
cover
large
groups
users
within
company's
intranet
customers
internet
service
provider
universities
sharing
national
network
backbone
however
shared
caching
can
also
lead
errors
cached
response
match
obtained
new
request
rest
attempts
balance
desire
transparency
cache
behavior
desire
efficient
use
network
rather
assuming
absolute
transparency
always
required
cache
able
determine
cacheability
response
interface
generic
rather
specific
resource
default
response
retrieval
request
cacheable
responses
requests
non
cacheable
form
user
authentication
part
request
response
indicates
shared
response
cacheable
non
shared
cache
component
can
override
defaults
including
control
data
marks
interaction
cacheable
non
cacheable
cacheable
limited
time
resolver
translates
partial
complete
resource
identifiers
network
address
information
needed
establish
inter
component
connection
example
uri
include
dns
hostname
mechanism
identifying
naming
authority
resource
order
initiate
request
web
browser
will
extract
hostname
uri
make
use
dns
resolver
obtain
internet
protocol
address
authority
another
example
identification
schemes
urn
124
require
intermediary
translate
permanent
identifier
transient
address
order
access
identified
resource
use
one
intermediate
resolvers
can
improve
longevity
resource
references
indirection
though
adds
request
latency
final
form
connector
type
tunnel
simply
relays
communication
across
connection
boundary
firewall
lower
level
network
gateway
reason
modeled
part
rest
abstracted
away
part
network
infrastructure
rest
components
may
dynamically
switch
active
component
behavior
tunnel
primary
example
http
proxy
switches
tunnel
response
connect
method
request
71
thus
allowing
client
directly
communicate
remote
server
using
different
protocol
tls
allow
proxies
tunnel
disappears
ends
terminate
communication
5
2
3
components
rest
components
summarized
table
5
3
typed
roles
overall
application
action
table
5
3
rest
componentscomponentmodern
web
examplesorigin
serverapache
httpd
microsoft
iisgatewaysquid
cgi
reverse
proxyproxycern
proxy
netscape
proxy
gauntletuser
agentnetscape
navigator
lynx
momspider
user
agent
uses
client
connector
initiate
request
becomes
ultimate
recipient
response
common
example
web
browser
provides
access
information
services
renders
service
responses
according
application
needs
origin
server
uses
server
connector
govern
namespace
requested
resource
definitive
source
representations
resources
must
ultimate
recipient
request
intends
modify
value
resources
origin
server
provides
generic
interface
services
resource
hierarchy
resource
implementation
details
hidden
behind
interface
intermediary
components
act
client
server
order
forward
possible
translation
requests
responses
proxy
component
intermediary
selected
client
provide
interface
encapsulation
services
data
translation
performance
enhancement
security
protection
gateway
reverse
proxy
component
intermediary
imposed
network
origin
server
provide
interface
encapsulation
services
data
translation
performance
enhancement
security
enforcement
note
difference
proxy
gateway
client
determines
will
use
proxy
5
3
rest
architectural
views
now
understanding
rest
architectural
elements
isolation
can
use
architectural
views
105
describe
elements
work
together
form
architecture
three
types
view
process
connector
data
useful
illuminating
design
principles
rest
5
3
1
process
view
process
view
architecture
primarily
effective
eliciting
interaction
relationships
among
components
revealing
path
data
flows
system
unfortunately
interaction
real
system
usually
involves
extensive
number
components
resulting
overall
view
obscured
details
figure
5
10
provides
sample
process
view
rest
based
architecture
particular
instance
processing
three
parallel
requests
rest's
client
server
separation
concerns
simplifies
component
implementation
reduces
complexity
connector
semantics
improves
effectiveness
performance
tuning
increases
scalability
pure
server
components
layered
system
constraints
allow
intermediaries
proxies
gateways
firewalls
introduced
various
points
communication
without
changing
interfaces
components
thus
allowing
assist
communication
translation
improve
performance
via
large
scale
shared
caching
rest
enables
intermediate
processing
constraining
messages
self
descriptive
interaction
stateless
requests
standard
methods
media
types
used
indicate
semantics
exchange
information
responses
explicitly
indicate
cacheability
since
components
connected
dynamically
arrangement
function
particular
application
action
characteristics
similar
pipe
filter
style
although
rest
components
communicate
via
bidirectional
streams
processing
direction
independent
therefore
susceptible
stream
transducers
filters
generic
connector
interface
allows
components
placed
stream
based
properties
request
response
services
may
implemented
using
complex
hierarchy
intermediaries
multiple
distributed
origin
servers
stateless
nature
rest
allows
interaction
independent
others
removing
need
awareness
overall
component
topology
impossible
task
internet
scale
architecture
allowing
components
act
either
destinations
intermediaries
determined
dynamically
target
request
connectors
need
aware
other's
existence
scope
communication
though
may
cache
existence
capabilities
components
performance
reasons
5
3
2
connector
view
connector
view
architecture
concentrates
mechanics
communication
components
rest
based
architecture
particularly
interested
constraints
define
generic
resource
interface
client
connectors
examine
resource
identifier
order
select
appropriate
communication
mechanism
request
example
client
may
configured
connect
specific
proxy
component
perhaps
one
acting
annotation
filter
identifier
indicates
local
resource
likewise
client
can
configured
reject
requests
subset
identifiers
rest
restrict
communication
particular
protocol
constrain
interface
components
hence
scope
interaction
implementation
assumptions
might
otherwise
made
components
example
web's
primary
transfer
protocol
http
architecture
also
includes
seamless
access
resources
originate
pre
existing
network
servers
including
ftp
107
gopher
7
wais
36
interaction
services
restricted
semantics
rest
connector
constraint
sacrifices
advantages
architectures
stateful
interaction
relevance
feedback
protocol
like
wais
order
retain
advantages
single
generic
interface
connector
semantics
return
generic
interface
makes
possible
access
multitude
services
single
proxy
application
needs
additional
capabilities
another
architecture
can
implement
invoke
capabilities
separate
system
running
parallel
similar
web
architecture
interfaces
telnet
mailto
resources
5
3
3
data
view
data
view
architecture
reveals
application
state
information
flows
components
since
rest
specifically
targeted
distributed
information
systems
views
application
cohesive
structure
information
control
alternatives
user
can
perform
desired
task
example
looking
word
line
dictionary
one
application
touring
virtual
museum
reviewing
set
class
notes
study
exam
application
defines
goals
underlying
system
system's
performance
can
measured
component
interactions
occur
form
dynamically
sized
messages
small
medium
grain
messages
used
control
semantics
bulk
application
work
accomplished
via
large
grain
messages
containing
complete
resource
representation
frequent
form
request
semantics
retrieving
representation
resource
get
method
http
can
often
cached
later
reuse
rest
concentrates
control
state
representations
received
response
interactions
goal
improve
server
scalability
eliminating
need
server
maintain
awareness
client
state
beyond
current
request
application's
state
therefore
defined
pending
requests
topology
connected
components
may
filtering
buffered
data
active
requests
connectors
data
flow
representations
response
requests
processing
representations
received
user
agent
application
reaches
steady
state
whenever
outstanding
requests
pending
requests
responses
current
set
requests
completely
received
received
point
can
treated
representation
data
stream
browser
application
state
corresponds
web
page
including
primary
representation
ancillary
representations
line
images
embedded
applets
style
sheets
significance
application
steady
states
seen
impact
user
perceived
performance
burstiness
network
request
traffic
user
perceived
performance
browser
application
determined
latency
steady
states
period
time
selection
hypermedia
link
one
web
page
point
usable
information
rendered
next
web
page
optimization
browser
performance
therefore
centered
around
reducing
communication
latency
since
rest
based
architectures
communicate
primarily
transfer
representations
resources
latency
can
impacted
design
communication
protocols
design
representation
data
formats
ability
incrementally
render
response
data
received
determined
design
media
type
availability
layout
information
visual
dimensions
line
objects
within
representation
interesting
observation
efficient
network
request
one
use
network
words
ability
reuse
cached
response
results
considerable
improvement
application
performance
although
use
cache
adds
latency
individual
request
due
lookup
overhead
average
request
latency
significantly
reduced
even
small
percentage
requests
result
usable
cache
hits
next
control
state
application
resides
representation
first
requested
resource
obtaining
first
representation
priority
rest
interaction
therefore
improved
protocols
respond
first
think
later
words
protocol
requires
multiple
interactions
per
user
action
order
things
like
negotiate
feature
capabilities
prior
sending
content
response
will
perceptively
slower
protocol
sends
whatever
likely
optimal
first
provides
list
alternatives
client
retrieve
first
response
unsatisfactory
application
state
controlled
stored
user
agent
can
composed
representations
multiple
servers
addition
freeing
server
scalability
problems
storing
state
allows
user
directly
manipulate
state
web
browser's
history
anticipate
changes
state
link
maps
prefetching
representations
jump
one
application
another
bookmarks
uri
entry
dialogs
model
application
therefore
engine
moves
one
state
next
examining
choosing
among
alternative
state
transitions
current
set
representations
surprisingly
exactly
matches
user
interface
hypermedia
browser
however
style
assume
applications
browsers
fact
application
details
hidden
server
generic
connector
interface
thus
user
agent
equally
automated
robot
performing
information
retrieval
indexing
service
personal
agent
looking
data
matches
certain
criteria
maintenance
spider
busy
patrolling
information
broken
references
modified
content
39
5
4
related
work
bass
et
al
9
devote
chapter
architecture
world
wide
web
description
encompasses
implementation
architecture
within
cern
w3c
developed
libwww
client
server
libraries
jigsaw
software
although
implementations
reflect
many
design
constraints
rest
developed
people
familiar
web's
architectural
design
rationale
real
www
architecture
independent
single
implementation
modern
web
defined
standard
interfaces
protocols
interfaces
protocols
implemented
given
piece
software
rest
style
draws
many
preexisting
distributed
process
paradigms
6
50
communication
protocols
software
fields
rest
component
interactions
structured
layered
client
server
style
added
constraints
generic
resource
interface
create
opportunity
substitutability
inspection
intermediaries
requests
responses
appearance
remote
invocation
style
rest
messages
targeted
conceptual
resource
rather
implementation
identifier
several
attempts
made
model
web
architecture
form
distributed
file
system
webnfs
distributed
object
system
83
however
exclude
various
web
resource
types
implementation
strategies
interesting
fact
presence
invalidates
assumptions
underlie
models
rest
works
well
limit
implementation
resources
certain
predefined
models
allowing
application
choose
implementation
best
matches
needs
enabling
replacement
implementations
without
impacting
user
interaction
method
sending
representations
resources
consuming
components
parallels
event
based
integration
ebi
styles
key
difference
ebi
styles
push
based
component
containing
state
equivalent
origin
server
rest
issues
event
whenever
state
changes
whether
component
actually
interested
listening
event
rest
style
consuming
components
usually
pull
representations
although
less
efficient
viewed
single
client
wishing
monitor
single
resource
scale
web
makes
unregulated
push
model
infeasible
principled
use
rest
style
web
clear
notion
components
connectors
representations
relates
closely
c2
architectural
style
128
c2
style
supports
development
distributed
dynamic
applications
focusing
structured
use
connectors
obtain
substrate
independence
c2
applications
rely
asynchronous
notification
state
changes
request
messages
event
based
schemes
c2
nominally
push
based
though
c2
architecture
operate
rest's
pull
style
emitting
notification
upon
receipt
request
however
c2
style
lacks
intermediary
friendly
constraints
rest
generic
resource
interface
guaranteed
stateless
interactions
intrinsic
support
caching
5
5
summary
chapter
introduced
representational
state
transfer
rest
architectural
style
distributed
hypermedia
systems
rest
provides
set
architectural
constraints
applied
whole
emphasizes
scalability
component
interactions
generality
interfaces
independent
deployment
components
intermediary
components
reduce
interaction
latency
enforce
security
encapsulate
legacy
systems
described
software
engineering
principles
guiding
rest
interaction
constraints
chosen
retain
principles
contrasting
constraints
architectural
styles
next
chapter
presents
evaluation
rest
architecture
experience
lessons
learned
applying
rest
design
specification
deployment
modern
web
architecture
work
included
authoring
current
internet
standards
track
specifications
hypertext
transfer
protocol
http
1
1
uniform
resource
identifiers
uri
implementing
architecture
libwww
perl
client
protocol
library
apache
http
server
top
prev
next
roy
thomas
fielding
2000
rights
reserved
reference
work
