compsci 141 cse 141 informatics 101 fall 2009 assignment 2 
assignment 2 
compsci
141
cse
141
informatics
101
fall
2009
news
course
reference
schedule
lab
manual
code
examples
alex
compsci
141
cse
141
informatics
101
fall
2009
assignment
2
due
date
time
wednesday
october
21
9
00pm
introduction
following
recent
discussion
generic
programming
lecture
assignment
asks
write
generic
classes
java
interact
one
another
addition
straightforward
style
generics
exhibited
stack
example
lecture
assignment
will
include
concepts
bounded
type
parameters
comparability
iteration
foreach
loop
task
will
somewhat
algorithmic
bent
though
provide
details
implement
algorithms
expect
built
something
like
expect
prior
coursework
will
prepared
given
description
background
information
relatively
brief
articles
read
give
background
new
java
features
using
assignment
attended
lecture
topic
seen
much
certainly
already
missed
lecture
reading
will
reasonable
substitute
generics
lesson
java
tutorial
complete
tutorial
subject
java
generics
wise
go
material
even
though
goes
bit
beyond
scope
talked
lecture
thorough
lesson
generics
gilad
bracha
read
will
provide
deeper
insights
inclined
java
generics
faq
angelika
langer
comprehensive
set
information
generics
question
answer
format
much
well
beyond
scope
needs
course
question
inner
workings
generics
likely
find
answer
additionally
sure
look
commented
code
example
generic
stack
class
java
much
went
lecture
lecture
used
linked
list
code
example
uses
arraylist
instead
show
another
way
solve
problem
part
assignment
will
require
use
stack
may
use
provided
stack
class
wish
program
assignment
will
required
build
generic
binary
search
tree
implementation
classical
map
data
structure
recall
abstractly
map
set
associations
contains
unique
key
value
necessarily
unique
associated
key
maps
typically
provide
common
operations
adding
new
key
value
pair
looking
value
associated
key
removing
key
value
pair
given
key
among
possibilities
addition
implementing
basic
concept
map
binary
search
trees
also
add
ability
keep
keys
sorted
automatically
example
can
iterate
ascending
order
order
keep
keys
sorted
keys
must
comparable
sense
must
possible
compare
two
keys
decide
smaller
property
also
allows
tree
constructed
way
can
efficiently
searched
binary
search
tree
will
need
iterable
meaning
associations
can
accessed
sequentially
using
iterator
required
implement
iteration
using
standard
java
techniques
demonstrated
generic
stack
example
addition
generic
binary
search
tree
class
will
need
build
short
program
tests
functionality
sure
instantiated
least
two
different
kinds
binary
search
trees
binary
search
trees
different
actual
type
parameters
demonstrated
methods
binary
search
tree
class
along
iteration
without
use
foreach
loop
least
one
instantiations
like
define
use
class
design
implements
comparable
interface
discussed
later
write
class
can
otherwise
encapsulate
whatever
abstraction
like
recalling
binary
search
trees
recall
binary
search
tree
one
way
implementing
map
binary
tree
one
association
key
value
pair
stored
node
following
rules
used
enforce
ordering
keys
within
tree
nodes
containing
key
keys
left
subtree
will
keys
less
keys
right
subtree
will
keys
greater
rules
place
fast
searching
keys
log
time
tree
nodes
possible
assuming
tree
relatively
balanced
following
one
path
root
tree
downward
toward
key
question
three
fundamental
binary
search
tree
algorithms
three
fundamental
algorithms
need
implement
binary
search
tree
adding
new
key
value
pair
removing
key
value
pair
given
key
looking
value
associated
key
summarized
pseudocode
free
adapt
java
use
solution
algorithms
implemented
recursively
though
iterative
implementations
also
possible
either
fine
assignment
add
new
association
key
value
subtree
whose
root
returning
resulting
subtree
node
add
node
key
value
null
return
new
node
else
key
left
add
left
return
else
key
right
add
right
return
lookup
value
associated
key
subtree
whose
root
value
lookup
node
key
null
return
error
throw
exception
else
key
return
value
else
key
return
lookup
left
else
key
return
lookup
right
remove
key
value
pair
key
subtree
whose
root
returning
resulting
subtree
depends
two
helper
functions
findmin
returns
node
minimum
key
subtree
removemin
removes
node
minimum
key
subtree
node
remove
node
key
null
return
error
throw
exception
else
key
left
null
right
null
return
null
else
left
null
right
null
node
min
findmin
right
key
min
key
value
min
value
removemin
right
return
else
left
null
return
left
else
right
null
return
right
else
key
left
remove
left
return
else
key
right
remove
right
return
bounded
type
parameters
data
ordering
rules
binary
search
trees
well
sketched
algorithms
implementing
make
clear
constraint
keys
must
possible
compare
one
another
purposes
determining
pairs
keys
following
relationships
holds
furthermore
relationship
must
always
pair
keys
searches
key
will
proceed
along
path
followed
insertion
types
kinds
comparisons
make
sense
must
eligible
used
keys
generic
classes
discussed
allow
type
parameters
specified
purposes
making
class
generic
allowing
say
store
kind
data
without
resorting
use
object
references
type
safe
way
tell
compile
time
type
objects
references
will
actually
point
example
provided
stack
class
improvement
non
generic
stack
class
allows
specify
program
can
known
compile
time
types
objects
intend
store
stack
instantiate
armed
knowledge
compiler
can
report
error
program
attempts
example
push
student
object
stack
string
taking
type
errors
run
time
errors
turning
compile
time
errors
instead
major
improvement
statically
typed
language
like
java
problem
generic
classes
unrestricted
type
parameters
can
sense
generic
particular
instantiation
stack
can
kind
object
fine
stacks
since
reason
kind
object
stacked
however
causes
serious
problem
talking
class
like
binarysearchtree
needs
restriction
placed
types
keys
namely
comparable
types
can
used
keys
one
way
solve
problem
check
keys
run
time
time
key
non
comparable
type
added
binary
search
tree
exception
can
thrown
course
solution
negates
part
benefit
using
generic
classes
first
place
want
type
errors
caught
compile
time
rather
run
time
can
inserting
key
non
comparable
type
type
error
important
empower
compiler
enough
information
able
report
compile
time
errors
attempt
made
instantiate
binarysearchtree
type
key
comparable
issue
lost
designers
generic
classes
java
solution
provided
java
use
bounded
type
parameters
bounded
type
parameters
type
parameters
restricted
particular
restricted
types
extend
class
implement
interface
general
class
foo
extends
means
class
foo
takes
one
type
parameter
class
foo
must
instantiated
either
class
class
extends
example
foo
legal
instantiation
foo
extends
interface
foo
must
instantiated
either
interface
class
implements
curiously
keyword
extends
used
context
whether
class
interface
java
library
interface
called
comparable
exists
embodies
notion
comparability
talked
contains
one
method
called
compareto
intended
used
compare
pairs
objects
see
smaller
equal
read
java
se
6
api
documentation
unfamiliar
expect
able
use
appropriately
project
comparable
might
imagine
see
takes
type
parameter
generic
type
parameter
refers
type
object
something
can
compared
example
string
implements
comparable
string
means
strings
can
compared
strings
technical
reason
type
parameter
included
compareto
method
takes
object
type
parameter
comparing
object
object
passed
parameter
comparable
interface
generic
method
forced
take
parameter
non
specific
type
object
cast
parameter
making
comparison
making
interface
generic
becomes
possible
say
objects
class
can
compared
can
compared
objects
certain
type
commonly
class
intended
comparable
will
implement
comparable
establish
fact
x's
comparable
x's
since
implementing
comparable
interface
standard
way
java
specify
objects
class
comparable
one
another
makes
sense
restrict
keys
generic
binary
search
tree
class
class
implements
comparable
interface
hand
restriction
necessary
values
can
kind
object
appropriate
generic
name
binary
search
tree
class
one
expect
use
assignment
binarysearchtree
extends
comparable
words
binarysearchtree
takes
two
parameters
key
type
keys
must
comparable
objects
type
value
type
unconstrained
design
various
classes
like
break
implementation
binary
search
tree
following
classes
necessarily
exhaustive
list
classes
need
will
give
good
idea
design
asking
pursue
emphases
type
safety
support
standard
java
iteration
feature
binarysearchtree
extends
comparable
implements
iterable
association
class
encapsulates
binary
search
tree
keys
type
values
type
note
bounded
type
parameter
discussed
previous
section
hand
bounded
since
type
object
can
used
value
purposes
say
iterating
binarysearchtree
return
key
value
pairs
either
keys
values
can
iterated
implemented
associations
described
next
class
implements
iterable
association
rather
iterable
iterable
next
section
write
provides
details
iterable
interface
part
java
library
association
class
encapsulates
one
association
key
value
pair
may
seem
like
implementation
detail
one
hidden
private
member
binarysearchtree
class
class
actually
defined
separately
outside
binarysearchtree
reason
iterator
binarysearchtree
return
associations
keys
values
code
outside
binarysearchtree
class
needs
aware
existence
associations
protection
associations
immutable
meaning
may
modify
keys
values
stored
vitally
important
keys
since
binarysearchtree
sole
responsibility
ensuring
keys
tree
unique
stored
ordered
fashion
will
allow
fast
lookups
philosophically
important
values
since
entrusting
binarysearchtree
task
managing
relationships
keys
values
note
associations
nodes
binarysearchtree
consist
collection
nodes
node
storing
association
may
well
want
include
node
class
within
binarysearchtree
class
make
private
bstiterator
implements
iterator
association
class
defined
privately
within
binarysearchtree
class
iterate
nodes
tree
ascending
order
keys
required
support
remove
operation
will
need
implement
remove
method
however
java
library
allows
iterator
forego
support
remove
method
throw
unsupportedoperationexception
whenever
called
perfectly
okay
assignment
though
may
implement
remove
method
wish
stack
class
will
needed
implementation
bstiterator
may
use
stack
class
provided
may
write
information
use
stack
iterator
implementation
follows
next
section
write
addition
iteration
presumably
kind
node
class
binarysearchtree
class
must
support
following
operations
adding
new
association
given
key
value
remember
keys
must
unique
binary
search
tree
may
handle
problem
however
wish
throwing
exception
replacing
old
value
new
one
method
take
key
value
parameter
rather
association
words
require
user
class
create
new
association
object
order
call
method
removing
association
given
key
required
support
removal
iterator
want
operative
remove
method
binarysearchtree
class
look
value
given
key
run
log
time
assuming
tree
relatively
balanced
look
key
given
value
will
require
full
tree
traversal
might
easily
implemented
using
iterator
details
iterators
follow
next
section
clear
tree
removing
associations
get
number
associations
tree
algorithms
adds
removes
lookups
summarized
section
titled
recalling
binary
search
trees
implementing
iterator
binary
search
tree
iterator
iterable
java
iterator
object
allows
access
elements
collection
objects
linked
list
associations
binary
search
tree
even
lines
text
text
file
without
exposing
details
collection
implemented
powerful
abstraction
since
insulates
code
outside
collection
changes
implementation
collection
also
allows
code
iterate
collection
without
even
knowing
kind
collection
iterating
allowing
work
variety
contexts
instead
limited
just
one
instance
write
method
printall
print
elements
kind
collection
simply
method
take
iterator
parameter
rather
collection
way
can
classes
generic
can
algorithms
standard
java
iterator
defined
iterator
interface
java
library
supports
three
methods
method
signaturebrief
descriptionboolean
hasnext
returns
true
elements
yet
returned
iteratore
next
returns
next
element
underlying
collectionvoid
remove
removes
last
element
returned
next
underlying
collection
sure
look
java
se
6
api
documentation
thorough
description
relevant
parts
java
library
say
objects
class
iterable
iterator
can
created
iterate
contents
example
might
like
linked
list
iterable
meaning
iterator
can
created
used
iterate
elements
list
java
standard
way
specifying
objects
class
iterable
class
implement
iterable
interface
build
linkedlist
class
might
implement
iterable
interface
iterable
interface
supports
one
method
method
signaturebrief
descriptioniterator
iterator
returns
new
iterator
can
used
iterate
elements
collection
places
links
together
type
elements
linked
list
type
elements
will
returned
iterate
list
linkedlist
string
implements
iterable
string
means
can
ask
list
create
iterator
string
can
used
iterate
elements
notice
string
type
parameter
cases
since
get
back
strings
access
elements
linkedlist
strings
binary
search
tree
class
required
support
iteration
standard
way
java
collections
support
meaning
iterable
iterator
case
return
associations
key
value
pairs
ascending
order
keys
stored
tree
iterable
iterator
enables
foreach
loop
somewhat
recent
version
java
introduced
generics
also
loop
commonly
called
foreach
enhanced
loop
abstracts
typical
usage
pattern
creating
iterator
iterating
elements
collection
wrapping
simple
piece
syntax
repetitive
details
hidden
example
given
arraylist
string
called
following
code
prints
elements
arraylist
order
stored
string
system
println
form
called
syntactic
sugar
syntactic
sugar
something
makes
language
easier
use
without
introducing
new
capabilities
case
foreach
loop
written
like
instead
iterator
string
iterator
hasnext
string
next
system
println
fact
java
compiler
will
effectively
take
foreach
loop
shown
turn
lengthier
code
using
iterator
means
need
write
lengthier
code
vast
majority
cases
thing
need
iterator
get
value
element
something
cases
cases
might
need
call
remove
iterator
need
access
elements
order
order
iterator
will
return
need
write
specific
code
hooking
class
foreach
loop
turns
relatively
easy
java
class
implement
iterable
interface
implement
iterator
done
binarysearchtree
will
possible
use
foreach
loop
iterate
associations
iterators
traversals
different
recall
inorder
traversal
binary
search
tree
visits
keys
ascending
order
inorder
traversal
typically
written
recursive
algorithm
roughly
like
inorder
tree
left
subtree
inorder
left
subtree
visit
root
right
subtree
inorder
right
subtree
visit
step
algorithm
abstract
can
used
different
things
different
contexts
might
involve
printing
key
value
pair
screen
saving
key
value
pair
file
checking
see
key
value
pair
meets
search
criteria
whatever
algorithm
visits
keys
ascending
order
definition
binary
search
tree
subtrees
tree
including
keys
left
subtree
guaranteed
less
key
s's
root
keys
right
subtree
guaranteed
greater
key
s's
root
recursive
algorithm
visits
keys
left
subtree
visiting
root
visits
root
visiting
keys
right
subtree
keys
visited
ascending
order
simplest
way
implement
kind
traversal
write
recursive
method
thing
algorithm
returning
entire
traversal
complete
however
java
kind
implementation
incompatible
notion
iterator
intended
perform
traversal
one
step
time
words
iterator
will
traverse
next
key
ascending
order
every
time
next
method
called
pause
next
method
called
next
method
called
will
pick
left
traversing
next
key
ascending
order
pause
subsequent
call
next
key
implementing
iterator
able
pause
iteration
allowing
pick
left
next
time
ask
next
key
java
makes
kind
implementation
difficult
straightforward
way
pause
method
pick
left
say
done
java
example
threading
allow
threading
heavyweight
solution
case
lightweight
problem
see
examples
languages
later
quarter
implementing
iterators
becomes
difficult
straightforward
traversal
one
solution
problem
perform
entire
traversal
iterator's
constructor
saving
key
value
pairs
arraylist
flat
data
structure
ascending
order
keys
however
tree
large
approach
neither
memory
time
efficient
better
approach
perform
traversal
one
step
time
time
next
method
called
requires
bit
extra
complexity
implementation
iterator
small
price
pay
large
improvement
memory
usage
required
implement
iterator
without
performing
entire
traversal
front
instead
need
run
traversal
step
step
moving
next
key
next
called
running
traversal
step
step
iterator
place
recursive
algorithm
runs
entire
traversal
completion
returning
instead
need
implement
iterator
performs
traversal
step
step
little
bit
work
time
next
called
saving
state
can
pick
left
subsequent
call
next
order
implement
iterator
way
first
need
decide
state
needs
saved
calls
next
given
time
throughout
traversal
implemented
using
recursive
algorithm
run
time
stack
essentially
keeping
track
two
things
current
node
top
run
time
stack
parent
parent's
parent
along
node
indication
whether
left
right
subtrees
node
already
traversed
since
will
implementing
recursive
traversal
runs
completion
will
need
store
information
calls
next
reason
suggested
writing
stack
class
using
one
provided
need
store
state
information
note
goal
using
stack
push
binary
search
tree's
elements
pop
one
time
mind
rough
approach
implementing
iterator
goes
something
like
purposefully
left
details
unspecified
iterator's
constructor
begin
pushing
root
node
stack
along
indication
neither
subtrees
traversed
yet
tree
empty
leave
stack
empty
well
hasnext
method
returns
false
stack
empty
next
method
top
stack
interpreted
current
node
different
things
depending
whether
current
node's
left
right
subtrees
traversed
already
call
next
current
node
next
node
ascending
order
keys
whose
key
value
pair
yet
returned
advance
traversal
tree
push
nodes
stack
traversal
moves
tree
pop
nodes
stack
times
stack
contain
top
stack
bottom
entire
path
current
node
parent
node
accompanied
stack
indication
whether
left
right
subtrees
already
traversed
note
indications
stored
stack
tree
nodes
multiple
iterators
may
iterating
tree
simultaneously
us
unchecked
warnings
errors
main
purpose
assignment
give
practice
generic
classes
java
using
generics
properly
will
type
errors
will
need
typecasts
code
reason
grade
assignment
unchecked
warnings
will
considered
errors
unchecked
warnings
indicate
problem
use
generics
usually
caused
leaving
type
parameter
declaration
somewhere
thus
need
fixed
remember
can
get
information
specific
warning
compiling
program
way
javac
xlint
unchecked
java
sure
program
compiles
way
errors
warnings
submit
limitations
may
use
pre
existing
binary
search
tree
implementation
java
util
treemap
assignment
like
build
binary
search
tree
class
scratch
stated
earlier
may
use
provided
generic
stack
class
part
implementation
binary
search
tree
iterator
though
may
use
pre
existing
java
util
stack
java
library
deliverables
need
submit
java
source
files
java
including
provided
submit
compiled
versions
program
files
generated
development
environment
follow
link
discussion
submit
assignment
remember
accept
paper
submissions
assignments
accept
via
email
circumstances
cleaned
additional
explanation
binary
search
tree
algorithms
added
alex
thornton
fall
2007
updated
properly
require
use
comparable
interface
rather
comparable
type
parameter
along
additional
explanation
alex
thornton
fall
2005
additional
sections
added
alex
thornton
winter
2005
originally
written
alex
thornton
fall
2004
