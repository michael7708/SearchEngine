informatics 43 spring 2009 course project phase 2 architectural module design 
phase 2 
informatics
43
spring
2009
news
course
reference
schedule
course
project
code
examples
alex
informatics
43
spring
2009
course
project
phase
2
architectural
module
design
due
date
time
friday
may
8
9
00pm
background
since
delivering
requirements
specification
previous
phase
additional
negotiations
taken
place
project
team
customer
negotiations
aspects
plans
made
previously
changed
often
project
now
name
triple
enrollment
system
tpes
requirements
revisited
clarified
yielding
official
requirements
specification
please
refer
document
remainder
project
supercedes
document
submitted
phase
1
now
requirements
specification
completed
time
turn
attention
system's
design
discussed
lecture
can
think
design
comprised
two
simultaneous
activities
architectural
design
decide
major
modules
system
ways
will
interact
one
another
module
design
consider
individual
modules
interactions
detail
including
breaking
major
modules
architectural
design
smaller
ones
deciding
set
methods
will
provided
modules
understanding
modules
related
one
another
necessarily
obvious
line
can
draw
architectural
design
module
design
former
focuses
big
picture
latter
small
picture
exactly
clear
division
big
small
pictures
also
though
first
architectural
design
module
design
activities
complement
one
another
best
approached
together
phase
course
project
requires
produce
design
specification
describe
aspects
design
tpes
will
give
opportunity
explore
architectural
module
design
well
provide
experience
using
unified
modeling
language
uml
describe
aspects
design
next
phase
implement
portions
design
advantage
think
things
carefully
phase
work
spent
now
discovering
clean
design
will
reduce
time
spend
implementation
software
design
complex
topic
learned
much
experience
anything
else
said
principles
nearly
universal
good
designs
almost
always
follow
certain
guidelines
implicitly
explicitly
knowing
principles
helps
find
good
design
especially
still
gaining
experience
principles
rigor
want
sure
requirements
met
obviously
necessary
certainly
sufficient
condition
good
design
project
one
addresses
system's
requirements
information
hiding
modules
hide
design
implementation
decisions
important
point
mean
hide
sense
one
can
find
source
code
can
discover
decisions
point
modules
depend
decisions
decisions
can
revisited
without
affecting
modules
separation
concerns
modules
solve
single
problem
designed
way
allows
written
tested
independently
high
cohesion
parts
module
closely
related
one
another
instead
disparate
collection
unrelated
loosely
related
parts
low
coupling
modules
rely
little
possible
bear
principles
mind
work
design
design
specification
design
specification
focus
design
model
tpes
words
consider
data
system
stores
operations
can
performed
data
avoid
designing
details
user
interface
sure
design
addresses
requirements
comprise
implementation
phase
1
official
requirements
specification
design
specification
comprised
following
sections
order
listed
table
contents
including
page
numbers
introduction
describe
architecture
system
high
level
used
architectural
styles
discussed
lecture
described
section
11
4
textbook
make
note
uml
class
diagram
draw
uml
class
diagram
detailing
classes
system
relationships
one
another
include
public
attributes
methods
class
interface
specifications
class
design
specify
interface
including
least
following
information
official
requirements
addressed
class
need
describe
requirements
identifier
es
1
will
information
decisions
class
hide
list
set
public
methods
constructors
including
names
parameters
return
types
brief
one
sentence
description
anything
else
will
help
us
understand
class
parent
inheritance
hierarchy
integration
test
plan
choose
two
classes
related
one
another
way
inheritance
describe
plan
testing
integration
one
another
plan
broken
test
cases
individual
cases
focused
one
one
way
two
classes
interact
specify
objects
will
participate
test
will
set
test
steps
will
taken
test
expected
results
return
values
methods
changes
objects'
internal
state
many
software
packages
capable
producing
uml
class
diagrams
ics
labs
find
microsoft
visio
reasonably
good
job
can
copy
paste
entire
uml
class
diagram
visio
microsoft
word
document
essentially
anything
fine
us
long
understand
long
can
included
document
includes
drawing
diagram
hand
neatly
enough
us
able
read
scanning
copying
document
assume
design
will
implemented
java
deliverables
required
deliver
design
specification
single
document
one
following
formats
microsoft
word
doc
docx
rich
text
format
rtf
pdf
pdf
follow
link
discussion
submit
files
via
checkmate
ics
built
online
assignment
submission
system
aware
holding
rules
specified
document
including
one
says
responsible
submitting
version
specification
want
graded
regrade
work
simply
submitted
wrong
version
accidentally
originally
written
alex
thornton
spring
2009
influence
dan
frost
