vista'97 paper 
virtual system acquisition approach transitions 
virtual
system
acquisition
approach
transitions
walt
scacchi
barry
boehm
university
southern
california
los
angeles
ca
90089
1421
usa
213
740
4782
213
740
8494
fax
wscacchi
rcf
usc
edu
boehm
sunset
usc
edu
july
1997
revised
version
appears
acquisition
review
quarterlty
5
2
185
216
spring
1998
abstract
paper
describe
radically
new
approach
acquisition
software
intensive
systems
start
reviewing
problems
opportunities
improving
acquisition
systems
put
forward
statement
objective
need
make
software
system
acquisition
agile
adaptive
evolutionary
modeling
simulation
development
system
acquired
describe
new
vision
re
tooling
re
engineering
software
system
acquisition
form
call
vista
denoting
approach
virtual
acquisition
systems
outline
vista
approach
software
acquisition
followed
discussion
technical
organizational
transitions
must
investigated
managed
ensure
eventual
success
radical
change
software
system
acquisition
authors
walt
scacchi
research
professor
director
atrium
laboratory
marshall
school
business
usc
faculty
usc
since
1981
faculty
principal
usc
center
software
engineering
barry
boehm
trw
professor
software
engineering
computer
science
usc
director
usc
center
software
engineering
1989
1992
served
within
dod
director
darpa
information
science
technology
office
software
intelligent
systems
technology
office
also
served
director
ddr
software
computer
technology
office
director
two
major
dod
software
initiatives
dod
software
technology
plan
ddr
software
action
plan
acknowledgments
preparation
article
supported
grants
air
force
rome
laboratory
deputy
assistant
secretary
air
force
computers
communications
support
systems
contract
f30602
94
0195
office
naval
research
contract
n00014
94
1
0889
none
material
report
construed
statement
policy
procedure
endorsement
onr
us
air
force
us
navy
us
government
agency
problems
opportunities
improving
acquisition
acquisition
major
software
intensive
systems
often
problematic
recent
reports
us
general
accounting
office
gao
1995
gao
1997
describe
number
problems
way
complex
systems
acquired
current
problems
acquisition
include
difficulty
establishing
viable
cost
effective
system
requirements
overly
optimistic
cost
schedule
performance
estimates
concurrent
development
production
systems
commitment
system
production
adequate
demonstration
testing
determines
system
viability
completed
surprise
modern
future
weapon
systems
increasingly
represent
software
intensive
systems
addition
dod
government
agencies
rely
acquisition
use
computer
based
information
systems
manage
recurring
organizational
operational
activities
many
management
information
systems
often
running
dated
computing
platforms
must
replaced
modernized
dod
established
acquisition
strategies
move
toward
commercial
acquisition
practices
one
strategy
embodies
idea
feasibility
ability
produce
advanced
technologies
can
often
demonstrated
incorporated
acquisition
programs
example
use
advanced
concept
technology
demonstrations
can
directly
involve
war
fighters
users
demonstrating
operational
feasibility
new
technologies
concepts
commitments
made
full
scale
acquisition
another
strategy
rooted
defense
acquisition
workforce
improvement
act
dawia
establishes
benchmarks
professional
acquisition
workforce
defined
training
education
requirements
acquisition
career
paths
goal
act
provide
acquisition
workforce
responsible
improving
program
costs
schedule
estimates
finally
1994
osd
began
pursuing
strategy
re
engineer
systems
acquisition
review
process
includes
effort
reduce
acquisition
costs
including
overhead
costs
adoption
business
processes
characteristic
world
class
commercial
buyers
suppliers
overall
way
federal
government
conducts
acquisition
practices
reviewed
redesigned
response
federal
acquisition
streamlining
act
fasa
1994
among
things
fasa
requires
incentives
performance
based
approach
managing
acquisition
programs
emphasizes
streamlining
acquisition
process
proposes
greater
reliance
commercial
products
processes
also
concepts
applying
commercial
practices
dod
software
system
acquisition
addressed
defense
science
board
reports
thus
time
substantial
opportunity
rethink
acquisition
software
intensive
systems
occur
address
recurring
problems
time
pursue
new
opportunities
re
engineer
systems
acquisition
process
can
realize
savings
efficiencies
increased
satisfaction
continuous
improvement
similarly
provide
strategy
managing
transition
re
engineered
system
acquisition
processes
can
represent
radical
departure
current
practices
subsequently
seek
explore
opportunities
can
pursued
use
advanced
information
processing
tools
techniques
concepts
objective
make
acquisition
software
intensive
systems
agile
adaptive
relevant
information
technologies
include
1
re
tooling
system
acquisition
processes
better
assess
feasibility
system
acquisitions
2
digital
libraries
organizing
sharing
information
gathered
system
acquisitions
program
management
3
internet
based
electronic
commerce
services
capabilities
streamlining
procurement
actions
lead
times
supply
chain
logistics
cf
nissen
1997
scacchi
1997
however
paper
related
materials
boehm
scacchi
1996
focus
discussion
first
areas
steps
toward
agile
acquisition
future
systems
general
terms
overall
goal
address
recurring
problems
plague
system
acquisition
efforts
approach
suggests
ways
new
modeling
simulation
techniques
can
help
re
engineering
software
intensive
systems
acquired
dod
government
agencies
means
seek
identify
new
concepts
tools
techniques
acquiring
software
intensive
systems
fulfill
four
goals
first
establish
viable
cost
effective
system
requirements
second
establish
realistic
cost
schedule
performance
estimates
third
mitigate
concurrent
development
production
systems
fourth
enable
adequate
demonstration
testing
system
viability
commitment
system
production
must
made
based
results
series
workshops
blue
ribbon
panels
leading
military
industry
academic
experts
addressed
problems
large
scale
software
system
acquisition
boehm
scacchi
1996
can
identify
five
issues
involved
achieving
transitioning
overall
goal
need
first
baseline
current
understanding
strengths
weaknesses
current
process
capabilities
acquiring
software
intensive
systems
guidelines
best
practices
lessons
learned
collected
disseminated
software
technology
support
center
stsc
1995
software
program
managers
network
spmn
1997
assembled
recent
collections
nonetheless
also
need
understand
employed
well
identify
operational
problems
may
inhibit
application
success
need
develop
scenarios
new
acquisition
process
capabilities
exploit
evolutionary
virtual
approach
acquisition
software
intensive
systems
approach
emphasizes
incremental
acquisition
virtual
prototypes
new
software
intensive
system
prototypes
start
models
intended
system
system
models
can
analyzed
simulated
determine
system
requirements
risks
addressed
familiarity
confidence
prototypes'
increases
realism
functionality
increases
incremental
integration
system
components
way
virtual
prototypes
systems
can
incrementally
modeled
iteratively
reconfigured
simulated
actual
subsystem
components
development
production
growing
number
complex
electro
mechanical
assemblies
now
designed
tested
refined
use
computational
models
simulations
virtual
prototypes
garcia
gocke
johnson
1994
similarly
availability
battle
labs
suggests
use
virtual
battlefields
command
centers
trying
exercising
complex
defense
systems
alternative
scenarios
computer
based
modeling
simulation
test
beds
operating
within
networked
laboratories
cothran
1996
wilson
1996
accordingly
approaches
may
also
prove
effective
supporting
acquisition
software
systems
way
viability
cost
effectiveness
system
requirements
can
demonstrated
validated
refined
incremental
manner
similarly
estimates
cost
schedule
performance
ever
complete
actual
system
can
also
developed
refined
incrementally
subsequently
also
consider
developing
methods
scenarios
transition
acquisition
process
envision
need
articulate
design
operational
concept
wide
area
modeling
simulation
infrastructure
whose
primary
purpose
serve
test
bed
delivery
platform
agile
acquisition
software
intensive
systems
infrastructure
may
need
support
collaboration
resource
sharing
software
system
researchers
developers
geographically
distributed
sites
may
operate
modeling
simulation
collaboratory
kouzes
meyers
wulf
1996
software
system
acquisition
similarly
infrastructure
may
need
support
hypermedia
repository
digital
library
technical
data
information
can
accessed
shared
internet
world
wide
web
www
digital
library
store
organize
access
software
acquisitions
assets
may
include
publications
model
simulation
libraries
reusable
software
subsystem
components
system
demonstration
scenarios
multi
media
presentations
annotations
addition
digital
library
may
provide
paths
super
computing
environments
support
massively
parallel
simulations
etc
also
want
understand
future
acquisition
processes
capabilities
might
exploit
full
range
technology
strategies
options
hand
goal
minimize
cost
maximize
customer
satisfaction
via
system
performance
quality
attributes
minimize
acquisition
development
cycle
time
relevant
technologies
can
support
goal
include
use
knowledge
based
systems
multi
media
internet
electronic
commerce
selling
buying
software
components
architecture
based
software
system
development
high
performance
computing
communications
etc
will
new
modes
academic
research
industrial
activity
required
effectively
support
agile
acquisition
similarly
institutional
marketplace
incentives
needed
help
make
happen
need
prioritize
estimate
relative
costs
benefits
candidate
investments
modeling
simulation
capabilities
support
software
system
acquisition
need
identify
areas
needs
can
met
largely
available
technology
also
need
identify
areas
acquisition
research
development
automated
acquisition
support
environments
promise
attractive
return
investment
background
foreground
may
now
threshold
new
era
acquisition
development
software
intensive
systems
point
can
look
back
experienced
can
look
forward
toward
horizon
see
lies
ahead
looking
back
use
models
simulations
support
program
acquisitions
looking
back
see
acquisition
development
software
intensive
systems
guided
classic
waterfall
system
life
cycle
approach
dod
customers
expected
able
articulate
needs
requirements
new
system
capabilities
prior
system
development
developers
contractors
take
requirements
starting
point
systematically
develop
test
deliver
results
customer
according
sequence
development
milestones
documentation
standards
approach
much
rational
appeal
practice
outcome
often
less
satisfactory
overall
experience
difficult
customers
fully
articulate
system
requirements
prior
beginning
system
development
furthermore
system
development
took
years
customer
developer
recognized
requirements
changing
sometimes
rapidly
consequently
far
many
systems
developed
contract
delivered
meet
critical
system
requirements
worst
cases
software
systems
effectively
non
operational
subsequently
customers
developers
began
recognize
perhaps
shortfalls
software
acquisition
development
systemic
rather
simply
characteristic
particular
programs
development
organizations
response
seemingly
inevitable
shortfalls
classic
approach
effort
find
alternative
began
led
incremental
spiral
development
approach
classic
approach
little
visibility
regarding
operational
software
system
capabilities
late
development
cycle
contrast
spiral
approach
embraces
evolutionary
iterative
development
model
accordingly
operational
software
capabilities
become
visible
evolutionary
increments
rather
subsequent
development
iterations
add
integrate
increments
final
system
ready
thus
spiral
approach
seeks
build
deliver
software
intensive
systems
evolutionary
development
consequently
guidelines
now
put
forth
military
public
standards
mil
std
498
ansi
std
016
us
12207
encourage
use
incremental
spiral
approach
acquiring
developing
software
intensive
systems
use
models
simulations
support
incremental
acquisition
complex
software
systems
simplest
terms
can
identify
three
reasons
first
facilitate
early
identification
reduction
risks
associated
complex
system
acquisition
programs
second
better
understand
kinds
system
requirements
architectures
feasible
affordable
given
various
programmatic
technological
constraints
third
gain
insight
better
manage
system
engineering
effort
improve
overall
likelihood
successful
acquisition
effort
however
creation
use
reliance
models
simulations
support
incremental
acquisition
efforts
guarantee
outcomes
clearly
models
simulations
complex
systems
will
never
assumption
laden
approximations
systems
acquired
fate
models
simulations
cf
smith
1996
nonetheless
process
building
using
evolving
models
simulations
support
decision
making
activities
large
system
acquisition
efforts
can
characterized
one
consensus
validation
dutton
kraemer
1985
thus
value
supporting
system
acquisition
modeling
simulation
will
found
process
working
rather
calculations
performed
along
way
modeling
simulation
can
employed
help
identify
consensus
can
established
validated
well
identify
disagreements
can
found
consequences
examined
program
managers
contractors
customers
acquisition
directorate
staff
can
employ
models
simulations
coordinated
negotiation
support
system
system
can
support
elicitation
capture
validation
points
agreement
among
system
acquisition
participants
addition
system
can
help
people
surface
assumptions
debate
merits
implications
negotiate
alternative
system
configurations
functional
features
cf
boehm
et
al
1995
manner
computer
based
models
simulations
together
information
sharing
negotiation
support
environment
provide
articulate
medium
express
opinions
stimulate
alternative
conceptions
system
acquisition
problems
challenges
without
articulate
models
simulations
system
acquisition
participants
left
private
intuitions
conceptions
system
design
program
cost
drivers
like
turn
can
easily
obscure
problems
system
design
performance
increase
likelihood
miscommunication
systemic
conflict
increase
likelihood
problematic
system
acquisition
costly
post
deployment
support
resulting
systems
thus
believe
models
simulations
associated
environments
can
play
significant
role
supporting
incremental
acquisition
complex
software
systems
looking
ahead
emerging
case
study
see
many
opportunities
improving
effectiveness
responsiveness
acquisition
software
intensive
systems
across
life
cycle
many
opportunities
result
availability
new
technologies
development
capabilities
make
acquisition
software
intensive
system
agile
agility
can
lead
cost
effective
timely
higher
quality
results
software
system
acquisition
modeling
simulation
technologies
support
virtual
prototyping
garcia
gocke
johnson
1994
simulation
based
design
complex
hardware
systems
used
support
major
program
acquisitions
sc
21
class
battleships
sc21
1997
believe
similar
effort
appropriate
acquisition
large
software
systems
associated
hardware
systems
accordingly
examining
currently
proposed
software
systems
intended
support
sc
21
class
ships
can
better
motivate
articulate
vision
new
modeling
simulation
technologies
can
used
help
support
incremental
acquisition
complex
software
systems
single
architecture
final
design
envisioned
sc
21
ships
instead
sc
21
ships
built
following
commercial
practice
developing
product
line
common
subsystems
reusable
designs
figure
1
helps
show
means
see
four
alternative
views
overall
architecture
sc
21
ships
intent
enable
choice
final
architecture
ship
determined
emerging
need
threat
nonetheless
sc
21
ship
will
still
configuration
common
sub
systems
weapons
command
deck
flight
operations
etc
alternative
versions
ship
architecture
displayed
figure
1
members
sc
21
product
line
figure
1
alternative
overall
architectures
sc
21
ships
sc21
1997
building
ships
according
different
architectural
configurations
represents
fundamental
change
ships
will
acquired
developed
operated
system
life
cycle
ships
will
iterative
incremental
ongoing
figure
2
conveys
vision
various
computer
based
modeling
simulation
technologies
virtual
weapon
system
modeling
simulation
based
design
may
employed
support
acquisition
development
operation
sc
21
ships
figure
2
vision
modeling
simulation
can
support
new
system
acquisition
development
sc21
1997
sc
21
ships
will
software
intensive
systems
major
sub
systems
overall
system
capabilities
supporting
ship's
operations
depend
software
figure
3
proposes
suggested
allocation
shipboard
sub
system
capabilities
will
implemented
software
systems
total
number
software
instructions
source
lines
code
sloc
realize
proposed
capabilities
estimated
greater
8
4
million
sloc
however
much
software
can
potentially
reused
across
sc
21
line
ships
nonetheless
development
costs
software
size
complexity
often
estimated
range
100
000
000
1
000
000
000
thus
can
done
help
understand
feasibility
alternative
software
sub
system
architectures
associated
sc
21
ship
family
manage
progress
costs
risks
associated
acquisition
development
software
figure
3
software
systems
proposed
sc
21
ships
sc21
1997
present
emerging
consensus
technological
capabilities
needed
support
acquisition
development
software
intensive
systems
family
sc
21
ships
cf
boehm
scacchi
1996
much
like
sc
21
family
ship
hardware
major
sub
systems
employs
recent
advances
modeling
simulation
technologies
similar
technologies
brought
together
support
acquisition
development
software
systems
ships
accordingly
can
now
outline
strategy
work
follow
discussion
technological
organizational
transitions
likely
encountered
course
adopting
strategy
along
way
describe
approach
assess
feasibility
complex
software
systems
incremental
development
spiral
addition
describe
road
map
lays
research
technology
usage's
needed
support
acquisition
software
systems
sc
21
line
ships
virtual
system
acquisition
vista
vision
virtual
acquisition
software
systems
refers
strategic
process
evolving
series
ever
complete
operational
system
versions
acquired
series
short
duration
acquisition
life
cycles
way
emphasis
re
framing
reducing
acquisition
cycle
times
years
months
weeks
focus
attention
incremental
iterative
acquisition
evolving
capability
associated
target
software
system
reductions
acquisition
cycle
time
enable
increase
number
incremental
acquisition
cycles
time
vista
approach
seeks
help
rapidly
identify
address
resolve
risks
associated
acquisition
development
complex
software
intensive
systems
boehm
scacchi
1996
gao
1997
haimes
schooff
chittister
1997
thus
need
tools
enable
customers
developers
rapidly
model
incrementally
evolve
satisfy
sub
sets
system
capability
requirements
iterative
system
version
early
acquisition
cycles
need
focus
acquiring
systems
represent
computational
models
simulations
operational
capability
target
software
system
later
acquisition
cycles
focus
incrementally
evolving
replacing
models
simulations
fully
operational
system
modules
manner
will
always
operational
version
system
evaluate
demonstrate
throughout
system's
acquisition
development
cycle
models
simulations
represent
descriptive
formalized
sharable
understandings
system
can
represent
system's
concept
operation
architecture
ability
support
intended
mission
however
focusing
effort
enable
preliminary
system
capabilities
move
fast
acquisition
life
cycle
goal
establish
validate
consensus
whether
current
models
simulations
software
system's
components
architecture
address
specific
system
requirements
addition
goal
determine
whether
underdeveloped
unrecognized
system
requirements
emerged
need
addressed
subsequent
acquisition
development
cycles
goal
closely
aligned
idea
incrementally
growing
evolving
target
system
organic
adaptive
manner
first
take
requirements
might
work
can
outlined
follows
acquisition
participants
able
architect
construct
assemble
execute
analyze
automated
models
overall
software
system
capability
acquisition
component
models
represent
elements
target
environment
including
people
information
system
infrastructure
informational
products
development
operation
post
deployment
processes
initial
modeling
simulation
elements
represent
first
pass
system's
requirements
generation
development
cycle
participants
able
iteratively
refine
incrementally
evolve
system
model
test
bed
previous
steps
able
selectively
replace
component
models
simulated
prototype
actual
component
elements
participants
able
iteratively
refine
evolve
intermediate
hybrid
system
test
beds
progressively
replace
remaining
component
models
simulations
prototypes
actual
component
elements
helps
insure
full
scale
test
bed
developed
operational
ready
post
deployment
transition
commercial
use
subsequently
can
take
outline
requirements
envision
reformulate
first
cut
prescriptive
process
call
vista
approach
vista
approach
point
outline
series
steps
articulate
software
system
acquisition
development
become
intertwined
virtual
system
acquisition
processes
modeling
simulation
drive
steps
first
describe
types
models
necessary
will
also
characterize
models
may
look
like
represented
will
briefly
describe
models
simulations
incrementally
replaced
evolving
system
modeling
simulation
vista
discussion
assume
envisioned
system
within
scope
available
software
system
product
families
hand
domain
analysis
leading
construction
refinement
appropriate
meta
model
will
needed
product
families
associated
smart
product
models
sc21
1997
documents
development
processes
tools
organizational
agents
defined
represented
using
meta
models
detailed
examples
use
can
found
elsewhere
mi
scacchi
1990
mi
scacchi
1996
scacchi
mi
1997
begin
elicitation
modeling
virtual
system
model
vsm
system
acquired
vsm
composite
model
model
composed
models
least
three
types
models
needed
characterize
complex
software
system
one
class
models
needed
represent
functional
operation
data
required
information
processing
system
will
call
models
type
information
element
models
iems
iem
replaced
operational
system
component
becomes
information
element
ie
iems
used
model
structure
behavior
performance
estimated
measured
required
computing
hardware
software
inputs
processes
outputs
system
data
second
class
models
needed
depict
functional
behavior
ies
embedded
within
man
machine
system
command
control
system
theater
air
dominance
system
mission
support
system
etc
figure
3
acquired
built
call
system
element
models
sems
replaced
system
elements
ses
third
class
needed
represent
system
systems
sensors
environmental
context
embedded
man
machine
systems
operate
called
environment
element
models
eems
replaced
environment
elements
ees
type
model
requires
computational
mechanism
can
support
model
entry
definition
interpretation
simulation
animated
visualization
commercially
available
discrete
event
simulation
packages
represent
one
mechanism
packages
well
suited
simulating
models
represented
queuing
networks
whose
arrival
queues
service
rates
specified
according
statistical
algebraic
models
different
types
models
may
require
different
kinds
simulation
thus
different
tools
may
needed
example
modeling
simulating
look
feel
event
based
operation
graphic
user
interface
military
support
training
system
may
employ
multimedia
authoring
navigation
tools
commercially
available
tools
macromedia
director
microsoft
powerpoint
even
web
browsers
accessing
virtual
reality
content
across
intranet
can
used
purpose
rapid
application
development
rad
tools
visual
basic
powerbuilder
visual
cafe
java
etc
expert
system
shells
4
teknowledge
support
software
prototyping
visual
programming
persistent
databases
can
enable
modeling
simulation
complex
rule
based
state
transition
software
applications
tools
developing
virtual
prototypes
ies
cf
garcia
gocke
johnson
1994
tools
possible
model
simulate
approximate
behavior
software
applications
using
stubbed
canned
pre
calculated
input
output
data
values
place
holders
complex
calculations
required
eventual
software
system
implementation
modeling
simulating
vsm
may
benefit
use
computing
environment
multiple
types
models
simulations
can
defined
composed
simulated
displayed
furthermore
may
desirable
environment
accessible
internet
facilitate
sharing
discussion
review
modeling
simulation
efforts
among
different
organizational
representatives
participating
program
acquisition
iems
can
modeled
variety
ways
common
tactic
may
depict
iems
hierarchically
decomposed
black
boxes
closed
systems
white
boxes
open
systems
gray
boxes
closed
systems
limited
internal
visibility
boxes
placeholders
hardware
software
system
modules
acquired
developed
box
can
represent
computation
unit
can
receive
inputs
event
signals
perform
calculation
produce
outputs
state
transition
new
event
can
modeled
simulated
using
tools
noted
however
depending
kind
acquisition
concern
wish
address
particular
tool
choices
may
appropriate
example
sc
21
class
ships
may
initially
open
question
level
computer
performance
required
satisfactorily
operate
mission
support
software
systems
desktop
pc
probably
inadequate
large
mainframe
may
much
large
expensive
thus
seems
appropriate
consider
modeling
required
computing
hardware
computational
module
mid
range
performance
processing
throughput
10
100
transactions
per
second
starting
point
since
determining
system
performance
throughput
different
mission
support
workloads
traffic
volume
necessary
discrete
event
simulation
package
may
best
use
however
software
system
modules
operate
anticipated
hardware
may
may
readily
understood
initially
little
knowledge
calculations
information
required
processing
mission
support
data
software's
model
may
simply
equate
module
produces
stream
input
output
data
transactions
say
range
0
8
transactions
per
second
alternatively
knowledge
increases
software
modules
may
identified
perform
different
functions
possible
evaluate
alternative
architectural
configurations
compositions
software
modules
way
understand
whether
system
performance
parameters
sensitive
alternatives
example
mission
support
combat
training
system
one
separate
user
input
capture
verification
calculation
database
update
output
user
display
three
distinct
software
modules
modules
configured
linear
sequence
fully
interconnected
concurrent
network
bundled
together
single
large
module
alternative
configuration
easiest
build
test
best
performance
least
cost
perhaps
guess
best
answer
however
can
model
simulate
collaboratively
discuss
three
architectural
alternatives
can
begin
articulate
basis
can
lead
consensus
answer
can
backed
evaluated
alternatives
simulation
results
consensus
results
modeling
simulation
exercise
believable
someone's
best
guess
lieu
controlled
experiment
answer
subjective
however
modeling
simulation
results
explicit
repeatable
subject
trade
analysis
consensus
validation
addition
results
can
open
challenge
reformation
manner
may
tractable
someone's
best
guess
nonetheless
someone
software
architect
experienced
design
mission
support
combat
training
systems
can
argue
persuasively
best
guess
alternative
represented
iem
simulated
compared
validated
sems
provide
ability
embed
software
systems
within
man
machine
systems
setting
sems
embed
iems
ies
user
driven
input
output
environment
users
create
inputs
response
work
assignments
information
output
system
displayed
example
using
training
system
users
may
select
among
menu
items
enter
system
commands
may
cause
training
system
process
input
provide
updated
user
interface
display
wait
user's
next
input
action
sems
must
model
user
behavior
driving
responding
system
actions
events
well
model
system
behavior
response
user
actions
user
behavior
open
ended
range
possible
user
system
interactions
will
modeled
example
users
can
provide
either
acceptable
input
acceptable
erroneous
input
detected
unacceptable
input
sem
simulation
may
include
use
software
drivers
cause
arrival
user
input
input
events
together
system
responses
service
time
intervals
follow
statistical
formulas
characterization
function
sem
simulation
can
supported
using
common
discrete
event
simulation
tools
user
behavior
simulated
alternatively
system's
behavior
simulated
real
users
multimedia
rad
tools
may
employed
provide
simulated
user
interfaces
real
users
evaluate
iem
simulations
plausibility
consensus
validation
process
noted
will
also
apply
eems
provide
ability
embed
man
machine
systems
overall
environmental
context
example
weapons
control
systems
may
designed
utilize
various
sensors
radar
sonar
satellites
etc
zero
targets
sensors
may
complex
systems
similarly
weapons
control
systems
will
interact
many
shipboard
systems
including
mission
support
command
control
etc
systems
must
act
concert
realize
overall
effectiveness
complex
system
systems
ship
sc
21
class
represents
therefore
eems
must
model
interoperation
integration
multiple
systems
may
entail
modeling
overall
patterns
data
messaging
traffic
systems
well
systems
users
group
alternatively
response
different
scenarios
total
system
engagement
eems
may
used
model
ebb
flow
information
across
system
systems
expect
patterns
information
flow
sc
21
ship
response
hostile
attack
scenario
will
different
flows
associated
routine
ship
operations
maintenance
scenario
subsequently
information
traffic
flow
patterns
can
modeled
simulated
using
discrete
event
simulation
capabilities
validation
process
described
earlier
applies
overall
remaining
challenge
integrate
interoperate
different
models
simulations
elements
purpose
collaborative
test
bed
battleship
lab
sc
21
class
ships
cf
cothran
1996
kouzes
meyers
wulf
1996
wilson
1996
may
serve
support
integration
interoperation
multiple
mixed
mode
models
simulation
tools
well
multiple
system
elements
many
models
simulations
time
developing
test
bed
may
expensive
nonetheless
necessary
proposition
however
even
cost
test
beds
approaches
5
10
system
development
costs
investment
may
reasonable
given
total
overall
effectiveness
system
platform
long
lived
software
intensive
thus
software
dependent
objective
find
ways
facilitate
articulation
elaboration
requirements
risks
cost
drivers
complex
software
intensive
systems
also
assist
involved
system
acquisition
understand
modeling
simulation
tools
techniques
can
used
now
turn
provide
brief
description
incremental
system
acquisition
development
proceed
replacing
system
models
operational
elements
system
components
incremental
replacement
system
models
operational
system
components
given
outlined
overall
vista
approach
modeling
simulation
can
describe
approach
work
context
acquiring
software
system
examine
software
systems
sc
21
class
ships
although
limit
discussion
representative
subset
software
systems
ships
use
mission
support
systems
discussion
accordingly
describe
information
system
environment
elements
mission
support
incrementally
acquired
developed
series
spiraling
iterations
following
approach
show
elements
can
change
progressing
models
actual
software
system
architectures
similarly
identify
difference
makes
improve
acquisition
software
vista
approach
begins
acquisition
vsm
mission
support
team
participants
program
office
acquisition
directorate
user
representatives
prospective
contractors
may
specify
vsm
team
might
employ
wide
area
collaboratory
environment
share
record
information
giving
rise
vsm
however
perhaps
contractors
tasked
modeling
development
activity
vsm
can
subjected
analysis
simulation
redesign
visualization
walk
figure
4
provides
concept
diagram
might
appear
focus
architectural
configuration
iems
computer
software
elements
sems
physical
human
elements
eems
external
stimuli
outside
system
boundary
shown
figures
4
6
multiple
iems
sems
eems
used
reflects
notion
scope
depth
different
models
may
limited
compartmentalized
may
divided
among
different
organization
contractors
sub
contractors
program
office
etc
figure
4
initial
vsm
development
cycle
acquiring
initial
vsm
mission
support
systems
many
kinds
models
used
example
iems
designate
computer
hardware
software
subsystems
sems
denote
operational
readiness
test
system
combat
training
system
display
system
also
eems
needed
shipboard
systems
command
control
system
sensors
environment
factors
weather
combat
vs
routine
operations
etc
emphasis
developing
initial
vsm
deciding
kinds
modeling
simulation
tools
use
different
types
model
elements
also
emphasis
directed
integrate
modeled
elements
architectural
configuration
simulated
elements
can
interoperate
shown
figure
4
subsequently
vsm
element
models
can
satisfactorily
simulated
point
using
discrete
event
simulation
package
integration
interoperation
challenges
reduced
eliminated
given
vsm
can
developed
need
exercise
test
explore
proposed
system's
ability
satisfy
requirements
customers
users
development
contractors
program
managers
etc
similarly
need
explore
trade
among
desired
system
functional
capabilities
performance
objectives
costs
wide
area
software
requirement
negotiation
collaboration
environment
win
win
environment
developed
usc
boehm
et
al
1995
used
purpose
collaboration
environments
like
win
win
enable
various
system
acquisition
development
participants
discuss
relative
merits
vsm
ability
identify
demonstrate
system
requirements
determine
validate
consensus
areas
example
user
representatives
may
believe
response
time
user
input
commands
one
second
contractors
may
note
system
performance
may
essential
combat
training
system
may
needed
operational
readiness
test
system
thus
unnecessarily
costly
program
make
help
clarify
position
contractors
input
two
alternative
system
performance
requirements
computer
hardware
iem
simulation
executing
simulation
using
two
performance
measures
may
produce
interesting
comparative
results
instance
users
operational
readiness
test
system
can
accept
four
second
response
time
required
computer
hardware
performance
can
realized
appreciably
lower
cost
perhaps
saving
millions
dollars
cf
boehm
scacchi
1996
result
hand
team
agrees
revise
requirements
information
element
vsm
revised
calibrated
use
information
helps
illustrate
iterative
analysis
simulation
performance
monitoring
benchmarking
can
improve
understanding
system
requirements
identify
areas
virtual
system
acquisition
efforts
can
reduce
costs
later
acquisition
development
cycle
team
decides
assemble
particular
element
components
using
fully
operational
architecturally
configured
sub
assemblies
contractors
must
replace
corresponding
model
simulation
elements
operational
prototypes
actual
operating
elements
figure
5
provides
diagram
hybrid
system
hybrid
test
bed
might
appear
example
eem
sonar
radar
sensors
may
replaced
test
bed
instrument
can
generate
realistic
sensor
input
data
display
system
mission
support
may
now
fully
operational
computer
hardware
supports
display
system
may
operational
accordingly
display
system
sem
can
replaced
operational
display
system
se
computer
hardware
iem
can
replace
corresponding
ie
nonetheless
even
virtual
system
elements
replaced
operational
components
overall
vsm
test
bed
can
still
accessed
evaluated
using
collaborative
wide
area
environment
requirements
negotiation
validation
cf
boehm
et
al
1995
kouzes
meyers
wulf
1996
operational
components
integrated
vsm
becomes
possible
systematically
walk
exercise
monitor
record
replay
revised
vsm
hybrid
tested
can
help
validate
choices
explore
tradeoffs
articulate
systemic
bottlenecks
processing
failures
system's
architecture
scacchi
mi
1997
example
evaluating
operational
performance
display
system
interacts
combat
training
system
appears
users
important
information
user
display
updated
fast
users
act
appropriately
instead
rate
information
display
needs
slowed
information
content
needs
aggregated
summarized
thus
user
standpoint
current
system
operation
vsm
risky
infeasible
system
element
parameters
need
adjusted
otherwise
alternative
system
architectures
need
considered
evaluated
figure
5
intermediate
vsm
development
cycle
intermediate
vsm
elaboration
needed
field
deployable
system
see
figure
2
case
acquisition
development
team
must
revisit
selection
software
system
components
develop
otherwise
can
perform
partly
simulated
operational
test
evaluation
experimentally
field
system
either
across
wide
area
intranet
test
bed
scacchi
noll
1997
battleship
lab
test
bed
order
continue
calibrate
refine
vsm
post
deployment
studies
thus
seek
illustrate
virtual
system
acquisition
can
help
identify
potential
risks
attendant
cost
drivers
may
manifest
field
operation
stages
system's
overall
life
cycle
system
capabilities
needed
participants
can
exercise
vsm
means
may
adjust
simulation
parameters
users
test
drive
evaluate
system
prototypes
etc
determine
tradeoffs
validate
priorities
consensus
consequently
may
choose
revisit
selection
components
acquire
develop
jumping
ahead
acquisition
development
participants
can
continue
evolve
continuously
improve
emerging
system
architecture
entails
iterating
preceding
steps
remaining
system
component
simulations
prototypes
replaced
operational
counterparts
figure
6
provides
diagram
late
stage
system
architecture
might
now
appear
figure
6
final
vsm
development
cycle
see
system
information
element
models
replaced
operational
elements
eems
however
remain
since
may
designate
major
shipboard
system
undergoing
concurrent
development
thus
sensor
test
bed
may
operational
integrated
interoperate
mission
support
systems
command
control
system
well
major
systems
may
yet
operational
available
integration
however
systems
must
still
conform
eems
placeholders
use
mission
support
system
subsequently
additional
capability
required
characterizing
extracting
updated
eem
vsm
updated
information
needs
used
vsms
corresponding
environment
elements
constitute
system
systems
technical
standpoint
requires
addressing
problems
system
component
interface
definition
managing
concurrent
access
different
versions
components
model
placeholders
organizational
standpoint
failing
coordinate
access
propagation
component
interface
definitions
changes
common
problem
precipitates
difficulty
systems
integration
interoperability
knowing
problems
lie
able
prevent
circumvent
virtual
system
acquisition
provides
another
capability
reducing
risks
costs
associated
development
software
intensive
systems
finally
throughout
overall
vista
process
just
outlined
current
best
practices
software
program
management
spmn
1997
consensus
recommendation
blue
ribbon
panels
boehm
scacchi
1996
point
opportunity
track
manage
software
feasibility
risk
using
new
program
management
support
tools
figure
7
provides
view
user
interface
dashboard
tool
well
suggesting
program
management
information
may
conveyed
figure
7
program
management
dashboard
assessing
software
development
progress
spmn
1997
participants
virtual
system
acquisition
also
need
track
organize
record
store
records
steps
took
furthermore
may
need
document
transpired
outcomes
records
documents
represent
important
knowledge
assets
emerging
acquisition
effort
capturing
organizing
information
often
cumbersome
haphazard
however
find
knowledge
assets
can
easily
captured
linked
virtual
system
models
elements
using
hypertext
mechanisms
commonly
available
information
sharing
requirement
negotiation
support
environments
noll
scacchi
1991
boehm
et
al
1995
rather
cast
mountain
paper
basis
vista
approach
can
now
put
forward
matrix
transitional
steps
realize
technical
basis
supporting
vista
followed
description
organizational
transitions
vista
mapping
technological
transitions
vista
although
vista
based
approach
may
radical
departure
traditional
system
acquisition
practice
getting
may
best
achieved
evolutionary
manner
clear
vista
approach
new
tools
techniques
concepts
involves
incremental
acquisition
development
virtual
prototyping
wide
area
collaboratories
software
requirements
negotiation
validation
environments
etc
beginning
used
system
acquisition
efforts
thus
vista
implies
need
use
automated
support
environment
modeling
simulation
program
management
required
tools
techniques
environment
can
investigated
refined
deployed
multi
staged
manner
integrated
information
management
environment
support
acquisition
development
complex
software
systems
sc
21
program
yet
available
however
environment
can
constructed
put
use
following
roadmap
outlined
elsewhere
boehm
scacchi
1996
resulting
environment
can
positioned
support
large
system
acquisition
programs
can
explain
technological
basis
support
transition
vista
terms
cover
anticipated
usage
acquisition
ii
technology
iii
research
needed
realize
technology
usage
time
can
characterize
three
aspects
correspond
software
system
development
life
cycle
stages
include
system
concept
definition
architecture
definition
going
spiral
development
together
can
associate
matrix
organizes
vista
research
technology
acquisition
usage
shown
table
1
technology
maturity
research
technology
acquisition
usage
software
system
life
cycle
stages
concept
definition
software
feasibility
heuristics
vista
1
top
level
feasibility
advisor
parametric
models
concept
feasibility
determination
architecture
definition
arch
representation
analysis
advanced
cost
schedule
quality
vista
2
models
simulations
subsystems
elements
architecture
feasibility
determination
spiral
development
integration
commercial
sdes
vista
3
hybrid
measurement
modeling
simulation
environment
virtual
system
acquisition
table
1
vista
research
technology
usage
context
moving
top
bottom
right
left
can
outline
associated
operational
concepts
vista
thereby
characterizing
technological
transitions
ends
means
concept
feasibility
determination
given
new
mission
strategic
objective
determine
whether
appropriate
technology
architectures
resources
can
feasibly
brought
together
new
software
intensive
system
affordable
timely
manner
architecture
feasibility
determination
given
proposed
software
system
architecture
determine
whether
can
satisfy
mission
strategic
objectives
affordable
timely
manner
virtual
system
acquisition
given
feasible
system
concept
architecture
acquire
proposed
architecture
series
modeled
simulated
implemented
subsystems
subsystems
can
evolutionarily
developed
progressively
replacing
transforming
modeled
simulated
subsystems
prototyped
real
implementations
vista
1
top
level
feasibility
advisor
parametric
models
top
level
feasibility
analysis
modeling
environment
needed
checking
established
acquisition
heuristics
parameters
environment
used
determine
whether
candidate
technologies
architectures
resources
can
brought
together
address
new
mission
strategic
objectives
environment
represent
first
version
vista
support
environment
vista
1
environment
proposed
software
program
managers
network
cf
figure
7
together
software
cost
estimation
tools
software
requirements
negotiation
capabilities
access
collection
software
feasibility
heuristics
available
today
experimentation
initial
usage
boehm
et
al
1995
stsc
1995
spmn
1997
vista
2
software
intensive
models
simulations
vista
2is
enhanced
vista
1
environment
software
intensive
modeling
simulation
used
prototype
analyze
execute
system
architectural
capabilities
functionality
reconcile
performance
characteristics
cost
schedule
quality
trade
among
proposed
architectural
design
alternatives
vista
2
used
order
determine
whether
proposed
application
system
architectures
viable
vista
3
hybrid
measurement
modeling
simulation
environment
vista
3
environment
built
expand
capabilities
vista
2
order
acquire
incrementally
developed
software
application
systems
vista
3
can
used
support
cooperative
modeling
simulation
measurement
performance
capabilities
evolving
application
system
subsystems
collective
architectural
design
software
feasibility
heuristics
need
collect
validate
refine
knowledge
base
best
practice
heuristics
software
system
acquisition
architecture
overall
development
knowledge
help
provide
plausible
advice
assess
top
level
feasibility
emerging
software
application
system
heuristics
can
help
determine
matters
technology
architecture
resource
characteristics
affect
overall
feasibility
system
rechtin
1991
stsc
1995
spmn
1997
architecture
representation
analysis
advanced
cost
schedule
quality
need
research
develop
new
architectural
representations
support
increme
