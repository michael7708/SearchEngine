premises hypothesis 
premises hypothesis 
next
dissertation
contributions
introduction
previous
software
uncertainty
modeling
premises
hypothesis
arrive
approach
taken
dissertation
one
must
follow
statements
section
statements
``software
complexity
hinders
understanding''
``users
get
disoriented
large
hypertext
spaces
''
either
widely
accepted
substantiated
later
statements
therefore
constitute
premises
dissertation
one
statement
however
less
accepted
requires
investigation
``explicit
modeling
software
uncertainties
improves
human
judgment
decision
making
software
development
''
statement
therefore
constitutes
hypothesis
dissertation
will
elaborated
validated
initial
observation
software
extremely
complex
``software
systems
perhaps
intricate
man's
handiworks''
bro95
software
complexity
ubiquitous
also
intrinsic
``the
complexity
software
essential
property
accidental
one''
bro87
``by
essential
mean
may
master
complexity
can
never
make
go
away''
boo94
complexity
hinders
software
understanding
yet
understanding
must
afforded
development
successful
manage
complexity
software
development
concerns
often
separated
time
space
thus
software
typically
developed
distinct
phases
different
teams
developers
large
scale
software
often
long
lived
delivered
multiple
version
thereby
comprising
family
related
programs
par79
product
software
development
typically
large
complex
collection
software
elements
diverse
types
software
artifact
collections
often
contain
millions
source
code
lines
also
versioned
releases
volumes
user
manuals
documentation
requirements
design
specifications
test
cases
test
results
forth
moreover
software
objects
typically
integrated
correlated
within
surprisingly
intricate
subtle
ways
sz92
poses
substantial
impediments
software
understanding
particularly
respect
traceability
visualization
navigation
issues
thereby
leading
following
research
question
research
question
given
intricacy
complexity
software
artifact
relationships
can
done
improve
traceability
visualization
navigation
large
artifact
collections
first
step
proposed
software
systems
viewed
large
hypertexts
since
hypertext
offers
coherent
consistent
metaphor
viewing
inter
well
intra
artifact
relationships
cf
zo95
sz92
suffices
define
hypertext
informally
providing
node
link
views
navigation
software
artifact
collections
hypertext
defined
formally
completely
chapter
therefore
contend
hypertext
metaphor
software
artifacts
relations
improve
developer's
ability
trace
track
related
elements
large
complex
software
spaces
despite
hypertext
``silver
bullet''
relieving
software
artifact
complexities
uncertainties
specifically
hypertext
introduces
several
concerns
regarding
efficacy
software
engineering
zo95
particularly
concerned
well
known
navigation
problem
user
confusion
disorientation
large
hypertext
spaces
well
fact
hypertext
systems
generally
designed
software
engineering
mind
means
hypertext
necessarily
address
unique
needs
software
developers
users
model
make
use
unique
characteristics
software
systems
additional
means
therefore
provided
facilitate
understanding
software
artifact
collections
following
statements
concern
facilitation
claim
software
engineering
fraught
uncertainties
software
uncertainties
contribute
significantly
overall
complexity
unpredictability
software
development
like
complexity
uncertainty
inherent
engineering
software
systems
observation
summarized
succinctly
zrk96
maxim
uncertainty
software
engineering
uncertainty
inherent
inevitable
software
processes
products
examples
software
uncertainties
abound
many
provided
dissertation
starting
chapter
four
focus
uncertainties
associated
developers'
confidence
levels
software
artifacts
including
among
others
requirements
specifications
design
elements
code
modules
testing
information
confidence
levels
fluctuate
frequently
development
modeling
therefore
include
scheme
confidence
revision
updating
now
arrive
high
level
statement
hypothesis
dissertation
high
level
research
hypothesis
explicitly
modeling
uncertainty
improves
human
judgment
decision
making
software
development
hypothesis
vague
investigated
validated
directly
instead
require
specific
formulation
including
specific
technique
software
uncertainty
modeling
model
software
uncertainties
turn
artificial
intelligence
research
modeling
management
uncertainty
select
specific
uncertainty
modeling
technique
called
bayesian
belief
networks
pea88
detailed
reasons
choice
provided
chapter
four
suffices
say
bayesian
networks
offer
clear
conceptual
model
causality
among
related
elements
include
algorithms
belief
revision
updating
leads
specific
hypothesis
hypothesis
speaks
terms
software
artifacts
include
among
others
requirements
elements
design
nodes
code
modules
test
information
relationships
among
artifacts
established
part
development
process
confidence
levels
reflect
developer
confidences
certain
qualities
properties
software
artifacts
specific
research
hypothesis
bayesian
network
models
software
artifact
uncertainties
improves
understanding
associated
confidence
levels
compared
simply
following
linked
information
ultimately
leading
better
human
decision
making
long
run
believe
proper
adoption
use
uncertainty
modeling
techniques
will
improve
human
judgment
decision
making
software
development
purposes
dissertation
focused
specific
hypothesis
took
steps
toward
validation
follows
existing
software
system
selected
case
study
system
choice
called
cequencer
currently
development
beckman
instruments
fullerton
ca
cequencer
designed
control
communicate
various
hardware
devices
turn
used
biologists
chemists
scientists
separate
laboratory
specimens
molecular
constituents
order
determine
dna
sequences
cequencer
software
artifacts
described
chapter
five
cequencer
requirements
investigated
throughly
hypertext
model
well
bayesian
network
model
requirements
constructed
key
subsystem
cequencer
called
fsm
run
investigated
thoroughly
resulting
hypertext
model
software
artifacts
including
fsm
run
code
modules
well
related
requirements
software
uncertainty
information
collected
fsm
run
artifacts
information
elicited
beckman
experts
developers
organized
bayesian
network
main
hypothesis
evaluated
fsm
run
code
modules
related
requirements
identified
2
questionnaire
session
beckman
team
developers
asked
trace
artifacts
associated
confidence
levels
without
bayesian
network
representation
confidence
values
results
gathered
case
study
analyzed
statistical
significance
results
questionnaire
session
summarized
chapter
six
next
dissertation
contributions
introduction
previous
software
uncertainty
modeling
hadar
ziv
fri
jun
20
16
22
31
pdt
1997
