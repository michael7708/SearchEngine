yancees documentation 
documentation 
using
yancees
project
documentation
introduction
writing
simple
clients
starting
yancees
server
sample
configurations
understanding
design
dimensions
examples
yancees
project
main
page
updated
august
18th
2006
introduction
yancees
framework
yancees
versatile
publish
subscribe
infrastructure
current
implementation
provides
extensible
configurable
event
based
framework
extension
points
layd
main
design
dimensions
publish
subscribe
system
dimensions
subscription
notification
publicatoin
event
protocol
models
additionally
yancees
provides
support
static
plub
ins
services
architecture
flexible
enough
allow
distribution
components
client
server
sides
providing
flexibility
resource
model
subscription
notificatoin
models
defined
terms
extensible
languages
syntactically
describe
primitives
commands
messages
model
associated
sets
elements
languages
plug
ins
dynamic
binding
plug
ins
syntactical
constructs
language
provides
desired
functionality
dimension
internally
dynamic
plug
allocation
performed
dynamic
parsers
associated
subscription
notification
protocol
models
short
yancees
provides
basic
event
notification
subscription
protocol
models
represented
combination
languages
plug
ins
parsers
dynamically
bind
allocate
plug
ins
according
messages
processed
system
binding
performed
runtime
implemented
framework
support
different
event
representations
currently
basic
tuple
based
event
model
provided
compatible
elvin
siena
models
additional
adaptation
points
form
input
output
filters
internal
services
can
used
plug
ins
enhance
functionality
architecture
manager
combine
manage
components
system
control
plug
dependencies
build
startup
notification
server
valid
configuration
client
side
plug
ins
better
distribute
processing
implement
client
side
event
abstraction
subscription
publish
subscribe
architectural
style
publish
subscribe
infrastructures
publish
subscribe
short
message
oriented
middleware
moms
implement
publish
subscribe
architectural
style
architectural
style
provides
inherent
loose
coupling
communication
mechanism
information
producers
publishers
information
consumers
subscribers
defines
clear
separation
communication
computation
carries
potential
easy
integration
autonomous
heterogeneous
components
complex
systems
easy
evolve
scale
also
provide
one
many
communication
mechanism
multicast
broadcast
based
applications
can
implemented
following
picture
illustrates
communication
paradigm
one
one
end
publishers
produce
information
form
events
end
subscribers
express
interest
messages
based
special
message
field
topic
based
subscription
whole
content
content
based
subscriptions
pub
sub
core
routes
messages
according
subscriptions
provided
different
subscribers
notifying
whenever
message
matching
subscription
query
published
system
writing
simple
clients
publishers
subscribers
yancees
simple
example
yancees
configured
centralized
server
running
predefined
host
distributed
system
possibly
localhost
content
based
routing
subscription
language
similar
siena
simple
publisher
order
able
publish
events
user
first
needs
connect
yancees
server
yancees
uses
java
rmi
export
server
interface
requires
client
know
machine
name
server
running
rmi
urls
usually
form
hostname
mydomain
com
instancename
yancees
instance
name
default
value
'yancees'
'hostname
mydomain
com'
must
replaced
host
name
ip
address
machine
yancees
server
instance
running
connection
stablished
users
can
start
publishing
events
publish
command
due
use
rmi
command
throws
java
rmi
remoteexception
also
generates
edu
uci
isr
yancees
yanceesexception
case
subscription
event
formats
incorrect
class
edu
uci
isr
yancees
client
rmi
yanceesrmiclient
encapsulates
rmi
connection
concerns
yancees
providing
simple
interface
users
can
publish
subscribe
events
remotely
publisher
presented
import
edu
uci
isr
yancees
yanceesevent
import
edu
uci
isr
yancees
yanceesexception
import
edu
uci
isr
yancees
client
rmi
yanceesrmiclient
public
class
yanceespublisher
yanceesrmiclient
client
code
client
public
void
connecttoyanceesclient
connects
yancees
server
host
hostname
mydomain
com
client
new
yanceesrmiclient
hostname
mydomain
com
public
void
publishanevent
yanceesevent
event
new
yanceesevent
event
put
name
roberto
event
put
office
247
event
put
inhisoffice
true
event
put
idletime
300000
try
client
publish
event
catch
yanceesexception
ex
handle
exception
public
static
void
main
string
argv
yanceespublisher
myclient
new
yanceespublisher
myclient
connecttoyanceesrmiclient
myclient
publishanevent
internally
yanceesevent
object
generates
xml
representation
event
example
event
represented
event
attribute
name
myname
name
value
type
yanceesstring
roberto
value
attribute
attribute
name
office
name
value
type
yanceesstring
247
value
attribute
attribute
name
inhisoffice
name
value
type
yanceesboolean
true
value
attribute
attribute
name
idletime
name
value
type
yanceeslong
300000
value
attribute
event
simple
subscriber
order
cope
extensibility
subscription
yancees
defined
according
extensible
subscription
language
defined
xmlschema
allows
different
subscription
commands
languages
defined
example
use
content
based
subscription
language
similar
one
provided
siena
siena
filters
represent
simple
content
based
subscriptions
event
produced
client
one
write
subscription
identifies
user
'roberto'
office
'typing
keyboard'
idle
time
seconds
less
10
seconds
example
subscription
looks
follows
subscription
filter
eq
name
name
name
value
type
yanceesstring
roberto
value
eq
gt
name
idletime
name
value
type
yanceeslong
10000
value
gt
filter
subscription
gramar
xmlschema
defining
content
based
siena
equivalent
subscription
language
defined
file
sienasubscription
xsd
available
http
awareness
ics
uci
edu
rsilvafi
yancees
xsd
order
receive
notifications
events
subscriber
client
needs
implement
edu
uci
isr
yancees
subscriberinterface
interface
two
methods
notify
eventinterface
myevent
notify
eventinterface
myeventlist
receive
single
event
pattern
matching
events
subscriber
registers
listener
notifications
method
subscribe
starts
receiving
notifications
whenever
subscriptioin
match
response
event
publication
understanding
basic
siena
subscription
language
basic
publish
subscribe
mechanism
one
can
start
writing
subscription
client
follows
import
edu
uci
isr
yancees
yanceesevent
import
edu
uci
isr
yancees
yanceesexception
import
edu
uci
isr
yancees
client
rmi
yanceesrmiclient
import
edu
uci
isr
yancees
subscriberinterface
public
class
yanceessubscriptionclient
implements
subscriberinterface
yanceesrmiclient
client
code
client
public
void
connecttoyanceesclient
connects
yancees
server
host
hostname
mydomain
com
rmi
name
yancees
client
new
yanceesrmiclient
hostname
mydomain
com
optionally
one
use
yancees
default
name
client
new
yanceesrmiclient
hostname
mydomain
com
public
void
subscribetoevents
genericmessage
class
can
used
represent
event
case
subscription
genericmessage
msg
new
genericmessage
subscription
filter
eq
name
name
name
value
type
yanceesstring
roberto
value
eq
filter
subscription
client
subscribe
msg
try
client
publish
event
catch
yanceesexception
ex
handle
exception
public
void
notify
eventinterface
myevents
handle
event
list
pattern
match
sent
server
events
match
public
void
notify
eventinterface
myevent
yanceesevent
yanceeseventhelper
yanceesevent
myevent
handle
received
event
case
represented
yanceesevent
object
genericevent
object
pure
xml
event
published
instead
public
static
void
main
string
argv
yanceessubscriptionclient
myclient
new
yanceessubscriptionclient
myclient
connecttoyanceesrmiclient
myclient
subscribetoevents
keeps
subscriber
alive
listening
events
match
subscription
true
try
thread
sleep
100
catch
interruptedexception
ex
note
yanceessubscriptionclient
implements
subscriberinterface
also
loop
keep
active
indefinitely
reveiving
notifications
starting
yancees
server
order
properly
use
yancees
server
configured
required
features
must
started
one
hosts
network
configuration
file
specifying
location
implementation
different
components
must
provided
file
describes
example
router
component
subscription
language
plug
ins
optional
input
output
filters
well
protocol
notification
plug
ins
next
session
describes
detail
configuration
development
components
order
start
yancees
basic
content
based
configuration
suitable
routing
aforementioned
examples
one
can
use
startlocalsienayancees
bat
file
following
note
single
line
command
presented
different
lines
readability
java
cp
classpath
classes
bin
lib
siena
1
5
0
jar
lib
yancees
snapshot
jar
djava
rmi
server
codebase
file
lib
yancees
snapshot
jar
djava
security
policy
java
policy
edu
uci
isr
yancees
server
rmi
remoteyanceesimplementation
configurations
simplelocalsienaconfiguration
xml
configuration
file
configurations
simplelocalsienaconfiguration
xml
basically
specifies
plug
ins
filters
langauge
extensions
pub
sub
cores
use
yancees
implementation
particular
configuration
uses
siena
content
based
routing
component
requires
siena
classpath
class
remoteyanceesimplementation
reads
configuraton
file
assembles
yancees
router
ad
components
assume
user
downloaded
yancees
snapshot
jar
file
placed
lib
folder
well
last
version
siena
suggest
users
download
full
distribution
yancees
comes
bat
scripts
configuration
files
examples
downloading
sample
configurations
convenience
provide
examples
yancees
bundled
different
configurations
buldes
include
yancees
snapshot
jar
file
publisher
subscriber
source
codes
windows
unix
shell
scripts
provided
well
configuration
file
used
customize
yancees
minimal
yancees
configured
fast
switch
core
subscription
language
one
command
require
filters
messages
specified
attribute
name
siena
yancees
configured
siena
routing
core
provides
siena
configuration
language
extra
sequence
detector
plug
version
used
example
extending
configuring
yancees
section
interested
extending
yancees
needs
understanding
yancees
design
dimensions
section
briefly
explain
main
extensibility
dimensions
models
extend
end
section
full
examples
provided
design
dimensions
represented
language
defined
xmlschema
plug
ins
implemented
provide
functionality
event
model
event
model
deals
way
events
represented
basic
event
model
supported
current
yancees
implementation
tuple
based
model
event
set
attribute
value
pairs
model
flexible
allows
implementation
restrictive
models
record
based
fixed
set
attributes
types
subject
based
special
attribute
distinguish
events
different
types
models
enforcement
rules
can
achieved
use
input
output
filters
will
de
discussed
later
note
event
models
usually
bound
event
router
used
framework
currently
support
elvin
siena
proprietary
fast
switch
router
event
representations
can
defined
provided
router
understands
representation
installed
framework
different
routers
can
simultaneously
used
represent
events
events
represented
sets
attributes
name
type
value
events
yancees
can
represented
yanceesevent
objects
xml
format
example
event
attribute
name
attribute
name
name
value
type
yanceesstring
value
value
attribute
attribute
name
another
name
name
value
type
yanceesint
12
value
attribute
attribute
attribute
event
format
chosen
provide
ability
represent
large
attribute
values
binary
files
text
files
long
strings
value
tags
opposed
use
attribute
value
attributes
tag
instead
elements
represented
now
types
supported
current
yancees
implementation
provided
xml
schema
boolean
double
float
long
int
string
hexbinary
sake
limiting
possible
attribute
types
facilitating
parsing
events
coping
extensibility
represented
yanceesboolean
yanceesdouble
yanceesfloat
yanceeslong
yanceesint
yanceesstring
yanceesbinary
types
extend
existing
event
model
define
new
one
order
extend
event
model
developers
extend
genericmessage
interface
optionally
change
event
schema
new
features
using
inheritance
extensibilty
feautres
xmlschema
definition
alternatively
one
can
define
new
event
representation
schemas
extension
defined
must
implemented
plug
ins
adapter
installed
yancees
framework
example
events
represented
generic
html
pages
responsibility
notification
server
adapter
receive
events
transform
back
forth
representation
native
representation
installed
event
dispatcher
current
yancees
prototype
implementation
performed
sienaadapter
elvinadapter
help
sienaevent
elvinevent
classes
last
classes
convert
internal
event
representation
native
representation
siena
elvin
respectively
vice
versa
adapters
responsible
reading
publish
subscribe
commands
converting
native
siena
elvin
formats
respectively
subscription
language
subscription
language
allows
interested
party
subscriber
specify
interest
sub
set
events
subscription
language
allows
specification
constraints
content
order
events
queried
including
type
subject
event
models
usually
performed
use
logical
expressions
queries
based
special
commands
example
sequence
command
can
defined
detect
sequences
events
filter
command
inquires
content
events
commands
can
combined
subscription
expressions
interpreted
yancees
subscriptionparser
represent
subscriptions
point
view
yancees
framework
simple
subscriptions
represented
combinations
operators
events
attributes
operators
combined
logical
expressions
matched
result
delivery
events
end
user
operators
combined
reverse
polish
notation
shown
example
words
uses
lisp
like
function
composition
syntax
operators
comes
operands
complex
subscriptions
can
defined
generate
new
events
combine
abstract
classical
example
rules
rules
composed
simple
subscription
part
action
part
action
can
produce
new
events
usually
operate
results
subscription
condition
subscription
type
subscriptionextensiontype
op1
type
op1type
op2
type
op2type
op2
op3
type
op2type
op3
op1
subscription
notification
policy1
policy2
notification
example
rule
specification
subscription
type
subscriptionextensiontype
rule
type
ruletype
condition
type
conditiontype
filter
filter
condition
action
type
actiontype
action
rule
subscription
notification
policy1
policy2
notification
extend
subscription
model
subscription
model
extended
two
combined
steps
1
extension
subscription
language
defined
xmlschema
definition
new
tags
operators
2
implementation
plug
ins
handle
new
tags
according
syntax
rules
defined
xmlschema
extension
plug
ins
tags
installed
system
using
configuration
file
associates
binaries
appropriate
xml
tags
plug
manager
notification
language
notification
language
specifies
policies
procedures
deal
delivery
events
matching
subscription
expression
allows
example
specification
events
must
delivered
soon
produced
using
push
policy
subscriber
request
using
pull
examples
extensions
additional
options
policies
may
include
validity
time
event
kept
server
waiting
deliver
request
time
interval
period
events
matched
subscription
stored
delivery
certain
point
time
must
delivered
notification
policies
usually
included
end
subscription
message
server
notification
section
presented
following
example
represent
notification
options
policies
subscription
type
subscriptionextensiontype
subscription
notification
policy1
policy2
notification
extend
notification
model
notification
model
extended
way
subscription
model
extensions
notification
language
need
implemented
plug
ins
will
handle
commands
expressed
subscription
message
whenever
subscription
matched
result
sent
specified
notification
plug
extensions
pull
may
store
events
temporary
repository
events
collected
subscriber
help
protocol
plug
ins
protocol
model
protocol
model
allows
specification
complex
interaction
modes
service
apart
common
publish
subscription
events
idea
allow
addition
new
services
common
publish
subscribe
model
examples
protocols
may
include
identification
browsing
event
source
hierarchies
primitives
similar
cassius
support
mobile
clients
move
move
primitives
authentication
protocols
represent
protocol
messages
protocols
implemented
plug
ins
externalize
protocol
api
using
remote
interfaces
java
rmi
plug
ins
dynamically
loaded
created
accessed
factory
methods
yancees
api
way
protocol
can
implement
arbitrary
complex
interface
representing
protocol
messages
adds
flexibiltiy
model
protocol
plug
ins
can
interact
yancees
plug
ins
order
locate
installed
plug
ins
yancees
internal
plug
registry
stores
reference
active
plug
ins
static
dynamic
given
time
extend
protocol
model
current
implementation
yancees
uses
rmi
plug
must
implement
remote
interface
responds
remote
method
invocations
session
created
client
plug
plug
manager
based
service
requested
yancees
api
resource
model
resource
model
allows
definition
components
system
location
current
implementation
resource
model
provided
configuration
language
language
allows
configuration
plug
ins
services
filters
installed
server
well
dispatcher
components
used
represent
configuration
configuration
file
allows
specification
files
implement
plug
ins
services
filters
adapters
whole
system
subdivided
5
sections
dispatcher
section
configures
adapter
notification
server
used
configuration
subscription
section
defined
subscription
plug
ins
notification
protocol
sections
syntax
subscription
defining
plug
ins
finally
services
input
output
filters
can
also
defined
configuration
file
looks
like
one
presented
architecture
dispatcher
server
name
siena
server
name
uri
tcp
localhost
1234
uri
arch
server
adapter
javaclassname
edu
uci
isr
yancees
server
dispatcher
siena
sienaadapter
javaclassname
adapter
dispatcher
subscription
plugin
name
filter
plugin
name
description
content
based
filtering
plug
description
mainclass
javaclassname
edu
uci
isr
yancees
server
plugin
subscription
filter
filterplugin
javaclassname
mainclass
factoryclass
javaclassname
edu
uci
isr
yancees
server
plugin
subscription
filter
filterpluginfactory
javaclassname
factoryclass
plugin
plugin
name
sequence
plugin
name
description
sequence
detection
plug
description
mainclass
arch
javaclassname
edu
uci
isr
yancees
server
plugin
subscription
sequence
sequenceplugin
arch
javaclassname
arch
mainclass
arch
factoryclass
arch
javaclassname
edu
uci
isr
yancees
server
plugin
subscription
sequence
sequencepluginfactory
arch
javaclassname
arch
factoryclass
arch
depends
filter
plugin
arch
depends
arch
subscription
notification
notification
arch
protocol
arch
protocol
inputfilters
filter
name
performance
input
name
description
performance
collector
filter
description
mainclass
javaclassname
edu
uci
isr
yancees
server
filter
performance
inputperformancefilter
javaclassname
mainclass
filter
inputfilters
outputfilters
outputfilters
services
service
name
performance
output
name
description
performance
collector
filter
description
mainclass
javaclassname
edu
uci
isr
yancees
server
service
cassius
cassiusservice
javaclassname
arch
mainclass
arch
service
arch
services
arch
architecture
extensibility
summary
design
dimensionhow
extendexample
extensionssubscription
modelextensible
subscription
language
together
subscription
plug
ins
services
filters
can
also
used
plug
insevent
aggregation
abstraction
rules
event
condition
action
sequence
detection
rulesevent
modelextensible
event
representation
language
genericmessage
interface
decoupling
provided
event
adapter
plug
handle
adapter
specific
features
language
tuple
bassed
attribute
value
pairs
record
based
object
based
typed
un
typed
eventspublication
modelextensible
filterinterface
filters
insterded
chain
responsibility
fasion
intercepts
publicatoin
events
yanceespublishtopeers
plug
diverges
events
peers
p2p
yancees
model
type
checking
event
persistencynotification
modelextensible
notification
language
together
notification
plug
ins
implement
event
delivery
policiespush
pull
persistency
resource
modelserver
configuration
language
interpreted
configuration
manager
allows
distribution
components
client
side
server
side
centralized
partially
centralized
client
side
componentsprotocol
modelextensible
protocol
language
together
protocol
plug
ins
security
protocols
mobility
protocols
configuration
protocols
services
filters
languages
extended
include
new
primitives
commands
representations
plug
ins
must
defined
actually
implement
handle
new
functionality
dynamic
notification
subscription
protocol
parsers
perform
dynamic
instantiation
composition
plug
ins
new
subscription
request
plug
ins
however
allocated
demand
usually
one
set
subscription
posted
server
plug
life
cycle
ends
subscription
necessary
anymore
model
stateless
usually
requires
external
persistency
spans
different
plug
activations
another
need
access
external
resources
database
systems
data
models
applications
order
cope
extra
requirements
services
provided
services
objects
remain
active
system
whole
execution
server
can
accessed
plug
ins
whenever
required
enhance
plug
ins
persistency
services
filters
provide
extension
points
input
output
buffers
server
allowing
implementation
pre
post
processing
tasks
data
collection
policy
enforcements
example
usually
apply
input
output
events
example
plug
ins
can
collect
performance
information
analysis
can
enforce
event
types
security
policies
programming
model
section
describes
detail
implement
system's
plug
ins
services
filters
presenting
interfaces
plug
interface
interface
plugininterface
extends
pluginlistenerinterface
long
getid
string
gettag
string
getfullcontext
string
getfullpath
node
getsubtree
void
addlistener
pluginlistenerinterface
plugin
void
removelistener
pluginlistenerinterface
plugin
void
addrequiredplugin
plugininterface
plugin
plugininterface
getrequiredpluginslist
boolean
haschildren
void
dispose
service
interface
public
interface
serviceinterface
public
string
getname
public
void
setname
string
name
public
boolean
isactive
filter
interface
public
interface
filterinterface
public
string
getname
public
void
setname
string
name
public
void
handlemessage
eventinterface
evt
public
void
handlemessage
eventinterface
evtlist
public
void
addsuccessor
filterinterface
filter
public
void
removesuccessor
public
filterinterface
getsuccessor
configuration
manager
configuration
manager
installs
configures
main
components
system
configurations
expressed
using
yancees
configuration
language
provided
yancees
runtime
bootstrap
example
configuration
file
previously
presented
extensibility
dimensions
section
examples
case
study
implementing
cassius
services
yancees
illustrate
use
architecture
extensibility
configurability
section
presents
examples
define
adapt
components
system
implement
different
services
also
shows
yancees
can
customized
provide
functionality
required
different
application
domains
example
suppose
yancees
needs
adapted
support
awareness
applications
notification
servers
khronika
cassius
provide
us
list
basic
services
needed
hence
order
functionality
compatible
domain
yancees
needs
provide
event
persistency
typing
event
sequence
detection
pull
notification
delivery
mechanism
moreover
special
feature
provided
cassius
ability
browse
later
subscribe
event
types
published
event
source
service
called
event
source
browsing
provides
information
publishers
events
publish
implementing
sequence
detection
mechanism
sequence
detection
requires
extension
subscription
model
addition
new
keyword
sequence
will
operate
set
content
based
filters
natively
provided
event
dispatcher
component
first
step
extend
yancess
subscription
language
new
sequence
tag
illustrated
code
fragment
table
1
follows
complextype
name
sequencesubscriptiontype
complexcontent
extension
base
sub
subscriptiontype
sequence
minoccurs
0
maxoccurs
1
element
name
sequence
type
filtersequencetype
sequence
extension
complexcontent
complextype
complextype
name
filtersequencetype
sequence
minoccurs
1
maxoccurs
unbounded
element
name
filter
type
filtertype
sequence
complextype
next
step
implement
sequence
detection
plug
extending
abstractplugin
convenience
class
provides
default
implementations
plug
interface
presented
table
2
follows
interface
plugininterface
extends
pluginlistenerinterface
long
getid
string
gettag
string
getfullcontext
string
getfullpath
node
getsubtree
void
addlistener
pluginlistenerinterface
plugin
void
removelistener
pluginlistenerinterface
plugin
void
addrequiredplugin
plugininterface
plugin
plugininterface
getrequiredpluginslist
boolean
haschildren
void
dispose
note
plugininterface
listener
events
produced
plug
ins
implements
interface
table
3
follows
interface
pluginlistenerinterface
void
receivepluginnotification
eventinterface
evt
plugininterface
source
void
receivepluginnotification
eventinterface
evtlist
plugininterface
source
simple
sequence
detection
implementation
will
collect
right
order
events
coming
one
filters
observes
successful
sequence
detected
sequence
plug
returns
set
events
collected
publishing
higher
level
plug
ins
listeners
note
assuming
event
dispatcher
guarantees
order
delivery
events
case
complex
algorithms
must
used
plug
factory
implementing
interface
table
4
must
also
defined
interface
pluginfactoryinterface
string
gettags
plugininterface
createnewinstance
node
subtree
simple
factory
implementation
will
return
new
instance
plug
time
createnewinstance
method
invoked
interface
plug
factory
must
registered
sequence
tag
name
yancees
configuration
file
described
table
5
followed
restart
reconfiguration
yancees
service
subscription
plugin
name
sequence
plugin
name
mainclass
javaclassname
plugin
sequence
sequenceplugin
javaclassname
mainclass
factoryclass
javaclassname
plugin
sequence
sequencepluginfactory
javaclassname
factoryclass
depends
siena
plugin
depends
plugin
subscription
plug
ready
used
will
activated
time
subscription
provided
uses
sequence
tag
part
example
subscription
using
new
extension
presented
table
6
java
dom
parser
automatically
checks
subscription
syntax
errors
using
xml
schema
defined
table
1
subscription
sequence
xsi
type
filtersequencetype
filter
xsi
type
filtertype
eq
name
status
name
value
fail
value
eq
filter
filter
xsi
type
filtertype
lt
name
cooler
temp
name
value
90
value
lt
filter
sequence
subscription
notification
push
notification
implementing
pull
delivery
mechanism
pull
delivery
allows
subscribers
periodically
poll
check
server
new
events
matching
subscriptions
mechanism
copes
requirements
mobile
applications
subscribers
usually
get
temporarily
disconnected
mechanism
provided
pull
notification
plug
order
temporarily
store
events
delivered
pull
mechanism
needs
event
persistency
service
consequence
together
pull
notification
plug
event
persistency
service
must
also
defined
users
need
control
collect
store
events
routed
result
subscription
usually
requires
polling
interaction
protocol
interaction
part
regular
publish
subscribe
commands
notification
server
protocol
plug
must
defined
short
implementation
pull
delivery
mechanism
requires
extension
notification
language
add
pull
support
implementation
pull
notification
plug
implementation
persistency
service
definition
polling
protocol
implementation
polling
protocol
plug
implementation
pull
notification
plug
follows
steps
sequence
detection
plug
previously
described
true
notification
language
extension
extension
provided
notification
language
defines
pull
tag
additionally
factory
instantiate
plug
also
provided
order
activate
pull
plug
pull
tag
must
provided
notification
session
subscription
message
see
table
6
consequence
pull
plug
instance
created
registered
handle
events
match
subscription
pull
plug
implementation
simple
directs
events
persistency
service
component
registers
target
subscriber
interface
poll
plug
responds
commands
poll
interval
stop
polling
poll
define
different
polling
mechanisms
collects
events
stored
persistency
service
delivers
periodically
subscriber
poll
interval
command
collects
notifications
whenever
requested
using
poll
command
deactivates
periodic
delivery
using
stop
polling
command
case
temporary
disconnection
sets
plug
ins
define
configuration
set
components
need
present
order
service
operate
dependencies
checked
yancees
help
depends
clause
configuration
file
implementing
cassius
features
addition
features
described
previous
sessions
cassius
provides
event
typing
ability
browse
hierarchies
event
sources
browsing
event
sources
cassius
allows
publishers
register
events
hierarchy
based
accounts
objects
model
api
required
operate
server
described
elsewhere
yancees
framework
cassius
functionality
implemented
use
protocol
plug
ins
cassiusservice
component
cassius
protocol
plug
interacts
cassiusservice
allows
creation
management
objects
accounts
events
operations
include
registering
un
registering
accounts
objects
events
well
polling
commands
cassius
uses
events
fixed
set
attributes
events
can
easily
identified
checked
correctness
input
filter
filter
checks
incoming
events
proper
cassius
template
format
cassius
event
identified
validated
copied
cassiusservice
stores
database
proper
account
object
record
polling
events
case
handled
cassius
protocol
plug
allows
collection
events
account
object
sub
hierarchies
note
approach
prevent
simultaneous
installation
services
simple
pull
cassius
pull
protocol
poll
mechanism
way
collect
cassius
events
time
subscriptions
can
also
performed
regular
cassius
events
currenlty
implemented
features
section
describes
functionality
components
currently
available
yancees
framework
subdivided
according
extensibilty
dimensions
event
model
subscription
model
notification
mode
protocol
event
model
current
yancess
version
events
represented
sets
attribute
value
pairs
subscription
mode
supports
conent
based
topic
based
subscrtiptins
content
based
language
xml
porting
siena
subscription
language
topic
based
language
implemented
require
tag
behaves
similarly
elvin
require
command
notification
model
supports
push
pull
protocol
model
supports
polling
access
event
stored
server
side
pull
notification
policy
used
will
expand
last
topics
later
research
staff
roberto
silveira
silva
filho
professor
david
redmiles
institute
software
research
information
computer
science
university
california
irvine
ca
92697
3425
page
last
updated
june
16th
2006
