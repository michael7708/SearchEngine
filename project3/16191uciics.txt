computational geometry 
computational geometry 
ics
161
design
analysis
algorithms
lecture
notes
march
7
1996
computational
geometry
computational
geometry
many
situations
need
write
programs
involve
computations
geometric
nature
instance
video
games
doom
computer
must
display
scenes
three
dimensional
environment
player
moves
around
involves
determining
player
see
different
directions
translate
three
dimensional
information
two
dimensional
computer
screen
data
structure
known
binary
space
partition
commonly
used
purpose
order
control
robot
motion
computer
must
generate
model
obstacles
surrounding
robot
find
position
robot
suitable
whatever
action
robot
asked
perform
construct
plan
moving
robot
position
translate
plan
controls
robot's
actuators
one
example
sort
problem
parallel
parking
car
can
compute
plan
entering
leaving
parking
spot
given
knowledge
nearby
obstacles
cars
turning
radius
car
scientific
computation
simulation
airflow
around
wing
one
typically
partitions
space
around
wing
simple
regions
triangles
shown
uses
simple
approximation
linear
function
flow
region
computation
approximation
involves
numerical
solution
differential
equations
outside
scope
class
triangles
come
typically
actual
input
consists
description
wing's
outline
algorithm
must
construct
triangles
input
another
example
geometric
computation
descriptions
applications
computational
geometry
see
web
site
geometry
action
today's
lecture
will
describe
algorithms
two
simple
geometric
problems
determining
whether
point
polygon
finding
convex
hulls
next
quarter
will
offering
ics
164
class
devoted
entirely
geometric
algorithms
describe
algorithms
applications
instance
binary
space
partitions
used
doom
polygons
polygon
just
collection
line
segments
forming
cycle
crossing
can
represent
sequence
points
just
pair
coordinates
instance
points
0
0
0
1
1
1
1
0
form
square
line
segments
polygon
connect
adjacent
points
list
together
one
additional
segment
connecting
first
last
point
sequences
points
form
polygon
instance
points
0
1
0
1
1
0
0
1
result
two
segments
cross
sometimes
use
phrase
simple
polygon
emphasize
requirement
two
segments
cross
testing
point
polygon
famous
theorem
jordan
curve
theorem
polygon
cuts
plane
exactly
two
connected
pieces
inside
outside
inside
always
finite
size
outside
contains
points
arbitrarily
far
polygon
actually
jordan
curve
theorem
generally
true
certain
curves
plane
just
shapes
formed
straight
line
segments
general
fact
often
proved
approximating
curves
polygons
uncomplicated
enough
polygons
easy
see
eye
parts
plane
inside
outside
always
easy
instance
marked
point
inside
following
polygon
seemingly
even
difficult
like
answer
questions
like
computer
built
powerful
visual
processing
system
can
deal
sort
problem
translating
collection
numbers
general
problem
like
solve
given
point
represented
two
numbers
polygon
represented
sequence
vertices
boundary
outside
commonly
occurring
problem
enough
one
frequently
asked
questions
comp
graphics
algorithms
newsgroup
instance
want
display
polygon
computer
screen
need
able
test
whether
pixel
screen
corresponds
point
inside
outside
polygon
can
tell
color
draw
fortunately
problem
simple
elegant
answer
just
draw
ray
portion
line
extending
infinitely
one
direction
direction
every
time
polygon
crosses
ray
separates
part
ray
inside
polygon
part
outside
eventually
ray
will
get
far
polygon
point
know
part
outside
polygon
can
work
backwards
declaring
different
parts
ray
inside
outside
alternately
crossing
actually
even
need
look
order
crossings
occur
really
need
know
whether
even
odd
number
example
shown
eight
crossings
point
outside
polygon
can
now
write
rough
outline
pseudo
code
problem
int
crossings
0
line
segment
polygon
ray
crosses
segment
crossings
crossings
odd
return
inside
else
return
outside
details
point
polygon
routine
normally
computational
geometry
just
stop
rest
details
filled
actually
write
program
useful
see
least
sort
detail
looks
like
see
also
need
little
careful
crossings
can
also
occur
vertices
polygon
checked
whether
sits
exactly
boundary
first
see
implement
steps
pseudo
code
tell
ray
crosses
segment
two
points
x1
y1
x2
y2
points
ray
first
coordinate
x1
y1
x2
y2
x1
x2
either
x1
x2
x1
x2
can
write
succinctly
x1
x2
0
might
actually
slower
since
involves
high
precision
multiplication
now
suppose
x1
x2
crossing
point
smaller
second
coordinate
one
definition
line
determined
points
x1
y1
x2
y2
consists
points
form
x1
1
x2
y1
1
y2
different
values
give
different
points
line
find
second
coordinate
crossing
use
known
value
first
coordinate
solve
x1
1
x2
x2
x1
x2
crossing
y1
1
y2
note
can
also
tell
exactly
line
segment
testing
whether
crossing
little
problem
formula
might
involve
division
zero
case
x1
x2
two
long
compute
x1
x2
safe
plug
formulas
pseudo
code
let
denote
number
points
polygon
denote
coordinates
point
mod
int
crossings
0
int
0
1
1
1
1
cy
1
1
cy
return
boundary
else
cy
crossings
crossings
odd
return
inside
else
return
outside
finally
happens
ray
passes
exactly
vertex
sometimes
count
crossing
sometimes
ray
grazes
count
crossing
lots
cases
consider
may
confusing
standard
way
cut
sort
complication
perturb
problem
move
points
slightly
special
cases
happen
instance
move
point
just
tiny
amount
right
change
whether
inside
outside
polygon
will
change
whether
ray
crosses
vertices
fact
can
perform
perturbation
minds
let
guide
us
thinking
solving
problem
without
actually
moving
points
suppose
ray
cross
vertex
perturbed
perturbation
edges
cross
just
ones
go
right
vertex
can
test
two
rays
vertex
see
go
rightwards
adjust
count
accordingly
also
need
careful
testing
whether
point
exactly
boundary
polygon
complicated
case
happens
vertical
line
segment
int
crossings
0
int
0
1
1
1
1
cy
1
1
cy
return
boundary
else
cy
crossings
return
boundary
1
1
1
return
boundary
else
1
crossings
1
crossings
crossings
odd
return
inside
else
return
outside
almost
completely
expanded
compilable
code
long
easy
read
understand
ideas
behind
algorithm
stick
pseudo
code
started
previous
section
points
convex
polygons
convex
polygon
just
one
without
indentations
can
also
defined
formally
property
two
points
inside
polygon
can
connected
line
segment
cross
polygons
convex
polygons
typically
much
easier
deal
non
convex
ones
example
see
simplify
point
polygon
test
let
leftmost
point
polygon
rightmost
point
two
points
divide
polygon
two
parts
upper
chain
lower
chain
line
ray
crosses
polygon
twice
vertical
line
ray
crosses
chain
lot
work
previous
point
polygon
algorithm
wasted
go
segment
checking
whether
gives
crossing
answer
will
yes
two
cases
can
find
two
cases
quickly
binary
search
just
search
first
coordinates
points
two
chains
chain
found
crossing
vertex
careful
tell
kind
crossing
either
coordinate
vertex
chain
two
nearest
values
tell
segment
ray
might
cross
can
test
whether
point
convex
polygon
time
log
turns
data
structures
can
test
whether
point
arbitrary
polygon
several
polygons
log
time
bound
complicated
time
describe
talk
point
ics
164
convex
hulls
since
convex
polygons
much
nicer
deal
kinds
polygons
can
make
input
convex
smallest
convex
polygon
containing
collection
points
known
convex
hull
can
also
defined
intersection
infinitely
many
halfspaces
portions
plane
one
side
line
contain
points
describe
algorithm
finding
convex
hulls
known
graham
scan
idea
common
one
computational
geometry
known
incremental
algorithm
add
items
one
time
structure
maintaining
partial
solution
items
added
far
order
items
added
often
important
graham
scan
adds
points
sorted
order
left
right
values
first
coordinates
log
time
needed
initial
sorting
stage
less
time
want
assume
points'
coordinates
small
integers
algorithm
easier
describe
terms
upper
lower
chains
defined
earlier
describe
compute
upper
chain
lower
chain
completely
symmetric
order
add
points
first
point
always
left
end
upper
chain
last
point
always
right
end
question
happens
middle
figure
shows
happens
add
one
new
point
upper
chain
know
right
end
try
adding
previous
rightmost
point
however
might
make
indentation
previous
point
remove
indentation
chain
making
one
less
edge
keep
removing
indentations
one
one
none
left
point
new
chain
easiest
implement
maintain
chain
using
stack
data
structure
new
point
chain
corresponds
push
stack
removing
indentation
corresponds
pop
pseudocode
stack
empty
point
sorted
order
top
two
points
indented
pop
push
onto
question
test
whether
three
points
x0
y0
x1
y1
x2
y2
form
indentation
since
know
case
ordering
coordinates
three
points
need
test
whether
middle
point
line
segment
formed
two
basically
math
went
detect
crossings
point
polygon
test
algorithm
goes
iterations
outer
loop
also
inner
nested
loop
iteration
inner
loop
removes
point
stack
point
can
removed
happens
times
total
therefore
total
time
convex
hull
algorithm
initial
sorting
stage
overall
algorithm
takes
time
log
sorting
step
similar
process
shortcutting
indentations
also
works
finding
convex
hulls
simple
polygons
course
just
sort
vertices
polygon
apply
graham
scan
can
instead
shortcutting
process
polygon
possible
shortcut
add
crossing
two
edges
will
always
become
untangled
later
stages
angles
way
one
can
find
convex
hulls
simple
polygons
linear
time
without
taking
time
sorting
stage
ics
161
dept
information
computer
science
uc
irvine
last
update
02
may
2000
20
17
38
pdt
