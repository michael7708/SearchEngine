objects using class libraries javadoc 
typedbufferreader 
objects
using
class
libraries
javadoc
introduction
computer
science
iii
ics
21
22
23
introduction
lecture
will
begin
study
object
oriented
programming
oop
start
generalizing
concepts
variables
operators
string
class
special
example
reference
type
will
examine
four
important
technical
terms
class
object
variable
reference
highlight
relationships
among
also
begin
discussing
new
operator
returns
reference
new
object
constructed
specified
class
next
will
learn
recognize
use
three
fundamental
features
classes
constructors
methods
fields
construct
manipulate
wide
variety
objects
will
also
learn
read
javadoc
documentation
classes
includes
detailed
cross
indexed
information
use
meaning
feature
available
class
will
examine
sampling
classes
sun's
standard
java
library
ics
21
22
23's
java
library
learning
manipulate
objects
constructed
classes
interesting
ways
finally
will
examine
two
classes
perform
file
input
output
detail
typedbufferreader
typedbufferwriter
will
reinforce
material
covered
earlier
learn
useful
patterns
file
input
output
using
classes
including
exception
handling
briefly
discussed
previous
lecture
object
small
tool
can
use
manipulate
help
us
perform
part
programming
task
libraries
classes
can
construct
tools
need
make
easier
us
solve
programming
problems
will
also
learn
build
tools
learning
write
classes
reference
types
classes
objects
every
java
type
either
primitive
type
reference
type
already
learned
lot
primitive
types
int
double
boolean
char
literals
operators
methods
math
prompt
classses
now
will
begin
learning
reference
types
richer
thousands
standard
java
library
powerful
bit
complicated
use
reference
type
simply
name
class
names
just
java
identifiers
convention
start
capital
letter
fact
already
learned
bit
one
reference
type
string
class
exploring
class
detail
discuss
fundamental
relationship
classes
objects
read
reread
following
paragraphs
make
good
sense
think
examples
discuss
material
friends
talk
staff
generally
class
like
blueprint
can
construct
new
objects
class
using
java's
new
operator
acts
like
skilled
worker
can
read
blueprint
construct
objects
object
stores
special
state
information
object
may
different
objects
constructed
class
java
new
unary
prefix
operator
takes
operand
name
class
following
class
name
inside
parentheses
information
class
requires
specify
initial
state
object
constructed
illustrate
objects
ovals
labelled
class
name
encloses
current
state
methods
can
examine
change
state
object
example
might
blueprints
class
constructing
certain
model
sony
radio
can
construct
many
radios
objects
want
blueprint
class
state
one
radio
object
might
turned
state
two
others
might
turned
playing
89
5
fm
volume
level
2
state
yet
another
might
playing
503
volume
level
3
four
objects
just
described
might
pictured
informally
follows
now
return
string
class
part
standard
java
library
state
object
constructed
class
just
sequence
characters
makes
class
unique
one
literals
course
primitive
types
literals
classes
write
string
literal
code
java
automatically
constructs
new
object
string
class
literal
contents
construct
objects
class
java
need
use
new
operator
get
habit
will
redundantly
write
new
string
lecture
whenever
want
construct
new
object
string
class
even
though
writing
just
code
accomplish
almost
exactly
result
say
almost
still
one
missing
detail
complicated
explain
thus
new
string
expression
value
tells
java
apply
new
operator
string
class
result
returned
operators
return
results
reference
newly
constructed
object
string
class
object
represented
labelled
oval
stores
sequence
characters
can
store
reference
object
inside
variable
declared
type
string
references
always
appear
arrows
tail
inside
variable's
box
head
points
object
arrow
head
touches
oval
summary
new
operator
two
aspects
behavior
constructs
object
class
initializes
state
returns
result
reference
object
constructs
note
objects
classes
names
reference
variables
names
types
store
references
refer
objects
type
reference
variable
must
always
compatible
class
object
refers
simple
object
oriented
programming
type
will
class
begin
examining
interfaces
class
hierarchies
relationship
variable
types
object
classes
will
become
richer
powerful
complicated
now
will
keep
things
simple
type
variable
will
always
class
object
refers
putting
ideas
together
can
illustrate
declaration
string
new
string
java
declare
variable
type
string
meaning
can
refer
string
objects
addition
initialize
variable
store
reference
new
returns
result
constructing
string
object
whose
state
initialized
java
thus
really
two
initializations
state
object
initialized
java
state
variable
initialized
reference
refers
object
declaring
reference
variables
thus
can
use
standard
java
syntax
declarations
declare
initialize
reference
variables
refrence
variables
three
different
choices
can
declare
variable
initialize
initialize
value
null
keyword
indicating
refers
object
initialize
refer
object
either
newly
constructed
object
object
already
constructed
illustrate
three
possibilites
code
picture
say
reference
variable
uninitialized
stores
null
stores
reference
object
will
rarely
see
null
literals
early
part
ics
21
will
see
end
start
discussing
arrays
will
use
null
frequently
ics
22
ics
23
start
learning
using
self
referential
classes
construct
linked
lists
say
string
variable
s3
stores
reference
string
object
object
constructed
new
returns
reference
object
constructed
whose
state
initialized
abc
say
sentence
loud
times
get
feeling
words
will
use
always
technical
sense
finally
frequently
talk
state
object
information
stores
will
soon
learn
methods
can
examine
change
state
object
variables
primitive
reference
store
state
reference
variables
speak
two
states
standard
state
variable
one
reference
stores
addition
state
object
information
stores
variable
box
stores
state
one
value
value
non
null
reference
refers
object
object
oval
stores
state
can
comprise
many
values
mixing
together
variety
types
must
distinguish
state
variable
reference
state
object
refers
case
sequence
characters
complexity
primitive
variables
stored
just
single
value
state
directly
can
use
reference
variables
interesting
things
free
lunch
penalty
usefulness
extra
complexity
finally
will
also
use
word
instance
synonym
object
object
instance
class
constructed
recall
construct
instances
class
using
new
opererator
name
class
information
specifying
initial
state
newly
constructed
object
picture
can
also
say
variable
s3
refers
instance
string
class
one
whose
state
initialized
abc
constructing
new
objects
sharing
old
objects
meaning
references
will
now
explore
two
different
code
fragments
gain
insight
semantics
operator
applied
variables
store
references
first
examine
following
two
declarations
declare
two
variables
place
reference
new
object
recall
expression
new
string
always
constructs
new
object
instance
string
class
returns
result
reference
object
java
declarations
specify
store
reference
objects
associated
variable
although
object
stores
state
characters
inside
java
constructs
new
distinct
objects
declaration
ignore
red
boxes
now
contrast
situation
following
two
declarations
followed
expression
statement
combined
second
declaration
expression
statement
equivalently
written
just
declaration
string
s2
s1
also
declare
two
variables
construct
one
new
object
variable
s2
originally
uninitiallized
note
s1's
reference
value
stored
variable
stored
s2
well
statement
s1
s2
cross
well
case
s1
s2
now
refer
object
also
say
s1
s2
share
object
note
reference
arrow
always
leads
variable's
box
object's
oval
never
leads
another
variable's
box
one
important
things
will
learn
quarter
semantics
operator
references
use
will
arise
complex
circumstances
store
copy
reference
variable
making
variable
refer
object
reference
refers
s1
stores
reference
object
shown
store
reference
s2
making
s2
refer
object
overemphasize
important
budding
object
oriented
programmers
memorize
semantics
repeat
boldfaced
sentence
aloud
times
must
become
part
operators
methods
objects
already
learned
one
overloaded
prototypes
operator
takes
operands
two
string
operands
now
fill
details
takes
two
references
string
objects
operands
returns
result
reference
new
string
object
whose
state
catenation
state
two
operands
without
changing
state
either
operand
can
illustrate
behavior
following
code
picture
thus
operators
can
also
construct
new
objects
implicitly
operator
implicitly
constructs
new
object
whose
state
determined
states
operand
objects
returns
reference
new
object
constructs
code
reference
object
stored
s3
initialization
declaration
now
lets
discuss
generalizing
method
calls
reference
types
notation
will
discuss
important
notational
aspect
object
oriented
programming
will
use
analogy
discuss
calling
methods
objects
referred
variables
might
say
using
english
syntax
john
stand
get
object
referred
name
john
change
state
standing
java
syntax
write
expression
statement
john
standup
likewise
might
say
john
drink
glass
milk
java
syntax
write
expression
statement
john
drink
glassofmilk
glassofmilk
refers
object
glass
milk
john
supposed
drink
performing
method
state
milk
glass
object
becomes
empty
john's
state
becomes
full
generally
use
variable
name
specify
object
call
method
object
refers
method
like
verb
telling
object
information
provided
parentheses
corresponds
direct
objects
related
verb
transitive
verb
syntactically
write
name
variable
followed
period
separator
followed
name
method
followed
pair
open
close
parentheses
separators
delimiters
operands
method
like
direct
objects
english
list
inside
parentheses
separated
commas
separators
operands
still
must
include
open
close
parentheses
take
look
syntax
semantics
touppercase
method
called
form
object
reference
touppercase
returns
result
reference
newly
constructed
string
object
whose
state
upper
case
version
state
object
object
reference
refers
can
illustrate
behavior
following
code
picture
touppercase
method
called
object
referred
variable
s1
method
implicitly
constructs
new
object
whose
state
determined
solely
state
object
reference
operands
parentheses
returns
reference
new
object
reference
object
stored
s2
initialization
declaration
instead
might
written
code
shown
touppercase
method
returns
result
reference
new
object
stored
back
variable
s1
variable
may
store
one
reference
time
cross
previously
stored
reference
happens
original
object
case
references
java
can
reclaim
storage
occupies
use
later
new
construct
another
object
concept
called
automatic
garbage
collection
will
continue
discuss
increasing
depth
throughout
ics
21
22
23
sequence
conceptually
declaration
assignment
similar
int
5
variable
first
stores
5
value
int
variable
used
compute
another
value
5
stored
back
variable
whether
variable
stores
primitive
value
reference
can
store
one
values
time
storing
new
value
variable
means
replacing
totally
forgetting
old
value
take
look
syntax
semantics
replace
method
called
form
object
reference
replace
old
character
new
character
returns
result
reference
newly
constructed
string
object
whose
state
almost
state
object
reference
occurence
old
character
replaced
new
character
can
illustrate
behavior
following
code
picture
replace
method
called
object
referred
variable
s1
method
implicitly
constructs
new
object
whose
state
determined
state
object
reference
two
operands
parentheses
returns
reference
new
object
reference
object
stored
s2
initialization
declaration
string
class
contains
many
many
methods
examining
creating
new
objects
example
declarations
writing
s2
length
returns
result
int
value
7
fact
since
replace
method
returns
reference
string
can
write
complicated
expression
string
s2
s1
replace
'd'
'p'
touppercase
known
cascaded
method
call
left
associative
similar
composition
functions
mathematics
right
associative
replace
called
object
s1
refers
returns
reference
result
another
string
object
point
touppercase
method
called
reference
object
returns
reference
result
another
string
object
whose
state
canpipe
note
result
calling
string
s2
s1
touppercase
replace
'd'
'p'
reverses
order
method
calls
also
changes
operands
replace
appear
upper
case
will
discuss
string
methods
cascaded
method
calls
later
lecture
operators
now
seen
operator
touppercase
replace
methods
work
references
string
objects
operator
works
references
general
now
will
discuss
semantics
operators
applied
references
compare
two
references
typically
stored
variable
result
true
refer
object
variables
store
reference
call
object
identity
operator
determines
whether
two
references
refer
object
comparision
depend
state
stored
inside
objects
depends
identity
objects
thus
red
box
first
picture
previous
section
s1
s2
returns
result
false
variables
store
different
references
refer
different
objects
make
difference
states
two
different
objects
likewise
red
box
second
picture
s1
s2
returns
result
true
variables
store
reference
refer
object
suspect
operator
performs
kind
comparison
returns
opposite
value
true
different
objects
false
object
next
section
discusses
can
test
something
different
whether
states
stored
inside
two
objects
equals
method
finally
alternative
way
test
whether
two
string
objects
store
state
uses
equals
method
illustrated
red
boxes
pictures
calls
method
return
true
first
asks
object
referred
s1
check
whether
state
state
object
referred
s2
although
two
objects
different
states
second
call
asks
object
referred
s1
check
whether
state
state
object
referred
s2
s1
s2
refer
object
asking
one
object
see
whetherh
state
always
true
fact
java
theorem
s1
s2
implies
s1
equals
s2
s1
equals
s2
evaluates
true
know
whether
s1
s2
also
evaluates
true
thus
operator
testing
stronger
property
equals
method
examples
also
write
either
s1
equals
s2
s2
equals
s1
test
identical
states
object
testing
object
tested
interchangable
method
calls
always
produce
result
recall
reference
variable
object
two
things
stored
variable
stores
state
reference
reference
refers
object
stores
state
information
logical
need
two
different
ways
compare
two
different
states
equality
thus
checks
whether
variables
store
state
s1
equals
s2
s2
equals
s1
checks
whether
objects
refer
may
may
store
state
reasonable
require
two
different
ways
check
two
different
forms
equality
causes
lots
confusion
students
just
learning
object
oriented
programming
try
reread
material
becomes
intuitive
will
certainly
see
many
examples
use
whenever
think
testing
equality
little
light
go
head
makes
pause
ask
two
forms
equality
check
s1
s2
store
references
string
objects
much
likely
ask
whether
equals
whether
true
classes
ics
21
almost
always
want
use
equals
check
string
equality
forgetting
fact
will
cause
waste
hours
debugging
programs
vs
equals
one
last
time
comparing
equality
must
specify
equality
operator
equals
method
can
use
simple
analogy
differentiate
two
possibilities
imagine
house
full
people
tvs
person
represents
reference
variable
tv
represents
object
channel
tv
tuned
represents
state
tv
just
reference
variable
refers
object
person
watching
tv
assume
declare
intialize
variables
johnstv
bobstv
might
want
know
whether
john
bob
watching
tv
analogous
evaluating
johnstv
bobstv
might
want
know
whether
john
bob
watching
channel
analogous
evaluating
johnstv
equals
bobstv
bobstv
equals
johnstv
care
tv
watching
object
referring
care
whether
tvs
channel
objects
store
state
course
john
bob
watching
tv
johnstv
bobstv
know
sure
must
watching
channel
johnstv
equals
bobstv
bobstv
equals
johnstv
class
terminology
will
now
begin
systematic
examination
java
classes
focus
still
learning
classes
reading
using
knowledge
gain
write
programs
correctly
construct
manipulate
objects
classes
will
identify
discus
large
number
technical
terms
help
us
talk
precisely
classes
will
use
terms
repeatedly
quarter
class
defines
documents
three
kinds
members
constructors
used
new
create
objects
methods
operations
can
apply
objects
examine
change
state
fields
variables
inside
objects
represent
state
will
also
classify
methods
far
interesting
members
either
accessors
queries
examine
change
state
objects
mutators
commands
change
state
objects
likewise
will
classify
fields
either
instance
variables
object
instance
class
stores
instance
variables
static
fields
objects
constructed
class
share
common
static
fields
also
paramount
importance
reading
using
classes
concept
access
modifiers
member
specifies
access
modifier
control
programmers
can
access
use
lecture
will
study
public
private
static
final
access
modifiers
java
keywords
member
public
access
modifier
can
used
programmer
typically
constructors
methods
use
public
access
modifier
member
private
access
modifier
can
used
programmer
writing
class
programmer
using
class
typically
instance
variables
use
private
access
modifier
member
static
access
modifier
shared
every
object
class
member
final
access
modifier
sense
unchangable
fields
simply
means
initialized
may
stored
just
like
inclusion
final
declaring
local
variables
java
compiler
will
detect
report
error
try
use
state
change
operator
store
final
field
already
initialized
programmers
reading
class
understand
use
public
members
important
mostly
constructors
methods
programmer
implementing
maintaining
implementation
class
must
also
understand
private
members
mosty
instance
variables
sometimes
constructors
methods
ebnf
members
will
now
examine
ebnf
rules
governing
members
defined
classes
learn
write
classes
will
guided
rules
many
first
will
look
rules
describing
big
picture
access
modifiers
public
private
static
final
member
definition
constructor
definition
method
definition
field
definition
full
member
definition
access
modifiers
member
definition
access
modifiers
can
actually
appear
order
consistency
show
standard
ordering
will
learn
access
modifiers
later
augument
ebnf
rule
next
examine
details
constructor
method
definitions
similar
share
many
ebnf
rules
also
look
lot
like
definitions
prototypes
parameter
type
identifier
parameters
parameter
parameter
return
type
type
void
constructor
definition
identifier
parameters
throws
exception
types
block
statement
method
definition
return
type
identifier
parameters
throws
exception
types
block
statement
difference
last
two
ebnf
rules
method
definition
must
specify
return
type
can
void
meaning
returns
nothing
constructor
definition
specify
return
type
addition
syntax
constraint
identifier
naming
constructor
must
name
class
defined
notice
definitions
look
lot
like
prototypes
especially
regards
parameters
rule
difference
parameters
names
types
just
types
ended
block
statement
indicating
execute
code
learn
write
classes
will
focus
statements
inside
blocks
finally
ebnf
rules
third
member
field
definition
looks
just
like
local
variable
definition
field
definition
type
identifier
expression
static
classes
methods
fields
members
declared
static
access
modifier
special
members
common
simple
classes
math
prompt
define
members
static
much
rarer
interesting
classes
will
spend
time
reading
writing
quarter
classes
static
members
important
writing
even
tiny
programs
describe
use
static
members
first
special
static
members
refer
standard
way
class
name
followed
period
followed
member's
name
thus
unlike
string
methods
discussed
construct
objects
classes
call
methods
objects
example
math
class
defines
following
members
among
many
many
others
public
static
double
sqrt
double
public
static
int
max
int
int
public
static
double
random
public
static
final
double
pi
3
14159265358979323846
notice
members
public
can
access
refer
also
static
will
refer
members
math
sqrt
math
max
math
random
math
pi
elided
blocks
three
methods
concerned
call
methods
code
executed
furthermore
sqrt
method
returns
double
one
double
parameter
named
max
method
returns
int
two
int
parameter
named
random
method
returns
double
parameters
point
onward
will
use
term
parameter
specify
variable
names
appearing
inside
parentheses
defining
methods
sometimes
call
parameter
variables
call
method
will
now
use
term
arguments
describe
values
transmitted
method
will
still
use
term
operand
discussing
operators
expression
math
max
7
say
arguments
math
max
method
7
note
call
method
java
first
evaluates
arguments
transmits
values
method
storing
method's
parameters
parameters
initialized
number
arguments
method
call
must
match
number
parameters
one
definition
may
many
definitions
method
name
may
overloaded
typically
statements
elided
block
refers
values
stored
parameters
performing
computation
write
expression
math
sqrt
25
calling
static
sqrt
method
math
class
passing
argument
25
value
stored
parameter
method
computes
returns
result
5
likewise
declared
int
5
write
expression
math
max
4
7
calling
static
max
method
math
class
passing
arguments
9
value
4
7
values
stored
parameters
respectively
method
computes
returns
result
9
method
random
parameters
must
call
without
arguments
still
must
include
parentheses
code
fragment
prints
10
random
numbers
int
1
10
system
println
math
random
finally
can
use
field
math
pi
statement
except
one
attempts
change
value
recall
declared
final
access
modifier
thus
example
can
write
area
math
pi
math
pi
3
0
latter
case
java
compiler
will
detect
report
error
convention
identifiers
specifying
static
fields
like
pi
completely
capitalized
different
words
separated
underscore
character
convention
widely
followed
others
seen
variable
method
names
class
names
likewise
prompt
class
appears
course
library
standard
java
library
also
defines
members
static
public
static
int
forint
string
message
public
static
int
forint
string
message
int
low
int
high
notice
definitions
overload
method
name
forint
required
two
signatures
parameter
structures
different
might
use
methods
follows
int
primecheck
prompt
forint
enter
number
check
primality
int
selection
prompt
forint
enter
selection
1
10
java
knows
first
use
forint
refers
first
definiition
one
single
string
parameter
match
single
string
argument
parenthesis
java
knows
second
use
forint
refers
second
definiition
one
one
string
parameter
followed
two
int
parameters
match
one
string
argument
followed
two
intarguments
parenthesis
reading
diceensemble
class
now
ready
switch
attention
back
common
interesting
classes
java
classes
constructors
whose
methods
static
discussing
classes
will
carefully
examine
public
constructors
methods
fields
private
will
discuss
members
detail
will
learn
write
classes
methods
will
use
definition
members
diceensemble
class
primary
example
section
class
computer
model
collection
dice
objects
constructed
class
perform
intuitively
class
complicated
enough
illustrate
interesting
aspects
classes
can
number
dice
ensemble
dice
can
number
sides
model
dice
must
number
sides
model
focuses
operations
rolling
dice
reading
number
pips
showing
number
dots
top
face
die
typical
things
dice
real
world
ask
weight
dice
color
variety
properties
physical
dice
exhibit
hand
can
ask
dice
ensemble
object
often
thrown
part
model
exceeds
can
physical
dice
first
overview
definitions
thirteen
members
class
order
two
constructors
eight
methods
one
mutator
command
seven
accessors
queries
three
instance
variables
verify
definition
matches
one
ebnf
rules
presented
public
diceensemble
public
diceensemble
int
numberofdice
int
sidesperdie
throws
illegalargumentexception
public
diceensemble
roll
public
int
getnumberofdice
public
int
getsidesperdie
public
int
getpips
int
dieindex
throws
illegalargumentexception
illegalstateexception
public
int
getpipsum
throws
illegalstateexception
public
int
getrollcount
public
boolean
allsame
throws
illegalstateexception
public
string
tostring
private
int
sidesperdie
private
int
rollcount
private
int
pips
recall
two
constructors
first
two
members
specify
return
type
named
class
name
diceensemble
two
definitions
constructor
class
overloaded
seven
methods
named
roll
getnumberofdice
getsidesperdie
getpips
getpipsum
getrollcount
tostring
specially
named
method
accessor
query
methods
often
called
getters
names
often
start
get
get
information
state
object
otherwise
inaccessible
see
private
fields
three
fields
sidesperdie
rollcount
pips
private
instance
variables
means
object
stores
state
variables
users
objects
constructed
class
access
values
variables
directly
names
now
individually
explore
constructors
methods
detail
using
constructors
recall
discussion
string
use
new
operator
construct
new
objects
class
can
now
say
precisely
actually
follows
new
operator
constructor
class
recall
must
name
class
information
inside
parentheses
arguments
constructor
needs
initialize
state
object
number
order
types
argument
must
match
number
order
types
parameter
constructor
argument
evaluated
transmitted
matching
parameter
constructor
value
used
initialize
state
object
diceensemble
class
two
constructors
construction
overloaded
required
different
signatures
parameters
two
int
parameters
appear
public
diceensemble
public
diceensemble
int
numberofdice
int
sidesperdie
throws
illegalargumentexception
generally
constructors
easy
locate
scanning
members
class
name
class
return
types
pragmatically
constructor
definitions
typically
appear
first
class
although
another
popular
style
fields
appear
first
constructors
appear
second
first
constructor
parameters
designed
always
return
reference
object
representing
ensemble
two
six
sided
dice
second
constructor
allows
programmer
specify
number
sides
dice
will
fail
construct
object
instead
throw
illegalargumentexception
given
bad
arguments
either
numberofdice
sidesperdie
parameter
discuss
details
later
certainly
make
sense
2
dice
ensemble
following
examples
illustrate
different
ways
construct
diceensemble
objects
case
signature
one
constructors
followed
parameters
two
int
parameters
diceensemble
d1
new
diceensemble
2
6
2
dice
6
sided
diceensemble
d2
new
diceensemble
see
javadoc
diceensemble
d3
new
diceensemble
1
4096
1
die
4096
sides
diceensemble
d4
new
diceensemble
10
2
10
dice
2
sided
construction
diceensemble
variable
stores
reference
different
object
whose
state
initialized
constructor
example
picture
variable
d1
object
refers
picture
show
private
instance
variables
object
constructed
diceensemble
sidesperdie
rollcount
pips
purpose
constructor
initialize
variables
show
instance
variables
just
like
variables
labelled
box
three
comprising
state
object
can
see
one
constructor
argument
one
stored
parameter
sidesperdie
stored
directly
instance
variable
name
another
instance
variable
rollcount
always
initialized
0
finally
last
instance
variable
pips
refers
array
length
two
stores
number
pips
die
shown
0
dice
rolled
yet
determines
size
array
argument
transmitted
numberofdice
parameter
will
cover
details
arrays
soon
learning
just
special
kind
object
instance
variables
pictured
instance
variables
just
variables
stored
locally
instance
class
object
every
object
instance
variables
values
depend
constructor
called
arguments
sent
illustrate
point
picture
variable
d4
object
refers
notice
object
exactly
instance
variables
values
different
constructor
passed
different
arguments
object
represents
dice
ensemble
ten
two
sided
dice
using
methods
recall
discussion
string
constructed
object
stored
reference
variable
can
use
variable's
name
make
object
useful
work
us
calling
one
methods
examine
individual
methods
finally
put
bunch
method
calls
together
control
structures
perform
interesting
task
might
seem
surprising
methods
discuss
parameterless
actually
happens
often
object
oriented
programming
first
following
methods
simple
accessors
queries
public
int
getnumberofdice
public
int
getsidesperdie
returns
never
changing
part
state
object
number
dice
ensemble
number
sides
die
ensemble
calling
d4
getnumberofdice
returns
result
10
calling
d4
getsidesperdie
returns
result
2
thus
can
always
query
diceensemble
object
information
methods
make
sense
must
first
examine
roll
method
made
return
type
method
void
sometimes
wish
discussion
will
assume
void
fact
return
type
will
tell
truth
method
end
section
use
return
type
casecaded
method
calls
roll
method
following
definition
pretend
public
void
roll
return
type
void
keep
pretending
can
guess
method
mutator
command
returns
result
instead
changes
state
object
class
model
rolling
dice
ensemble
first
increments
rollcount
generates
random
numbers
uses
change
values
pips
array
correspond
number
pips
showing
die
example
called
d1
roll
state
object
might
changed
refer
picture
picture
one
dice
show
5
3
pips
following
methods
also
accessors
queries
return
information
based
state
diceensemble
object
roll
can
change
rollcount
pips
instance
variables
public
int
getrollcount
public
int
getpipsum
throws
illegalstateexception
public
boolean
allsame
throws
illegalstateexception
public
int
getpips
int
dieindex
throws
illegalargumentexception
illegalstateexception
first
method
just
returns
current
value
stored
rollcount
instance
variable
recall
instance
variable
declared
private
thus
programmer
access
variable
directly
getrollcount
method
programmer
can
access
public
returns
whatever
value
stored
constructor
initializes
instance
variable
0
roll
method
increments
getrollcount
method
returns
current
value
call
getrollcount
calling
roll
return
0
next
method
accessor
query
getpipsum
generally
returns
sum
pips
dice
yet
rolled
dice
method
return
reasonable
result
throws
illegalstateexception
indicating
object
bad
state
calling
getpipsum
allsame
method
works
similarly
generally
returns
whether
boolean
pips
show
value
two
dice
means
rolled
double
yet
rolled
dice
method
return
reasonable
result
either
also
throws
illegalstateexception
indicating
object
bad
state
calling
allsame
getpips
accessor
query
method
bit
interesting
defines
parameter
class
numbers
dice
one
number
dice
ensemble
method
allows
programmer
specify
index
die
interested
returns
number
pips
die
yet
rolled
dice
method
return
reasonable
result
either
also
throws
illegalstateexception
might
also
specify
bad
dieindex
number
smaller
one
greater
number
dice
ensemble
either
case
method
return
reasonable
result
case
state
object
bad
value
argument
method
instead
throws
illegalargumentexception
note
using
try
catch
statement
might
able
recover
exception
calling
getpips
different
argument
dieindex
recover
illegalstateexception
case
call
roll
anything
else
thus
different
exceptions
different
problems
seems
reasonable
finally
every
class
parameterless
tostring
method
returns
string
representing
state
object
use
method
mostly
debugging
purposes
printing
state
objects
program
executes
rolling
d1
called
system
println
d1
d1
tostring
java
print
based
state
shown
picture
d1
diceensemble
sidesperdie
6
rollcount
1
pips
5
3
many
tostring
methods
return
result
standard
form
one
class
name
object
followed
backeted
list
instance
variables
values
separated
commas
truly
special
method
java
calls
implicitly
ever
needs
convert
object
string
can
instead
write
just
system
println
d1
d1
java
still
print
thing
will
implicitly
call
tostring
d1
convert
string
representation
can
apply
catenate
operator
now
write
complicated
interesting
code
using
combinations
methods
first
getpipsum
useful
method
can
compute
value
code
using
available
methods
object
d1
refers
int
pipsum
0
int
1
d1
getnumberofdice
pipsum
d1
getpips
final
example
can
use
following
code
fragment
roll
print
sequence
dice
rolls
code
prompts
user
enter
number
rolls
perform
diceensemble
dice
new
diceensemble
2
6
int
timestoroll
prompt
forint
enter
times
roll
dice
dice
roll
dice
getrollcount
timestoroll
break
system
print
dice
getpipsum
put
space
separator
wanted
prompted
user
number
dice
number
sides
per
die
used
values
constructing
dice
ensemble
ok
time
tell
truth
abot
roll
roll
method
actually
return
void
instead
returns
reference
diceensemble
object
fact
return
reference
exact
diceensemble
object
called
although
state
object
changed
roll
returns
reference
method
now
bit
hybrid
mutator
command
also
returns
result
just
like
accessor
query
change
affect
said
first
code
perfectly
legal
can
still
write
d1
roll
legal
expression
statement
just
elect
anything
reference
tht
method
returns
still
satisfies
syntax
constraints
expression
statement
now
can
something
void
method
can
cascade
method
calls
example
can
replace
last
two
statements
loop
single
statement
system
print
dice
roll
getpipsum
call
roll
method
object
dice
refers
method
changes
state
object
returns
result
reference
object
reference
immediately
used
call
getpipsum
method
new
state
object
generally
can
always
take
void
method
make
return
reference
object
called
will
allow
cascaded
method
calls
might
make
code
easier
write
fact
now
can
rewrite
code
fragment
equivalently
diceensemble
dice
new
diceensemble
2
6
int
timestoroll
prompt
forint
enter
times
roll
dice
dice
roll
getrollcount
timestoroll
break
system
print
dice
getpipsum
put
space
separator
even
using
loop
diceensemble
dice
new
diceensemble
2
6
int
timestoroll
prompt
forint
enter
times
roll
dice
dice
roll
getrollcount
good
bad
thing
examine
semantics
local
reference
variable
declared
final
recall
local
primitive
variable
decalared
final
must
initialized
value
changed
rule
exactly
one
reference
variables
store
state
references
refers
objects
state
must
look
bit
closely
using
final
reference
type
variable
mean
initialize
always
refers
object
mean
state
object
remains
unchanged
can
still
call
mutator
command
methods
final
variable
changing
state
state
object
refers
declare
final
diceensemble
new
diceensemble
2
6
can
write
roll
write
new
diceensemble
1
6
attempts
change
reference
stored
final
variabls
difference
stored
variable
reference
stored
object
refers
object's
state
crucial
understanding
distinction
finally
variable
stores
null
refers
object
calling
method
variable
ever
work
correctly
java
uses
variable
find
object
refers
can
call
method
using
state
object
fails
find
object
automatically
throws
nullpointerexception
really
called
null
reference
exception
use
word
pointer
java
word
fields
fields
instance
variables
instance
variables
defined
private
really
need
know
anything
understand
use
class
person
writing
class
can
use
private
members
later
learn
write
classes
will
investigate
manipulate
private
fields
thoroughly
declare
field
public
programmers
rarely
likely
declare
final
well
say
public
int
sidesperdie
variable
referred
diceensemble
object
write
system
println
sidesperdie
access
value
member
bad
sidesperdie
2
store
member
terrible
will
stop
methods
working
thus
class
writer
declaring
instance
variable
private
guaranteed
instances
class
corrupted
incompetent
malicious
programmers
private
instance
variables
first
introduced
programming
languages
early
1970s
big
debate
whether
good
bad
many
famous
computer
scientists
argued
advantages
disadvantage
hiding
information
programmers
hot
topic
now
21st
century
almost
complete
agreement
information
hiding
good
features
like
private
instance
variables
used
whenever
possible
will
return
discussion
learn
write
classes
point
will
learn
formally
private
instance
variables
help
programmers
write
classes
ensure
objects
obey
certain
class
invariants
matter
objects
used
programmers
oop
summary
object
oriented
programming
oop
much
concerns
finding
useful
classes
problems
need
solve
constructing
objects
classes
calling
methods
objects
help
solve
problems
certainly
discussed
large
number
technical
terms
help
us
talk
precisely
code
actually
write
programs
quite
simple
return
analogy
one
last
time
class
like
blueprint
new
operator
like
skilled
worker
can
read
blueprints
construct
objects
objects
names
store
references
objects
variables
names
sometimes
program
constructs
just
one
object
class
sometimes
one
constructed
object
similar
others
class
instance
variables
locations
store
state
can
used
call
methods
use
arguments
constructor
initialize
state
object
built
depending
methods
call
values
instance
variables
might
change
common
mistake
beginners
confuse
name
class
name
variable
refers
object
constructed
class
really
makes
problem
insidious
second
form
exactly
use
calling
static
methods
example
writing
diceensemble
roll
meaningless
diceensemble
name
class
name
variable
refers
object
constructed
class
roll
name
method
static
method
declared
diceensemble
new
diceensemble
2
6
writing
roll
fine
writing
math
max
3
7
fine
max
name
static
method
defined
math
class
learn
distinguish
two
confusing
cases
can
think
period
operator
member
selector
operator
period
prefixed
name
class
reference
object
constructed
class
suffixed
member
name
selected
relevant
class
fact
can
augment
precedence
table
operator
level
15
new
operator
level
13
completeness
also
included
operators
conditional
expression
used
combination
low
precedence
level
2
operatornameprecedenceassociativity
member
selectorpostfix
increment
decrement15leftnone
unary
unary
plus
minus
negateprefix
increment
decrement14none
unarynew
type
expressionconstructor
operatorcasting
see
13left
multiply
divide
remainder12left
add
subtract11left
instanceofinequality
relational9left
equality
relational8left
logical
and4left
logical
or3left
conditional
expression2none
state
change1right
note
cascaded
call
dice
roll
getrollcount
first
roll
called
dice
getrollcount
called
result
roll
returns
reference
dice
state
updated
period
left
associative
importing
classes
packages
large
software
systems
like
standard
java
library
comprise
thousands
different
classes
programmers
often
need
way
organize
classes
java
provides
package
mechanism
purpose
section
will
learn
access
classes
declared
packages
first
following
ebnf
rule
describes
package
names
package
name
identifier
identifier
example
java
lang
one
important
package
name
anyone
using
java
edu
uci
ics
pattis
introlib
important
package
name
anyone
course
using
java
package
prompt
class
declared
package
names
must
unique
one
way
guarantee
uniqueness
using
variant
internet
address
pattis
ics
uci
edu
guaranteed
people
runing
internet
unique
javadoc
class
tells
us
package
declared
can
always
use
full
name
class
prefacing
class
name
package
name
thus
refer
biginteger
class
java
math
biginteger
prompt
class
edu
uci
ics
pattis
introlib
prompt
ok
pretty
obvious
need
shortcut
able
write
class
name
must
import
import
declaration
whose
ebnf
rule
appears
import
keyword
class
imported
can
use
class
name
without
package
name
prefix
import
declaration
import
package
name
import
package
name
identifier
first
alternative
imports
classes
declared
package
second
imports
just
single
class
package
named
identifier
prefer
writing
pair
imports
import
edu
uci
ics
pattis
introlib
prompt
import
edu
uci
ics
pattis
introlib
diceensemble
instead
shorter
equivalent
import
edu
uci
ics
pattis
introlib
explicitly
identifies
names
classes
using
package
commenting
one
imports
compiler
will
generate
errors
every
statement
class
used
sometimes
useful
know
places
code
class
used
another
interesting
facet
package
class
names
standard
java
library
declares
class
named
timer
java
util
package
without
knowing
class
wrote
timer
class
edu
uci
ics
pattis
introlib
package
something
different
want
use
one
classes
program
just
import
want
use
import
compiler
will
detect
report
error
try
import
class
name
two
different
packages
can
import
one
class
say
one
use
often
just
refer
class
full
name
long
package
names
different
even
class
names
way
specify
java
exactly
want
although
might
bit
verbose
note
math
string
classes
declared
java
lang
package
makes
package
special
never
import
classes
explicitly
automatically
available
every
program
implicitly
contains
import
java
lang
javadoc
one
foremost
reasons
like
teaching
java
javadoc
javadoc
system
documentation
developed
time
java
included
standard
java
distribution
thousands
classes
standard
java
library
documented
using
javadoc
lecture
learn
javadoc
consumers
read
output
javadoc
can
learn
explore
use
prewritten
classes
later
lecture
will
learn
javadoc
producers
write
input
javadoc
can
document
classes
write
java
one
first
languages
developed
popularization
web
browsers
dramatic
departure
past
documentation
systems
much
less
official
ones
languages
java
javadoc
developed
together
synergistically
javadoc
system
takes
input
annotated
special
comments
tags
links
java
classes
produces
easy
read
web
pages
documenting
format
always
designed
include
tremendous
amount
useful
information
class
members
javadoc
also
automatically
highlights
cross
indexes
information
use
meaning
member
available
class
section
will
discuss
aspects
browsing
javadoc
using
math
diceensemble
classes
examples
start
examine
web
page
first
appears
javadoc
sun's
api
will
useful
click
link
now
can
follow
dynamically
web
along
static
screen
shots
presented
document
like
going
try
click
get
really
frustrated
see
following
use
small
upper
left
hand
package
pane
selecting
package
want
see
classes
determines
information
displayed
narrow
lower
left
hand
class
pane
list
alphabetical
order
classes
selected
package
initially
package
pane
classes
selected
appears
top
selected
can
try
clicking
packages
java
awt
java
io
java
lang
java
util
etc
continuing
make
sure
classes
selected
big
documentation
pane
right
initially
overviews
see
word
overview
highlighted
header
pane
information
packages
available
will
soon
see
mostly
used
display
documentation
specific
classes
interfaces
display
documentation
math
class
scroll
class
pane
math
link
visible
click
another
way
find
link
click
inside
lower
left
window
type
control
type
find
window
word
math
click
next
see
now
word
class
highighted
header
rest
pane
shows
documentation
math
class
right
header
shows
bold
face
package
class
comes
java
lang
followed
word
class
name
class
class
math
big
bold
face
font
information
directly
underneath
related
class
hierarchy
ancestors
class
java
lang
object
learn
inheritance
will
study
javadoc
return
section
detailed
study
directly
underneath
line
javadoc
displays
information
used
define
basic
features
class
learn
writing
classes
interfaces
inheritance
will
study
javadoc
return
section
detailed
study
information
followed
textual
overview
class
scroll
actual
javadoc
window
window
web
page
just
picture
scroll
will
see
since
information
identifies
release
java
class
added
standard
java
library
rest
web
page
divided
two
major
sections
summary
detail
will
start
examining
summary
information
scroll
documentation
pane
see
summary
section
normally
includes
tables
fields
constructors
methods
every
member
class
static
need
constructor
table
omitted
tables
display
information
public
members
defined
class
public
members
note
see
access
modifier
public
appearing
summary
box
left
boxes
display
public
members
member
declared
private
appear
tables
start
field
summary
first
members
always
appear
alphabetical
order
field
described
horizontally
split
box
displays
left
access
modifiers
type
right
displays
name
one
sentence
description
field
likewise
method
summary
also
appear
alphabetical
order
method
described
horizontally
split
box
displays
left
access
modifiers
return
type
right
displays
signature
one
sentence
description
method
one
summary
case
fields
method
name
hyperlinked
detailed
description
member
appears
detail
section
now
scroll
end
summary
section
see
following
alternatively
click
field
summary
scoll
bit
part
page
starts
displaying
summary
todegrees
method
ulp
method
ends
summary
section
next
shows
small
box
headed
hyperlink
class
one
extends
contents
contain
hyperlinks
methods
class
learn
writing
classes
interfaces
inheritance
will
study
javadoc
return
section
detailed
study
finally
detail
sections
start
first
fields
constructors
class
finally
methods
field's
name
displayed
big
bold
face
font
followed
fields's
access
modifiers
name
followed
detailed
description
field
description
always
starts
one
sentence
appearing
summary
fields
math
class
simple
detail
descriptions
finally
bottom
page
detail
section
methods
start
scroll
see
method
easily
reachable
via
hyperlink
listing
summary
section
scroll
will
notice
methods
appear
alphabetical
order
instead
appear
order
methods
defined
java
file
javadoc
created
programmer
clusters
together
related
methods
java
file
methods
will
clustered
detail
section
javadoc
course
methods
appear
alphabetical
order
file
will
appear
alphabetical
order
programmer
chooses
recall
summary
section
always
alphabetizes
members
methods's
name
displayed
big
bold
face
font
followed
method's
access
modifiers
signature
followed
detailed
description
method
description
always
starts
one
sentence
appears
summary
acts
topic
sentence
larger
descritioon
hear
description
section
highlighted
information
including
short
descriptions
method's
parameters
exceptions
throws
none
value
returns
encourage
explore
web
page
class
might
also
want
examine
web
pages
stringtokenizer
biginteger
classes
will
discuss
soon
defined
documented
standard
java
library
scroll
top
bottom
page
click
package
tree
index
help
links
see
interesting
views
library
next
lets
examine
web
page
first
appears
javadoc
course
api
click
link
see
following
page
similar
layout
simpler
documents
just
one
packages
comprising
dozen
classes
click
diceensemble
link
see
notice
standard
features
shown
classes
package
name
class
name
prose
description
class
public
fields
summary
section
includes
just
constructor
method
tables
examine
constructor
summary
entry
includes
signature
one
sentence
description
look
methods
table
recall
appear
alphabetical
order
now
click
hyperlink
second
overloaded
version
diceensemble
constructor
see
constructor's
name
name
displayed
big
bold
face
font
followed
access
modifiers
signature
notice
multiple
parameters
displayed
notice
throws
illegalargumentexception
signature
followed
detailed
description
constructor
description
always
starts
one
sentence
appearing
summary
can
much
longer
description
section
highlighted
information
including
short
descriptions
constructor's
parameters
exceptions
throws
encourage
explore
web
page
class
others
want
run
driver
program
class
experiment
calling
methods
download
unzip
run
dice
demo
project
folder
might
also
want
examine
web
pages
prompt
class
used
extensively
timer
class
will
discuss
soon
defined
documented
course
library
suppose
interested
exactly
illegalargumentexception
another
class
standard
java
library
just
click
hyperlink
whoops
reason
hyperlink
try
fix
meanwhile
look
illegalargumentexception
standard
java
library
way
located
math
class
see
now
know
class
java
lang
package
one
every
program
automatically
imports
lots
ancestor
classes
information
interfaces
subclasses
will
cover
later
quarter
bottom
summary
section
constructors
note
many
entries
page
hyperlinked
can
click
get
information
exploring
javadoc
standard
java
library
well
completes
first
tour
javadoc
ability
read
javadoc
easily
one
skills
tough
acquire
will
pay
many
times
whenever
programming
java
always
immediately
open
javadoc
browser
help
subsequent
sections
will
discuss
java
classes
please
examine
javadoc
reading
material
addition
use
javadoc
check
many
features
string
class
programming
contract
section
discuss
idea
preconditions
postconditions
relate
constructors
methods
learn
write
classes
will
also
discuss
data
invariants
related
topic
say
constructor
precondition
properties
must
true
arguments
say
constructor
postcondition
guarantees
property
true
object's
state
object
constructed
assuming
arguments
satisfy
preconditions
say
method
precondition
properties
must
true
object
called
arguments
say
method
postcondition
guarantees
property
true
returned
value
object's
states
method
returns
assuming
arguments
satisfy
preconditions
diceensemble
constructor
precondition
arguments
matching
numberofsides
sidesperdie
parameters
must
least
1
make
sense
0
negative
numbers
transmitted
parameters
constructor
checks
preconditions
first
determines
either
precondition
fails
construct
required
object
instead
throws
illegalargumentexception
likewise
getpips
method
precondition
dice
rolled
least
dieindex
parameter
actually
specifies
one
dice
ensemble
method
called
roll
method
called
throws
illegalstateexception
state
object
correct
returning
values
pips
rolled
yet
likewise
method
called
argument
dieindex
correct
range
throws
illegalargumentexception
real
world
example
microwave
oven
may
beep
indicating
illegal
operation
current
state
try
start
door
open
understanding
form
stylized
documentation
can
view
every
method
making
contract
programmer
programmer
calls
method
object
whose
state
satisfies
required
preconditions
arguments
satisfy
required
preconditions
method
will
work
correctly
producing
result
satisfies
postcondition
object's
state
argument
values
fail
satisfy
preconditions
method
will
mostly
likely
discover
fact
throw
exception
although
cirumstances
allowed
return
result
satisfy
postcondition
certainly
better
method
throw
exception
knows
satisfy
postcondition
return
incorrect
answer
indication
incorrect
contract
preconditions
satisfied
anything
allowable
gave
task
person
perform
rather
person
say
instead
botch
job
likewise
rather
someone
answer
question
know
give
wrong
answer
useful
class
section
will
examine
classes
standard
java
library
course
library
focus
standard
oop
approach
constructing
objects
calling
methods
perform
interesting
operations
first
use
javadoc
examine
prompt
class
course
library
string
class
standard
java
library
already
familiar
classes
former
static
methods
prompting
user
console
screen
later
many
methods
operating
strings
note
string
class
mutator
command
methods
every
method
accessor
query
class
called
immutable
state
object
initialized
constructor
immutable
class
can
never
change
methods
can
return
new
objects
whose
state
based
old
objects
touppercase
replace
methods
examining
string
class
look
methods
like
charat
endswith
indexof
lstindexof
length
startswith
subsequence
tolowercase
touppercase
trim
stringtokenizer
now
examine
interesting
code
uses
stringtokenizer
class
standard
java
library
java
util
package
class
three
constructors
six
methods
although
interesting
generally
useful
members
defined
public
stringtokenizer
string
str
public
int
counttokens
public
boolean
hasmoretokens
public
string
nexttoken
throws
nosuchelementexception
typical
example
can
coordinate
solve
simple
task
finding
average
length
words
sentence
string
sentence
prompt
forstring
enter
sentence
stringtokenizer
st
new
stringtokenizer
sentence
int
numtokens
st
counttokens
int
numletters
0
st
hasmoretokens
numletters
st
nexttoken
length
system
println
sentence
sentence
average
word
length
numletters
numtokens
input
calculated
output
2
thirteen
letters
six
words
13
6
notice
sentence
used
argument
constructor
stringtokenizer
final
output
never
changes
state
st
manipulated
point
onwards
first
use
counttokens
methods
count
store
number
tokens
initially
st
whitespace
separates
tokens
use
technical
definition
java
tokens
loop
continues
long
st
still
tokens
process
next
token
taken
st
calling
nexttoken
mutator
command
also
returns
copy
string
token
extracts
cascaded
call
length
returned
string
returns
int
accumulated
numletters
eventually
will
tokens
remaining
st
loop
terminates
result
calculated
printed
note
call
st
counttokens
loop
terminates
will
return
0
method
returns
number
tokens
still
st
end
tokens
remain
note
ever
try
call
nexttoken
hasmoretokens
returns
false
equivalently
counttokens
returns
0
method
throws
nosuchelementexception
next
value
return
can
use
behavior
along
knowledge
try
catch
write
equivalent
loop
process
tokens
terminate
string
sentence
prompt
forstring
enter
sentence
stringtokenizer
st
new
stringtokenizer
sentence
int
numtokens
st
counttokens
int
numletters
0
try
numletters
st
nexttoken
length
catch
nosuchelementexception
nsee
break
system
println
sentence
sentence
average
word
length
numletters
numtokens
generally
programmers
prefer
former
code
explicitly
checks
hasmoretokens
certainly
understand
try
catch
code
finally
examine
following
code
closely
supposed
accomplish
task
work
correctly
important
determine
hand
simulting
code
string
sentence
prompt
forstring
enter
sentence
stringtokenizer
st
new
stringtokenizer
sentence
int
numtokens
st
counttokens
int
numletters
0
int
0
st
counttokens
numletters
st
nexttoken
length
system
println
sentence
sentence
average
word
length
numletters
numtokens
hand
simulate
code
slowsly
carefully
string
five
six
tokens
ready
answer
question
code
class
using
stringtokenizer
prefer
loop
calling
hasmoretokens
explcitly
check
whether
code
callling
nexttoken
obvious
often
wrong
counting
code
timer
now
examine
interesting
code
uses
timer
class
course
library
class
allows
us
use
objects
like
stopwatches
time
various
parts
code
one
parameterless
constructor
four
methods
besides
tostring
public
timer
public
void
start
public
void
stop
public
void
reset
public
double
getelapsed
see
javadoc
detailed
explanation
members
typical
example
can
coordinate
solve
simple
task
finding
time
takes
user
enter
answer
question
timer
answertimer
new
timer
answertimer
start
prompt
forstring
big
red
eats
rocks
answertimer
stop
system
println
time
answertimer
getelapsed
seconds
actually
matter
whether
user
gets
right
wrong
answer
question
returned
string
checked
interested
time
took
answer
question
newly
constructed
timers
state
turned
0
elapsed
seconds
recorded
start
method
mutator
command
called
timer
turned
just
like
stopwatch
stop
method
also
mutator
command
called
timer
turned
ditto
note
methods
return
void
getelapsed
method
accessor
query
called
timer
returns
total
number
seconds
elapsed
timer
value
accurate
1
millisecond
can
call
method
whether
timer
object
current
turned
can
turn
timer
many
times
want
accumulates
time
course
can
call
reset
method
also
reset
timer
initial
state
zero
elapsed
seconds
can
use
objects
timer
class
time
computer
activity
takes
least
1
millisecond
long
takes
execute
complicated
loop
program
biginteger
finally
examine
interesting
code
uses
biginteger
class
standard
java
library
java
math
package
class
allows
us
compute
integers
arbitrary
size
limited
size
int
values
operations
biginteger
objects
specified
via
method
calls
operators
class
like
string
immutable
method
calls
change
state
existing
objects
can
produce
new
biginteger
objects
whoses
states
based
state
objects
used
call
methods
class
three
public
fields
representing
biginteger
constants
1
10
0
many
constructors
many
many
methods
act
like
operators
int
values
although
need
following
members
application
public
static
final
biginteger
one
new
biginteger
1
public
biginteger
string
val
throws
numberformatexception
public
biginteger
multiply
biginteger
val
public
string
tostring
typical
example
can
coordinate
solve
simple
task
finding
factorial
large
int
value
say
something
like
1000
tens
thousands
digits
following
simple
code
works
inputs
10
result
gets
big
store
int
bad
news
good
news
can
take
code
easily
generalize
biginteger
results
int
prompt
forint
enter
int
answer
1
int
2
construct
biginteger
value
one
trillion
representable
int
peanuts
compared
thousands
digits
1000
hint
important
idiom
declared
int
stores
int
value
expression
stores
string
representation
int
10
10
want
construct
biginteger
int
use
constructor
int
catenated
empty
string
finally
multiply
method
multiplies
two
bigintegers
producing
third
whose
state
product
states
arguments
note
must
call
method
using
object
notation
remember
equals
method
like
binary
operator
multiply
simlar
called
multiply
now
change
code
use
bigintegers
needed
accumulate
huge
product
int
prompt
forint
enter
biginteger
answer
biginteger
one
int
2
icraps
statistics
uses
diceensemble
timer
finally
can
download
unzip
run
class
examples
project
folder
short
snippets
code
using
dozen
different
classes
examples
show
easy
experiment
classes
java
libraries
java
file
dozens
classes
handle
file
java
using
various
combination
classes
can
efficiently
achieve
many
kinds
interesting
behavior
buffered
vs
non
buffered
binary
vs
text
files
sequential
vs
random
access
etc
written
typedbufferreader
typedbufferwriter
classes
using
classes
standard
java
library
present
simple
easy
understand
use
interface
concept
file
processing
classes
powerful
enough
use
programs
course
familiar
reading
using
classes
including
inheritance
will
overview
standard
java
classes
file
re
examine
code
implements
typedbufferreader
typedbufferwriter
classes
end
course
will
skills
needed
investigate
fancier
file
simple
file
input
patterns
reading
sequence
values
file
simple
useful
operation
section
shows
standard
file
input
pattern
accomplish
task
applies
twice
without
much
variation
files
containing
different
kinds
information
note
contructor
typedbufferreader
class
requires
string
string
specify
name
file
read
instead
specifies
user
prompted
enter
file
name
fact
constructor
will
continually
reprompt
user
message
enters
valid
file
name
course
information
javadoc
encourage
browse
appropriate
page
reading
rest
lecture
construct
typedbufferreader
object
call
methods
attempt
read
information
file
follow
standard
oop
practice
construct
object
call
methods
aid
performing
complicated
task
simple
example
let
us
assume
want
add
together
int
values
file
relevant
method
typedbufferreader
class
public
int
readint
throws
eofexception
numberformatexception
can
use
following
code
process
file
according
specifications
typedbufferreader
inputfile
new
typedbufferreader
enter
file
name
int
sum
0
try
int
value
inputfile
readint
just
single
line
sum
value
sum
inputfile
readint
catch
eofexception
eofe
break
inputfile
close
system
println
sum
sum
notice
try
catch
single
statement
inside
loop
code
works
follows
iteration
first
statement
try
block
attempts
read
int
file
successful
value
stored
value
added
sum
try
catch
finished
loop
executes
values
file
readint
method
throws
eofexception
try
block
abandoned
catch
clause
exception
found
matching
block
contains
break
statement
terminates
loop
now
loop
finished
java
continues
executing
remaining
statements
first
closes
file
values
read
second
prints
answer
now
examine
similar
code
solves
complicated
problem
imagine
file
contains
many
lines
contains
name
three
scores
boolean
telling
whether
name
average
scores
printed
file
might
look
like
fred
20
23
19
true
barney
24
22
20
false
wilma
21
24
25
false
betty
23
19
22
true
processed
print
following
note
fred
betty
specify
average
printed
fred
average
20
betty
average
21
4
values
processed
might
printed
can
use
following
code
process
file
according
specifications
typedbufferreader
inputfile
new
typedbufferreader
enter
file
name
int
count
0
try
string
name
inputfile
readstring
int
s1
inputfile
readint
int
s2
inputfile
readint
int
s3
inputfile
readint
boolean
printit
inputfile
readboolean
count
printit
system
println
name
average
s1
s2
s3
3
catch
eofexception
eofe
break
inputfile
close
system
println
count
values
processed
might
printed
although
code
complicated
processing
within
try
block
essentially
pattern
used
continue
reading
values
eofexception
thrown
breaks
reading
loop
simple
file
output
pattern
section
will
combine
previous
code
code
writes
output
files
construct
typedbufferwriter
object
requires
string
parameter
specifying
name
file
note
difference
use
parameter
constructor
class
typedbufferreader
larger
code
fragment
write
typedbufferwriter
outputfile
new
typedbufferwriter
prompt
forstring
enter
output
file
name
promput
user
file
name
instead
automatically
derive
output
file
name
input
file
name
variable
refering
object
can
use
print
println
methods
used
system
important
methods
print
string
frequently
use
type
product
catenating
many
values
together
typedbufferreader
inputfile
new
typedbufferreader
enter
name
file
typedbufferwriter
outputfile
new
typedbufferwriter
inputfile
getfilename
output
int
count
0
try
string
name
inputfile
readstring
int
s1
inputfile
readint
int
s2
inputfile
readint
int
s3
inputfile
readint
boolean
printit
inputfile
readboolean
count
printit
outputfile
println
name
average
s1
s2
s3
3
catch
eofexception
eofe
break
inputfile
close
outputfile
close
system
println
count
values
processed
see
outputfile
getfilename
contents
name
output
file
constructed
automatically
catenating
together
name
input
file
retrieved
getfilename
accessor
query
output
literal
inside
loop
information
originally
printed
system
now
printed
output
file
finally
like
input
file
output
file
also
closed
everything
written
note
summary
output
still
appears
user's
console
wanted
also
printed
information
file
important
close
output
file
may
lose
last
lines
sent
safe
always
close
input
output
files
whenever
done
using
also
stop
informtion
read
written
file
error
detection
input
files
file
reading
code
point
assumed
files
correct
type
data
section
next
will
begin
explore
simple
ideas
error
detection
recovery
reading
input
files
just
scratching
surface
topic
discussion
complete
discussion
beyond
scope
course
call
method
read
type
information
file
value
type
next
position
read
method
throws
numberformatexception
even
trying
read
number
uniformity
simplest
thing
case
abandon
reading
file
process
whatever
information
already
read
correctly
following
code
implements
goal
typedbufferreader
inputfile
new
typedbufferreader
enter
name
file
int
count
0
try
string
name
inputfile
readstring
int
s1
inputfile
readint
int
s2
inputfile
readint
int
s3
inputfile
readint
boolean
printit
inputfile
readboolean
count
printit
system
println
name
average
s1
s2
s3
3
catch
eofexception
eofe
break
catch
numberformatexception
noe
system
println
error
reading
file
inputfile
getfilename
line
inputfile
getlinenumber
problem
token
inputfile
getlasttokenuntyped
system
println
processed
earlier
file
entries
break
inputfile
close
system
println
count
values
processed
exception
thrown
failure
read
correct
type
information
numberformatexception
caught
case
prints
error
message
executes
break
continues
rest
code
following
loop
earlier
values
correctly
processed
error
recovery
input
files
can
go
one
step
detect
error
try
recover
recovery
means
ignoring
bad
line
input
continuing
process
following
code
implements
goal
typedbufferreader
inputfile
new
typedbufferreader
enter
name
file
int
count
0
try
string
name
inputfile
readstring
int
s1
inputfile
readint
int
s2
inputfile
readint
int
s3
inputfile
readint
boolean
printit
inputfile
readboolean
count
printit
system
println
name
average
s1
s2
s3
3
catch
eofexception
eofe
break
catch
numberformatexception
nfe
system
println
error
reading
file
inputfile
getfilename
line
inputfile
getlinenumber
problem
token
inputfile
getlasttokenuntyped
inputfile
ignorerestofline
system
println
ignoring
line
inputfile
close
system
println
count
values
processed
exception
thrown
failure
read
correct
type
information
caught
case
prints
error
message
execute
break
instead
calls
method
skips
rest
information
current
line
read
loop
terminate
continues
reading
processing
values
next
line
terminates
loop
eofexception
thrown
code
one
file
test
can
edit
file
create
tests
available
file
input
project
folder
note
declaration
import
java
io
eofexception
unlike
exceptions
seen
numberformatexception
illegalargumentexception
illegalstateexception
exception
java
lang
package
classes
implicitly
imported
every
program
must
use
bit
differently
omit
import
write
exception
handler
catch
java
io
eofexception
eofe
break
approach
soon
lead
verbose
code
better
import
class
explicitly
buffering
section
will
explore
term
buffer
applies
file
typically
file
reading
writing
big
small
stored
hard
disk
memory
device
hard
disk
two
key
properties
takes
large
amount
time
read
write
small
amount
information
hard
disk
compared
accessing
computer's
memory
takes
bit
time
read
write
large
amount
information
hard
disk
takes
appreciable
amount
time
find
place
get
put
information
disk
can
quickly
get
put
lots
information
place
found
examine
implications
fo
properites
applied
output
often
write
small
amounts
information
file
repeatedly
every
time
write
even
small
amount
information
file
goes
immediately
hard
disk
process
will
go
quite
slowly
instead
can
use
buffer
buffer
medium
sized
block
memory
use
collect
output
file
typical
buffer
can
contain
thousands
characters
instead
writing
output
directly
file
quickly
put
memory
buffer
typically
information
going
file
can
fit
buffer
typically
use
buffer
smaller
ultimate
file
size
buffer
full
computer
senses
fact
writes
information
currently
buffer
output
file
now
buffer
empty
can
continue
putting
information
using
buffer
minimizes
number
times
information
written
file
time
information
written
large
amount
written
takes
just
bit
time
writing
small
amount
much
less
time
repeatedly
writing
small
amount
note
also
output
buffer
might
partially
filled
program
terminates
case
information
lost
never
makes
buffer
output
file
program
executres
close
method
output
file
knows
force
remaining
contents
buffer
written
otuput
file
important
close
output
files
likewise
input
file
read
large
part
transferred
memory
buffer
subsequent
reading
gets
information
information
buffer
read
point
another
large
part
file
transferred
buffer
file
next
batches
reads
problem
set
ensure
understand
material
lecture
please
solve
announced
problems
read
lecture
get
stumped
problem
go
back
read
relevant
part
lecture
still
questions
please
get
help
instructor
ca
tutor
student
draw
picture
resulting
following
declarations
string
s1
new
string
abc
string
s2
new
string
xyz
string
s3
new
string
abc
string
s4
s1
string
s5
new
string
xyz
s2
new
string
abc
give
resulting
picture
problem
1
determine
result
following
tests
s1
s1
s1
s2
s1
s4
s1
equals
s4
s1
equals
s2
s1
equals
s3
s1
equalsignorecase
s3
s1
s5
s1
equals
s5
describe
means
two
objects
identical
object
identity
operator
result
true
explain
value
produced
writing
new
string
abc
new
string
abc
defined
ebnf
rule
access
modifiers
access
modifiers
many
different
access
modifiers
combinations
words
legal
write
result
code
fragment
prints
drawing
pictures
invaluable
diceensemble
dice
new
diceensemble
dice
roll
dice
roll
roll
dice
roll
system
println
dice
getrollcount
diceensemble
dice
new
diceensemble
dice
roll
dice
new
diceensemble
dice
roll
system
println
dice
getrollcount
diceensemble
dice1
new
diceensemble
dice1
roll
diceensemble
dice2
dice1
dice2
roll
system
println
dice1
getrollcount
wrong
following
code
fragments
will
compiler
detect
report
either
error
diceensemble
dice
dice
roll
diceensemble
dice
null
dice
roll
browse
javadoc
biginteger
class
assume
declared
biginteger
initialized
variables
refer
appropriate
objects
examine
abs
method
class
assume
refers
biginteger
negative
value
write
abs
explain
refer
biginteger
positive
value
show
accomplish
task
examine
min
method
class
show
write
declaration
third
biginteger
named
initialize
variable
refer
object
bigger
initialized
share
object
either
examine
compareto
method
class
show
write
boolean
expression
evaluates
true
note
relational
operators
work
reference
types
extend
file
reading
code
reading
name
processes
number
scores
student
list
scores
ended
sentinel
1
time
score
integer
just
ignore
increment
running
count
sum
keep
processing
scores
will
need
nested
control
structures
following
code
print
reads
file
containing
1
2
3
4
5
6
hand
simulation
carefully
paying
close
attention
details
exception
processing
try
int
inputfile
readint
int
inputfile
readint
system
print
catch
numberformatexception
nfe
system
print
catch
eofexception
eofe
system
print
break
system
println
modify
error
detection
code
prints
special
message
discovers
end
file
trying
read
data
string
information
meaning
last
set
values
input
file
complete
modify
error
recovery
code
will
also
terminate
loop
printing
appropriate
message
ten
numberformatexceptions
occur
modify
error
recovery
code
will
also
terminate
loop
printing
appropriate
message
ten
numberformatexceptions
occur
row
means
ten
occur
ten
consecutive
lines
file
without
reading
one
line
file
correctly
read
javadoc
random
class
standard
java
library
write
code
fragment
prints
100
random
numbers
0
10
inclusive
read
javadoc
modularcounter
class
course
java
library
rewrite
following
code
fragment
studied
declarations
uses
primitive
types
describe
just
written
code
fratment
simpler
int
minute
range
0
59
inclusive
int
hour
range
0
23
inclusive
minute
minute
60
minute
0
hour
emitbeeps
hour
hour
24
hour
0
minute
59
minute
