hw4 
project4 
hw4
due
5
17
11
00am
eee
dropbox
globally
optimal
tracking
dynamic
programming
assignment
will
implement
globally
optimal
tracker
using
dynamic
programming
dp
will
build
code
developed
hw3
will
use
face
images
project
video
set
will
using
first
150
images
sequence
assignment
implement
efficient
tracking
algorithms
using
dynamic
programming
will
explore
different
constraints
fixing
first
last
frame
will
also
explore
strategies
iterate
learning
template
estimating
track
overview
will
given
skeleton
code
high
level
script
hw4
wrapper
similar
one
hw3
will
need
implement
following
basic
functions
run
wrapper
will
implement
fixed
scale
tracker
tracker
will
use
bounded
velocity
motion
model
track
will
allowed
shift
dx
dy
pixels
frames
larger
shifts
will
incur
greater
costs
scoring
track
formally
velocity
cost
dx
dy
velocity
cost
dx
velocity
cost
dy
questions
will
ask
explore
additional
extensions
user
interaction
wrapper
script
requires
user
draw
rectangle
first
frame
using
matlab's
getrect
function
included
rectangle
saved
matlab
matfile
reference
rectangle
will
encoded
4
element
array
x1
y1
x2
y2
capturing
topleft
bottom
right
corner
helper
functions
showtrack
10
pts
function
will
display
movie
track
given
list
images
list
rectangles
function
call
showbox
written
previous
assignment
basic
dp
tracker
dptrack
30
pts
main
function
will
estimate
optimal
track
using
dynamic
programming
given
list
images
template
bounded
velocity
motion
model
function
will
use
nccim
compute
local
scores
implemented
last
homework
will
call
localmin
forward
pass
first
last
frame
iteratively
estimating
cost
best
track
reaching
last
frame
function
will
call
backtrack
compute
best
track
using
pointers
previous
frames
localmin
20
pts
function
computes
best
matching
rectangle
previous
frame
every
possible
rectangle
current
frame
needs
passed
costs
rectangles
previous
frame
well
motion
model
returns
cost
best
matching
rectangle
pointer
rectangle
altough
function
can
implemented
fancy
matlab
tricks
avoid
loops
recommend
using
loops
clarity
backtrack
20
pts
function
implements
backtracking
step
dynamic
programming
given
collection
pointers
every
rectangle
every
frame
costs
rectangle
final
frame
function
returns
best
track
hand
hand
completed
functions
complete
comments
also
hand
figures
illustrating
behaviour
various
extensions
basic
tracker
specified
given
strategy
show
three
illustrative
frames
one
frame
sucessful
tracking
frame
tracker
starts
fail
one
frame
tracker
completely
lost
track
also
specify
frame
tracker
lost
track
time
failure
statistic
common
way
evaluate
trackers
note
following
extensions
trivial
require
significantly
work
beyond
implementing
basic
tracker
q1
implement
basic
dp
tracker
experiment
different
bounded
velocity
motion
models
using
squared
velocity
absolute
velocity
using
different
costs
shifts
directions
also
experiment
different
bounds
velocity
allow
track
shift
0
5
10
pixels
frames
achieves
best
performance
show
three
example
frames
time
failure
statistic
specified
20
pts
answer
question
q2
efficient
tracking
tracker
implemented
will
relatively
slow
roughly
tnkk
number
frames
number
pixels
image
maximum
allow
velocity
directions
implement
localmin
fast
exploits
fact
velocity
cost
separable
along
directions
eg
velocity
cost
dx
dy
velocity
cost
dx
velocity
cost
dy
reduce
computation
tnk
making
tracker
noticably
faster
20
pts
code
q3
model
estimation
tracking
given
optimal
track
learn
new
template
averaging
patches
extracted
tracked
rectangles
together
re
track
new
averaged
template
help
eg
show
three
frames
time
failure
10
pts
code
10
pts
answer
question
q4
contrained
tracking
use
getrect
obtain
true
location
rectangle
last
frame
implement
constraint
location
rectangle
first
last
frame
fixed
find
optimal
track
using
dp
subject
constraints
help
show
example
frames
errors
basic
tracker
fixed
specify
time
failure
tracker
fails
10
pts
code
10
pts
answer
question
q5
extra
credit
implement
tn
tracker
using
motion
model
penalizes
displacements
using
l1
distance
will
need
implement
2d
distance
transform
algorithm
l1
distance
tune
scale
factors
displacement
achieve
best
results
show
example
frames
specify
time
failure
10
points
code
10
points
answer
question
hints
suggest
working
half
resized
images
speed
overall
tracking
code
debugging
purposes
experiment
first
5
frames
sequence
writeup
requires
lots
plots
use
subplot
generate
figures
multiple
plots
