michael franz 
cs241 
uci
ics
franz
teaching
winter
2013
cs
241
home
cs
241
advanced
compiler
construction
winter
2013
course
goals
graduate
course
advanced
compiler
construction
two
developments
driving
need
new
techniques
programming
language
implementation
new
hardware
architectures
risc
vliw
require
complex
optimizations
predecessors
discuss
essential
optimization
techniques
redundancy
elimination
register
allocation
instruction
scheduling
continual
evolution
programming
languages
java
javascript
python
scala
cilk
ocaml
providing
novel
features
need
implemented
efficiently
examine
advanced
language
implementation
topics
type
directed
dispatch
garbage
collection
just
time
code
generation
topics
will
introduced
class
alongside
programming
project
students
opportunity
apply
new
knowledge
practice
prerequisites
specific
knowledge
assumed
course
first
week
will
briefly
cover
prerequisites
typically
taught
undergraduate
compiler
course
however
students
course
expected
expert
programmers
java
similar
languages
programmed
java
will
expected
learn
quickly
first
three
weeks
quarter
logistics
class
meets
tuesday
thursday
5pm
7
50pm
ics
180
note
class
session
twice
long
considered
normal
4
unit
class
class
incorporates
large
project
lot
material
needs
taught
front
hence
will
double
classes
followed
class
sessions
won
used
will
expected
implementing
total
number
contact
hours
will
regular
4
unit
class
double
3
hour
classes
will
given
january
8th
10th
15th
17th
31st
february
5th
7th
19th
march
7th
12th
14th
written
half
way
project
report
due
february
19th
beginning
week
7
please
state
single
page
done
far
milestones
compiler
project
step
1
step
5
completed
finished
projects
must
presented
class
march
12th
14th
pace
complete
project
finish
date
may
receive
grading
penalty
20
per
week
project
late
read
email
email
sent
uci
email
account
will
considered
read
3
working
days
topical
outline
everything
undergraduate
ever
needs
know
compilers
crash
repeat
course
first
week
intermediate
representations
control
flow
analysis
dataflow
analysisvalue
numbering
static
single
assignment
formredundancy
eliminationregister
allocationinstruction
schedulingloop
optimization
procedure
optimizationloop
optimization
procedure
optimizationtype
bound
dispatch
run
time
typing
garbage
collection
functional
languagesoptimizing
object
oriented
parallel
constructs
overview
grading
course
requirements
substantial
programming
project
students
will
apply
new
knowledge
constructing
essential
parts
optimizing
compiler
students
may
elect
work
pairs
class
grade
will
depend
well
project
will
provide
several
public
test
programs
well
secret
ones
get
see
meet
project
review
will
receive
least
compiler
correctly
compiles
public
test
programs
well
secret
test
programs
will
receive
least
compiler
correctly
compiles
public
test
programs
will
receive
least
can
demonstrate
invested
reasonable
effort
project
even
compiler
fully
run
persistent
debugging
problem
instructor
sole
discretion
constitutes
reasonable
effort
will
also
opportunity
give
short
20
minute
presentation
paper
related
class
students
volunteer
will
receive
extra
credit
won
enough
papers
accommodate
students
want
volunteer
early
comprehensive
examination
students
wish
take
comprehensive
exam
class
will
written
examination
thursday
mar
21
4
00
6
00pm
regular
classroom
time
slot
registrar
scheduled
final
exam
note
grade
comprehensive
exam
will
completely
separate
letter
grade
class
handouts
class
project
description
suite
test
programs
available
test
compiler
description
dlx
machine
architecturea
java
simulator
dlx
machine
architecture
textbook
class
use
textbook
buying
one
many
available
textbooks
compiler
construction
likely
help
much
instead
come
class
well
rested
alert
simply
try
absorb
material
presented
class
research
papers
read
dominator
trees
efficient
generation
dominator
tree
given
control
flow
graph
lengauer
tarjan
fast
algorithm
finding
dominators
flowgraph
acm
transactions
programming
languages
systems
1
1
121
141
1979
static
single
assignment
form
early
paper
documenting
ibm
pl
8
compiler
mention
ssa
yet
auslander
hopkins
overview
pl
8
compiler
proceedings
acm
sigplan
'82
symposium
compiler
construction
boston
massachusetts
published
sigplan
notices
17
6
22
31
1982
first
mention
ssa
literature
two
papers
published
simultaneously
alpern
wegman
zadeck
detecting
equality
variables
programs
proceedings
fifteenth
annual
acm
sigact
sigplan
symposium
principles
programming
languages
san
diego
california
1
11
1988
rosen
wegman
zadeck
global
value
numbers
redundant
computations
proceedings
fifteenth
annual
acm
sigact
sigplan
symposium
principles
programming
languages
san
diego
california
12
27
1988
efficient
generation
ssa
cytron
ferrante
rosen
wegman
zadeck
efficiently
computing
static
single
assignment
form
control
dependence
graph
acm
transactions
programming
languages
systems
13
4
451
490
1991
brandis
ssenb
ck
single
pass
generation
static
single
assignment
form
structured
languages
acm
transactions
programming
languages
systems
16
6
1684
1698
1994
register
allocation
chaitin's
original
algorithm
chaitin
auslander
chandra
cocke
hopkins
markstein
register
allocation
via
coloring
computer
languages
6
1
pp
47
57
1981
easier
track
chaitin
register
allocation
spilling
via
graph
coloring
proceedings
acm
sigplan
symposium
compiler
construction
published
sigplan
notices
17
6
pp
98
105
1982
'other'
graph
coloring
algorithm
rival
chaitin
chow
hennessy
priority
based
coloring
approach
register
allocation
acm
transactions
programming
languages
systems
12
4
pp
501
536
1990
cost
functions
proebsting
fischer
demand
driven
register
allocation
acm
transactions
programming
languages
systems
18
6
pp
683
710
1996
almost
classic
now
briggs
cooper
torczon
improvements
graph
coloring
register
allocation
acm
transactions
programming
languages
systems
16
3
pp
428
455
1994
later
improvement
briggs
algorithm
well
ssa
based
description
george
appel
iterated
register
coalescing
acm
transactions
programming
languages
systems
18
3
pp
300
324
1996
linear
scan
register
allocation
traub
holloway
smith
quality
speed
linear
scan
register
allocation
proceedings
acm
sigplan
'98
conference
programming
language
design
implementation
pldi
1998
pp
142
151
1998
poletto
sarkar
linear
scan
register
allocation
acm
transactions
programming
languages
systems
21
5
pp
895
913
1999
register
allocation
via
control
flow
hierarchy
callahan
koblenz
register
allocation
via
hierarchical
graph
coloring
proceedings
acm
sigplan
'91
conference
programming
language
design
implementation
pldi
1991
pp
192ff
1991
norris
pollock
register
allocation
program
dependence
graph
proceedings
acm
sigplan
'94
conference
programming
language
design
implementation
pldi
1994
pp
266ff
1994
last
update
11th
february
2013
franz
uci
edu
