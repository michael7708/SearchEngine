handling interrupts 
handling interrupts c 
handling
interrupts
programs
able
recover
gracefully
run
time
errors
occur
illegal
arithmetic
problems
etc
cases
system
library
procedure
use
will
return
value
caller
procedure
indicating
whether
successful
responsible
checking
return
values
deciding
error
detected
will
need
check
manual
entries
procedures
use
determine
returns
look
cases
error
detected
hardware
operating
system
rather
library
routine
called
signal
sent
process
program
cases
every
process
list
actions
taken
upon
receipt
various
signals
signals
action
print
error
message
standard
error
stream
dump
core
abort
process
will
almost
certainly
plagued
behavior
class
may
program
redefine
actions
taken
upon
receipt
signals
expected
use
facility
program
recover
gracefully
illegal
arithmetic
errors
overflow
first
include
file
write
procedure
form
floatexception
sig
code
int
sig
code
code
exception
handling
command
signal
sigfpe
floatexception
will
tell
system
execute
procedure
floatexception
whenever
signal
sigfpe
floating
point
exception
received
completion
floatexception
procedure
completes
later
code
caused
signal
continued
nothing
happened
two
parameters
passed
floatexception
system
tell
signal
caused
executed
case
one
signal
set
call
integer
code
giving
details
cases
see
manual
page
signal
details
note
since
procedures
supposed
self
contained
procedure
quits
must
reset
signals
back
whatever
procedure
changed
signal
function
returns
pointer
whatever
function
old
action
taken
must
remember
pointer
use
reset
signal
quitting
case
recursive
procedure
probably
use
separate
top
level
bootstrap
procedure
user
will
call
just
sets
signals
allocates
whatever
memory
will
needed
calls
recursive
procedure
top
level
procedure
will
return
memory
reset
signals
returning
control
caller
simplified
outline
top
level
procedure
follows
define
possible
returns
procedure
typedef
enum
failsig
failmem
failfloat
failresetig
succeed
void
old
sigfpe
remember
old
action
associated
sigfpe
1
int
old
sigfpe
signal
sigfpe
floatexception
something
wrong
signal
system
bail
return
failsig
allocate
memory
call
recursive
procedure
free
memory
1
int
signal
sigfpe
old
sigfpe
signal
reset
failed
otherwise
succeeded
return
failresetsig
return
succeed
typedef
probably
include
file
calling
program
tester
can
decipher
return
status
procedure
main
problem
interrupt
handling
abort
procedure
may
several
levels
deep
recursion
one
technique
set
global
flag
procedure
checks
periodically
exits
flag
changed
case
floatexception
one
change
flag
great
since
procedure
must
waste
time
checking
flag
better
solution
provided
library
functions
setjump
longjmp
use
include
file
define
variable
will
call
env
type
jmp
buf
call
setjmp
will
save
copy
execution
stack
env
return
0
call
longjmp
will
restore
execution
stack
whatever
stored
env
will
cause
setjmp
will
executing
return
whatever
integer
given
longjmp
thus
call
setjmp
code
must
check
return
see
actually
first
call
whether
got
result
error
point
top
level
procedure
like
bootstrap
mentioned
code
looking
something
like
setjmp
env
code
deal
error
probably
just
clean
return
error
status
caller
else
code
continue
task
hand
case
code
floatexception
just
longjmp
env
non
zero
integer
choosing
dan
hirschberg
computer
science
department
university
california
irvine
ca
92697
3435
dan
ics
uci
edu
last
modified
mar
20
1999
