

algorithms
egyptian
fractions
methods
based
approximation
natural
obvious
method
finding
egyptian
fraction
representation
given
number
approximate
number
closely
possible
single
unit
fraction
use
method
represent
remainder
instance
largest
unit
fraction
less
5
6
1
2
removing
1
2
5
6
leaves
1
3
idea
leads
representation
1
2
1
3
mentioned
several
ways
translating
idea
specific
algorithm
greedy
method
greedy
method
produces
egyptian
fraction
representation
number
letting
first
unit
fraction
largest
unit
fraction
less
continuing
manner
represent
remaining
value
1
first
separate
integer
part
floor
representing
remaining
fraction
implementation
works
first
computing
list
fractions
left
subtracting
successive
term
greedy
representation
subtracting
shifted
copy
list
greedypart
integer
0
greedypart
rational
1
0
greedypart
rational
0
1
floor
rational
1
1
quotient
1
subtractshifted
drop
2
take
2
2
egyptgreedy
subtractshifted
fixedpointlist
greedypart
let
us
now
make
sure
routine
correctly
finds
egyptian
fraction
representation
analyze
performance
start
remaining
value
one
step
mod
ceiling
smaller
numerator
similarly
numerator
decreases
step
algorithm
always
halts
resulting
sequence
fractions
clearly
adds
original
input
way
method
go
wrong
two
fractions
equal
allowed
egyptian
fractions
happen
since
denominators
fractions
must
strictly
increasing
two
successive
terms
1
1
chosen
1
1
instead
1
since
numerator
decreases
step
number
terms
representation
many
cases
expect
successive
numerator
randomly
distributed
modulo
previous
numerator
really
true
instead
expect
see
log
terms
denominator
squared
step
largest
denominator
2
generally
2
number
terms
number
operations
performed
algorithm
proportional
operations
might
involve
arithmetic
large
numbers
demonstrate
method
simple
example
egyptgreedy
18
23
1
1
1
1
2
4
31
2852
example
fairly
well
behaved
wagon
wag91
suggests
trying
method
31
311
produces
representation
10
terms
maximum
denominator
500
digits
will
see
later
methods
produce
much
better
representations
31
311
can
easily
modify
code
test
assertion
numerators
fractions
remaining
step
indeed
decrease
egyptgreedynumerators
numerator
drop
fixedpointlist
greedypart
2
egyptgreedynumerators
18
23
18
13
3
1
harmonic
method
greedy
method
treats
integer
fractional
parts
number
differently
instead
can
always
remove
largest
unit
fraction
smaller
previously
removed
unit
fraction
even
larger
one
treat
separately
greedy
method
must
implemented
somewhat
differently
fixedpointlist
now
needs
two
values
remaining
fraction
bound
denominator
found
sequence
remaining
fractions
remove
denominator
bounds
transpose
faster
applying
first
member
list
subtract
shifted
list
function
takes
two
arguments
first
number
want
represent
second
largest
denominator
already
included
representation
method
can
also
used
generate
egyptian
fractions
first
term
arbitrarily
small
simply
supplying
large
integer
second
argument
harmonicpart
0
0
harmonicpart
rational
1
0
harmonicpart
max
1
quotient
1
1
1
egyptharmonic
transpose
fixedpointlist
harmonicpart
1
subtractshifted
algorithm
constructs
fragment
harmonic
series
1
2
1
3
1
4
1
5
produce
result
larger
original
input
point
algorithm
switches
greedy
method
remainder
switch
must
happen
exp
log
terms
harmonic
series
diverges
sum
1
roughly
log
therefore
correctness
algorithm
follows
analysis
saw
however
may
produce
many
terms
larger
denominators
greedy
method
step
squares
denominator
switch
happens
denominator
remaining
fraction
can
doubly
exponentially
small
respect
eventual
number
terms
doubly
exponential
singly
exponential
analysis
greedy
algorithm
largest
denominator
eventual
representation
quadruply
exponential
triply
exponential
greedy
method
worst
case
can
expect
practice
see
one
fewer
level
exponentials
number
terms
largest
denominator
even
algorithm
tends
produce
large
representations
egyptharmonic
18
23
5
1
1
1
1
1
1
1
1
5
6
7
8
9
28
794
23010120
odd
greedy
method
odd
known
egyptian
fraction
representation
denominator
odd
bre54
ste54
conversely
even
least
one
terms
representation
must
also
even
straightforward
method
finding
odd
denominator
representation
seems
modify
greedy
method
use
odd
denominators
known
whether
really
works
oddgreedypart
0
0
oddgreedypart
rational
1
0
oddgreedypart
max
1
quotient
1
oddq
1
1
1
egyptoddgreedy
3
transpose
fixedpointlist
oddgreedypart
1
subtractshifted
unlike
greedy
method
numerators
remaining
fractions
decrease
step
two
reasons
first
like
harmonic
method
use
parameter
make
sure
fractions
generate
distinct
used
series
1
3
1
5
1
7
1
9
becomes
larger
point
becomes
unimportant
stage
numerators
will
general
increase
second
whenever
parity
forces
us
use
larger
denominator
greedy
method
denominator
will
increase
now
give
example
1
3
demonstrate
second
phenomenon
egyptoddgreedynumerators
3
transpose
fixedpointlist
oddgreedypart
1
numerator
drop
2
egyptoddgreedy
10
39
1
1
1
1
5
19
265
196365
egyptoddgreedynumerators
10
39
10
11
14
1
proving
whether
method
always
halts
remains
important
open
problem
theory
egyptian
fractions
guy81
kw91
heuristic
argument
shows
answer
likely
positive
enough
fractions
generated
become
unimportant
step
reduces
remaining
fraction
value
smaller
fraction
numerator
1
2x
1
successive
numerator
randomly
distributed
range
expect
see
numerators
decrease
factor
exp
integrate
log
0
2
2
0
73576
per
step
therefore
expect
algorithm
produce
roughly
log
1
log
2
3
26
log
unit
fractions
halting
numerator
remaining
fraction
point
becomes
unimportant
course
nothing
actually
random
argument
rigorous
also
ignores
possibility
numerator
denominator
fraction
remaining
steps
may
common
factor
serves
reduce
number
terms
test
argument
compare
actual
performance
algorithm
testoddgreedy
egyptoddgreedynumerators
listplot
log
1
log
2
plotjoined
true
axesorigin
0
0
testoddgreedy
1999999991
123412340001
code
normalizes
vertical
axis
match
heuristic
prediction
number
steps
remaining
least
example
numerators
seem
decrease
much
quickly
prediction
number
terms
generated
15
considerably
smaller
70
expect
also
interesting
note
large
drops
made
numerator
third
seventh
final
steps
closer
inspection
reveals
phenomena
due
cancellation
common
factors
numerators
denominators
intermediate
terms
three
steps
involve
common
factors
63
45
5739
two
steps
involve
factors
three
clear
large
cancellations
occur
egyptian
fractions
number
theory
david
eppstein
ics
uc
irvine
formatted
nb2html
filter
last
update
09
sep
1996
16
24
43
pdt
