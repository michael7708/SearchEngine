ics 32 winter 2013 project guide 
project guide 
ics
32
winter
2013
news
course
reference
schedule
project
guide
code
examples
alex
ics
32
winter
2013
project
guide
projects
assignment
0
setting
ics
32
development
environmentproject
1
begin
beginproject
2
send
wayproject
3
outside
wallproject
4
width
circle
part
1
project
5
width
circle
part
2
goals
quarter
work
five
programming
projects
building
knowledge
python
programming
prerequisite
coursework
ics
31
cse
41
equivalent
collectively
projects
intended
give
opportunity
improve
skills
ways
overall
goals
extending
python
programming
skills
learning
new
constructs
techniques
python
language
will
familiar
prior
courseworkbeginning
develop
sense
means
design
software
learning
using
techniques
allow
write
much
larger
programs
written
previously
embracing
automated
unit
tests
way
verify
certain
parts
programs
working
designed
way
make
useful
elsewhereexploring
portions
python's
standard
library
functions
classes
included
ready
use
automatically
install
pythonbuilding
confidence
ability
discover
library
behaves
reading
tutorials
searching
documentation
experimentation
even
parts
library
discussed
lecture
textbook
one
hallmarks
real
world
software
developmentlearning
find
use
appropriate
third
party
libraries
standard
parts
python
installation
another
hallmarks
real
world
software
developmentdeveloping
confidence
working
alone
opposed
pair
programming
much
upcoming
coursework
quite
likely
future
employment
continuing
along
path
will
require
solo
effort
least
time
might
expect
goals
five
projects
will
written
python
will
explore
new
territory
new
python
language
constructs
techniques
new
libraries
real
world
problem
domains
will
surely
discover
projects
increase
size
difficulty
quarter
goes
put
appropriate
amount
effort
get
questions
answered
along
way
stuck
understand
afterward
worked
find
skill
level
will
rise
steadily
match
rising
difficulty
projects
will
work
pairs
using
technique
called
pair
programming
others
will
give
opportunity
work
individually
skill
also
like
see
begin
develop
quarter
projects
will
include
starting
point
form
documented
code
provide
means
getting
started
quarter
progresses
find
asked
write
code
write
scratch
build
programs
made
progressively
larger
number
interacting
parts
method
madness
will
course
strengthen
ability
write
individual
python
functions
classes
will
also
begin
cultivate
understanding
design
ever
larger
programs
projects
will
evaluated
based
well
work
also
well
designed
written
poorly
written
code
works
will
viewed
critically
just
well
written
code
bugs
will
worry
though
presume
experience
designing
programs
providing
many
examples
plenty
help
along
way
end
quarter
successfully
worked
projects
surprised
much
skills
improved
course
empowered
follow
interests
explore
new
libraries
new
problem
domains
excite
pair
programming
pair
programming
projects
course
will
required
employ
approach
called
pair
programming
pair
programming
just
two
programmers
working
separately
task
work
divvied
pair
programming
two
programmers
share
one
computer
one
driver
controls
keyboard
mouse
navigator
observes
asks
questions
suggests
solutions
thinks
slightly
longer
term
strategies
two
programmers
switch
roles
every
15
20
minutes
goal
partners
complete
mental
ownership
work
done
even
though
one
person
time
typing
obligates
partners
communicate
one
another
understand
partner
bringing
one
speed
necessary
partners
firmer
grasp
least
importantly
way
pair
programmers
described
nearly
always
beats
stereotypical
solitary
loner
similar
ability
pair
produces
high
quality
code
less
time
far
two
one
margin
projects
require
pair
programming
requiring
follow
model
will
keeping
track
students
reserve
right
penalize
students
routinely
refuse
work
pair
programmers
refuse
described
pair
programming
involves
shared
responsibility
expect
partners
bear
share
industry
software
development
environments
use
pair
programming
documented
good
effect
reality
individual
programming
still
widely
used
strategy
real
world
many
future
courses
take
will
require
individual
work
well
study
study
shows
working
pairs
stage
development
computer
scientists
will
strengthen
abilities
work
individually
well
pairs
still
use
pair
programming
portion
course
projects
will
require
individual
work
acclimate
demands
future
courses
future
employers
rest
assured
successful
pairing
point
made
ready
work
individually
working
individually
beginning
also
remember
course
staff
tas
lab
tutors
help
pairing
rules
paired
assignment
will
required
select
lab
partner
also
enrolled
lab
section
variety
logistical
reasons
pairing
students
different
lab
sections
will
allowed
circumstances
additionally
will
required
partner
someone
partnered
previously
course
took
ics
31
previously
will
ideally
find
partners
ones
worked
course
well
pairing
advice
best
time
find
partner
ics
32
help
center
scheduled
lab
section
shy
talk
people
part
benefit
university
education
social
network
finished
true
story
every
job
since
enrolled
student
uci
including
one
connected
fairly
directly
uci
experience
trouble
finding
partner
talk
ta
will
happy
help
find
one
bad
idea
find
partner
whose
skill
level
similar
one
skilled
areas
less
skilled
always
possible
sometimes
hard
compare
skill
levels
students
tell
us
data
support
pairs
productive
partners
level
still
people
often
pair
another
whose
skills
abilities
different
differences
may
great
small
one
member
may
strengths
exactly
like
real
world
working
situations
part
accomplishing
task
get
member
make
member
stronger
productive
subsequent
tasks
clearly
stronger
partner
may
feel
frustrated
slowed
partner
stronger
partner
benefits
teamwork
many
ways
partner's
requests
clarification
often
point
flaws
approach
solution
teamwork
skills
gained
great
value
job
market
exercise
providing
clear
explanation
solidifies
deepen's
explainer's
understanding
less
strong
partner
may
feel
questions
hold
partner
back
benefit
participating
actively
pair
programming
studies
show
paired
work
consistently
better
work
stronger
partner
individually
part
partner's
job
understand
whole
task
means
asking
questions
necessary
answering
possible
expected
work
partner
outside
scheduled
lab
sections
generally
yes
almost
certainly
need
spend
time
working
outside
scheduled
lab
sections
scheduled
lab
section
constitutes
two
hours
per
week
projects
expected
take
substantially
longer
understand
though
pair
programming
separate
locations
talking
via
instant
messages
sending
code
back
forth
via
email
even
talking
phone
pair
programming
requires
partners
room
sitting
behind
computer
one
acting
driver
acting
navigator
unsympathetic
fact
scheduling
time
work
together
difficult
requirement
course
aware
front
evaluation
work
evaluation
criteria
projects
will
graded
using
30
point
scale
work
projects
naturally
primary
goal
write
program
behaves
specified
meeting
requirements
specified
project
write
however
writing
correctly
working
program
sole
objective
doubt
already
seen
previous
coursework
see
even
clearly
begin
attack
problems
larger
complex
variety
ways
solve
programming
problem
manageable
others
approaches
simpler
complex
yield
code
can
read
understood
easily
people
others
easier
change
without
requiring
changes
cascade
throughout
program
others
like
focus
writing
programs
tend
simpler
readable
changeable
discuss
techniques
throughout
quarter
achieve
goal
since
integral
part
work
dramatically
raise
bar
size
program
can
write
qualities
assessed
grading
process
projects
will
evaluated
following
basis
qualityvaluedescriptioncorrectness
robustness20
pointswhen
program
given
valid
input
generate
correct
output
according
specification
project
write
output
spacing
correct
issue
short
program
supposed
input
meets
project
specifications
program
given
unusual
erroneous
input
handled
gracefully
programs
crash
situations
example
print
informative
messages
user
ask
user
alternative
input
find
another
way
continue
executing
possible
quality
design10
pointsparticularly
awkward
cumbersome
inappropriate
ways
approaching
problems
will
score
highly
cleaner
better
designed
ones
program
divided
logical
parts
large
functions
classes
divided
smaller
ones
encapsulating
single
idea
task
different
kinds
work
interacting
user
calculating
results
handled
different
functions
classes
comments
used
make
program
clear
reader
though
noted
good
modularity
well
named
identifiers
make
commenting
burden
significantly
lighter
identifier
names
chosen
reflect
role
names
meaningful
reader
total30
points
projects
may
graded
somewhat
differently
alterations
grading
scale
will
included
project
write
late
work
things
happen
ten
week
quarters
can
unforgiving
unreasonable
expect
may
find
difficult
finish
one
projects
time
even
top
things
time
get
emails
often
students
saying
things
like
just
one
day
work
get
done
hand
consistently
behind
recipe
struggle
course
moving
quickly
will
progressively
harder
catch
farther
behind
get
best
balance
two
realities
everyone
allowed
tough
time
project
quarter
maybe
underestimated
difficulty
assignment
maybe
three
midterms
paper
due
day
maybe
sudden
outside
commitment
avoided
reason
offering
following
late
work
policy
student
permitted
submit
one
project
48
hours
late
questions
asked
prior
notification
required
purposes
clarification
additional
details
policy
works
required
notify
us
advance
fact
honesty
prefer
lot
students
course
represent
lot
extra
work
us
know
look
submissions
48
hours
beyond
deadline
project
paired
projects
late
submission
will
apply
partners
will
permitted
neither
partner
previously
submitted
late
project
ten
minute
grace
period
due
date
allowing
time
get
files
submitted
checkmate
submitted
files
12
08am
11
59pm
due
date
fine
best
play
fire
though
already
done
11
59pm
12
11am
used
one
time
extension
exceptions
first
project
submit
late
will
fall
policy
subsequent
project
submit
late
will
accepted
words
submit
two
projects
late
wait
see
one
get
better
score
grading
second
one
one
file
submitted
beyond
ten
minute
grace
period
entire
project
considered
late
falls
policy
tracking
throughout
quarter
course
will
grant
extension
anyone
accommodate
unforeseen
issues
might
otherwise
prevent
finishing
project
time
late
work
accepted
course
however
partially
complete
work
can
certainly
earn
partial
credit
completed
project
already
used
one
time
extension
best
submit
deadline
rather
submitting
nothing
ordinary
circumstances
sometimes
warrant
exceptions
policy
faced
problem
preventing
getting
work
done
time
either
single
assignment
chronically
please
contact
can
talk
best
approach
problem
submitting
projects
complete
project
must
submit
us
electronically
follow
link
detailed
description
submit
projects
understand
will
accept
projects
submitted
using
procedure
described
accept
printed
copies
projects
accept
via
email
circumstances
responsible
submitting
version
project
want
graded
will
grade
recent
submission
made
deadline
accidentally
submitting
wrong
version
will
considered
grounds
regrade
development
environment
machines
ics
labs
already
required
development
environment
ics
32
installed
want
least
work
machine
need
make
sure
install
configure
necessary
software
note
tools
using
quarter
may
slightly
different
tools
used
previous
courses
need
sure
upgrade
right
versions
proceeding
planning
using
machine
least
work
please
refer
assignment
0
instructions
getting
precisely
right
versions
components
installed
configured
properly
course
will
try
help
get
stuck
please
aware
realistically
support
home
installations
will
responsible
getting
tools
installed
configured
will
need
use
machines
ics
labs
fallback
unable
academic
honesty
policy
ics
32
cse
42
students
expected
know
follow
academic
honesty
policies
bren
school
ics
university
whole
please
take
minutes
read
policies
can
found
link
project
work
expected
completed
solely
partner
paired
projects
worker
larger
groups
sharing
code
students
partners
permitted
note
high
level
discussion
course
material
better
understanding
permitted
encouraged
comes
time
sit
write
code
expected
done
alone
submissions
compared
one
another
using
automated
plagiarism
detection
system
system
extraordinarily
good
finding
similarities
submissions
even
superficial
differences
since
work
expected
completed
solely
partner
paired
assignments
will
held
responsible
even
plagiarize
small
portion
someone
else's
work
academic
honesty
two
way
street
providing
code
students
turn
permitted
turning
someone
else's
code
resist
temptation
give
code
friends
reference
based
experience
can
say
friends
may
well
betray
turn
anyway
lot
answer
naturally
midterm
final
exam
also
expected
individual
efforts
dishonest
behavior
exam
will
tolerated
violators
academic
honesty
policies
subject
penalties
described
bren
school
ics
policy
also
subject
immediate
course
grade
will
allowed
drop
course
avoid
grade
also
aware
single
documented
case
academic
dishonesty
may
preclude
switching
computing
majors
registering
computing
minors
joining
ics
honors
program
graduating
computing
major
honors
lesson
okay
moral
story
wise
avoid
cheating
believe
relatively
rare
students
enter
course
conscious
intent
cheat
way
come
uci
planning
get
something
coursework
people
cheat
every
quarter
every
course
answers
vary
easiest
way
can
boil
numerous
conversations
students
caught
cheating
courses
years
fell
behind
figure
catch
things
happen
ten
week
quarters
unforgiving
might
get
sick
might
issues
crop
family
might
misunderstood
one
earlier
topics
course
later
topics
dependend
might
campus
job
demanding
much
time
might
trying
decide
whether
path
want
things
many
others
can
make
hard
keep
fall
little
behind
fall
little
behind
pretty
soon
situation
seems
hopeless
pressure
temptation
gets
better
suddenly
seems
better
submit
someone
else's
work
submit
nothing
feel
like
beginning
slip
course
things
getting
beyond
control
best
thing
talk
us
sooner
rather
later
help
understand
reality
taking
large
sized
courses
large
sized
institution
going
know
need
unless
tell
us
things
happening
life
tell
us
specific
comfortable
fact
often
way
work
things
fact
usually
late
originally
written
alex
thornton
winter
2013
substantial
portions
adapted
similar
page
alex
thornton
pair
programming
section
partly
adapted
similar
page
norman
jacobson
turn
adapted
similar
page
david
kay
