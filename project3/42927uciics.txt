interfaces 

interfaces
introduction
computer
science
iii
ics
21
22
23
introduction
lecture
will
take
another
big
step
like
understanding
object
towards
generalizing
understanding
java
classes
use
interfaces
step
will
ultimately
lead
us
learning
class
inheritance
class
hierarchies
abstract
classes
abstract
methods
advanced
topics
concerning
classes
will
start
small
will
show
interfaces
can
used
generalize
concept
type
present
know
primitive
types
classes
can
serve
types
local
variables
parameter
variables
fields
classes
also
know
variable
type
object
can
store
reference
object
constructed
class
interface
specifies
constraint
class
class
implements
interface
must
satisfy
constraints
defining
methods
specified
interface
understand
material
lecture
interfaces
must
learn
four
facets
interfaces
interconnect
define
interface
looks
like
class
defining
method
headers
bodies
constructors
fields
write
class
implements
interface
write
method
specifies
type
parameter
using
name
interface
includes
arguments
references
objects
can
passed
parameter
parameter
can
used
inside
method
call
methods
specified
interface
call
method
constructing
object
class
implements
interface
type
technically
interfaces
types
classes
implement
illustrate
points
concretely
will
first
examine
two
simple
powerful
methods
public
static
whose
parameter
types
specified
interfaces
one
rejects
bad
values
entered
user
prompts
approximates
definite
integral
univariate
function
along
methods
discuss
necessary
interfaces
classes
implement
interfaces
driver
application
ties
facets
together
please
download
unzip
run
examine
entire
interface
demonstration
application
next
will
examine
comparator
interface
defined
standard
java
library
will
use
interface
whose
central
method
specifies
object
parameters
along
sort
method
defined
arrays
class
also
standard
java
library
learn
sort
array
process
will
use
lots
casting
please
download
unzip
run
examine
entire
sorting
interfaces
demonstration
application
facet
interfaces
simple
undertand
together
provide
powerful
programming
tool
will
discuss
four
facets
thrice
prompting
method
integration
method
sorting
method
facets
interrelated
useful
view
everything
like
many
advanced
java
features
ability
discuss
technically
critical
can
connect
words
connecting
concepts
actually
writing
java
code
becomes
much
simpler
facet
1
specifying
interfaces
interface
specifies
type
specifying
prototypes
methods
must
defined
class
implementing
interface
reason
interfaces
look
lot
like
class
definitions
specify
constructors
typically
specify
fields
fields
allowed
sorts
special
constraints
will
delay
studying
fact
method
specification
just
header
followed
semi
colon
body
header
interfaces
specify
methods
must
available
implemented
like
prototype
parameter
names
interfaces
often
small
classes
implementing
also
small
may
define
methods
well
constructors
fields
specified
interface
example
decisionint
interface
shown
interface
demonstration
simply
specified
public
interface
decisionint
public
boolean
isok
int
first
notice
word
interface
appears
name
decisionint
seen
class
used
similarly
class
implementing
decisionint
interface
must
define
method
named
isok
prototype
one
int
parameter
returning
boolean
result
methods
defined
interface
implicitly
public
whether
include
access
modifier
reason
programmers
never
bother
write
public
always
write
emphasis
will
see
variety
classes
implement
interface
different
meaning
isok
method
allowing
user
enter
positive
numbers
even
numbers
prime
numbers
numbers
certain
range
will
see
method
prompts
user
integer
calls
isok
object
constructed
class
implements
interface
decide
whether
entered
value
accepted
rejected
rejected
user
reprompted
enter
ok
values
facet
2
classes
implementing
interfaces
classes
implement
interfaces
explicitly
specifying
implementing
whatever
methods
required
interface
example
using
isok
interface
specified
can
define
iseven
class
public
class
iseven
implements
decisionint
public
boolean
isok
int
return
2
0
notice
first
line
example
defines
class
name
using
keyword
implements
specifies
interface
implements
complicated
classes
can
implement
multiple
interfaces
sure
enough
class
supply
required
isok
method
correct
prototype
isok
method
just
returns
true
parameter
even
number
notice
class
includes
constructor
recall
cases
java
automatically
supplies
constructor
written
public
iseven
constructor
takes
parameters
performs
actions
obviously
initializes
instance
variables
iseven
defines
none
written
exactly
code
constructor
inside
class
classes
like
one
programmers
let
java
supply
constructor
automatically
likewise
simple
define
classes
whose
isok
methods
allows
positive
prime
numbers
bodies
perform
different
computations
interesting
second
example
another
class
implements
decisionint
interface
public
class
isbetween
implements
decisionint
public
isbetween
int
low
int
high
low
high
throw
new
illegalargumentexception
isbetween
constructor
low
low
class
specifies
two
instance
variables
constructor
checks
legal
values
low
must
bigger
high
storing
parameters
instance
variables
instead
throwing
exception
parameters
order
just
fix
write
constructor
public
isbetween
int
bound1
int
bound2
low
math
min
bound1
bound2
high
math
max
bound1
bound2
big
fan
automatically
fixing
problems
better
throw
exception
let
someone
know
problem
either
case
object
constructed
correctly
stores
two
values
isok
method
determines
whether
supplied
parameter
course
class
correctly
implements
decisionint
interface
isok
method
makes
class
interesting
iseven
must
store
instance
variables
therefore
uses
constructor
initialize
correctly
isok
method
inbetween
compares
single
parameter
instance
variables
prototype
looks
just
like
isok
methods
just
complex
inside
note
class
specifies
implements
interface
java
compiler
checks
whether
methods
specified
interface
actually
defined
class
correct
prototypes
java
compiler
detects
reports
error
finally
one
class
can
implement
many
different
interfaces
just
one
method
can
throw
many
different
exceptions
long
defines
methods
specified
interface
claims
implement
will
see
advanced
feature
used
later
course
facet
3
interfaces
types
methods
interfaces
types
can
use
names
interfaces
declare
variables
local
parameter
variables
methods
instance
variables
classes
simple
statement
leads
extremely
interesting
deep
ideas
object
oriented
programming
can
variable
whose
type
declared
name
interface
can
store
reference
object
constructed
class
says
implements
interface
can
use
call
methods
specified
interface
actual
method
called
one
defined
object
variable
refers
following
declaratins
pictures
make
sense
picture
illustrates
situation
seen
dealing
type
object
type
variable
compatible
identical
type
constructed
object
refers
unlike
object
type
can
store
reference
variable
using
interface
type
can
store
references
objects
constructed
class
implements
interface
iseven
isbetween
classes
implement
decisionint
interface
can
make
variables
declared
decisionint
interface
type
refer
objects
constructed
either
classes
variables
like
d1
d2
refer
objects
constructed
classes
implementing
interface
can
use
call
method
specified
interface
case
can
use
call
method
named
isok
isok
method
called
depends
entirely
class
object
variable
refers
given
variable
declarations
calling
d1
isok
3
return
false
calls
isok
method
declared
iseven
class
object
d1
refers
likewise
calling
d2
isok
3
return
true
calls
isok
method
declared
isbetween
class
object
d2
refers
object
stores
1
5
bounds
generally
variable
specifying
interface
type
knows
method
names
can
call
specified
interface
methods
will
compute
result
depends
object
constructed
store
variable
rule
echoes
know
object
type
methods
variable
allowed
compiler
call
depends
solely
type
variable
declared
decisionint
type
can
call
isok
method
method
actually
called
depends
object
variable
refers
d1
d2
declared
type
decisionint
method
called
depends
class
object
variable
refers
iseven
first
case
isbetween
second
distinction
type
variable
class
object
refers
critical
first
step
eventual
understanding
class
inheritance
hierarchies
now
examine
another
useful
prompting
method
one
decisionint
parameter
will
define
forint
method
class
named
advancedprompt
actually
specifies
three
parameters
message
prompt
user
reference
object
constructed
class
implements
decisiontype
interface
another
message
error
message
public
class
advancedprompt
public
static
int
forint
string
message
decisionint
check
string
errormessage
int
answer
prompt
forint
message
check
isok
answer
return
answer
system
println
errormessage
method
first
prompts
user
int
value
using
standard
prompt
forint
method
storing
result
answer
possible
problems
user
entering
non
integer
values
handled
prompt
forint
uses
answer
parameter
isok
method
object
check
refers
isok
method
called
returns
true
method
returns
answer
method
prints
error
message
repeats
prompt
check
loop
notice
use
check
parameter
inside
method
call
isok
method
know
check
refers
object
class
implementing
decisionint
interface
compiler
allow
arguments
constructed
class
know
object
refers
will
contain
isok
method
written
general
method
accepts
rejects
information
entered
users
action
depends
whatever
object
passed
argument
check
parameter
might
hundreds
different
criteria
want
use
different
prompts
can
alway
use
method
along
class
implements
criteria
want
facet
4
calling
methods
interface
parameters
can
now
complete
example
showing
call
advancedprompt
forint
method
given
declarations
can
write
int
even
advancedprompt
forint
enter
even
d1
divisible
two
following
interaction
console
enter
even
3
divisible
two
enter
even
4
point
value
4
stored
variable
even
likewise
can
use
d2
instead
d1
write
int
selection
advancedprompt
forint
enter
selection
d2
range
1
5
following
interaction
console
enter
selection
7
range
1
5
enter
selection
4
point
value
4
stored
variable
selection
fact
even
need
store
object
variable
calling
advancedprompt
forint
directly
write
int
selection
advancedprompt
forint
enter
selection
new
isbetween
1
5
range
1
5
second
argument
expression
evaluates
reference
object
constructed
class
isbetween
value
copied
check
parameter
method
call
frame
illustrating
everything
assuming
user
enter
4
method
returns
4
accomplished
four
facets
interfaces
primarily
separated
advanceprompt
forint
method
method
determines
whether
accept
reject
value
entered
user
isok
method
whatever
object
pass
method
controls
semantics
choosing
process
also
specified
decisionint
interface
interconnects
methods
want
new
way
filter
prompts
must
plug
object
new
class
machinery
created
write
class
implements
decisionint
interface
construct
instance
class
pass
parameter
advancedprompt
forint
thus
mechanism
provides
general
structure
solving
yet
unspeciried
problems
differentiating
good
bad
input
values
four
facets
integration
solve
another
completely
different
general
problem
using
interfaces
suppose
want
able
write
method
allows
us
approximate
area
curve
can
repeated
summing
areas
small
rectangles
curve
rectangle's
height
corresponds
value
function
rectangle's
width
constant
compute
area
curve
compute
2h
3h
illustrated
following
picture
best
way
approximate
area
simplest
examine
four
facets
interfaces
solve
problem
first
must
specify
interface
supplies
method
compute
value
function
one
variable
univariate
function
know
will
done
just
know
method
compute
whether
accept
reject
value
know
prototype
method
must
can
write
interface
simply
simply
decisionint
public
interface
univariate
public
double
evaluate
double
second
must
write
class
implements
interface
example
write
class
can
easily
represent
quadratic
forms
ax2
bx
public
class
quadratic
implements
univariate
public
quadratic
double
double
double
public
double
evaluate
double
return
private
double
third
must
write
method
approximates
integral
arbitrary
univariate
function
will
call
method
integrate
define
advancedmath
class
follows
public
class
advancedmath
public
static
double
integrate
univariate
double
low
double
high
double
step
double
sum
0
double
low
high
step
sum
evaluate
step
return
sum
note
use
parameter
just
code
calling
evaluate
method
different
values
generated
loop
get
called
many
times
method
executes
rectangle
note
loop
uses
double
values
legal
frequent
choice
finally
combine
information
write
call
approximates
area
curve
2x2
3x
5
1
3
5
using
step
width
01
can
one
line
double
area
advancedmath
integrate
new
quadratic
2
3
5
1
3
5
01
can
also
define
many
methods
advancedmath
class
operate
univariate
functions
finding
0s
computing
maxima
minima
approximating
derivatives
etc
can
also
define
many
classes
implement
univariate
interface
cubics
exponentials
trigononmetric
functions
combinations
can
mix
match
necessary
say
use
findzero
method
object
constructed
cubic
class
build
libraries
likely
find
debugged
classes
can
use
directly
new
applications
comparator
interface
sort
method
arrays
standard
java
library
contains
interface
named
comparator
defined
java
util
package
find
javadoc
interface
scan
documentation
notice
classes
pane
interfaces
appear
name
appears
italicized
comparator
fact
names
interfaces
appear
italicized
can
quickly
tell
whether
identifier
names
class
interface
two
possibilities
comparator
interface
defined
public
interface
comparator
public
int
compare
object
o1
object
o2
classes
implementing
interface
use
compare
perform
trichotomous
comparison
two
arguments
telling
whether
first
parameter
less
returning
negative
number
second
parameter
equal
returning
0
second
parameter
greater
returning
positive
number
second
parameter
interfaces
general
allowing
lots
different
class
implement
addition
interface
uses
type
object
parameters
compare
methods
tipoff
interface
general
useful
first
write
class
implementing
comparator
interface
objects
constructed
integer
wrapper
class
will
see
use
objects
constructed
class
sorting
method
standard
java
library
public
class
integercomparator
implements
comparator
public
int
compare
object
o1
object
o2
integer
i1
integer
o1
integer
i2
integer
o2
return
i1
compareto
i2
notice
compare
method
first
casts
parameters
stores
references
integer
local
variables
either
cast
fails
java
will
automatically
throw
classcastexception
least
one
value
integer
therefore
compared
expected
calls
compareto
method
first
integer
using
second
argument
method
conveniently
defined
integer
wrapper
class
look
compute
trichotomous
result
easily
returns
exactly
value
want
compare
return
fact
non
static
compareto
method
prototype
int
compareto
object
simplify
body
compare
just
return
integer
o1
compareto
i2
compareto
will
cast
argument
integer
write
just
return
o1
compareto
o2
finally
java
will
automatically
write
constructor
public
integercomparator
now
see
use
object
constructed
integercomparator
class
examine
sort
method
arrays
class
defined
java
lang
package
highly
overloaded
method
prototype
interested
public
static
void
sort
object
comparator
first
note
method
static
math
prompt
classes
methods
static
called
will
efficiently
sort
object
object
array
using
ordering
specified
class
implementing
comparator
actually
permutes
values
parameter
array
postcondition
stores
original
values
many
times
originally
occurred
might
duplicates
etc
values
ordered
array
compare
0
1
compare
1
2
compare
length
2
length
1
sorts
object
according
comparator
java
executed
code
declare
arrays
int
temp
new
int
3
7
4
1
10
2
8
5
9
6
integer
new
integer
temp
length
fill
wrapper
array
values
temp
int
0
temp
length
new
integer
temp
sort
wrapper
array
arrays
sort
new
integercomparator
print
wrapper
array
int
0
length
system
println
print
1
2
3
4
5
6
7
8
9
10
sorting
array
ascending
order
technically
non
descending
order
value
can
followed
another
one
equal
hard
sort
array
direction
biggest
smallest
just
replace
call
arrays
sort
new
integercomparator
arrays
sort
new
reverseintegercomparator
define
public
class
reverseintegercomparator
implements
comparator
public
int
compare
object
o1
object
o2
integer
i1
integer
o1
integer
i2
integer
o2
return
i1
compareto
i2
notice
negation
negating
original
returned
result
i1
normally
compares
less
i2
returns
negative
value
meaning
i1
occur
array
i2
result
method
returns
will
positive
indicating
i1
considered
greater
i2
belong
array
i1
compares
equal
i2
returns
0
0
returned
0
i1
normally
compares
greater
i2
returns
positive
value
meaning
i1
occur
array
i2
result
method
returns
will
negative
indicating
i1
considered
less
i2
belong
array
remember
smaller
values
according
comparator
appear
towards
front
sorted
array
fact
can
write
class
following
amazing
property
constructor
will
take
comparator
produce
object
also
implements
comparator
one
whose
compare
method
returns
opposite
result
comparator
passed
constructor
class
library
reverseacomparator
fact
course
library
can
instead
write
arrays
sort
new
reverseacomparator
new
integercomparator
can
use
object
constructed
reverseacomparator
whenever
want
reverse
comparator
already
written
matter
types
comparator
comparing
stores
object
constructed
calls
compare
method
negating
result
whenever
compare
method
called
can
define
class
follows
long
therefore
easy
understand
admit
understanding
tortuous
much
easier
understand
use
class
understand
works
put
another
way
can
easily
use
without
caring
works
pinnacle
useful
tool
also
beautiful
public
class
reverseacomparator
implements
comparator
public
reverseacomparator
comparator
realcomparator
public
int
compare
object
o1
object
o2
return
realcomparator
compare
o1
o2
private
final
comparator
realcomparator
class
uses
decorator
pattern
produces
object
can
call
methods
object
constructed
decorates
original
object
vastly
prefer
write
debug
general
class
use
multiple
times
write
multiple
classes
decorators
capture
exactly
desire
final
example
class
implements
comparator
imagine
declared
diceensemble
ds
stored
reference
array
object
filled
references
diceensemble
objects
now
suppose
wanted
sort
ensembles
fewer
times
rolled
early
appear
sorted
array
class
needed
arrays
sort
public
class
rolledcomparator
implements
comparator
public
int
compare
object
o1
object
o2
diceensemble
d1
diceensemble
o1
diceensemble
d2
diceensemble
o2
return
d1
getrollcount
d2
getrollcount
notice
simple
class
write
looks
just
like
classes
wrote
implementing
comparator
interface
thus
consider
simple
use
arrays
sort
sort
array
using
ordering
criteria
need
write
simple
class
implementing
comparator
interface
establishes
ordering
call
arrays
sort
array
sort
also
simple
sort
diceensemble
either
increasing
decreasing
order
number
times
ensemble
rolled
number
dice
ensemble
sum
pips
showing
ensemble
etc
loose
ends
section
will
discuss
loose
ends
interfaces
first
happens
class
specify
implements
interface
use
keyword
definition
actually
defines
methods
interface
specifies
can
construct
object
class
store
variable
whose
type
interface
answer
concretely
define
notice
implements
decisionint
public
class
ispositive
public
boolean
isok
int
return
0
write
int
answer
advancedprompt
forint
enter
positive
new
ispositive
bad
choice
java
compiler
believes
object
constructed
class
ispositive
passed
parameter
whose
type
specified
decisionint
comes
interfaces
matter
whether
class
implements
specifications
interface
matter
whether
definitions
says
implements
interface
course
says
really
java
compiler
will
detect
report
error
tries
compile
class
second
happens
variable
whose
type
specified
interface
try
use
call
method
specified
interface
whether
object
refers
method
java
compiler
will
detect
report
error
methods
java
compiler
allows
called
variable
whose
type
interface
methods
specified
interface
important
future
study
java
third
even
leave
public
specifying
interface
declared
public
default
holds
method
specifications
whole
purpose
interface
specify
methods
class
must
define
can
call
can
public
fourth
can
construct
object
interface
answer
tried
java
compiler
detect
report
error
writing
decisionint
new
decisionint
meaningless
java
allowed
thus
declare
constuct
pattern
seen
work
interfaces
see
can
use
interface
construct
object
anonymous
class
finally
reality
interfaces
can
also
specify
public
static
fields
although
legal
often
done
fact
even
fields
specified
access
modifiers
automatically
applied
java
one
generalization
can
use
names
interfaces
instanceof
class
casting
name
reference
variable
name
interface
java's
returns
true
instanceof
refers
object
constructed
class
implements
cast
java
treats
resulting
reference
refers
object
constructed
class
implements
thus
can
call
methods
specified
casted
reference
store
variable
whose
type
specified
anonymous
classes
sometimes
want
construct
just
one
object
class
implements
interface
often
class
small
defines
members
interfaces
often
small
class
constructor
java
allows
us
construct
object
anonymously
using
name
interface
directly
now
java
allows
us
construct
object
anonymous
class
directly
using
interface
example
can
call
arrays
sort
new
comparator
public
int
compare
object
o1
object
o2
return
integer
o1
compareto
o2
second
argument
java
constructs
object
anonymous
class
using
comparator
interface
anonymous
class
implements
interface
defining
compare
one
required
method
inherited
note
need
cast
argument
compareto
parameter
specifies
object
writing
equivalent
writing
public
class
somename
implements
comparator
public
int
compare
object
o1
object
o2
return
integer
o1
compareto
o2
arrays
sort
new
somename
sometimes
programmers
construct
objects
anonymous
classes
want
go
bother
definining
class
technically
java
every
class
placed
file
name
name
class
requires
even
work
will
find
convenient
use
anonymous
classes
sporadically
problem
set
ensure
understand
material
lecture
please
solve
announced
problems
read
lecture
get
stumped
problem
go
back
read
relevant
part
lecture
still
questions
please
get
help
instructor
ca
student
write
class
named
issquare
implements
decisionint
interface
whose
isok
method
returns
true
parameter
perfect
square
hint
use
casting
math
sqrt
one
relational
operators
write
class
named
contraction
implements
univariate
interface
whose
evaluate
method
computes
formula
math
sqrt
1
v2
c2
represent
speed
light
assume
2
99x108
meters
per
second
construct
object
new
isbetween
5
5
values
will
isok
method
return
true
rewrite
integrate
method
use
trapezoid
rule
height
rectangle
interval
2
write
version
computes
value
read
javadoc
point
class
store
int
coordinates
assume
declare
point
ps
store
reference
array
object
filled
point
objects
write
class
named
origindistance
implements
comparator
interface
calling
arrays
sort
ps
new
origindistance
points
array
sorted
closest
origin
coordinate
0
0
farthest
away
origin
read
previous
problem
time
generalize
class
write
call
distancefrom
allow
passing
constructor
point
object
points
array
become
sorted
based
close
specified
point
closer
ones
appear
earlier
array
example
calling
arrays
sort
ps
new
distancefrom
new
point
0
0
produce
result
previous
problem
assume
declare
comparator
c1
new
integercomparator
comparator
c2
new
reverseacomparator
new
reverseacomparator
c1
will
c1
compare
ever
return
different
result
c2
compare
value
assume
postconditon
sorting
object
comparator
compare
0
1
compare
1
2
compare
length
2
length
1
constrast
actual
two
part
postcondition
describe
sort
work
satisfy
postcondition
satisfy
intuitive
understanding
sorting
write
constructor
anonymous
class
can
still
use
anonymous
class
calling
advancedprompt
forint
trying
accept
values
specified
range
isbetween
class
hint
way
besides
constructor
can
use
initialized
instance
variables
write
class
named
negateadecision
implements
decisionint
interface
performs
equivalent
purpose
reverseacomparator
java's
rule
automatically
writing
constructor
public
class
name
automatically
written
parameterless
constructor
defined
class
automatically
written
constructor
defined
class
interface
specifies
public
boolean
isok
int
legal
java
write
method
implementing
interface
different
parameter
name
public
boolean
isok
int
without
using
negate
operator
rewrite
line
return
realcomparator
compare
o1
o2
different
way
return
correct
result
can
describe
change
4
words
argue
way
simpler
understand
