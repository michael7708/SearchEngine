ics 65 fall 2012 project guide 
project guide 
ics
65
fall
2012
news
course
reference
schedule
project
guide
code
examples
alex
ics
65
fall
2012
project
guide
projects
project
1
letter
never
sentproject
2
maps
legendsproject
3
back
chain
gangproject
4
unwashed
somewhat
slightly
dazedproject
5
plug
baby
introduction
quarter
much
focus
will
programming
projects
found
course
programming
projects
will
written
entirely
designed
expose
variety
concepts
techniques
important
assume
will
previous
experience
though
expect
least
year
introductory
programming
experience
note
programming
requires
level
care
attention
detail
exceeds
may
experienced
languages
used
previously
requiring
dual
focus
high
level
design
issues
low
level
implementation
details
many
languages
hide
handle
automatically
cognizant
underlying
implementation
code
write
important
many
languages
debugging
can
adventure
given
program
crashes
will
necessarily
accompanied
clarity
diagnostics
become
accustomed
reasons
important
start
work
early
encounter
problems
early
get
questions
asked
answered
early
many
perplexing
debugging
problems
ever
faced
programs
enough
time
get
kinds
issues
resolved
may
well
difference
finishing
work
prior
experience
neither
required
assumed
though
hurt
however
prior
experience
especially
may
find
practices
learned
past
acceptable
course
focused
just
writing
programs
generate
correct
output
least
importantly
techniques
modularize
programs
manage
hide
complexity
generally
make
best
use
offer
beyond
provided
heritage
evaluation
work
evaluation
criteria
projects
will
graded
30
point
scale
points
split
albeit
unevenly
two
categories
correctness
robustness
program
work
quality
design
well
program
written
described
detail
criteriavaluedescriptioncorrectness
robustness20
points
summary
program
supposed
input
meets
project
specifications
program
given
valid
input
generate
output
specified
output
spacing
case
correct
specified
program
given
unusual
erroneous
input
project
write
specifically
forbid
us
testing
handled
gracefully
resources
allocated
program
memory
open
files
released
program
ends
quality
design10
points
summary
strive
write
clear
well
organized
readable
modifiable
program
program
divided
logical
parts
encapsulating
single
task
idea
large
functions
classes
broken
smaller
ones
simpler
jobs
identifier
names
chosen
reflect
objective
names
meaningful
reader
comments
included
necessary
introduce
clarity
reader
though
noted
good
modularity
well
named
identifiers
make
commenting
burden
significantly
lighter
rules
limitations
specified
project
write
followed
total30
points
code
compile
submit
program
compile
will
able
execute
thus
will
able
evaluate
correctness
responsibility
turn
code
compiles
though
will
make
honest
effort
assess
overall
correctness
quality
can
discretion
assign
score
low
zero
program
compile
level
experience
assumed
able
ensure
code
compiles
even
partially
completed
program
able
work
incrementally
save
copies
reach
stable
state
might
also
consider
using
source
control
tool
like
git
helps
formalize
kind
incremental
work
though
required
late
work
things
happen
ten
week
quarters
can
unforgiving
unreasonable
expect
may
find
difficult
finish
one
projects
time
even
top
things
time
get
emails
often
students
saying
things
like
just
one
day
work
get
done
hand
consistently
behind
recipe
struggle
course
moving
quickly
will
progressively
harder
catch
farther
behind
get
best
balance
two
realities
everyone
allowed
tough
time
project
quarter
maybe
underestimated
difficulty
assignment
maybe
three
midterms
paper
due
day
maybe
sudden
outside
commitment
avoided
reason
offering
following
late
work
policy
student
permitted
submit
one
project
48
hours
late
questions
asked
prior
notification
required
purposes
clarification
additional
details
policy
works
required
notify
us
advance
fact
honesty
prefer
lot
students
course
represent
lot
extra
work
us
looking
submissions
48
hours
beyond
deadline
project
ten
minute
grace
period
due
date
allowing
time
get
files
submitted
checkmate
submitted
files
12
08am
11
59pm
due
date
fine
best
play
fire
though
already
done
11
59pm
12
11am
used
one
time
extension
exceptions
first
project
submit
late
will
fall
policy
subsequent
project
submit
late
will
accepted
words
submit
two
projects
late
wait
see
one
get
better
score
grading
second
one
one
file
submitted
beyond
ten
minute
grace
period
entire
project
considered
late
tracking
throughout
quarter
course
will
grant
extension
anyone
accommodate
unforeseen
issues
might
otherwise
prevent
finishing
project
time
late
work
accepted
course
ordinary
circumstances
sometimes
warrant
exceptions
policy
faced
problem
preventing
getting
work
done
time
either
single
assignment
chronically
please
contact
can
talk
best
approach
problem
development
environment
unlike
programming
languages
like
java
python
make
point
independent
platform
hardware
operating
system
etc
run
decidedly
platform
dependent
especially
true
last
year
new
version
standard
called
11
released
compiler
implementers
still
working
getting
new
features
language
implemented
compiler
implements
slightly
different
subset
language
moment
officially
supported
development
environment
ics
65
visual
studio
2012
visual
studio
integrated
development
environment
wealth
features
mostly
relating
windows
web
based
programming
will
using
course
however
offer
three
features
tremendous
importance
us
compiler
compliant
large
swaths
new
11
standard
along
virtually
previous
ones
compiler
entirely
standards
compliant
visual
studio
2012
certainly
comes
close
enough
use
provides
integrated
debugger
allowing
place
breakpoints
code
step
line
line
inspecting
values
stored
variables
go
along
debugging
can
difficult
times
debugger
sometimes
essential
visual
studio
2012
ordinarily
expensive
software
suite
can
obtained
free
charge
ics
65
students
microsoft's
dreamspark
program
formerly
known
msdnaa
described
albeit
older
name
ordinarily
run
windows
windows
7
can
also
obtained
way
can
run
virtual
environment
vmware
prefer
install
machine
use
visual
studio
2012
installed
visual
studio
2012
large
industrial
strength
development
tool
tools
like
possible
learn
subset
features
required
get
work
done
ignoring
others
mitigate
complexity
visual
studio
2012
written
brief
visual
studio
2012
tutorial
will
take
simple
tasks
need
course
versions
visual
studio
older
2012
already
installed
version
visual
studio
older
2012
going
want
install
2012
can
safely
co
exist
machine
older
versions
recent
additions
11
see
course
implemented
2012
compiler
run
windows
machine
everything
quarter
will
standard
aside
incompatibilities
compilers
arising
new
features
implemented
compilers
others
well
platform
dependencies
expect
good
shape
using
something
else
gcc
99
time
can
feel
free
proceed
direction
aware
however
will
grading
work
using
visual
studio
2012
going
vital
stop
ics
labs
test
programs
submission
submitting
work
compiles
favorite
compiler
visual
studio
2012
viewed
work
compile
work
someone
else
professionally
always
get
choose
favorite
environment
work
adapt
given
submitting
projects
complete
project
must
submit
us
electronically
web
based
system
called
checkmate
follow
link
detailed
description
submit
projects
via
checkmate
understand
will
accept
projects
submitted
using
procedure
described
accept
printed
copies
projects
accept
via
email
circumstances
responsible
submitting
version
project
want
graded
will
grade
recent
submission
made
deadline
accidentally
submitting
wrong
version
will
considered
grounds
regrade
academic
honesty
policy
ics
65
students
expected
know
follow
academic
honesty
policies
bren
school
ics
university
whole
please
take
minutes
read
policies
can
found
link
lab
work
expected
completed
solely
worker
larger
groups
sharing
code
students
partners
permitted
note
high
level
discussion
course
material
better
understanding
permitted
encouraged
comes
time
sit
write
code
expected
done
alone
submissions
compared
one
another
using
automated
plagiarism
detection
system
system
extraordinarily
good
finding
similarities
submissions
even
superficial
differences
note
also
compare
submissions
submitted
previous
quarters
whenever
one
assignments
given
previous
quarter
exceedingly
bad
idea
turn
even
refer
code
written
friend
took
course
already
since
work
expected
completed
solely
will
held
responsible
even
plagiarize
small
portion
someone
else's
work
academic
honesty
two
way
street
providing
code
students
turn
permitted
anymore
turning
someone
else's
code
resist
temptation
give
code
friends
reference
based
experience
can
say
friends
may
well
betray
turn
anyway
naturally
midterm
final
exam
also
expected
individual
efforts
dishonest
behavior
exam
will
tolerated
violators
academic
honesty
policies
subject
penalties
described
bren
school
ics
policy
also
subject
immediate
course
grade
will
allowed
drop
course
avoid
grade
also
aware
single
documented
case
academic
dishonesty
may
preclude
switching
computing
majors
registering
computing
minors
joining
ics
honors
program
graduating
computing
major
honors
lesson
okay
moral
story
wise
avoid
cheating
believe
relatively
rare
students
enter
course
conscious
intent
cheat
way
come
uci
planning
get
something
coursework
people
cheat
every
quarter
every
course
answers
vary
easiest
way
can
boil
numerous
conversations
students
caught
cheating
courses
years
fell
behind
figure
catch
things
happen
ten
week
quarters
unforgiving
might
get
sick
might
issues
crop
family
might
campus
job
demanding
much
time
might
trying
decide
whether
path
want
things
many
others
can
make
hard
keep
fall
little
behind
fall
little
behind
pretty
soon
situation
seems
hopeless
pressure
temptation
gets
better
feel
like
beginning
slip
course
things
getting
beyond
control
best
thing
talk
us
sooner
rather
later
help
understand
reality
taking
large
sized
courses
large
sized
institution
going
know
need
unless
tell
us
things
happening
life
tell
us
specific
comfortable
fact
often
way
work
things
fact
usually
late
originally
written
alex
thornton
fall
2012
heavy
influence
sections
lab
manuals
previous
courses
