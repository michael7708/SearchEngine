modeling dynamic architectures 
open issues 
open
issues
dynamic
software
architectures
maintaining
system
integrity
change
impact
running
system
degree
can
change's
impact
predicted
system
integrity
maintained
unprecedented
changes
supported
form
field
analysis
required
describing
runtime
changes
aspect
system
changes
component's
implementation
component's
external
interface
architecture
topology
component
bindings
appropriate
runtime
change
operations
possible
operations
include
creating
destroying
components
connectors
establishing
tearing
communication
links
replacing
one
component
another
hierarchically
nesting
unnesting
components
interposing
wrapping
components
architectural
changes
described
change
operations
implicit
explicit
description
applying
runtime
changes
runtime
changes
applied
running
system
one
operation
time
transactions
dependent
operation
change
operations
affect
runtime
system
new
processes
threads
created
new
component
new
memory
management
issues
can
component's
internal
state
preserved
transferred
replacement
aspect
architectural
model
deployed
system
support
runtime
change
analysis
triggers
runtime
change
explicitly
requested
end
users
implicitly
system
monitoring
self
adaptive
architectural
model
implementation
mapping
systems
currently
assume
one
one
mapping
model
implementation
elements
adequate
useful
support
one
many
many
one
many
many
mappings
well
investigating
techniques
architectural
refinement
mqr95
may
good
start
mapping
architectural
model
implementation
specified
relationship
dynamic
languages
dls
techniques
tools
can
dynamic
architecture
researchers
use
dl
researchers
dls
different
similar
dynamic
architectures
return
dynamic
software
architectures
home
page
pages
maintained
peyman
oreizy
send
comments
via
mail
