lab assignment c 
lab assignment c 
informatics
42
winter
2012
david
kay
uc
irvine
lab
assignment
assignment
due
end
lab
friday
february
17
pair
programming
assignment
someone
worked
yet
quarter
make
sure
joel
knows
paired
problem
assignment
originally
written
alex
thornton
involves
building
interpreter
simple
programing
language
like
basic
alex
calls
language
facile
may
seem
little
infrastructural
us
actually
sometimes
right
way
solve
problem
make
special
purpose
language
makes
easy
express
various
aspects
problem
build
interpreter
process
language
even
restaurants
program
anemic
example
restaurant
collection
manipulation
language
consists
half
dozen
single
letter
commands
couple
weeks
talk
little
way
computer
scientists
look
languages
advantages
ics
22
students
problem
pair
programming
rather
solo
spent
week
last
quarter
thinking
machine
level
programming
concepts
assignment
will
familiar
coding
python
higher
level
java
meaning
work
alex's
introduction
kid
one
teachers
introduced
computer
first
time
radio
shack
trs
80
model
anybody
remember
immediately
interested
played
little
math
games
messed
around
state
art
educational
tools
early
1980's
might
imagine
state
art
much
fun
one
day
teacher
asked
wanted
learn
write
programs
thought
sounded
like
great
idea
picked
book
language
called
basic
may
played
typed
short
program
asked
user
number
hits
number
bats
printed
batting
average
believe
mother
still
printout
including
comment
top
first
program
alex
thornton
yes
commented
first
program
ran
program
tried
mesmerized
computer
exactly
asked
exactly
way
asked
lifelong
obsession
later
know
computer
science
began
basic
good
teaching
tool
day
versatile
easy
learn
project
designed
simpler
version
basic
called
facile
supports
eleven
kinds
statements
building
facile
interpreter
read
execute
facile
programs
facile
language
discuss
requirements
interpreter
later
write
first
talk
facile
language
facile
program
sequence
statements
one
per
line
example
facile
program
let
3
print
gosub
7
print
print
goto
10
let
4
let
6
return
print
end
line
contains
exactly
one
statement
may
blank
lines
facile
assigns
line
number
lines
first
line
program
numbered
1
second
line
numbered
2
last
line
program
period
line
execution
facile
program
always
begins
line
number
1
predefined
limit
number
lines
facile
program
variables
facile
program
variables
named
sequence
characters
include
whitespace
variable
capable
storing
integer
value
value
variable
may
assigned
changed
let
statement
let
statement
changes
value
one
variable
examples
let
3
changes
value
variable
3let
9
changes
value
variable
9
can
print
value
variable
console
using
print
statement
print
statement
prints
value
one
variable
followed
newline
consider
following
short
facile
program
let
3
let
9
print
print
output
3
9
execution
facile
program
facile
program
executed
one
line
time
beginning
line
number
1
ordinarily
execution
proceeds
forward
line
1
will
execute
first
followed
line
2
followed
line
3
execution
continues
either
end
statement
reached
reaches
line
appears
end
program
programming
language
possible
facile
write
programs
execute
sequence
though
mechanisms
bit
primitive
language
like
python
goto
statement
causes
execution
jump
immediately
given
number
example
statement
goto
4
jumps
execution
line
4
example
facile
program
uses
goto
let
1
goto
4
let
2
print
program
line
1
executed
first
setting
variable
a's
value
1
goto
statement
will
immediately
jump
execution
program
line
4
skipping
second
let
line
4
prints
value
1
output
program
1
goto
statement
may
jump
either
forward
backward
meaning
following
program
legal
facile
program
see
can
figure
output
let
5
let
0
goto
8
let
4
print
print
end
print
print
goto
4
goto
statements
permitted
jump
beyond
boundaries
program
lines
line
1
lines
completes
program
goto
statement
encountered
program
executed
interpreter
terminates
error
message
mathematical
operations
facile
provides
typical
mathematical
operations
can
performed
variables
addition
subtraction
multiplication
division
operation
provided
statement
changes
value
given
variable
examples
use
let
4
add
3
print
let
5
sub
3
print
let
6
mult
7
print
let
7
div
2
print
example
add
statement
adds
3
value
storing
result
printing
will
display
7
console
output
program
7
2
42
3
important
note
since
variables
facile
integers
div
statement
implements
integer
division
meaning
result
floor
integral
part
quotient
example
7
2
3
note
python
integer
division
operator
second
operand
may
zero
meaning
statement
div
0
illegal
facile
program
encounters
division
zero
immediately
terminates
error
message
statement
facile
provides
statement
acts
like
conditional
goto
compares
value
variable
value
jumps
execution
program
given
line
number
comparison
true
comparison
can
use
one
typical
relational
operators
equal
equal
let
3
let
5
4
5
print
print
program
variables
given
values
3
5
respectively
statement
compares
4
since
less
4
execution
jumps
line
5
b's
value
printed
program's
output
simply
line
containing
5
statement
facile
substantially
less
flexible
python
equivalent
statement
facile
token
must
followed
exactly
five
tokens
first
must
name
variable
second
must
one
relational
operators
third
must
integer
constant
fourth
must
word
fifth
must
line
number
behave
way
might
expect
example
0
4
means
jump
line
4
equal
0
like
goto
statements
statements
permitted
jump
beyond
boundaries
program
attempt
cause
facile
program
terminate
error
message
subroutines
methods
functions
facile
simplified
mechanism
called
subroutine
subroutine
chunk
facile
code
can
called
issuing
gosub
statement
gosub
much
like
goto
causes
execution
jump
particular
line
however
gosub
also
causes
facile
program
remember
jumped
subsequently
return
statement
reached
execution
continues
line
following
gosub
statement
caused
jump
example
let
1
gosub
6
print
print
end
let
2
let
3
return
program
line
1
executed
first
setting
value
1
next
gosub
statement
reached
execution
jumps
line
6
facile
also
remembers
return
statement
reached
execution
jump
back
line
following
gosub
case
line
3
line
6
executed
next
setting
2
line
7
sets
3
now
reach
return
statement
causing
execution
jump
back
line
number
remembering
line
3
line
3
prints
value
2
line
4
prints
value
3
next
reach
line
5
end
statement
program
ends
subroutines
can
used
similarly
python
functions
except
take
parameters
return
value
consider
following
example
contains
subroutine
prints
values
time
called
let
3
let
0
let
0
gosub
12
let
4
gosub
12
let
5
gosub
12
let
1
gosub
12
end
print
print
print
return
subroutines
may
call
subroutines
meaning
two
gosub's
may
reached
return
reached
rules
similar
methods
call
methods
python
gosub
reached
facile
will
remember
line
return
return
reached
execution
will
move
line
remembered
recent
gosub
example
let
1
gosub
7
print
end
let
3
return
print
let
2
gosub
5
print
return
example
execution
begins
line
1
setting
variable
1
next
jump
line
7
gosub
remembering
jump
back
line
3
encounter
return
line
7
prints
1
line
8
changes
a's
value
2
now
reached
line
9
another
gosub
statement
point
execution
will
jump
line
5
also
need
remember
jump
back
line
following
gosub
line
10
reach
return
also
need
remember
line
previous
gosub
line
3
line
5
sets
3
encounter
first
return
statement
remembering
two
lines
line
3
line
10
line
10
recently
remembered
line
execution
jumps
line
10
line
10
prints
3
now
encounter
another
return
statement
line
11
remembering
line
3
first
gosub
execution
jumps
line
3
printing
still
3
ending
program
line
4
output
program
1
3
3
like
goto
statements
gosub
statements
permitted
jump
beyond
boundaries
program
lines
line
1
lines
completes
program
gosub
statement
encountered
program
executed
interpreter
terminates
error
message
also
error
return
statement
encountered
previous
gosub
facile
program
will
immediately
terminate
print
error
message
case
well
whitespace
facile
programs
may
blank
lines
amount
placement
blank
space
words
line
considered
irrelevant
following
legal
facile
program
let
zebra
5
goto
7
let
chimpanzee
4
print
chimpanzee
print
zebra
end
print
chimpanzee
print
zebra
goto
3
experimenting
facile
interpreter
program
capable
executing
program
written
programming
language
give
ability
experiment
implemented
facile
interpreter
windows
already
ordinarily
use
windows
remember
machines
ics
labs
run
windows
ample
opportunity
experiment
facile
might
even
want
pair
program
experiment
zip
archive
contains
interpreter
facile
exe
facile
programs
appear
write
along
additional
ones
demonstrate
fatal
errors
division
zero
return
statement
without
corresponding
gosub
goto
non
existent
line
feel
free
write
well
unzip
archive
one
folder
double
click
program
fairly
self
explanatory
word
warning
interpreter
wrote
without
making
serious
attempt
handling
syntax
problems
assumes
input
file
legal
facile
program
attempt
run
input
file
legal
facile
may
see
message
error
program
also
possible
interpreter
may
simply
crash
moreover
interpreter's
version
facile
subtle
differences
version
described
particular
recognizes
26
variables
initializes
0
automatically
providing
interpreter
can
experiment
language
questions
comfortable
it'll
turn
implement
facile
interpreter
bear
mind
facile
interpreter
implements
much
optional
work
described
additional
challenges
section
will
behave
correctly
samples
given
write
program
project
building
facile
interpreter
program
capable
executing
facile
program
generating
correct
output
according
specification
previous
sections
since
already
familiar
python
write
facile
interpreter
python
since
python
runs
many
operating
systems
means
completed
able
use
interpreter
run
facile
programs
windows
mac
os
linux
unix
several
platforms
facile
interpreter
provided
runs
simple
graphical
user
interface
program
hand
read
one
facile
program
input
file
execute
writing
output
facile
program
console
using
print
statements
starting
point
will
discuss
organization
program
class
course
may
use
code
develop
basis
complete
solution
interpreter
works
typical
interpreter
will
execute
program
one
statement
time
keeping
track
might
call
program
state
goes
along
case
python
interpreter
might
imagine
quite
bit
work
done
interpreter
need
keep
track
objects
creating
new
ones
garbage
collecting
old
ones
necessary
well
maintain
call
stack
along
various
tasks
required
python
programs
implementing
efficient
complete
python
interpreter
project
easily
take
many
programmer
years
facile
interpreter
much
simpler
program
since
facile
much
simpler
programming
language
interpreter
will
need
execute
facile
program
one
statement
time
updating
program
state
necessary
either
end
statement
reached
can
simply
treated
end
statement
like
program
state
consists
following
information
line
code
currently
executing
might
call
program
counter
may
remember
deus
machine
integer
value
variablesthe
call
stack
line
numbers
remembered
gosub
statements
since
return
jumps
back
line
following
recent
gosub
makes
sense
store
line
numbers
stack
statement
different
effect
program
state
example
let
statement
will
cause
value
one
variables
change
cause
program
counter
incremented
since
let
statement
execution
continues
next
statement
goto
statement
will
cause
program
counter
changed
line
number
specified
statement
reading
program
representing
memory
program
will
need
begin
reading
facile
program
input
file
representing
memory
number
ways
solve
problem
one
way
read
program
memory
collection
strings
strings
containing
one
line
input
program
every
time
particular
line
executed
need
parsed
see
kind
statement
executed
might
imagine
terribly
inefficient
way
implement
interpreter
since
statement
may
need
parsed
permitted
use
approach
interpreter
better
approach
one
requiring
use
instead
read
input
program
parse
represent
list
statement
objects
object
oriented
programming
concept
inheritance
provides
natural
design
approach
problem
base
class
called
statement
contains
functionality
common
statements
common
functionality
statements
can
executed
though
happens
executed
different
depending
type
statement
can
represent
statement
class
method
called
execute
statement
object
might
also
contain
list
containing
whatever
arguments
appeared
keyword
kind
statement
let
print
etc
subclass
statement
can
designed
letstatement
printstatement
subclass
will
inherit
field
listing
arguments
information
needed
execute
statement
case
let
statement
example
necessary
information
name
variable
value
assign
also
needed
statement
subclasses
actual
implementation
execute
method
need
code
can
parse
input
file
create
appropriate
sequence
statement
objects
reading
input
file
returning
list
statement
objects
actually
statement
subclass
objects
containing
statements
program
note
line
numbers
facile
start
1
0
suggest
storing
none
first
element
list
storing
actual
statement
objects
indices
beginning
1
alternative
storing
statements
beginning
index
0
will
require
error
prone
practice
adding
subtracting
one
converting
line
numbers
list
indices
can
easily
lead
chaos
may
assume
input
file
contains
syntactically
legal
facile
program
acceptable
program
either
print
error
message
ignore
lines
understood
even
crash
event
given
input
file
legal
facile
good
thing
python
interpreters
behave
way
will
test
interpreter
syntactically
legal
facile
programs
though
programs
may
run
time
errors
discussed
three
kinds
run
time
errors
division
zero
return
statement
without
corresponding
gosub
goto
gosub
line
outside
boundaries
program
interpreter
will
need
behave
reasonably
cases
printing
meaningful
error
message
terminating
gracefully
designing
interpreter
size
program
increases
one
difficult
obstacles
programmers
face
need
separate
concerns
one
primary
strategies
programmers
use
separate
concerns
break
large
program
set
smaller
pieces
obvious
mechanism
breaking
program
object
oriented
language
use
classes
separating
concerns
something
novice
programmers
need
learn
temptation
always
try
think
complete
picture
since
strategy
works
well
short
programs
write
first
starting
programs
become
larger
confusion
naturally
sets
complete
picture
can
difficult
keep
brain
even
moderately
small
programs
can
built
many
classes
encompass
great
deal
complexity
project
will
encourage
begin
thinking
programs
way
will
give
ability
write
much
larger
programs
main
tasks
program
must
perform
read
contents
input
file
parsing
line
storing
object
memory
represents
facile
statement
appearing
line
create
representation
initial
program
state
begin
executing
program
one
statement
time
execution
statement
will
cause
program
state
changed
may
also
cause
output
appear
console
continue
executing
program
end
statement
reached
suggest
breaking
program
following
way
main
program
will
oversee
execution
interpreter
one
input
file
interpretation
requires
following
sequence
steps
parsing
input
file
creating
initial
program
state
executing
one
statement
time
program
ends
actual
work
delegated
classes
interpreter
acting
manager
parser
parses
input
file
returns
list
objects
representing
statements
callstack
generic
stack
can
implement
easily
list
use
store
return
points
gosub
statements
programstate
represents
state
executing
facile
program
contains
program
counter
values
variables
call
stack
statement
class
represents
facile
statement
subclasses
letstatement
printstatement
etc
implement
actual
statements
good
idea
build
many
underlying
pieces
need
implement
couple
statements
say
let
print
first
afterwards
add
new
kinds
statements
one
two
time
making
changes
required
underlying
pieces
facile
quick
reference
list
facile
statements
supported
interpreter
brief
description
effect
statements
var
may
name
variable
int
may
integer
constant
1
3
15
linenum
may
line
number
1
greater
statement
description
let
var
int
changes
value
variable
var
integer
int
print
var
prints
value
variable
var
console
add
var
int
adds
int
value
variable
var
sub
var
int
subtracts
int
value
variable
var
mult
var
int
multiplies
value
variable
var
integer
int
div
var
int
divides
value
variable
var
integer
int
goto
linenum
jumps
execution
program
line
numbered
linenum
var
op
int
linenum
compares
value
variable
var
integer
int
using
relational
operator
op
comparison
true
jumps
execution
program
line
numbered
linenum
statement
effect
gosub
linenum
temporarily
jumps
line
numbered
linenum
return
statement
will
cause
execution
jump
back
line
following
gosub
return
jumps
execution
program
back
line
following
recently
executed
gosub
statement
end
ends
program
immediately
special
marker
indicates
end
program
text
behaves
end
statement
encountered
additional
challenges
facile
interpreter
may
implement
additional
features
required
two
additional
statements
statement
description
inc
var
adds
1
value
variable
var
example
statement
inc
adds
one
value
dec
var
subtracts
1
value
variable
var
example
statement
dec
subtracts
one
value
including
statements
facile
dramatically
increase
power
allow
convenient
incrementing
decrementing
can
handy
constructing
simple
loops
another
improvement
interpreter
can
increase
expressiveness
language
quite
bit
consider
statement
let
defined
let
statement
sets
value
variable
integer
constant
imagine
wanted
set
value
variable
equal
value
variable
facile
defined
allow
fundamental
operation
reason
many
places
integer
constant
may
normally
appear
facile
program
interpreter
also
allow
name
variable
appear
case
print
also
allow
integer
constant
instead
variable
name
example
statements
may
given
interpreter
let
sets
value
equal
value
print
3
prints
integer
constant
3
console
add
adds
value
value
storing
result
sub
mult
div
similar
add
statement
aboveif
4
jumps
line
4
less
equal
3
4
jumps
line
4
3
less
equal
4
9
4
jumps
line
4
4
less
equal
9
might
also
consider
designing
implementing
new
statements
accomplish
important
goals
others
choosing
allow
facile
programmers
put
comments
code
bring
interesting
question
design
language
line
numbers
counted
lines
contain
code
define
additional
variables
can
store
string
values
instead
integers
basic
language
names
variables
trailing
characters
might
variables
capable
storing
string
add
statement
perhaps
variant
print
statement
output
string
text
string
literal
value
string
variable
console
allow
statement
compare
two
string
variables
compare
string
variable
string
literal
add
statement
read
integer
string
console
store
variable
add
label
statement
takes
variable
name
whose
value
will
next
line
number
program
variable
used
target
goto
statement
saving
count
lines
even
though
occurs
code
label
executable
statement
parser
needs
handle
parsing
finally
one
sample
program
can
run
alex's
facile
interpreter
can
read
see
can
use
test
interpreter
require
implement
one
optional
features
two
count
comments
first
facile
program
david
kay
let
5
let
1
gosub
6
print
end
1
8
return
mult
sub
1
gosub
6
return
done
submit
python
source
code
one
py
file
via
checkmate
pair
submit
just
one
solution
partners'
names
clearly
indicated
usual
grading
criteria
lab
assignments
apply
fill
partner
evaluation
eee
modified
slightly
reflect
python
david
kay
winter
2012
testing
section
added
back
assignment
alex
thornton
winter
2007
clarification
goto
gosub
error
condition
specifying
part
statements
included
made
alex
thornton
along
necessary
changes
new
error
condition
goto
gosub
non
existent
line
added
alex
thornton
along
necessary
changes
provided
interpreter
winter
2006
couple
minor
changes
made
alex
thornton
fall
2005
minor
changes
introduced
alex
thornton
spring
2005
assignment
restructured
require
use
object
oriented
solution
longer
requiring
testing
portion
alex
thornton
fall
2004
almost
work
previously
optional
now
required
along
heavy
modifications
well
improvements
given
interpreter
alex
thornton
winter
2003
originally
written
alex
thornton
fall
2002
