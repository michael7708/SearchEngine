collection classes basics including iterators 

collection
classes
basicsincluding
iterators
introduction
computer
science
ii
ics
22
introduction
lecture
begins
series
lectures
together
act
capstone
first
half
quarter
lectures
explore
collection
classes
sophisticated
powerful
group
related
interfaces
classes
useful
wide
variety
programming
tasks
also
designed
built
using
high
level
java
programming
features
studied
interfaces
inheritance
abstract
classes
concrete
classes
exceptions
analysis
algorithims
iterators
inner
clases
learn
lecture
thus
studying
collection
classes
now
brings
features
back
focus
sharing
spotlight
complementing
others
accept
power
tools
practice
using
never
think
plain
old
arrays
way
maybe
never
think
lecture
begins
taxonomy
collection
classes
introduction
interfaces
abstract
classes
concrete
classes
used
define
second
part
lecture
explores
iterators
interesting
concept
takes
central
role
coupled
collection
classes
can
create
extremely
sophisticated
efficient
behavior
composing
collection
classes
modelling
complex
data
processing
iterators
design
collection
classes
section
will
briefly
examine
standard
java
collection
classes
get
birds
eye
view
designed
implemented
first
will
examine
overall
relationships
among
interfaces
abstract
classes
concrete
classes
features
naturally
arrange
three
vertical
levels
hierarchy
will
examine
one
example
closely
level
hierarchy
following
legend
explains
three
levels
notation
used
overall
three
major
groups
collection
classes
eact
rooted
one
special
interface
orderedcollection
collection
map
group
presented
using
three
vertical
levels
interfaces
abstract
classes
concrete
classes
depict
orderedcollection
group
follows
next
depict
collection
group
follows
finally
depict
map
group
follows
interfaces
implemented
abstract
classes
supply
needed
methods
extended
concrete
classes
inherit
behvaior
abstract
classes
define
abstract
methods
cases
interface
extends
another
interface
list
set
extend
collection
sortedset
extends
set
sortedmap
extends
map
many
cases
one
abstract
class
extends
another
extended
concrete
subclass
recall
concrete
subclasses
automatically
implement
interfaces
superclasses
implement
abstract
classes
can
implement
one
interface
can
extend
one
superclass
fundamentcal
difference
interfaces
classes
next
three
sections
will
examine
javadoc
interface
two
abstract
classes
concrete
class
forming
chain
top
bottom
starting
collections
interface
ending
hashset
concrete
class
will
spend
two
lectures
covering
material
detail
interfaces
methods
specified
collection
interface
summarized
following
javadoc
semantics
methods
somewhat
intuitive
primarily
objects
can
added
removed
collection
checked
membership
methods
like
add
contains
remove
object
parameters
counterparts
addall
containsall
removeall
use
another
collection
parameter
adding
removing
checking
containment
values
parameter
read
javadoc
descriptions
now
will
examine
detail
subsequent
lecture
including
hashcode
will
discuss
iterator
method
iterator
interface
end
lecture
now
will
examine
abstract
class
abstract
subclass
implement
surprising
number
methods
leaving
concrete
subclass
implement
little
mostly
iterator
many
methods
use
remember
15
methods
specified
interface
abstract
classes
now
will
examine
javadoc
abstract
class
abstract
subclass
implement
interface
specified
although
methods
abstract
collection
interface
specified
15
methods
abstractcollection
class
specifies
one
protected
constructor
14
methods
define
equals
hashcode
inherited
object
class
one
implicitly
extends
overridden
abstract
subclass
next
section
adds
specification
tostring
method
14
15
2
1
methods
two
iterator
size
defined
defined
abstract
although
operations
like
add
contains
remove
implemented
throw
unsupportedoperationexception
yet
addall
containsall
removeall
methods
completely
written
using
promised
iterator
eventually
working
add
contains
remove
methods
iterate
parameter
collection
calling
appropriate
method
element
javadoc
abstractcollection
size
constraints
appears
smaller
font
abstractset
class
extends
abstractcollection
specifies
one
protected
constructor
specifies
3
methods
overrides
equals
hashcode
methods
inherited
object
also
overrides
removeall
method
inherited
abstractcollection
can
improve
peformance
knowing
something
true
sets
collections
general
javadoc
abstractset
short
now
will
examine
javadoc
concrete
class
extends
abstractset
concrete
classes
now
will
examine
javadoc
concrete
class
extends
abstractset
class
implemented
advanced
efficient
technique
called
hashing
will
briefly
discuss
hash
tables
end
series
lectures
needless
say
constructors
hash
tables
initial
sizes
load
factors
will
need
use
first
two
constructors
quarter
parameters
relate
fine
tuning
efficiency
underlying
hash
table
topic
will
study
ic
23
hashset
class
extends
abstractset
specifies
public
constructors
8
methods
defines
two
abstract
methods
inherited
iterator
size
overrides
inherited
methods
well
either
implements
methods
like
add
previously
defined
throw
unsupportedoperationexception
can
improve
peformance
others
knowing
something
hash
tables
implement
class
javadoc
hashset
size
constraints
appears
smaller
font
structure
leading
collection
interface
hashset
concrete
class
involved
sorts
interesting
inheritance
abstract
concrete
methods
sense
can
use
class
without
knowing
information
examining
collection
set
interfaces
knowing
implements
methods
efficienty
finally
discuss
actual
implementation
methods
concrete
classes
will
discuss
performance
terms
big
notation
typically
number
values
stored
collection
simple
example
using
collection
class
assume
prompt
user
sequence
strings
different
following
program
uses
set
interface
hashset
class
solve
problem
note
incremented
new
value
successfully
added
set
system
println
enter
different
strings
set
unique
new
hashset
int
1
string
attempt
prompt
forstring
enter
unique
value
unique
contains
attempt
unique
add
attempt
actually
code
can
simplified
carefully
read
real
javadoc
just
summary
listed
lecture
hashset
class
add
method
adds
value
set
generally
sets
contain
duplicates
returns
whether
added
system
println
enter
different
strings
set
unique
new
hashset
int
1
string
attempt
prompt
forstring
enter
unique
value
unique
add
attempt
generally
use
name
interface
set
type
variable
unique
name
actual
class
using
implementation
hashset
must
use
name
constructing
object
technically
elegant
solution
problem
uses
fact
set
knows
size
need
counter
system
println
enter
different
strings
set
unique
new
hashset
unique
size
unique
add
prompt
forstring
enter
unique
value
unique
size
1
notice
must
write
unique
size
1
parentheses
otherwise
java
treat
operator
catenation
instead
addition
iterators
inner
classes
iterator
interface
declared
java
util
package
used
heavily
collection
classes
implement
collection
classes
users
collection
classes
also
useful
contexts
iterators
allow
us
process
one
time
sequence
values
said
iterate
either
stored
collection
generated
fly
necessary
begin
study
using
iterators
collection
classes
will
first
study
independently
bit
later
simplified
collection
classes
iterator
interface
simple
heuristic
simpler
interface
useful
comprises
jut
three
methods
public
interface
iterator
public
boolean
hasnext
public
object
next
throws
nosuchelementexception
public
void
remove
throws
unsupportedoperationexception
illegalstateexception
first
two
methods
interesting
useful
third
method
implemented
anything
throw
unsupportedoperationexception
standard
code
fragment
using
first
two
methods
looks
like
iterator
iterator
object
hasnext
object
next
process
hasnext
next
methods
work
together
query
whether
loop
continue
access
process
next
value
collection
sometimes
next
object
retrieved
will
cast
immediately
stored
non
object
variable
next
can
throw
exception
can
also
write
following
loop
iterate
sequence
values
equivalent
first
iterator
iterator
object
try
object
next
process
catch
nosuchelementexception
nsee
break
programmers
prefer
non
try
catch
code
deeming
simpler
many
ways
use
iterators
much
like
use
objects
stringtokenizer
class
method
hasnext
nexttoken
methods
although
implement
interface
squares
class
illustrates
write
simple
class
implements
interface
contains
constructor
methods
required
implement
iterator
interface
public
class
squares
implements
iterator
private
int
current
private
int
lefttogenerate
public
squares
int
numbertogenerate
0
numbertogenerate
1
public
squares
int
start
int
stop
current
start
lefttogenerate
stop
start
1
public
boolean
hasnext
return
lefttogenerate
0
public
object
next
throws
nosuchelementexception
hasnext
throw
nosuchelementexception
squares
next
lefttogenerate
integer
answer
new
integer
current
current
current
return
answer
public
void
remove
throws
unsupportedoperationexception
illegalstateexception
throw
unsupportedoperationexception
squares
remove
hand
simulate
following
code
ensure
prints
squares
first
10
integers
starting
0
0
1
4
9
81
iterator
new
squares
10
hasnext
system
println
next
note
value
printing
store
object
variable
system
println
automatically
calls
tostring
method
object
returned
print
sequence
25
36
100
instead
write
new
squares
5
10
initialization
part
loop
inner
classes
implement
iterators
collection
classes
now
lets
start
learning
iterators
implemented
collection
classes
instead
starting
real
collection
classes
involving
interfaces
abstract
classes
will
write
iterator
simpler
context
simplequeue
class
studied
lecture
1
arrays
please
find
review
code
now
pay
close
attention
class
invariant
rear
refers
largest
member
index
stores
value
illustrate
iterators
will
add
method
class
prototype
public
iterator
iterator
returns
reference
object
class
implements
iterator
sequence
values
collection
stores
simple
use
result
returned
class
idiom
shown
print
values
queue
without
changing
order
queue
write
just
simplequeue
sq
new
simplequeue
put
values
queue
iterator
sq
iterator
hasnext
system
println
next
generally
iterators
collection
classes
allow
us
process
value
collection
say
print
without
altering
contents
collection
case
queue
elements
remain
queue
original
order
addition
remove
method
allows
us
alter
collection
removing
value
recent
call
next
returned
throws
illegalstateexception
next
called
value
already
removed
method
can
also
just
throw
unsupportedoperationexception
meaningful
just
implemented
context
useful
discuss
concept
inner
class
sometimes
iterators
useful
declare
private
class
inside
another
public
class
java
allows
interesting
behaviors
emerge
methods
outer
class
can
construct
objects
inner
class
fact
non
static
methods
can
java
compiler
will
detect
report
error
method
outer
class
constructs
object
inner
class
inner
class
object
can
refer
instance
variables
name
even
private
ones
outer
class
object
constructed
scope
rules
classes
outer
inner
just
like
scope
rules
blocks
inner
outer
inner
block
can
freely
refer
variables
define
outer
block
enclosing
think
inner
class
object
storing
reference
outer
class
object
restriction
rule
1
always
must
exist
fact
can
explicitly
refer
outer
object
writing
outer
class
name
instance
variable
outer
class
name
either
explicit
case
name
conflict
instance
variable
variable
can
extend
simplequeue
allow
iterators
first
must
define
iterator
method
class
public
iterator
iterator
return
new
simplequeueiterator
simplequeueiterator
inner
class
defined
simplequeue
must
also
import
following
classes
definition
ones
make
sense
java
import
java
util
iterator
import
java
util
nosuchelementexception
unsupportedoperationexception
java
lang
package
need
imported
simplest
version
inner
class
private
class
simplequeueiterator
implements
iterator
private
int
next
0
public
boolean
hasnext
return
next
new
simplequeueiterator
object
intializes
next
0
refers
index
next
value
queue
next
method
returns
hasnext
next
methods
can
access
simplequeue
instance
variables
rear
either
directly
names
simplequeue
simplequeue
rear
long
next
beyond
rear
last
member
index
stores
value
another
value
iterate
next
method
returns
value
location
increments
next
possibly
another
call
method
following
picture
illustrates
simplequeue
object
simplequeueiterator
object
ready
iterate
wanted
implement
remove
method
declare
additional
removedalready
instance
variable
rewrite
methods
follows
private
class
simplequeueiterator
implements
iterator
private
int
next
0
private
boolean
removedalready
true
public
boolean
hasnext
return
next
differences
next
resets
removedalready
false
successfully
advances
return
another
value
remove
checks
value
remove
remove
value
must
shift
values
following
left
1
index
just
like
dequeue
method
fact
generalized
helper
method
private
void
shiftleftfrom
int
shiftstart
useful
simplify
methods
finally
removedalready
initialized
true
call
remove
next
called
initialization
ensures
requirement
can
use
remove
method
remove
every
odd
value
queue
integers
easy
code
simplequeue
sq
new
simplequeue
put
values
queue
iterator
sq
iterator
hasnext
integer
integer
next
intvalue
2
1
remove
can
download
unzip
run
examine
code
along
driver
program
simplequeue
iterator
demonstration
fact
code
includes
material
described
next
section
happens
collection
modified
concurrently
iterated
detecting
concurrent
changes
still
one
loose
end
connecting
collection
classes
iterators
iterating
collection
class
modify
add
remove
value
affect
way
iterator
works
future
hasnext
next
called
turns
uniformly
good
way
answer
question
collection
classes
instead
java
collection
classes
iterators
prohibit
occurring
java
prohibits
occuring
forcing
next
method
throw
concurrentmodificationexception
state
changes
made
object
iterating
modifying
collection
class
concurrently
iterating
accomplished
surprisingly
simple
efficient
way
funny
two
properties
often
go
together
iterator
class
approach
used
iterators
said
fail
fast
iterators
simplequeue
side
simplequeue
object
stores
another
instance
variable
named
modcount
represents
modification
count
queue
initialized
0
construction
mutator
method
class
increments
instance
variable
simplequeueiterator
side
simplequeueiterator
object
stores
another
instance
variable
named
expectedmodcount
represents
modification
count
queue
iterator
constructed
initialized
modcount
simplequeue
object
construction
call
next
class
first
compares
stored
value
modcount
value
stored
queue
iterating
differ
queue
changed
immediately
throws
concurrentmodificationexception
way
expected
modification
count
found
know
collection
modified
iterator
constructed
iterator
continue
iterate
finally
remove
method
iterator
successfully
removes
element
collection
iterator
able
continue
accomplished
incrementing
modcount
collection
first
copying
new
value
expectedmodcount
iterator
therefore
iterator
can
continue
knows
ensure
still
iterates
remaining
values
collection
iterator
forced
throw
concurrentmodificationexception
problem
set
ensure
understand
material
lecture
please
solve
announced
problems
read
lecture
get
stumped
problem
go
back
read
relevant
part
lecture
still
questions
please
get
help
instructor
ta
student
write
class
named
constant
implements
iterator
constructor
called
object
next
method
always
return
reference
object
hasnext
always
returning
true
write
class
named
prime
implements
iterator
retuning
prime
numbers
may
assume
method
public
static
boolean
isprime
int
defined
math
class
assume
write
reasonable
constructors
class
write
class
named
combine
implements
iterator
constructor
called
two
objects
constructed
class
implementing
iterator
object
constructed
class
implementing
combine2
public
interface
combine2
public
object
combine2
object
o1
object
o2
hasnext
method
returns
true
iterators
stores
next
value
next
method
combines
next
values
iterators
stores
implications
defining
iterator
method
simplequeue
static
write
inner
class
implementing
iterators
simplestack
devise
scheme
whereby
mutator
method
simplequeue
class
detects
iterator
iterating
object
change
throws
concurrentmodificationexception
compare
efficiency
two
approaches
reportng
problem
