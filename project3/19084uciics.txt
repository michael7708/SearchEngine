extending functionality 
phase 3 extending functionality 
extending
functionality
phase
3
overview
phase
enhance
basic
functionality
fabflixs
developed
phases
1
2
references
official
jdbc
documentation
pattern
matching
section
9
7
posetgresql
manual
levenshtein
edit
distance
algorithm
writing
loading
dynamic
functions
postgresql
databases
running
windows
dynamic
language
functions
section
34
9
postgresql
manual
implementation
leda
postgresql
ready
implementation
leda
postgresql
ready
java
6
0
api
documentation
statement
preparedstatement
callablestatement
java
sql
java
sql
data
type
correspondences
pl
pgsql
primer
procedural
languages
overview
chapter
35
postgresql
manual
pl
pgsql
sql
procedural
language
section
38
postgresql
manual
course
instructor
ta
turn
war
file
labeled
team
name
containing
web
application
portion
fabflixs
including
leda
source
code
including
readme
file
explaining
compile
load
otherwise
prepare
system
use
run
make
sure
archive's
extention
war
root
directory
war
hierarchy
team's
name
use
conventions
database
submit
database
name
fabflixs
user
database
testuser
password
testpass
sure
include
source
code
files
war
directory
sources
within
web
inf
subdirectory
one
zip
file
labeled
team
name
updated
employee
access
system
readme
file
explaining
compile
load
otherwise
prepare
use
run
make
sure
zip
file's
extension
zip
enhancing
fabflixs
stored
procedures
fuzzy
searching
currently
fabflixs
customer
searching
movie
title
director
one
stars
searching
via
key
value
user
must
spell
key
correctly
otherwise
desired
movie
will
retrieved
example
stars'
names
schwarzenegger
sufficiently
difficult
spell
customers
likely
spell
incorrectly
perhaps
come
think
stock
terminator
movies
fact
make
likely
customers
find
movies
desire
thus
increase
likelihood
making
sales
exact
string
matching
fabflixs
key
searches
replaced
fuzzy
matching
one
returns
movie
whose
value
close
key's
value
designers
decided
using
built
sql
pattern
matching
commands
help
endeavor
sufficient
however
combining
capabilities
levenshtein
edit
distance
algorithm
leda
much
better
job
see
references
description
algorithms
must
use
leda
may
use
built
sql
commands
much
little
see
fit
consistent
goal
quickly
finding
movies
likely
ones
customer
searching
leda
algorithm
implemented
dynamic
function
postgresql
ready
version
available
via
reference
link
add
leda
function
fabflixs
follow
instructions
writing
dynamic
language
functions
reference
substituting
location
name
leda
program
program
instructions
access
leda
via
interface
isclose
isclose
takes
three
parameters
first
key
string
second
string
key
compared
third
maximum
distance
computed
leda
algorithm
two
strings
can
differ
still
considered
similar
isclose
returns
true
strings
within
equal
given
difference
false
apart
given
distance
results
leda
built
sql
pattern
matching
methods
use
look
keys
example
lastname
ilike
'
schwarseneger
'
isclose
lastname
'schwarseneger'
2
leda
distance
may
well
find
get
reasonable
results
change
distance
based
strings
searched
instance
small
leda
distances
work
well
short
strings
larger
ones
tend
produce
better
results
used
long
strings
one
good
way
get
ideas
distances
use
employ
fuzzy
search
capabilities
existing
web
pages
instance
entering
misspelled
strings
google
seeing
string
suggests
one
way
gauge
uses
edit
distances
user
interface
changed
customer
continues
enter
key
value
now
fabflixs
returns
results
similar
just
one
requested
creating
movie's
record
set
adding
movie
database
using
employee
back
end
system
developed
phase
1
tricky
thing
movie
might
several
actors
several
genres
employeee
create
record
movies
table
perhaps
records
stars
genres
tables
depending
order
things
done
might
create
several
records
stars
movies
genres
movies
tables
order
link
records
properly
clearly
advantageous
function
take
arguments
movie
attributes
stars
genres
correctly
create
movie's
entire
set
records
realize
employee
access
system
may
already
extent
actions
hidden
various
add
records
database
functions
adding
function
makes
task
explicitly
available
visible
required
stored
procedure
add
movie
prompts
movie's
information
information
star
movie
information
genre
movie
associated
record
corresponding
star
genre
exists
linked
movie
created
linked
movie
necessary
stars
movies
genres
movies
records
also
created
procedure
print
informative
status
messsages
user
performs
task
movie's
record
set
correctly
made
procedure
informs
user
changes
database
made
add
movie
written
procedural
sql
known
pl
pgsql
postgresql
add
procedure
back
end
system
developed
phase
1
sure
menu
selection
cleaning
fabflixs
database
axiom
production
database
system
fabflixs
errors
records
occur
need
way
find
errors
can
addressed
required
way
check
database
errors
also
produces
report
errors
report
html
file
one
can
open
browser
see
well
organized
easily
read
report
problems
discovered
problem
sufficiently
well
described
employee
using
fabflixs
back
end
system
can
go
database
fix
problems
reasonable
approach
acceptable
long
implemented
menu
option
employee
system
developed
phase
1
user
issues
command
report
generated
status
messages
sent
screen
user
assured
going
well
done
complete
path
report
provided
program
returns
menu
hint
several
approaches
available
implement
report
instance
done
via
dynamic
function
back
end
program
accessing
via
callable
procedure
produces
html
file
directly
perhaps
easier
approach
though
also
perhaps
taking
longer
execute
use
pl
pgsql
procedure
find
errors
populate
table
information
errors
back
end
uses
jdbc
methods
extract
table's
messages
resultset
generates
report
file
resultset's
information
combination
pgsql
routines
also
used
function
check
every
database
integrity
issue
already
automatically
checked
database
also
report
values
data
fields
look
suspicious
findings
report
include
limited
last
name
star
missing
name
contains
value
unilkely
name
first
name
digits
two
records
table
similar
information
two
movies
title
director
year
bad
credit
card
number
url
email
address
misformed
leads
inappropriate
location
url
poster
goes
file
txt
extension
movie
least
one
associated
genre
thorough
can
note
fabflixs
management
decided
legal
star
record
exist
related
movie
genre
record
exist
related
movie
credit
record
exist
related
customer
movie
record
associated
stars
desired
required
full
credit
means
can
earn
credit
can
offset
points
lost
reasons
check
movie
banner
trailer
url
determine
points
actual
active
location
resides
displayable
graphical
content
jpg
file
fact
noted
report
desired
required
full
credit
back
end
program
addition
creating
storing
report
automatically
launches
browser
already
running
opens
new
window
displays
report
page
window
returns
menu
demonstration
prepare
demo
war
file
turned
stored
demonstration
machine
also
deployed
via
tomcat
fabflixs
web
site
ready
use
postgresql
server
running
updated
employee
database
ready
go
zip
file
demonstration
machine
unzip
asked
demo
begins
will
ask
demonstate
three
procedures
discussed
using
customer
web
site
war
file
employee
back
end
program
zip
file
task
convince
us
15
minutes
work
well
completely
done
fabflixs
project
ready
move
phase
4
prepared
tell
us
algorithm
used
fuzzy
title
matching
convince
us
best
approach
take
written
norman
jacobson
may
2005
sections
adapted
project
3
ics185
winter
2005
exercise
written
chen
li
references
updated
substantially
reflect
postgresql
8
1
4
text
clarified
norman
jacobson
april
2007
removed
section
additional
postgresql
files
needed
installed
now
phase
0
sql
leda
function
name
changed
isclose
avoid
confusion
leda
code
function
minor
updates
clarity
norman
jacobson
september
2007
november
2007
clarified
leda
distance
implementor
can
vary
strings
used
added
suggestion
look
web
ideas
best
distance
algorithm
employ
norman
jacobson
december
2007
updated
reflect
postgresql
8
3
fixed
minor
typos
norman
jacobson
september
2008
revised
include
read
requirement
norman
jacobson
december
2008
minor
polishing
norman
jacobson
march
2009
