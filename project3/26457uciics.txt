building perfect beast 
applcore 
building
perfect
beast
dreams
grand
unified
protocol
rohit
khare
march
5
1999
ieee
internet
computing
seventh
heaven
seventh
heaven
inaugurated
one
year
ago
chart
evolution
internet
application
protocols
perched
upon
heights
network
stack
paged
back
history
trace
lineage
telnet
ftp
smtp
nntp
gopher
http
jon
postel's
fingerprints
guide
us
arc
thirty
years
transfer
protocol
tp
development
brought
us
present
day
pages
history
books
go
blank
leaving
us
gentle
reader
one
option
second
season
turn
documenting
past
divining
future
unlike
designs
past
infinite
number
designs
yet
xml
rpc
http
ng
diameter
impp
sip
isen
swap
wap
sdmi
every
acrynomious
concoction
can
get
hands
say
nothing
protocols
actually
adopted
history
actually
gets
written
mythical
eighth
economic
ninth
political
layers
stack
kinds
new
topics
tackle
1999
new
protocols
economic
models
standardization
processes
footnote
record
remote
procedure
calls
extensible
markup
language
http
next
generation
extensible
successor
radius
remote
dial
user
authentication
instant
messaging
presence
protocol
session
invitation
protocol
internet
scale
event
notification
simple
workflow
access
protocol
wireless
access
protocol
secure
digital
music
initiative
johnny
applcore
conveniently
raises
timely
topic
head
agenda
ietf
applications
directorate's
debate
possibility
desirability
application
core
protocol
applcore
latest
outbreak
ancient
meme
bloomed
rapidly
first
mention
january
birds
feather
session
ietf
44
minneapolis
march
proliferation
new
applications
derived
worse
cut
pasted
parts
smtp
imap
interactive
mail
access
protocol
prompted
interest
documenting
common
challenges
extensions
perhaps
developing
entirely
new
set
command
building
blocks
another
variant
infectious
hope
motivates
http
next
generation
project
sponsored
world
wide
web
consortium
participation
xerox
digital
profiled
detail
bill
janssen
last
issue
vantage
point
grail
looks
like
programmable
distributed
object
protocol
atop
efficient
new
multiplexing
transport
look
ahead
interoperating
java
rmi
corba
iiop
rpc
protocols
course
http
1
1
proven
flexible
enough
host
communities
ab
use
ends
distributed
authoring
versioning
webdav
internet
printing
protocol
ipp
freedom
define
new
methods
headers
internet
media
types
will
led
least
three
schools
thought
extending
hypertext
web
information
transfer
problems
proposed
mandatory
extension
mechanism
aims
rationalize
patchwork
existing
rules
three
camps
mail
web
objects
vying
establish
new
order
application
layer
protocol
design
quest
universal
applicability
though
crosses
several
common
fault
lines
design
space
camp
tends
towards
different
tradeoffs
human
machine
readability
command
oriented
stateless
transactions
end
end
proxiable
connections
inspectability
security
whether
exploit
unique
properties
udp
multicast
broadcast
anycast
transmission
may
seem
quixotic
hope
grand
unified
protocol
part
ietf
ethos
never
know
unless
try
however
slim
opportunity
clean
reengineering
still
appears
worthwhile
camp
seek
application
layer
tcp
second
neck
internet
hourglass
mail
protocol
security
maven
chris
newman
put
calling
applcore
first
pace
protocol
facilities
common
ftp
http
imap
ldap
nntp
pop
smtp
esmtp
telnet
successful
protocols
predict
careful
study
ietf
protocol
history
comparison
candidate
solutions
will
suggest
since
mission
statement
column
take
shot
evaluating
camps'
prospects
diversity
vs
melting
pot
transport
protocol
merely
deliver
piles
bits
tps
need
'tag
bag'
information
almost
invariably
using
mime
syntax
ietf's
eventual
success
hammering
standard
packaging
information
objects
powerful
inspiration
today's
protocol
unification
much
stretch
think
today's
tps
merely
different
strategies
delivering
mime
objects
real
time
vs
batch
push
vs
pull
end
end
vs
relayed
reliable
vs
unreliable
past
year
column
fleshed
model
transfer
protocols
tps
summarized
table
1
classify
three
aspects
tps
addresses
identify
participating
nodes
distribution
rules
controlling
transfers
message
formats
wire
proposing
universal
solution
picking
winners
losers
behooves
us
investigate
tensions
tradeoffs
motivated
diverse
solutions
first
place
engineering
humans
machines
protocols
executed
machines
created
programmers
two
actors
rather
different
priorities
standardization
will
messages
binary
faster
computers
parse
english
text
easier
humans
debug
extend
will
application
semantics
precisely
defined
la
rpc
open
extensible
interpretation
like
http
syntax
two
archetypal
alternatives
rfc822
header
fields
window
system
events
email
news
web
headers
information
service
reasonably
easy
understand
cost
marshaling
complex
data
structures
like
dates
numbers
ascii
text
parsing
sorts
variations
case
line
folding
comments
character
sets
gremlins
uphold
maxim
liberal
accept
protocol
messages
tightly
packed
binary
data
aligned
machine
boundaries
can
processed
several
orders
magnitude
efficiently
control
flow
server
clearly
delineated
window
system
semantics
strict
extension
mechanism
furthermore
alternatives
relatively
brittle
internationalizing
header
text
various
human
languages
notoriously
difficult
number
techniques
available
rfc
2277
ietf
policy
character
sets
languages
ietf
also
exasperating
experience
iso's
abstract
syntax
notation
asn
1
self
describing
binary
marshaling
format
snmp
500
public
key
certificates
tools
compiling
data
structures
expensive
still
guarantee
interoperability
amongst
possible
encoding
rules
basic
defined
text
silver
bullet
moment
xml
roll
tagsets
offer
hope
jointly
guaranteeing
machine
readable
validity
human
readable
message
text
webdav
encountered
using
xml
wire
protocol
costs
complex
machinery
xml
text
encoding
entities
whitespace
namespaces
bloated
message
text
still
standard
data
formatting
rules
yet
basic
data
types
like
dates
numbers
arrays
ability
simulate
protocol
exchange
telnet
another
litmus
test
whether
catering
machines
humans
application
expects
supported
individual
users
system
administrators
useful
experiment
debug
system
bare
minimum
tool
available
almost
host
core
os
service
supported
vendor
reasonable
expect
libraries
inspecting
binary
messages
apis
support
semantics
another
way
justifying
telnet
test
estimate
many
independent
implementations
expected
servers
client
libraries
including
definitive
editions
consortium
uncountable
little
http
driven
scripts
hacked
applications
babbling
away
pidgin
dialects
developers
learned
imitating
clients
servers
smaller
community
developers
greater
likelihood
establishing
common
ontology
system
multilateral
web
dilutes
semantics
get
point
opening
database
running
turing
complete
program
instructing
robot
process
eventually
generates
mime
entity
turn
argument
head
illuminates
tension
apis
protocols
suite
clearly
defined
operations
ease
reuse
standardizing
programming
interfaces
microsoft
way
generic
security
services
gssapi
rfc
1508
implementations
expected
diverge
just
focus
bytes
wire
message
sequence
ietf
way
simple
authentication
security
layer
sasl
rfc
2222
latency
stupid
performance
constraints
also
vary
human
driven
machine
driven
transactions
interactive
use
must
minimize
latency
leading
stateless
protocols
batched
server
server
communications
can
optimize
bandwidth
utilization
stateful
command
protocols
messaging
arena
pop
imap
provide
client
server
access
smtp
nntp
relay
stores
pop
optimizes
latency
selectively
listing
headers
bulk
data
separately
imap
offers
concurrent
operations
smtp
nntp
though
operate
modal
lockstep
pipelining
transmission
reception
new
messages
web
last
issue's
column
suggested
earliest
http
0
9
spec
even
less
powerful
ftp
critical
advantage
lower
latency
ftp
requires
separate
commands
round
trips
login
authenticate
navigate
path
request
transmission
http
download
begins
within
one
round
trip
connection
establishment
request
message
encapsulates
commands
single
message
urls
path
filename
headers
authentication
information
media
type
request
can
processed
without
reference
state
connection
'bandwidth
delay
product'
gets
larger
larger
wireless
fiber
satellite
links
stateless
protocols
become
valuable
takes
less
time
pickle
added
state
information
transmit
wait
command
complete
relay
races
end
end
support
another
contentious
design
decision
facing
conquering
heroes
stateful
command
sequences
harder
proxy
firewalls
cache
can
manage
concurrency
explicitly
store
forward
messaging
tps
typically
operate
across
chain
relays
contrast
interactive
query
access
protocols
aps
directly
connecting
clients
servers
consider
calendaring
scheduling
wg's
dilemma
requirements
included
connected
disconnected
operation
queries
multiple
stores
low
bandwidth
operation
draft
ietf
calsch
capreq
02
txt
arguments
modeling
calendar
web
resources
operations
upon
http
transactions
particular
dav
dav
searching
locating
dasl
extensions
cover
requirement
space
unclear
though
http
caching
model
sufficient
nomadic
use
though
access
protocol
like
imap
richer
support
reflecting
local
actions
immediately
chains
actions
conflict
resolution
expense
custom
development
four
years
case
concurrency
also
represented
differently
school
ap
can
tag
requests
id
thus
reshuffle
responses
several
outstanding
operations
session
aps
like
smtp
nntp
can
also
turn
connection
around
make
requests
opposite
direction
stateless
tps
typically
require
synchronous
response
tacitly
pushing
concurrency
control
timing
priority
responses
transport
layer
thus
web
browsers
open
multiple
tcp
connections
message
multiplexing
memux
effort
within
http
ng
unlike
end
end
aps
proxying
permits
intermediaries
offer
sophisticated
services
caching
japanese
translation
http
explicitly
model
side
effects
chain
operations
server
reply
outstanding
get
put
first
statelessness
enable
rich
caching
model
care
long
reply's
older
five
minutes
checkpoint
charlie
firewalls
another
kind
proxy
network
administrators
right
inspect
contents
internet
connections
today's
baseline
filtering
services
tcp
port
number
applications
attempt
extend
http
aps
port
number
precise
enough
enable
disable
specific
services
intellectually
dishonest
use
existing
popular
protocol
mere
transport
gets
firewalls
reason
example
one
totally
flexible
universal
protocol
map
remote
procedure
calls
http
whether
xml
directly
coding
say
distributed
com
shipped
nt5
though
thankfully
default
web
traffic
now
conceal
information
leaking
hackers
coming
even
multiplexing
makes
firewalls
resource
intensive
one
tcp
connection
running
memux
several
subchannels
must
judged
individually
end
end
encryption
ap
another
tough
scenario
tp
proxy
might
able
decrypt
forward
entire
information
object
can
violation
standard
interpose
proxy
middle
stateful
conversation
security
transport
layer
encryption
alone
far
many
application
layer
authentication
authorization
schemes
sasl
succeeded
providing
simple
building
block
sequence
challenge
response
messages
status
codes
allow
developers
mix
match
authentication
algorithms
making
medium
message
layers
also
offer
application
designers
unique
capabilities
often
overlooked
telnet
example
relied
tcp's
urgent
data
interrupt
facilities
http
serenely
floats
atop
8
bit
clean
channel
even
half
duplex
since
applications
take
advantage
broadcast
multicast
anycast
semantics
hard
plan
ahead
core
protocol
bridge
modes
even
though
services
reserve
tcp
udp
ports
datagrams
typically
used
small
enough
messages
rare
protocol
intelligently
copes
lost
packets
link
layers
also
affect
evolution
application
protocols
wireless
access
protocol
suite
founded
belief
every
internet
layer
must
reinvented
cellular
environment
low
bandwidth
high
latency
environments
call
compact
message
encoding
pipelining
among
features
camp
first
mail
initial
call
applcore
came
folks
email
directory
communities
strawman
proposal
like
application
core
protocol
draft
earhart
acp
spec
can
trace
heritage
back
postel's
smtp
ftp
state
machines
theory
reply
codes
defines
framework
transitioning
authenticated
connection
issuing
commands
receiving
interleaved
tagged
responses
la
imap
easy
imagine
say
nntp's
current
group
current
article
pointers
commands
vein
applcore
charter
per
se
call
stateful
solution
just
coincidence
author
believes
proposed
wg
focus
single
core
protocol
based
connection
based
stateful
client
server
structure
successful
ietf
application
protocols
follow
camp
second
web
http
proponents
beg
differ
chris
newman's
imprecation
one
protocol
models
ha
