bandwagons considered harmful 
bandwagons considered harmful the past prologue curriculum change 
paper
also
available
postscript
pdf
acrobat
format
key
words
curricular
trends
first
year
courses
curriculum
design
academic
decision
making
abstract
field
computer
science
changes
rapidly
change
occurs
well
introductory
curriculum
formerly
advanced
topics
filter
first
year
even
secondary
school
topics
disappear
completely
changes
good
indicate
dynamic
discipline
still
emerging
picture
field's
fundamental
principles
must
let
revolutionary
zeal
blind
us
pedagogical
need
conceptual
value
time
tested
material
many
topics
approaches
well
understood
now
unfashionable
retain
place
introductory
curriculum
serve
intellectual
ballast
foundation
motivation
current
trendier
content
argue
balance
radical
change
tempered
appreciation
place
long
standing
approaches
underlying
fundamentals
advocating
curricular
change
must
articulate
educational
goals
fully
consider
explicitly
effect
goals
expect
change
must
throw
baby
bathwater
introductory
computer
science
curriculum
changes
rapid
development
computer
science
now
clich
rapidity
occurs
even
introductory
material
discipline
entire
approach
content
first
course
change
frequently
decide
topics
less
important
unimportant
new
tools
technologies
let
us
cover
topics
less
time
past
leaves
room
advanced
material
filter
introductory
courses
though
might
equally
say
advanced
material
often
pushes
way
earlier
curriculum
sometimes
faster
can
make
room
law
conservation
curriculum
still
applies
new
material
add
introductory
curriculum
old
material
thought
important
enough
cover
must
give
way
former
fundamentals
fade
us
teach
machine
level
programming
introductory
courses
spend
weeks
drilling
number
base
conversions
teach
circuit
theory
novices
yet
topics
staples
introductory
courses
regarded
fundamental
prerequisites
high
level
language
programming
algorithm
analysis
us
teach
first
course
today
also
decide
start
coverage
higher
abstraction
levels
decide
heretofore
fundamental
concepts
become
underlying
details
historical
perspective
maturing
discipline
contribute
changes
refining
view
fundamental
decide
binary
search
trees
fundamentally
illustrative
certain
concepts
algorithms
data
organization
made
way
standard
first
year
curriculum
trees
2
3
trees
typically
remain
realm
advanced
courses
better
accessible
textbooks
allow
us
cover
advanced
material
earlier
many
alternatives
now
exist
knuthendnotes
data
structures
jensen
wirthendnotes
pascal
even
abelson
sussmanendnotes
programming
abstraction
scheme
early
texts
justifiably
regarded
classics
proliferation
books
eases
migration
topics
ever
earlier
curriculum
software
tools
well
promote
migration
student
oriented
compilers
like
watfor
pl
syntax
directed
editors
like
parenthesis
matchers
lisp
program
synthesizers
like
cmu
pascal
genie
handle
details
rough
edges
allowing
instructor
devote
time
new
substance
approaches
add
new
material
introductory
courses
though
carefully
consider
concepts
skills
now
must
de
emphasize
omit
changes
introductory
curricula
made
often
hasty
attempt
jump
current
bandwagon
without
thoughtful
consideration
pedagogical
goals
value
topics
supplanted
risk
short
changing
meaningful
deliberations
may
greatest
research
universities
faculty
often
receive
little
reward
respect
time
attention
paid
issues
introductory
education
introductory
curricula
today
diverse
great
diversity
exists
today's
introductory
courses
many
different
axes
emphasis
mathematical
formality
vs
production
actual
programs
experience
oriented
closed
labs
vs
design
oriented
open
labs
breadth
computer
science
coverage
vs
depth
analysis
programming
experience
analysis
existing
case
studies
vs
synthesis
new
programs
direct
applicability
real
world
vs
conceptual
simplicity
choice
programming
language
good
certainly
know
single
best
way
teach
introductory
computer
science
exploration
new
approaches
much
encouraged
must
take
great
care
enthusiasm
novel
approaches
lead
us
omit
something
vital
going
far
towards
end
scales
implies
omission
topics
experiences
may
turn
equally
fundamental
curricular
debate
often
generates
heat
light
obstacle
reasoned
curriculum
development
polarization
often
arises
curricular
innovators
traditionalists
innovators
often
meet
resistance
change
faced
resistance
one
tends
times
overstate
one's
case
exaggerating
harm
status
quo
demanding
complete
reversal
introduction
structured
programming
grew
letter
dijkstra'sendnotes
raging
controversy
one
camp
regarding
use
goto
mortal
sin
resentful
attempt
rein
creative
freedom
programmers
even
knuth's
moderating
voice
six
years
laterendnotes
mark
end
controversy
computer
scientists
immune
human
foible
regarding
approach
one
best
way
labeling
idiot
anyone
see
things
position
stated
stark
extreme
revolutionary
terms
likely
generate
attention
interest
necessary
prerequisites
approval
funding
one
articulated
balance
one
embodies
evolutionary
approach
sex
sells
especially
discipline
true
order
magnitude
changes
occur
frequent
regularity
example
tendency
towards
exaggeration
dijkstra's
assertion
learn
basic
first
programming
language
irreparably
harmed
programmers
fact
knowledge
dangerous
incomplete
incorrectly
applied
many
instructors
assert
rather
complete
novice
one
programmed
basic
basic
programmers
weaned
onto
powerful
conceptually
stronger
language
writing
first
25
line
program
ahead
complete
novices
understanding
interactivity
imperative
programming
control
flow
variables
need
precise
syntax
students
disservice
trying
protect
dangerous
knowledge
especially
already
exposed
independently
us
pendulum
fashion
swings
wildly
computer
science
education
elsewhere
pattisendnotes
example
describes
procedures
early
approach
gathered
momentum
many
courses
texts
eventually
came
cover
procedures
much
earlier
pedagogical
justification
existed
also
describes
pendulum's
reversal
provide
hope
equilibrium
can
eventually
attained
although
procedures
early
slogan
still
persists
textbooks'
titles
prefaces
advertising
scientists
educators
owe
students
exert
whatever
moderation
can
tendency
jump
feet
onto
newest
attractive
bandwagon
academic
computer
science
matures
must
develop
respect
pedagogical
heritage
history
discard
willy
nilly
attractive
new
concept
comes
along
fewer
fewer
academics'
careers
span
entire
development
field
us
complete
personal
perspective
discipline
emerged
passed
point
can
build
new
curriculum
ground
every
time
new
approach
warrants
consideration
innovations
potential
harm
good
look
examples
four
currently
popular
curricular
trends
see
strong
arguments
favor
proponents
justifiably
emphasize
also
raises
serious
questions
trends'
proponents
seldom
address
argue
innovation
innovations
favor
careful
open
balanced
debate
less
blatant
advocacy
reasoned
discussion
tradeoffs
involved
proponents
change
must
fear
honest
dialogue
educators
must
educate
colleagues
rather
simply
demanding
share
vision
faith
example
de
emphasis
programming
introductory
courses
ten
years
ago
focused
largely
construction
programs
sometimes
just
coding
sometimes
larger
design
abstraction
issues
always
view
towards
writing
complete
programs
accomplish
task
today
pendulum
swinging
towards
analysis
away
design
current
trends
towards
formality
case
study
analysis
structured
scheduled
analysis
oriented
laboratory
work
reduce
amount
ground
design
introductory
student
will
carry
nobody
dispute
need
analytical
skills
formal
reasoning
welcome
retreat
purely
synthesis
oriented
courses
nevertheless
must
deprive
students
program
design
experience
introductory
courses
many
reasons
first
design
important
part
discipline
nobody
dispute
learning
build
software
major
part
education
computer
science
although
synthesis
may
overshadowed
analysis
past
must
careful
merely
reverse
imbalance
second
many
introductory
students
come
us
many
years'
experience
programming
may
find
experience
haphazard
undisciplined
experience
probably
excited
computer
science
brought
us
first
place
ignoring
programming
process
risk
alienating
highly
motivated
students
giving
impression
nothing
add
existing
programming
knowledge
attitude
many
come
us
already
third
experience
trying
design
something
large
without
adequate
complexity
management
tools
indispensable
motivation
learning
tools
computer
science
largely
complexity
management
people
learn
experience
tools
good
identifier
names
source
code
indentation
modularity
data
procedural
abstraction
object
oriented
programming
essential
programs
40
lines
even
240
fail
make
need
techniques
clear
fourth
simply
know
much
coding
experience
necessary
background
understanding
broader
issues
nearly
every
reader
paper
expect
learned
coding
algorithm
design
analysis
wrote
imperative
programs
functional
ones
iterative
programs
recursive
ones
programmed
algol
like
language
basic
assembler
programming
functional
parallel
object
oriented
languages
much
early
experience
provided
us
motivation
fundamental
grounding
necessary
ways
thinking
helped
us
learn
appreciate
later
tools
can
certain
abandoning
history
will
allow
us
teach
effectively
particular
can
students
appreciate
abstraction
know
abstracting
hoare
put
teach
beginning
programmers
top
design
know
way
know
certain
amount
active
experience
necessary
learning
complex
technical
details
none
us
learns
spreadsheets
word
processors
simply
reading
manual
students
write
perfect
first
programs
reading
text
hearing
lectures
know
enough
role
experience
learning
computer
science
concepts
eliminate
programming
portion
courses
entirely
matter
sloppy
open
ended
demanding
students
difficult
evaluate
resource
consumptive
may
find
issue
programming
introductory
courses
one
illustration
risks
run
rush
innovate
may
excise
much
undercutting
fundamentals
educators
internalized
point
regard
trivial
disdain
time
spent
programming
language
syntax
think
details
uninteresting
trivialities
still
require
non
zero
time
novice
assimilate
example
lisp
first
language
another
trend
potential
short
changing
time
tested
fundamentals
trend
author
worked
advance
reactionary
luddite
teaching
lisp
dialects
introductory
courses
purely
functional
approach
offers
much
terms
elegance
provability
parallelizability
mathematical
analysis
programmers
use
straight
line
imperative
sequencing
example
interactive
data
entry
failure
acknowledge
exercise
misses
strong
tie
practical
reality
students
come
us
pristine
unsullied
devoid
real
world
taint
confining
hothouse
pure
functionality
interpreter
interfaces
fails
take
advantage
experience
allow
make
connections
software
see
written
outside
school
example
oop
introductory
paradigm
yet
another
trend
might
displace
important
material
introduction
object
oriented
programming
introductory
courses
organizational
benefits
practical
applicability
object
oriented
approach
undisputed
students
must
still
understand
input
output
variables
assignment
loops
conditionals
procedures
functions
arrays
records
can
write
real
object
oriented
programs
gives
way
make
time
classes
methods
inheritance
objects
preclude
need
cover
programming
fundamentals
example
first
language
even
apart
object
orientation
provides
standardized
language
available
major
platforms
well
developed
mechanism
enforcing
modularity
ability
create
plug
play
exercises
allow
students
program
real
things
beginning
also
used
widely
industry
motivates
students
learn
yet
industrial
strength
nature
poses
pedagogical
problems
one
lessons
1960s
big
beautiful
programming
languages
languages
like
pl
helped
motivate
wirth
swing
pendulum
towards
simplicity
pascal
lesson
also
one
learned
teaching
computer
science
want
pare
bells
whistles
language
teach
can
concentrate
underlying
concepts
rather
distinguishing
two
dozen
ways
accomplishing
task
will
richness
including
much
baroque
syntax
land
us
back
business
defining
manageable
pedagogical
subsets
pl
pl
zero
pl
trends
merit
promoting
must
prepared
consider
address
potential
side
effects
tradeoffs
innovations
reader
encouraged
think
back
curricular
debates
heard
read
whether
four
example
issues
others
proponents
tried
answer
hard
questions
raised
discourse
primarily
hand
waving
advocacy
will
work
great
see
better
suited
political
stump
revival
tent
scholarly
deliberation
pedagogical
goals
key
implementing
well
considered
change
articulate
carefully
one's
curricular
goals
make
balanced
analysis
proposed
change
might
affect
discussions
panel
computer
science
first
year
beyond
language
issues
1996
sigcse
conferenceendnotes
contribute
greatly
deliberation
present
one
framework
describing
goals
framework
serve
one
possible
starting
point
discussion
single
listing
can
definitive
categories
criteria
mention
priority
assigned
will
course
vary
one
institution
another
depending
size
faculty
student
body
available
resources
start
broader
context
goals
university
computer
science
department
good
research
publish
get
extramural
funding
research
programs
increase
department's
national
reputation
provide
high
quality
graduate
undergraduate
programs
fulfill
obligations
rest
campus
courses
non
majors
maintain
improve
working
environment
faculty
next
list
goals
complete
four
year
undergraduate
program
provide
well
trained
graduates
industry
technical
knowledge
skills
ability
adapt
changes
ability
communicate
work
others
provide
well
schooled
candidates
graduate
schools
produce
well
educated
citizen
decision
makers
attract
good
students
campus
major
increase
number
students
served
operate
within
constraints
finances
faculty
time
finally
enumerate
goals
first
year
course
computer
science
majors
students
prepared
course
work
learn
fundamental
computer
science
principles
algorithms
data
structures
analysis
design
tradeoffs
among
abstraction
information
hiding
exposure
breadth
computer
science
discipline
know
computing
concepts
introductory
level
data
representation
bits
bytes
basic
computer
architecture
processors
storage
characteristics
secondary
storage
peripheral
devices
basic
software
engineering
process
developing
software
ethical
legal
social
issues
surrounding
computing
know
use
computing
tools
word
processors
spreadsheets
network
tools
email
news
www
develop
programming
skills
mechanics
entering
running
code
environment
programming
small
single
routines
algorithms
insert
list
find
maximum
linear
search
sorting
data
structures
array
table
queue
tree
abstraction
information
hiding
data
procedural
abstraction
distinguishing
interface
implementation
abstract
data
types
objects
classes
combining
routines
using
predefined
api
programming
paradigms
especially
oop
functional
reading
understanding
debugging
modifying
code
analyzing
code's
correctness
performance
mathematical
tools
adaptability
new
concepts
tools
skills
environments
paradigms
languages
decide
whether
computer
science
field
want
pursue
receive
placement
credit
prior
academic
computer
science
work
advanced
placement
computer
science
conclusions
noted
specific
goals
priorities
vary
institution
institution
effect
proposed
change
goal
likewise
subject
debate
exactly
sort
focused
reasoned
deliberation
conduct
consider
curricular
change
need
explore
new
pedagogical
avenues
abandon
existing
topics
approaches
without
thorough
consideration
intellectual
experiential
underpinning
provide
allow
become
enamored
pet
approaches
fail
acknowledge
existing
alternatives
old
new
impose
version
pedagogical
correctness
students
owe
balanced
presentation
introductory
course
solid
foundation
education
can
build
references
