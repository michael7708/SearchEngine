ics 65 fall 2012 project 5 plug in baby 
project 5 
ics
65
fall
2012
news
course
reference
schedule
project
guide
code
examples
alex
ics
65
fall
2012
project
5
plug
baby
due
date
time
sunday
december
9
11
59pm
introduction
previously
explored
standard
library
built
understanding
many
classes
functions
comprise
well
general
approaches
used
throughout
gradually
lifted
veil
language
learned
techniques
used
build
kinds
functionality
find
standard
library
make
components
well
behaved
template
functions
template
classes
copy
constructors
assignment
operators
destructors
one
standard
library's
strengths
extensibility
ability
gives
users
extend
new
functionality
plugs
cleanly
existing
functionality
example
new
containers
follow
appropriate
set
rules
will
automatically
compatible
standard
generic
algorithms
new
generic
algorithms
will
similarly
compatible
existing
containers
library
course
new
algorithms
will
also
interact
nicely
new
containers
programming
language
value
everyone
community
users
agreeing
certain
commonly
occurring
problems
will
solved
different
project
exploration
takes
build
standard
library
compatible
container
plug
existing
algorithms
discover
will
also
seamlessly
plug
language
features
range
based
loop
commit
following
standard
library
compliant
rules
finally
optionally
consider
performance
optimization
afforded
extending
big
three
big
five
instead
additional
operations
add
wanted
make
sorted
list
flexible
container
us
build
doubt
familiar
already
concept
linked
list
collection
nodes
stores
one
data
element
nodes
linked
together
different
ways
singly
doubly
circularly
depending
one's
requirements
concept
similar
matter
implementation
details
linked
lists
trade
away
ability
easily
jump
one
node
another
far
away
node
eliminating
specific
requirements
elements
can
stored
memory
relation
ecah
allowing
things
able
insert
new
elements
without
moving
existing
ones
run
smoothly
project
build
sorted
list
linked
list
elements
stored
ascending
order
will
well
behaved
ways
discussed
previously
notably
will
manage
memory
appropriately
will
support
basic
idioms
standard
library
providing
iterators
functions
create
will
work
compatible
generic
algorithms
range
based
loop
program
project
build
standard
library
compliant
implementation
sorted
list
specific
requirements
described
additionally
build
test
program
exercises
implementation
terms
individual
member
functions
perform
also
well
plugs
existing
standard
library
algorithms
stated
number
test
cases
required
test
program
done
covered
cases
feel
important
order
verify
sorted
list
working
plugs
standard
library
correctly
specific
requirements
ics65
sorted
list
template
class
primary
goal
write
template
class
called
sorted
list
namespace
called
ics65
takes
single
type
parameter
specifying
kind
elements
stores
example
ics65
sorted
list
int
sorted
list
integers
note
since
attempting
write
template
class
plugs
standard
library
adopting
standard
library's
naming
convention
names
lowercase
words
separated
underscores
fundamentally
class
well
behaved
sense
discussing
quarter
cleans
memory
allocates
can
copied
copies
entirely
separate
one
another
since
will
doubt
need
dynamically
allocate
nodes
big
three
become
necessary
additionally
will
need
exception
safe
can
make
meaning
function
provide
either
basic
guarantee
strong
guarantee
nothrow
guarantee
case
throw
exceptions
requirements
template
class
follow
must
contain
argument
constructor
initializes
list
emptyit
must
destructor
copy
constructor
overloaded
assignment
operator
need
make
well
behavedit
must
include
following
member
functions
add
takes
object
adds
appropriate
position
list
returning
voiderase
takes
iterator
removes
object
position
list
returning
void
note
function
will
either
need
support
every
kind
iterator
need
overloads
support
one
function
throw
std
range
iterator
referring
past
end
past
rend
position
see
clear
takes
parameters
makes
list
empty
returns
voidsize
returns
size
indicating
number
elements
list
size
built
type
indicates
size
container
generally
compatible
unsigned
int
empty
returns
true
list
empty
false
otherwise
decide
member
functions
marked
const
based
whether
change
list
can
made
const
preserving
semantics
must
support
forward
iterators
allow
reading
writing
elements
list
important
iterators
allow
list
elements
modified
otherwise
used
subvert
ordering
property
list
support
forward
iterators
things
need
two
types
ics65
sorted
list
iterator
ics65
sorted
list
const
iterator
represent
forward
iterator
iterates
elements
first
last
allows
read
written
reason
need
typenames
even
though
users
standard
library
compliant
containers
will
expect
types
two
types
ics65
sorted
list
reverse
iterator
ics65
sorted
list
reverse
const
iterator
represent
forward
iterator
iterates
elements
reverse
allows
read
written
iterator
types
must
support
necessary
operator
overloads
compatible
standard
algorithms
operator
compares
two
iterators
see
refer
locationoperator
compares
two
iterators
see
refer
locationoperator
pre
post
increment
form
advances
iterator
next
node
case
regular
iterator
previous
node
case
reverse
iterator
operator
dereference
operator
multiplication
operator
iterator
will
function
similarly
pointer
note
operators
provide
read
access
elements
list
matter
return
references
pointers
const
values
decide
operator
overloads
marked
const
based
whether
change
meaning
iterator
can
marked
const
preserving
semantics
marker
types
required
iterator
easiest
way
get
markers
place
implement
iterator
using
class
derives
std
iterator
std
forward
iterator
tag
type
element
list
immediately
fills
details
necessary
forward
iterators
must
support
standard
functions
used
create
iterators
reverse
iterators
container
begin
returns
iterator
const
iterator
sorted
list
const
referring
list's
first
elementend
returns
iterator
const
iterator
sorted
list
const
referring
list's
past
end
position
just
beyond
last
elementrbegin
returns
reverse
iterator
reverse
const
iterator
sorted
list
const
referring
list's
last
elementrend
returns
reverse
iterator
reverse
const
iterator
sorted
list
const
referring
list's
past
rend
position
just
first
element
kind
comparison
operator
used
objects
operator
can
compare
operator
fairly
typical
restriction
standard
library
made
controlling
ordering
requires
overloading
one
operator
since
iterators
traverse
list
directions
linked
list
implementation
will
need
doubly
linked
note
notion
past
end
past
rend
simply
implemented
special
nodes
beginning
end
list
iterator
can
fundamentally
based
around
pointer
node
testing
write
program
runs
unit
tests
sorted
list
template
class
ensure
works
expect
lacks
built
unit
testing
framework
best
done
simply
writing
collection
functions
calling
explicitly
main
goal
program
tells
something
broken
focus
writing
output
describes
problems
opposed
just
dumping
pages
debug
output
need
manually
verify
stated
explicit
number
test
cases
required
test
program
done
covered
everything
believe
important
couple
things
standard
library
worth
trying
just
get
feel
whether
sorted
list
template
class
plugging
standard
library
followed
requirements
sorted
list
compatible
range
based
loop
11
make
something
like
legal
ics65
sorted
list
std
string
thelist
add
elements
thelist
const
std
string
list
std
cout
std
endl
range
based
loop
requires
begin
end
functions
well
standard
library
compliant
iterators
additionally
generic
algorithms
standard
library
use
forward
iterators
modify
underlying
list
supported
automatically
also
make
something
like
legal
ics65
sorted
list
int
alist
add
elements
alist
std
alist
begin
alist
end
int
std
cout
std
endl
note
many
generic
algorithms
standard
library
require
behavior
random
access
iterators
ability
change
rearrange
elements
list
appropriate
expect
compatible
sorted
list
additional
challenges
improve
performance
flexibility
things
can
improve
performance
flexibility
template
class
none
required
usual
extra
credit
offered
looking
additional
things
improve
template
class
things
consider
instead
supporting
forward
iterators
support
bidirectional
iterators
instead
still
want
iterators
read
able
change
elements
list
iterators
used
subvert
ordering
properties
list
supporting
ability
traverse
directions
can
handy
11
supports
ability
write
move
constructors
move
assignment
operators
called
compiler
special
circumstances
object
created
copy
existing
object
temporary
verge
death
case
act
copying
can
made
efficient
also
improve
performance
std
swap
nowadays
uses
move
semantics
speed
things
occasionally
mentioned
big
three
really
big
five
11
meant
move
constructors
move
assignment
operators
fourth
fifth
thing
allow
user
sorted
list
configure
sorting
done
accepting
constructor
parameter
std
function
bool
const
const
takes
place
operator
comparing
objects
purposes
ordering
make
sure
default
parameter
defaults
specified
see
std
less
standard
library
handy
way
set
default
can
make
sorted
list
like
built
std
list
adding
additional
useful
operations
merge
remove
remove
unique
lexicographical
comparisons
entire
list
using
relational
operators
like
operator
operator
starting
point
project
starting
point
like
build
scratch
though
need
make
sure
meet
requirements
laid
deliverables
submit
source
cpp
header
files
comprise
sorted
list
template
class
test
program
afterward
take
moment
sure
submitted
files
missed
one
able
compile
run
program
can
result
substantial
penalty
since
able
evaluate
program's
correctness
follow
link
discussion
submit
project
via
checkmate
aware
holding
rules
specified
document
including
one
says
responsible
submitting
version
project
want
graded
regrade
project
simply
accidentally
submitted
wrong
version
limitations
goal
plug
existing
standard
library
functionality
required
implement
linked
list
structure
manipulate
nodes
links
hand
opposed
using
std
list
purpose
originally
written
alex
thornton
fall
2012
