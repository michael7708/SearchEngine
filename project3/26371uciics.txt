fifth homework 
fifth homework 
informatics
42
winter
2012
david
kay
uc
irvine
fifth
homework
get
work
checked
signed
classmate
show
ta
lab
monday
february
13
part
local
radio
station
wants
computerize
collection
cds
asked
consider
three
alternative
data
structures
conventional
linked
list
particular
orderan
array
ordered
cd
title
additional
field
stores
number
cds
collectiona
binary
search
tree
ordered
cd
title
ask
notations
give
closest
fit
notation
terms
number
cds
collection
assuming
operation
coded
efficiently
possible
java
suppose
first
task
add
cd
data
new
system
three
data
structures
efficient
task
alone
part
answer
give
alternative's
notation
adding
cd
collection
dj
spends
time
looking
cds
title
data
structure's
notation
locating
cd
title
data
structure
want
avoid
task
station
manager
wants
know
given
moment
exactly
many
cds
collection
give
alternative's
notation
determining
number
cds
say
alternative
efficient
operation
assume
existence
data
fields
specified
best
data
structure
use
implementing
collection
one
brief
sentence
including
notations
appropriate
assume
task
will
done
just
collection's
usage
will
split
evenly
tasks
may
propose
small
modifications
data
structures
described
help
produce
clear
winner
part
ii
class
thursday
afternoon
draw
state
transition
diagram
std
finite
state
automaton
fsa
accepts
language
dollars
cents
amounts
comas
right
places
accepted
strings
include
1
00
1
234
56
1
234
567
89
1
234
567
890
00
13
27
12
345
00
12
345
678
90
0
00
125
50
123
456
78
123
456
789
00
0
25
rejected
strings
include
1
5
000
123
45
00
1
234
00
00
00
25
17
5
1
234
5
67
1
234
00
03
50
234
1234
56
1234
567
00
123
456
00
0
123
45
python
code
implements
kind
finite
state
automaton
secret1
35
secret2
127
secret3
33
statelist
init
gotfirst
gotsecond
success
count
1
state
init
state
success
count
1
draw
state
transition
diagram
represents
fsa
program
implements
input
tokens
whole
integers
individual
characters
2
describe
one
brief
english
sentence
fsa
try
think
simple
real
world
non
computer
related
object
fsa
models
intermezzo
state
transition
diagrams
one
way
describe
fsas
another
way
easier
represent
computer
transition
table
transition
table
row
state
column
input
disjoint
category
inputs
value
position
table
tells
state
go
read
given
input
given
state
transition
table
program
secret1
secret2
secret3
init
gotfirst
init
init
init
gotfirst
init
gotsecond
init
init
gotsecond
init
init
success
init
success
table
says
just
program
state
transition
diagram
say
init
read
secret1
go
state
gotfirst
state
init
read
anything
else
stay
init
state
gotfirst
read
secret2
go
state
gotsecond
read
anything
else
state
gotfirst
go
state
init
finally
state
gotsecond
read
secret3
go
state
success
otherwise
go
init
state
success
machine
stops
make
transitions
state
accept
state
noted
transition
tables
make
fsas
easy
represent
computer
fact
can
write
simple
general
fsa
simulator
according
following
pseudocode
initialize
transitiontable
listofacceptstates
state
¡ö
initial
state
tokens
get
token
state
¡ö
transitiontable
state
token
state
listofacceptstates
accept
else
reject
code
simple
preferred
way
implement
fsas
programs
tricky
part
finding
data
type
will
represent
range
tokens
will
time
acceptable
array
index
programming
language
scheme
example
handles
symbolic
names
easily
python
allowing
string
index
dictionary
think
task
extracting
words
stream
text
python
can
use
split
divide
lines
around
whitespace
separators
sometimes
need
specify
words
idiosyncratically
can
kind
input
parsing
task
much
easily
using
state
machines
writing
code
directly
1
draw
state
transition
diagram
accepts
words
defined
follows
sequence
non
separator
characters
whose
end
marked
separator
separators
symbols
separate
english
words
space
comma
semicolon
colon
note
hyphen
apostrophe
'
percent
sign
separators
treat
mother
law
23
single
words
end
line
separator
unless
last
word
line
ends
hyphen
way
word
like
mother
law
hyphenated
across
two
lines
will
still
count
one
word
will
assume
input
words
always
hyphenated
will
hyphenated
end
line
expect
normally
unhyphenated
words
broken
across
two
lines
watch
multiple
separators
row
example
comma
followed
space
two
separators
word
code
fsa
method
called
getnextword
call
parse
stream
input
coding
required
part
assignment
though
2
write
transition
table
state
machine
drew
part
1
one
scheme's
attractions
syntax
simple
unlike
python
quite
different
statements
grammar
punctuation
rules
every
program
expression
scheme
just
list
words
surrounded
parentheses
provides
rich
variety
expression
word
can
sequence
characters
delimited
separated
words
white
space
parenthesized
list
words
nested
within
outside
list
following
valid
scheme
expressions
one
line
long
except
last
starts
word
define
fee
fie
fo
fum
3
14159
1776
45
quantity
equal
2
2
3
1
define
square
lambda
novice
scheme
programmers
sometimes
worry
keeping
parentheses
balanced
scheme
systems
syntax
based
text
editors
automatically
keep
track
parentheses
time
type
right
parenthesis
automatically
flashes
left
parenthesis
matches
way
can
see
effortlessly
matches
idea
found
way
program
editors
python
languages
also
useful
suppose
decide
write
syntax
based
editor
scheme
first
task
want
write
code
checks
whether
parentheses
balanced
scheme
expression
astutely
start
designing
fsa
make
truly
finite
state
machine
put
upper
limit
depth
parentheses
can
nested
example
shows
fsa
upper
limit
three
deep
nesting
diagram
means
input
symbol
open
close
parenthesis
1
scanning
entire
scheme
expression
state
machine
parentheses
correctly
balanced
2
fsa
works
fine
theory
realistic
nesting
depth
dozen
diagram
tediously
repetitious
decide
simplify
things
encapsulate
state
information
simple
integer
counter
can
single
state
page
action
happens
transition
steps
increment
counter
left
parenthesis
decrement
right
parenthesis
variable
may
appear
violate
definition
finite
state
machine
whose
information
encapsulated
finite
number
states
since
integer
variables
computers
opposed
integers
mathematics
always
finite
upper
bound
technically
safe
machine
used
stack
keep
track
unbalanced
parentheses
integer
counter
modeling
longer
fsa
pda
push
automaton
can
accept
broader
class
languages
modified
augmented
machine
appears
augmented
machine
stop
state
enough
know
scheme
program
balanced
parentheses
value
counter
must
considered
well
counter's
value
machine
accepts
scheme
source
parentheses
correctly
balanced
must
happened
machine
end
error
state
3
things
rarely
quite
simple
first
seem
comments
scheme
programs
start
semicolon
extend
end
line
thus
following
valid
scheme
expression
everything
right
semicolon
line
comment
course
contents
comments
ignored
checking
balanced
parentheses
define
print
routine
lambda
accept
parameter
display
display
newline
hit
carriage
return
draw
new
fsa
like
machine
similar
one
account
comments
correctly
will
add
states
4
one
wrinkle
literal
character
strings
scheme
enclosed
double
quote
marks
programming
language
contents
literal
strings
ignored
analyzing
syntax
program
following
three
expressions
valid
scheme
display
oh
really
list
let
delims
extra
'
'
quotes
draw
new
fsa
like
machine
handle
strings
comments
correctly
5
write
transition
table
state
machine
designed
part
4
note
transitions
conditions
will
also
increment
decrement
count
parentheses
6
test
fsa
part
4
thoroughly
paper
devise
thorough
test
plan
work
test
fsa
optional
available
web
program
called
jflap
written
duke
university
http
www
jflap
org
can
download
java
application
use
build
test
simple
fsas
well
formal
language
activities
state
machine
simulators
available
web
can
find
using
search
strings
like
state
machine
applet
fsa
animation
written
david
kay
winter
2005
fsa
exercises
written
david
kay
winter
1991
based
materials
1990
earlier
revised
joe
hummel
norman
jacobson
theresa
millette
brian
pitterle
alex
thornton
rasheed
baqai
li
wei
gary
chen
david
kay
1992
1999
modified
david
kay
reflect
python
winter
2012
