comp geom vlsi 
computational geometry problems integrated circuit design layout 
computational
geometry
problems
integrated
circuit
design
layout
invited
talk
rajan
5th
msi
worksh
computational
geometry
stony
brook
october
20
1995
notes
eppstein
problems
invited
talk
rajan
discussed
several
geometric
problems
vlsi
layout
analysis
polygon
simplification
specific
version
rajan
gave
one
given
polygonal
input
must
output
simpler
polygon
covers
input
together
boundary
representation
set
theoretic
difference
must
axis
parallel
sides
although
need
goal
choose
given
number
edges
minimizing
area
say
used
seen
similar
problems
applied
pc
board
simulation
described
greedy
heuristic
problem
find
theoretical
results
design
rule
verification
usual
sort
rule
one
wants
check
objects
certain
types
separated
certain
distances
also
talked
length
rules
requiring
every
100
100
micron
square
region
chip
covered
metal
density
30
50
order
fabrication
process
work
well
calculation
capacitance
pairs
polygons
either
overlapping
adjacent
layout
logic
verification
interpretation
layout
features
components
nets
verification
circuit
matches
original
logic
design
process
proximity
correction
fabrication
process
feature
shapes
will
affected
presence
absence
nearby
objects
needs
pre
corrected
design
assumptions
requirements
several
factors
relevant
selection
algorithm
input
coordinates
come
design
process
assumed
integers
integer
units
necessarily
correspond
feature
size
sometimes
one
may
want
round
input
larger
grid
done
way
will
avoid
introducing
unnecessary
degeneracy
results
algorithm
exact
rather
approximate
particular
floating
point
computation
acceptable
way
speeding
exact
integer
arithmetic
acceptable
leads
round
therefore
one
native
code
work
equations
much
higher
degree
quadratic
robustness
important
program
must
work
well
even
degenerate
somewhat
malformed
input
input
polygon
sides
likely
mostly
axis
parallel
diagonals
can
occur
especially
45
degree
angles
appears
little
way
theoretical
results
almost
orthogonal
inputs
automated
layout
typically
produces
axis
parallel
layouts
critical
regions
likely
hand
optimized
sides
angles
worst
case
time
complexity
important
program
also
asymptotically
good
average
case
since
invariably
people
will
run
codes
much
larger
inputs
anticipating
also
important
program
run
well
small
inputs
since
thing
people
code
run
batches
many
small
inputs
algorithms
used
must
simple
enough
can
implement
quickly
can
make
changes
later
necessary
object
oriented
design
important
rajan
found
imperative
style
pseudo
code
bad
way
communicating
programmers
one
particular
feature
input
problematic
adequately
treated
theory
literature
inputs
rajan
deals
often
come
hierarchical
specifications
object
one
level
specification
may
repeated
several
times
higher
level
one
can
flatten
specification
form
usual
sort
polygonal
input
cost
multiplying
size
large
factor
typically
around
5
random
logic
around
50
memory
helpful
develop
algorithms
deal
sort
hierarchical
representation
directly
implementation
initially
solving
sorts
problems
listed
using
sweep
line
technique
originally
written
assumption
axis
parallel
sides
modified
support
45
degree
lines
well
however
finding
inflexible
insufficiently
robust
inspired
sugihara's
experiments
showing
randomized
incremental
voronoi
diagrams
practical
large
inputs
rajan
programmer
working
write
mulmuley's
randomized
incremental
algorithm
constructing
trapezoidal
decompositions
line
segment
arrangements
among
advantages
explicitly
constructing
trapezoidal
decomposition
can
re
use
several
times
can
choose
favorite
order
traverse
choice
data
representation
turned
important
rajan
first
told
programmer
anything
seemed
reasonable
project
bogged
get
working
rajan
tried
guibas
stolfi's
quad
edge
data
structure
worked
much
better
perhaps
involves
overhead
necessary
time
extra
overhead
unimportant
part
code
still
much
faster
things
done
input
now
things
improved
thinking
trying
speed
trapezoidal
decomposition
using
streamlined
data
structure
nowadays
whenever
someone
comes
rajan
geometric
problem
tries
fit
trapezoidal
decomposition
framework
instance
one
can
test
overlapping
objects
blowing
object
given
amount
test
objects
close
simply
keeping
count
cell
number
objects
covering
cell
incrementing
decrementing
count
one
traverses
decomposition
rajan
also
talked
length
implementation
testing
density
ground
rules
example
rule
described
earlier
first
reduce
complexity
problem
partitioning
input
region
10
10
micron
squares
computing
density
within
square
considers
100
100
micron
squares
aligned
10
10
grid
density
large
square
can
found
averaging
100
small
square
values
using
standard
running
total
techniques
one
can
instead
use
1
operations
per
large
square
find
density
small
square
overlays
original
input
grid
using
trapezoidal
decomposition
cited
gis
related
work
question
audience
asked
tells
large
inputs
much
2
gigabytes
whether
algorithms
really
correct
answer
course
testing
smaller
examples
especially
cross
comparison
previous
codes
problem
two
differ
tediously
hand
try
figure
co
workers
conservative
replacing
working
code
even
finds
discrepancies
caused
bugs
old
code
hard
persuade
bugs
problem
sometimes
prefer
new
code
consistent
bugs
final
test
correctness
whether
vlsi
chip
works
costly
100
000
mistake
one
cares
whether
analysis
perfect
computational
results
rajan
showed
tables
numbers
showing
trapezoidal
decomposition
robust
works
inputs
angles
ten
times
slower
specialized
plane
sweep
method
however
also
ten
times
newer
comparison
really
fair
also
pointed
factor
constant
rather
polynomial
also
compared
methods
another
method
one
problem
polynomially
worse
one
expect
polynomial
won
constants
quickly
later
discussed
numbers
conversation
ken
clarkson
mike
goodrich
rajan
left
ken
seemed
think
factor
ten
pretty
typical
plane
sweep
vs
randomized
incremental
techniques
main
advantage
seems
gaining
randomized
incremental
technique
rajan
already
written
need
change
new
problem
solves
wondered
whether
make
sense
replace
code
code
constructs
trapezoidal
decomposition
using
plane
sweep
method
difference
started
original
code
construct
trapezoidalization
instead
apparently
required
fit
whatever
else
plane
sweep
part
geometry
action
collection
applications
computational
geometry
david
eppstein
theory
group
ics
uc
irvine
last
update
19
jan
1996
15
02
10
pst
