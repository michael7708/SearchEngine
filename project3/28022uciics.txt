make unix programming aid 
make unix programming aid 
make
unix
programming
aid
separate
compilation
files
compiling
code
files
files
ending
object
files
ending
creating
final
executable
version
saves
much
cpu
time
since
really
need
recompile
files
edited
since
last
compile
also
saves
precious
hacking
time
since
sit
waiting
entire
program
recompile
every
time
make
small
corrections
unix
command
make
executes
compiliation
large
programs
according
set
rules
give
method
best
just
general
simple
way
handles
cases
reasonably
well
program
given
lab
single
directory
within
directory
code
files
usually
one
include
file
file
called
makefile
makefile
later
will
also
object
files
single
executable
file
perhaps
program
input
output
files
testing
purposes
code
files
contain
executable
code
data
declarations
easy
rule
put
function
file
name
file
corresponding
name
function
contained
therein
nothing
wrong
putting
several
small
related
functions
file
long
can
easily
remember
put
file
contains
compiler
directives
insert
system
include
files
like
stdio
math
data
type
macro
definitions
file
contain
anything
creates
variable
allocates
space
generates
executable
code
contain
compiler
directives
define
data
structures
macros
etc
file
included
head
files
thus
code
files
will
exactly
knowledge
environment
coexist
last
file
makefile
tells
system
files
inter
related
combine
program
makefile
consists
list
files
need
generated
process
creating
executable
program
list
will
include
files
final
executable
file
file
list
files
file
depends
list
commands
usually
just
one
gcc
command
will
generate
file
syntax
given
line
name
file
colon
list
files
depends
separated
spaces
next
line
first
character
must
tab
eight
spaces
real
tab
character
following
tab
command
result
creation
desired
file
blank
lines
entries
allowed
following
example
makefile
example
makefile
cc
gcc
mysort
main
timer
insert
quick
merge
heap
cc
mysort
main
timer
insert
quick
merge
heap
lm
main
main
includes
cc
main
insert
insert
includes
cc
insert
quick
quick
includes
cc
quick
merge
merge
includes
cc
merge
heap
heap
includes
cc
heap
end
example
makefile
notice
files
depend
simple
tree
structure
prerequisites
unix
command
make
will
read
makefile
examine
timestamps
files
involved
will
invoke
commands
necessary
update
branches
tree
modified
since
last
compile
also
notice
object
files
rely
include
file
change
definition
include
file
may
redefine
data
structure
macro
whose
definition
known
code
files
generally
must
recompiled
even
though
include
file
listed
prerequisite
listed
compile
command
line
since
read
include
directive
encountered
first
line
file
need
change
basic
definitions
file
often
since
start
coding
figured
global
data
structure
definitions
declarations
will
need
note
include
files
located
system
include
directory
surrounded
angles
stdio
include
files
located
directories
relative
current
directory
surrounded
double
quotes
includes
observed
will
produce
better
diagnostics
gcc
errors
programs
write
programs
standard
ansi
described
kernighan
difference
another
example
makefile
sets
make
variable
obj
list
files
want
compile
together
make
smart
enough
know
file
ends
comes
file
ends
obj
sorts
insertion
quick
heap
merge
tells
make
use
compiler
instead
default
cc
implicitly
producing
files
files
cc
tells
make
flags
use
compiling
programs
flag
wall
tells
print
warning
messages
flag
tells
generate
extra
information
required
symbolic
debugger
gdb
cflags
wall
tells
make
main
program
build
sorts
sorts
depends
files
listed
make
variable
obj
also
gives
command
second
line
compiler
final
executable
file
sorts
note
second
line
begins
tab
make
fussy
command
lines
begin
tabs
sorts
obj
cflags
sorts
obj
home
dan
165
timer
dan
hirschberg
computer
science
department
university
california
irvine
ca
92697
3435
dan
ics
uci
edu
last
modified
apr
6
1999
