winter 2005 ics h22 
lab 4 
h22
lab
4
running
time
analysis
due
wednesday
february
15
discussion
session
via
dropbox
submit
code
submit
coding
part
lab
regular
way
via
dropbox
due
date
10am
wednesday
instead
usual
23
59pm
written
part
lab
assignement
written
part
answers
can
submit
distribution
center
class
discussion
session
10am
wendesday
prefer
can
type
written
part
submit
electronically
including
readible
document
doc
txt
pdf
code
zip
file
submit
via
dropbox
note
many
optional
points
lab
can
explore
can
earn
bonus
points
overview
lab
2
parts
first
generalize
binary
search
algorithm
wrote
lab2
trinary
search
optionally
can
generalize
ary
search
2
3
second
time
search
algorithms
plot
average
running
times
compare
theoretical
analysis
worst
case
running
time
ary
search
algorithms
point
lab
learn
generalize
binary
search
algorithm
generalize
algorithms
general
compute
actual
average
running
time
implemention
algorithm
running
particular
architecture
clocking
code
averaging
timing
samples
sample
data
points
theoretical
big
analysis
running
time
algorithm
always
worst
case
running
time
analysis
compare
results
theoretical
analysis
worst
case
running
time
algorithm
experimental
results
show
average
running
time
implementation
algorithm
draw
conclusions
big
worst
case
running
time
function
good
predictor
average
time
behaviour
implementation
algorithm
discrepancies
due
can
average
case
worst
case
differ
much
justifiable
ignore
low
order
terms
indeed
ignored
big
analysis
actual
cost
primitve
operations
particular
architecture
implementation
algorithm
ran
part
ia
generalize
binary
search
algorithm
lab2
trinary
ary
search
modify
binary
search
algorithm
lab2
trinary
search
instead
recall
binary
search
examines
value
middle
2
2
searched
interval
ordered
values
initial
point
final
point
recursively
calls
binary
search
either
half
inverval
base
case
binary
search
algorithm
searched
interval
small
split
two
smaller
fragments
2
algorithm
manually
examines
values
interval
simply
value
point
value
point
note
2
either
1
trinary
search
algorithm
searches
interval
examining
values
1
3
2
3
interval
examining
values
point
m1
1
3
m2
2
3
depending
values
compare
searched
value
trinary
search
algorithm
recursively
calls
trinary
search
either
m1
interval
m1
m2
interval
m2
interval
base
case
trinary
search
algorithm
similar
binary
search
searched
interval
small
split
even
smaller
fragments
algorithm
examines
remaning
values
one
one
generalize
binary
search
trinary
one
things
need
think
make
sure
choices
recursive
calls
taken
together
cover
whole
interval
region
elements
will
ever
missed
example
effect
rounding
time
make
sure
search
procedure
invoked
arguments
makes
recursive
call
can
always
arguments
i'
f'
calls
f'
i'
strictly
smaller
making
sure
true
can
guarantee
algorithm
enter
infinite
loop
make
sure
base
case
covers
possibilities
can
occur
interval
small
enough
value
small
enough
base
case
needs
kick
optionally
can
generalize
even
code
general
ary
search
algorithm
given
argument
search
splitting
searched
interval
fragments
searching
recursively
via
ary
search
might
base
case
ary
search
will
depend
maybe
will
necessary
partib
theoretical
analysis
running
time
search
algorithms
theoretical
analysis
worst
case
running
time
binary
search
trinary
search
algorithms
want
running
time
expressed
terms
just
one
variable
size
searched
interval
note
case
savings
calculator
application
lab2
size
searched
interval
equal
100t
target
amount
cents
number
months
running
time
analysis
consider
number
months
constant
example
set
60
corresponds
dealing
5
year
saving
plans
note
also
running
time
algorithmsdoes
depend
interest
rate
analysis
will
give
running
time
functions
tbs
tts
binary
search
trinary
search
correspondingly
notation
functions
compare
running
times
binary
trinary
search
algorithms
asymptotically
one
larger
even
sense
tbs
tts
also
tts
tbs
try
think
constants
fhe
functions
can
hypothesize
function
will
dominate
optionally
can
check
asymptotic
behaviour
running
time
function
general
ary
search
compare
others
optimal
value
optionally
can
consider
variables
running
time
function
book
talked
running
time
function
function
one
single
variable
represents
size
problem
one
often
wants
express
runnning
time
function
just
one
variable
case
savings
calculator
application
it'd
convient
consider
running
time
function
two
variables
function
definition
notation
two
variable
function
similar
single
variable
definition
say
function
exist
constant
0
two
points
m0
n0
m0
n0
running
time
experiments
second
part
lab
see
can
gather
information
also
function
two
variables
compare
results
expression
function
derive
using
pen
paper
part
iia
gather
experimental
data
average
case
time
binary
trinary
search
algorithms
first
need
implement
timer
use
appropriate
timer
class
java
class
library
clock
time
search
algorithm
runs
interested
running
time
implementation
function
100t
fixed
said
60
course
optionally
can
explore
running
time
algorithm
function
since
explicit
variable
algorithm
takes
input
means
order
test
time
algorithm
function
need
run
algorithm
input
100
recall
denotes
target
amount
moreover
want
examine
average
running
time
function
just
running
time
single
instance
algorithm
particular
interest
rate
fixed
input
determines
code
executed
will
interest
rate
can
simply
every
examine
average
running
time
algorithm
averaging
times
observed
executions
code
one
executing
parameter
determine
useful
value
can
start
100
instances
run
algorithm
vary
parameter
example
can
take
say
th
execution
run
0
05
0
01
will
effectively
range
5
6
can
assign
instance
using
random
number
generator
make
sure
falls
reasonable
region
definitely
different
0
1
either
0
1
code
might
exhibit
non
average
behaviour
result
procedure
example
called
binary
trinary
search
test
takes
parameters
outputs
average
running
time
instances
binary
trinary
search
algorithm
executes
input
size
runs
average
looking
interest
rate
60
now
analyze
gather
results
array
results
realistic
values
pick
values
array
can
easily
observe
dependance
average
running
time
values
example
good
reasons
believe
running
time
algorithm
linear
function
will
want
values
spread
linearly
ni
constant
hand
think
running
time
logarithmtic
running
times
will
easier
observe
observe
results
n's
spread
exponentially
ni
2i
ni
10i
event
program
procedure
iterates
values
array
test
cases
runs
test
gathers
outputs
array
outputs
can
populate
array
test
cases
linearly
spaced
n's
see
results
informative
populate
array
test
cases
exponentially
spaced
n's
rerun
process
note
start
big
values
code
will
run
forever
hand
use
small
values
results
will
random
looking
hard
interpret
exactly
need
program
procedures
take
array
test
cases
runs
number
tests
using
procedures
can
easily
change
parameter
test
inputs
see
need
order
get
observable
easy
interpret
results
finally
get
easy
interprest
results
plot
graph
axis
different
values
axis
average
running
time
algorithm
given
solutions
can
contain
two
plots
one
binary
one
trinary
algorithms
two
plots
use
test
cases
even
better
can
draw
single
plot
two
lines
curves
one
color
line
representing
average
running
times
binary
search
algorithm
color
trinary
search
code
part
submit
code
used
test
organized
suggesting
description
can
used
testing
set
value
populate
test
cases
results
displayed
easy
read
way
need
plotted
screen
partiib
compare
experimental
data
theoretically
derived
runnig
time
answer
following
questions
algorithm
seems
better
practice
can
explain
optionally
optimal
ary
search
experimental
results
compare
theoretically
derived
running
time
functions
tbs
tts
note
functions
represent
worst
case
running
time
experimental
results
report
average
running
time
two
different
case
average
case
worst
case
similar
case
average
case
bahaviour
exactly
matching
theoretically
derived
one
discrepancies
can
explain
optional
idea
can
use
experiment
estimate
cost
arithmetic
operations
compared
cost
operations
like
comparisons
look
ups
variable
assignments
everything
else
code
can
see
replacing
floats
doubles
vice
versa
interest
rate
operations
amount
saved
procedure
observing
whether
running
time
changes
much
can
maybe
can
operations
integers
it'd
sligtly
tricky
might
possible
can
test
speeds
