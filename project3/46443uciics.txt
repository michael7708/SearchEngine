overview software problems organizational processes 
software quality assurance organizational processes overview 
software
quality
assurance
organizational
processes
overview
project
memo
uiuc
2003
09
18
march
2003
prof
les
gasser
graduate
school
library
information
science
university
illinois
urbana
champaign
gasser
uiuc
edu
errors
like
straws
upon
surface
flow
search
pearls
must
dive
john
dryden
love
prologue
description
mistakes
errors
problems
common
element
working
life
part
settings
one
time
another
software
production
work
identifying
resolving
errors
bugs
mistakes
plays
large
part
operating
system
idiosyncrasies
seemingly
random
glitches
program
runs
keep
designers
refining
programs
almost
perfect
worst
cases
buggy
software
can
present
major
threats
security
economic
health
even
lives
best
case
annoying
time
consuming
people
work
software
tools
often
need
rationalize
difficulties
others
repeat
work
invent
ways
circumvent
problems
face
result
computing
errors
developers
need
define
negotiate
significant
versus
insignificant
issues
allocate
limited
resources
please
multiple
clients
many
overlapping
balancing
processes
efforts
sap
time
energy
resources
often
even
positive
sentiment
provider
client
relationships
internally
software
development
teams
complex
software
artifacts
proliferate
become
central
even
ubiquitous
peoples'
lives
social
cost
software
errors
bugs
may
increase
since
errors
bugs
reduce
effectiveness
can
build
use
software
systems
interested
understanding
bugs
come
can
best
managed
people
build
use
advanced
software
systems
can
organize
work
prevent
overcome
deal
accommodate
problems
accounts
software
problems
focus
flaws
technical
design
usability
surely
better
design
prototyping
needs
analyses
can
help
clearly
much
issue
specifically
reliability
software
artifact
related
structure
technical
organization
processes
produce
technical
organizational
infrastructures
constraints
built
maintained
research
probing
several
aspects
mix
examining
questions
detailed
character
practice
quality
assurance
software
teams
kind
activities
occur
example
previous
research
identified
activities
defining
redefining
negotiating
meaning
bugs
importance
replicating
causes
effects
bugs
attributing
causes
responsibilities
etc
begun
explore
relationships
activities
social
organization
project
infrastructure
normal
practice
software
construction
software
use
'normal'
role
errors
mistakes
problems
insecurity
unreliability
prevalent
problems
can
problems
eliminated
principle
software
problems
persist
indefinitely
contexts
others
get
resolved
quickly
specific
software
design
methods
techniques
help
hinder
managing
reliability
people
creatively
redefine
work
around
problems
errors
mistakes
reliability
security
etc
strategies
management
control
social
integration
people
teams
decide
critical
problems
problems
resolved
allocate
limited
software
quality
assurance
resources
quality
assurance
processes
decisions
requirements
constraints
evolve
lifecycle
projects
can
capture
measure
visualize
assess
etc
relationships
multiple
problems
multiple
constraints
multiple
actors
software
artifact
supporting
organizational
infrastructure
people
problems
resolved
social
technical
systems
adapt
face
endemic
problems
reliability
problems
arenas
social
integration
cohesion
varying
degrees
social
integration
cohesion
impact
quality
assurance
processes
software
reliability
can
bug
tracking
support
tools
best
support
organizational
team
processes
software
quality
assurance
fail
can
tools
viewed
analyzed
optimized
critical
information
infrastructures
software
development
teams
organizations
issues
conditioned
special
features
distributed
work
organizational
contexts
specific
open
source
software
projects
role
open
source
bug
repository
data
preliminary
work
issues
done
small
moderate
sized
datasets
qualitative
data
form
structured
interviews
software
developers
users
helped
refine
idea
critical
problems
helped
build
preliminary
insights
difficult
analyze
issues
ones
without
comprehensive
time
project
specific
data
large
projects
severl
hundred
thousand
problem
reports
variety
open
source
projects
widely
accessible
open
source
bug
repositories
provides
extremely
large
diverse
dataset
analyzing
issues
like
reviewed
number
reported
bugs
via
individual
searches
downloads
repositories
including
gnome
debian
gnu
linux
openoffice
org
others
repositories
appear
following
characteristics
make
ideally
suited
datasets
investigating
issues
significant
number
bug
reports
enough
opportunity
triangulating
preliminary
hypotheses
searching
patterns
time
type
likely
significant
variance
bug
types
report
types
responses
learn
something
interesting
longitudinal
life
cycle
data
data
captured
relatively
long
period
several
years
allowing
analysis
processes
evolution
time
qualitative
quantitative
data
repositories
can
analyzed
quantitatively
terms
numbers
events
event
types
response
types
dates
timelines
etc
can
also
analyzed
qualitatively
comparatively
examining
texts
bug
reports
responses
analyses
etc
structured
data
data
repositories
already
captured
structured
form
allows
systematic
analysis
automated
quantitative
analysis
using
data
mining
statistical
analysis
network
analysis
techniques
